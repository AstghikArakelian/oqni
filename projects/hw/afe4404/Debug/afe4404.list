
afe4404.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c99c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800caa8  0800caa8  0001caa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb1c  0800cb1c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cb1c  0800cb1c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cb1c  0800cb1c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb1c  0800cb1c  0001cb1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb20  0800cb20  0001cb20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cb24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e0  200001e4  0800cd08  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  0800cd08  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001809d  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c86  00000000  00000000  000382aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  0003d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc53  00000000  00000000  0003e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c681  00000000  00000000  0005b613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f1f  00000000  00000000  00077c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108bb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d54  00000000  00000000  00108c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ca90 	.word	0x0800ca90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	0800ca90 	.word	0x0800ca90

0800014c <Buffer_Init>:

/* Private variables ---------------------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
BUF_HandleTypeDef Buffer_Init(size_t size)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	BUF_HandleTypeDef circular_buffer = malloc(sizeof(circular_buf));
 8000154:	2010      	movs	r0, #16
 8000156:	f00c fbcb 	bl	800c8f0 <malloc>
 800015a:	4603      	mov	r3, r0
 800015c:	60fb      	str	r3, [r7, #12]
	// If size is 1024, capacity will be 1025, and indices' range is [0..1024]
	circular_buffer->buffer = (uint8_t*)malloc(size + 1);
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	3301      	adds	r3, #1
 8000162:	4618      	mov	r0, r3
 8000164:	f00c fbc4 	bl	800c8f0 <malloc>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	601a      	str	r2, [r3, #0]
	circular_buffer->capacity = size + 1;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1c5a      	adds	r2, r3, #1
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	60da      	str	r2, [r3, #12]
	Buffer_Clear(circular_buffer);
 8000178:	68f8      	ldr	r0, [r7, #12]
 800017a:	f000 f830 	bl	80001de <Buffer_Clear>
	return circular_buffer;
 800017e:	68fb      	ldr	r3, [r7, #12]
}
 8000180:	4618      	mov	r0, r3
 8000182:	3710      	adds	r7, #16
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}

08000188 <Buffer_Size>:

size_t Buffer_Size(BUF_HandleTypeDef buf)
{
 8000188:	b480      	push	{r7}
 800018a:	b085      	sub	sp, #20
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	size_t size = (buf->capacity + buf->write_index - buf->read_index) % buf->capacity;
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	68da      	ldr	r2, [r3, #12]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	685b      	ldr	r3, [r3, #4]
 8000198:	441a      	add	r2, r3
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	689b      	ldr	r3, [r3, #8]
 800019e:	1ad3      	subs	r3, r2, r3
 80001a0:	687a      	ldr	r2, [r7, #4]
 80001a2:	68d2      	ldr	r2, [r2, #12]
 80001a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80001a8:	fb01 f202 	mul.w	r2, r1, r2
 80001ac:	1a9b      	subs	r3, r3, r2
 80001ae:	60fb      	str	r3, [r7, #12]
	return size;
 80001b0:	68fb      	ldr	r3, [r7, #12]
}
 80001b2:	4618      	mov	r0, r3
 80001b4:	3714      	adds	r7, #20
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr

080001bc <Buffer_IsEmpty>:

int Buffer_IsEmpty(BUF_HandleTypeDef buf)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == 0;
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f7ff ffdf 	bl	8000188 <Buffer_Size>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	bf0c      	ite	eq
 80001d0:	2301      	moveq	r3, #1
 80001d2:	2300      	movne	r3, #0
 80001d4:	b2db      	uxtb	r3, r3
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}

080001de <Buffer_Clear>:

void Buffer_Clear(BUF_HandleTypeDef buf)
{
 80001de:	b480      	push	{r7}
 80001e0:	b083      	sub	sp, #12
 80001e2:	af00      	add	r7, sp, #0
 80001e4:	6078      	str	r0, [r7, #4]
	buf->write_index = 0;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2200      	movs	r2, #0
 80001ea:	605a      	str	r2, [r3, #4]
	buf->read_index = 0;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2200      	movs	r2, #0
 80001f0:	609a      	str	r2, [r3, #8]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr

080001fc <Buffer_IsFull>:

int Buffer_IsFull(BUF_HandleTypeDef buf)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == buf->capacity - 1;
 8000204:	6878      	ldr	r0, [r7, #4]
 8000206:	f7ff ffbf 	bl	8000188 <Buffer_Size>
 800020a:	4602      	mov	r2, r0
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	3b01      	subs	r3, #1
 8000212:	429a      	cmp	r2, r3
 8000214:	bf0c      	ite	eq
 8000216:	2301      	moveq	r3, #1
 8000218:	2300      	movne	r3, #0
 800021a:	b2db      	uxtb	r3, r3
}
 800021c:	4618      	mov	r0, r3
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}

08000224 <Buffer_Read>:

uint8_t Buffer_Read(BUF_HandleTypeDef buf)
 {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	73fb      	strb	r3, [r7, #15]
	if(!Buffer_IsEmpty(buf))
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f7ff ffc3 	bl	80001bc <Buffer_IsEmpty>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d116      	bne.n	800026a <Buffer_Read+0x46>
	{
		data = buf->buffer[buf->read_index];
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4413      	add	r3, r2
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	73fb      	strb	r3, [r7, #15]
		buf->read_index++;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	1c5a      	adds	r2, r3, #1
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
		buf->read_index %= buf->capacity;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	68d2      	ldr	r2, [r2, #12]
 800025c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000260:	fb01 f202 	mul.w	r2, r1, r2
 8000264:	1a9a      	subs	r2, r3, r2
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	609a      	str	r2, [r3, #8]
	}
	return data;
 800026a:	7bfb      	ldrb	r3, [r7, #15]
}
 800026c:	4618      	mov	r0, r3
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <Buffer_Write>:

void Buffer_Write(BUF_HandleTypeDef buf, uint8_t data)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
	if(Buffer_IsFull(buf))
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f7ff ffbb 	bl	80001fc <Buffer_IsFull>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <Buffer_Write+0x1e>
	{
	    Buffer_Read(buf);
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f7ff ffc9 	bl	8000224 <Buffer_Read>
	}
	buf->buffer[buf->write_index] = data;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	4413      	add	r3, r2
 800029c:	78fa      	ldrb	r2, [r7, #3]
 800029e:	701a      	strb	r2, [r3, #0]
	buf->write_index++;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	1c5a      	adds	r2, r3, #1
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	605a      	str	r2, [r3, #4]
	buf->write_index %= buf->capacity;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	68d2      	ldr	r2, [r2, #12]
 80002b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80002b6:	fb01 f202 	mul.w	r2, r1, r2
 80002ba:	1a9a      	subs	r2, r3, r2
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	605a      	str	r2, [r3, #4]
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <Command_Check>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int Command_Check()
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
	int command_count = COMMAND_FIRST_BYTE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
	int command_status = COMMAND_NOTRECEIVED;
 80002d2:	2301      	movs	r3, #1
 80002d4:	60bb      	str	r3, [r7, #8]
	while (! Buffer_IsEmpty(FIFO_buf) && command_status == COMMAND_NOTRECEIVED)
 80002d6:	e035      	b.n	8000344 <Command_Check+0x7c>
	{
		uint8_t data = Buffer_Read(FIFO_buf);
 80002d8:	4b22      	ldr	r3, [pc, #136]	; (8000364 <Command_Check+0x9c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ffa1 	bl	8000224 <Buffer_Read>
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
		switch (command_count)
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d020      	beq.n	800032e <Command_Check+0x66>
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	dc28      	bgt.n	8000344 <Command_Check+0x7c>
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d003      	beq.n	8000300 <Command_Check+0x38>
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d00c      	beq.n	8000318 <Command_Check+0x50>
 80002fe:	e021      	b.n	8000344 <Command_Check+0x7c>
		{
		case COMMAND_FIRST_BYTE:
			if (data == 0)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d102      	bne.n	800030c <Command_Check+0x44>
			{
				command_count = 1;
 8000306:	2301      	movs	r3, #1
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	e01b      	b.n	8000344 <Command_Check+0x7c>
			}
			else if(data == 255)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	2bff      	cmp	r3, #255	; 0xff
 8000310:	d118      	bne.n	8000344 <Command_Check+0x7c>
			{
				command_count = 2;
 8000312:	2302      	movs	r3, #2
 8000314:	60fb      	str	r3, [r7, #12]
			}
			break;
 8000316:	e015      	b.n	8000344 <Command_Check+0x7c>
		case COMMAND_SECOND_BYTE:
			command_status = (data == 7)? COMMAND_RECEIVED: COMMAND_NOTRECEIVED;
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	2b07      	cmp	r3, #7
 800031c:	bf14      	ite	ne
 800031e:	2301      	movne	r3, #1
 8000320:	2300      	moveq	r3, #0
 8000322:	b2db      	uxtb	r3, r3
 8000324:	60bb      	str	r3, [r7, #8]
			command = COMMAND_START;
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <Command_Check+0xa0>)
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
			break;
 800032c:	e00a      	b.n	8000344 <Command_Check+0x7c>
		case COMMAND_SWITCH:
			command_status = (data == 0)? COMMAND_RECEIVED: COMMAND_NOTRECEIVED;
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b00      	cmp	r3, #0
 8000332:	bf14      	ite	ne
 8000334:	2301      	movne	r3, #1
 8000336:	2300      	moveq	r3, #0
 8000338:	b2db      	uxtb	r3, r3
 800033a:	60bb      	str	r3, [r7, #8]
			command = COMMAND_STOP;
 800033c:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <Command_Check+0xa0>)
 800033e:	2201      	movs	r2, #1
 8000340:	701a      	strb	r2, [r3, #0]
			break;
 8000342:	bf00      	nop
	while (! Buffer_IsEmpty(FIFO_buf) && command_status == COMMAND_NOTRECEIVED)
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <Command_Check+0x9c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff37 	bl	80001bc <Buffer_IsEmpty>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d102      	bne.n	800035a <Command_Check+0x92>
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d0be      	beq.n	80002d8 <Command_Check+0x10>
		}
	}
	return command_status;
 800035a:	68bb      	ldr	r3, [r7, #8]
}
 800035c:	4618      	mov	r0, r3
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	200002f4 	.word	0x200002f4
 8000368:	20000000 	.word	0x20000000

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	b085      	sub	sp, #20
 8000370:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  FIFO_buf = Buffer_Init(128);
 8000372:	2080      	movs	r0, #128	; 0x80
 8000374:	f7ff feea 	bl	800014c <Buffer_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	4a5b      	ldr	r2, [pc, #364]	; (80004e8 <main+0x17c>)
 800037c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037e:	f000 fc41 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000382:	f000 f8c1 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000386:	f000 f9c1 	bl	800070c <MX_GPIO_Init>
  MX_I2C1_Init();
 800038a:	f000 f917 	bl	80005bc <MX_I2C1_Init>
  MX_TIM2_Init();
 800038e:	f000 f971 	bl	8000674 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000392:	f00a f9f5 	bl	800a780 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 8000396:	f000 f93f 	bl	8000618 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  adc1_rdy = 0;
 800039a:	4b54      	ldr	r3, [pc, #336]	; (80004ec <main+0x180>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
  adc2_rdy = 0;
 80003a0:	4b53      	ldr	r3, [pc, #332]	; (80004f0 <main+0x184>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
  int setup = SETUP_NOTDONE;
 80003a6:	2301      	movs	r3, #1
 80003a8:	607b      	str	r3, [r7, #4]
  command = COMMAND_NOTR;
 80003aa:	4b52      	ldr	r3, [pc, #328]	; (80004f4 <main+0x188>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(Command_Check() == COMMAND_RECEIVED)
 80003b0:	f7ff ff8a 	bl	80002c8 <Command_Check>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d102      	bne.n	80003c0 <main+0x54>
		{
			SM_Case = ST_IDLE;
 80003ba:	4b4f      	ldr	r3, [pc, #316]	; (80004f8 <main+0x18c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
		}
		switch(SM_Case)
 80003c0:	4b4d      	ldr	r3, [pc, #308]	; (80004f8 <main+0x18c>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b02      	cmp	r3, #2
 80003c6:	f000 8086 	beq.w	80004d6 <main+0x16a>
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	dcf0      	bgt.n	80003b0 <main+0x44>
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d002      	beq.n	80003d8 <main+0x6c>
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d00f      	beq.n	80003f6 <main+0x8a>
 80003d6:	e086      	b.n	80004e6 <main+0x17a>
		{
			case ST_IDLE:
				if (command == COMMAND_START)
 80003d8:	4b46      	ldr	r3, [pc, #280]	; (80004f4 <main+0x188>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d102      	bne.n	80003e6 <main+0x7a>
				{
					SM_Case = ST_START;
 80003e0:	4b45      	ldr	r3, [pc, #276]	; (80004f8 <main+0x18c>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	701a      	strb	r2, [r3, #0]
				}
				if (command == COMMAND_STOP)
 80003e6:	4b43      	ldr	r3, [pc, #268]	; (80004f4 <main+0x188>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d178      	bne.n	80004e0 <main+0x174>
				{
					SM_Case = ST_STOP;
 80003ee:	4b42      	ldr	r3, [pc, #264]	; (80004f8 <main+0x18c>)
 80003f0:	2202      	movs	r2, #2
 80003f2:	701a      	strb	r2, [r3, #0]
				}
				break;
 80003f4:	e074      	b.n	80004e0 <main+0x174>
			case ST_START:
				if (setup == SETUP_NOTDONE)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d119      	bne.n	8000430 <main+0xc4>
				{
					initStatHRM();
 80003fc:	f00a ff4c 	bl	800b298 <initStatHRM>
					AFE12_RST();
 8000400:	f000 fa26 	bl	8000850 <AFE12_RST>
					cur_i2c = hi2c1;
 8000404:	4a3d      	ldr	r2, [pc, #244]	; (80004fc <main+0x190>)
 8000406:	4b3e      	ldr	r3, [pc, #248]	; (8000500 <main+0x194>)
 8000408:	4610      	mov	r0, r2
 800040a:	4619      	mov	r1, r3
 800040c:	2354      	movs	r3, #84	; 0x54
 800040e:	461a      	mov	r2, r3
 8000410:	f00c fa76 	bl	800c900 <memcpy>
					AFE_Setup();
 8000414:	f000 fa27 	bl	8000866 <AFE_Setup>
					cur_i2c = hi2c2;
 8000418:	4a38      	ldr	r2, [pc, #224]	; (80004fc <main+0x190>)
 800041a:	4b3a      	ldr	r3, [pc, #232]	; (8000504 <main+0x198>)
 800041c:	4610      	mov	r0, r2
 800041e:	4619      	mov	r1, r3
 8000420:	2354      	movs	r3, #84	; 0x54
 8000422:	461a      	mov	r2, r3
 8000424:	f00c fa6c 	bl	800c900 <memcpy>
					AFE_Setup();
 8000428:	f000 fa1d 	bl	8000866 <AFE_Setup>
					setup = SETUP_DONE;
 800042c:	2300      	movs	r3, #0
 800042e:	607b      	str	r3, [r7, #4]
				}
				if(adc1_rdy)
 8000430:	4b2e      	ldr	r3, [pc, #184]	; (80004ec <main+0x180>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d024      	beq.n	8000482 <main+0x116>
				{
					cur_i2c = hi2c1;
 8000438:	4a30      	ldr	r2, [pc, #192]	; (80004fc <main+0x190>)
 800043a:	4b31      	ldr	r3, [pc, #196]	; (8000500 <main+0x194>)
 800043c:	4610      	mov	r0, r2
 800043e:	4619      	mov	r1, r3
 8000440:	2354      	movs	r3, #84	; 0x54
 8000442:	461a      	mov	r2, r3
 8000444:	f00c fa5c 	bl	800c900 <memcpy>
					statHRMAlgo(hr3_get_led1_amb1_val());
 8000448:	f00c f924 	bl	800c694 <hr3_get_led1_amb1_val>
 800044c:	4603      	mov	r3, r0
 800044e:	4618      	mov	r0, r3
 8000450:	f00a ff96 	bl	800b380 <statHRMAlgo>
					afe4404_send_results(1, hr3_get_heartrate(), hr3_get_led1_val(), hr3_get_led2_val(), hr3_get_led3_val());
 8000454:	f00a fef8 	bl	800b248 <hr3_get_heartrate>
 8000458:	4603      	mov	r3, r0
 800045a:	b29c      	uxth	r4, r3
 800045c:	f00c f8a2 	bl	800c5a4 <hr3_get_led1_val>
 8000460:	4605      	mov	r5, r0
 8000462:	f00c f8c7 	bl	800c5f4 <hr3_get_led2_val>
 8000466:	4606      	mov	r6, r0
 8000468:	f00c f8ec 	bl	800c644 <hr3_get_led3_val>
 800046c:	4603      	mov	r3, r0
 800046e:	9300      	str	r3, [sp, #0]
 8000470:	4633      	mov	r3, r6
 8000472:	462a      	mov	r2, r5
 8000474:	4621      	mov	r1, r4
 8000476:	2001      	movs	r0, #1
 8000478:	f00a fe95 	bl	800b1a6 <afe4404_send_results>
					adc1_rdy = 0;
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <main+0x180>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
				}
				if(adc2_rdy)
 8000482:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <main+0x184>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d02c      	beq.n	80004e4 <main+0x178>
				{
					cur_i2c = hi2c2;
 800048a:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <main+0x190>)
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <main+0x198>)
 800048e:	4610      	mov	r0, r2
 8000490:	4619      	mov	r1, r3
 8000492:	2354      	movs	r3, #84	; 0x54
 8000494:	461a      	mov	r2, r3
 8000496:	f00c fa33 	bl	800c900 <memcpy>
					statHRMAlgo(hr3_get_led1_amb1_val());
 800049a:	f00c f8fb 	bl	800c694 <hr3_get_led1_amb1_val>
 800049e:	4603      	mov	r3, r0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f00a ff6d 	bl	800b380 <statHRMAlgo>
					afe4404_send_results(2, hr3_get_heartrate(), hr3_get_led1_val(), hr3_get_led2_val(), hr3_get_led3_val());
 80004a6:	f00a fecf 	bl	800b248 <hr3_get_heartrate>
 80004aa:	4603      	mov	r3, r0
 80004ac:	b29c      	uxth	r4, r3
 80004ae:	f00c f879 	bl	800c5a4 <hr3_get_led1_val>
 80004b2:	4605      	mov	r5, r0
 80004b4:	f00c f89e 	bl	800c5f4 <hr3_get_led2_val>
 80004b8:	4606      	mov	r6, r0
 80004ba:	f00c f8c3 	bl	800c644 <hr3_get_led3_val>
 80004be:	4603      	mov	r3, r0
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	4633      	mov	r3, r6
 80004c4:	462a      	mov	r2, r5
 80004c6:	4621      	mov	r1, r4
 80004c8:	2002      	movs	r0, #2
 80004ca:	f00a fe6c 	bl	800b1a6 <afe4404_send_results>
					adc2_rdy = 0;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <main+0x184>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
				}
				break;
 80004d4:	e006      	b.n	80004e4 <main+0x178>
			case ST_STOP:
				AFE12_RST();
 80004d6:	f000 f9bb 	bl	8000850 <AFE12_RST>
				setup = SETUP_NOTDONE;
 80004da:	2301      	movs	r3, #1
 80004dc:	607b      	str	r3, [r7, #4]
				break;
 80004de:	e002      	b.n	80004e6 <main+0x17a>
				break;
 80004e0:	bf00      	nop
 80004e2:	e765      	b.n	80003b0 <main+0x44>
				break;
 80004e4:	bf00      	nop
		if(Command_Check() == COMMAND_RECEIVED)
 80004e6:	e763      	b.n	80003b0 <main+0x44>
 80004e8:	200002f4 	.word	0x200002f4
 80004ec:	200002f8 	.word	0x200002f8
 80004f0:	200002f9 	.word	0x200002f9
 80004f4:	20000000 	.word	0x20000000
 80004f8:	200002f0 	.word	0x200002f0
 80004fc:	200002fc 	.word	0x200002fc
 8000500:	20000200 	.word	0x20000200
 8000504:	20000254 	.word	0x20000254

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000512:	2228      	movs	r2, #40	; 0x28
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f00c fa00 	bl	800c91c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000538:	2301      	movs	r3, #1
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	2301      	movs	r3, #1
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000552:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000554:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000558:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055e:	4618      	mov	r0, r3
 8000560:	f005 f8ac 	bl	80056bc <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800056a:	f000 f998 	bl	800089e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2102      	movs	r1, #2
 800058a:	4618      	mov	r0, r3
 800058c:	f005 fb18 	bl	8005bc0 <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000596:	f000 f982 	bl	800089e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800059a:	2310      	movs	r3, #16
 800059c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4618      	mov	r0, r3
 80005a6:	f005 fc8f 	bl	8005ec8 <HAL_RCCEx_PeriphCLKConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005b0:	f000 f975 	bl	800089e <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	; 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_I2C1_Init+0x50>)
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <MX_I2C1_Init+0x54>)
 80005c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_I2C1_Init+0x50>)
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <MX_I2C1_Init+0x58>)
 80005ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_I2C1_Init+0x50>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_I2C1_Init+0x50>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_I2C1_Init+0x50>)
 80005da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_I2C1_Init+0x50>)
 80005fa:	f000 fed7 	bl	80013ac <HAL_I2C_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000604:	f000 f94b 	bl	800089e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000200 	.word	0x20000200
 8000610:	40005400 	.word	0x40005400
 8000614:	00061a80 	.word	0x00061a80

08000618 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C2_Init+0x50>)
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_I2C2_Init+0x54>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C2_Init+0x50>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_I2C2_Init+0x58>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C2_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_I2C2_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_I2C2_Init+0x50>)
 8000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_I2C2_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_I2C2_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_I2C2_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_I2C2_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_I2C2_Init+0x50>)
 8000656:	f000 fea9 	bl	80013ac <HAL_I2C_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 f91d 	bl	800089e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000254 	.word	0x20000254
 800066c:	40005800 	.word	0x40005800
 8000670:	00061a80 	.word	0x00061a80

08000674 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_TIM2_Init+0x94>)
 8000692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_TIM2_Init+0x94>)
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_TIM2_Init+0x94>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_TIM2_Init+0x94>)
 80006a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_TIM2_Init+0x94>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_TIM2_Init+0x94>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006b8:	4813      	ldr	r0, [pc, #76]	; (8000708 <MX_TIM2_Init+0x94>)
 80006ba:	f005 fcbb 	bl	8006034 <HAL_TIM_Base_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006c4:	f000 f8eb 	bl	800089e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4619      	mov	r1, r3
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_TIM2_Init+0x94>)
 80006d6:	f005 fcfc 	bl	80060d2 <HAL_TIM_ConfigClockSource>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006e0:	f000 f8dd 	bl	800089e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_TIM2_Init+0x94>)
 80006f2:	f005 feab 	bl	800644c <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006fc:	f000 f8cf 	bl	800089e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200002a8 	.word	0x200002a8

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000720:	4b46      	ldr	r3, [pc, #280]	; (800083c <MX_GPIO_Init+0x130>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a45      	ldr	r2, [pc, #276]	; (800083c <MX_GPIO_Init+0x130>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b43      	ldr	r3, [pc, #268]	; (800083c <MX_GPIO_Init+0x130>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0310 	and.w	r3, r3, #16
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000738:	4b40      	ldr	r3, [pc, #256]	; (800083c <MX_GPIO_Init+0x130>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a3f      	ldr	r2, [pc, #252]	; (800083c <MX_GPIO_Init+0x130>)
 800073e:	f043 0320 	orr.w	r3, r3, #32
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b3d      	ldr	r3, [pc, #244]	; (800083c <MX_GPIO_Init+0x130>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0320 	and.w	r3, r3, #32
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	4b3a      	ldr	r3, [pc, #232]	; (800083c <MX_GPIO_Init+0x130>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a39      	ldr	r2, [pc, #228]	; (800083c <MX_GPIO_Init+0x130>)
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b37      	ldr	r3, [pc, #220]	; (800083c <MX_GPIO_Init+0x130>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0308 	and.w	r3, r3, #8
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4b34      	ldr	r3, [pc, #208]	; (800083c <MX_GPIO_Init+0x130>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a33      	ldr	r2, [pc, #204]	; (800083c <MX_GPIO_Init+0x130>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b31      	ldr	r3, [pc, #196]	; (800083c <MX_GPIO_Init+0x130>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000786:	482e      	ldr	r0, [pc, #184]	; (8000840 <MX_GPIO_Init+0x134>)
 8000788:	f000 fdd6 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000792:	482c      	ldr	r0, [pc, #176]	; (8000844 <MX_GPIO_Init+0x138>)
 8000794:	f000 fdd0 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2110      	movs	r1, #16
 800079c:	482a      	ldr	r0, [pc, #168]	; (8000848 <MX_GPIO_Init+0x13c>)
 800079e:	f000 fdcb 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	4821      	ldr	r0, [pc, #132]	; (8000840 <MX_GPIO_Init+0x134>)
 80007bc:	f000 fc38 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	4619      	mov	r1, r3
 80007d8:	481a      	ldr	r0, [pc, #104]	; (8000844 <MX_GPIO_Init+0x138>)
 80007da:	f000 fc29 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80007de:	2328      	movs	r3, #40	; 0x28
 80007e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_GPIO_Init+0x140>)
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	4619      	mov	r1, r3
 80007f0:	4815      	ldr	r0, [pc, #84]	; (8000848 <MX_GPIO_Init+0x13c>)
 80007f2:	f000 fc1d 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007f6:	2310      	movs	r3, #16
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2302      	movs	r3, #2
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	4619      	mov	r1, r3
 800080c:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_GPIO_Init+0x13c>)
 800080e:	f000 fc0f 	bl	8001030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2009      	movs	r0, #9
 8000818:	f000 fb51 	bl	8000ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800081c:	2009      	movs	r0, #9
 800081e:	f000 fb6a 	bl	8000ef6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2017      	movs	r0, #23
 8000828:	f000 fb49 	bl	8000ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800082c:	2017      	movs	r0, #23
 800082e:	f000 fb62 	bl	8000ef6 <HAL_NVIC_EnableIRQ>

}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	40011000 	.word	0x40011000
 8000844:	40010800 	.word	0x40010800
 8000848:	40010c00 	.word	0x40010c00
 800084c:	10110000 	.word	0x10110000

08000850 <AFE12_RST>:

/* USER CODE BEGIN 4 */
static void AFE12_RST(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	afe4404_RstReset();
 8000854:	f00a fc58 	bl	800b108 <afe4404_RstReset>
	HAL_Delay(0.05);
 8000858:	2000      	movs	r0, #0
 800085a:	f000 fa35 	bl	8000cc8 <HAL_Delay>
	afe4404_RstSet();
 800085e:	f00a fc47 	bl	800b0f0 <afe4404_RstSet>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}

08000866 <AFE_Setup>:

static void AFE_Setup(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
	dynamic_modes_t dynamic_modes;

	dynamic_modes.transmit = trans_dis;
 800086c:	2300      	movs	r3, #0
 800086e:	703b      	strb	r3, [r7, #0]
	dynamic_modes.curr_range = led_double;
 8000870:	2301      	movs	r3, #1
 8000872:	707b      	strb	r3, [r7, #1]
	dynamic_modes.adc_power = adc_on;
 8000874:	2301      	movs	r3, #1
 8000876:	70bb      	strb	r3, [r7, #2]
	dynamic_modes.clk_mode = osc_mode;
 8000878:	2301      	movs	r3, #1
 800087a:	70fb      	strb	r3, [r7, #3]
	dynamic_modes.tia_power = tia_off;
 800087c:	2301      	movs	r3, #1
 800087e:	713b      	strb	r3, [r7, #4]
	dynamic_modes.rest_of_adc = rest_of_adc_off;
 8000880:	2300      	movs	r3, #0
 8000882:	717b      	strb	r3, [r7, #5]
	dynamic_modes.afe_rx_mode = afe_rx_normal;
 8000884:	2300      	movs	r3, #0
 8000886:	71bb      	strb	r3, [r7, #6]
	dynamic_modes.afe_mode = afe_normal;
 8000888:	2300      	movs	r3, #0
 800088a:	71fb      	strb	r3, [r7, #7]

	hr3_init(afe4404_address, &dynamic_modes);
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	2058      	movs	r0, #88	; 0x58
 8000892:	f00b f84e 	bl	800b932 <hr3_init>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a2:	b672      	cpsid	i
}
 80008a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <Error_Handler+0x8>

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_MspInit+0x5c>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a14      	ldr	r2, [pc, #80]	; (8000904 <HAL_MspInit+0x5c>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_MspInit+0x5c>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x5c>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <HAL_MspInit+0x5c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	61d3      	str	r3, [r2, #28]
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_MspInit+0x5c>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_MspInit+0x60>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_MspInit+0x60>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	40021000 	.word	0x40021000
 8000908:	40010000 	.word	0x40010000

0800090c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a3b      	ldr	r2, [pc, #236]	; (8000a14 <HAL_I2C_MspInit+0x108>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d134      	bne.n	8000996 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <HAL_I2C_MspInit+0x10c>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a39      	ldr	r2, [pc, #228]	; (8000a18 <HAL_I2C_MspInit+0x10c>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b37      	ldr	r3, [pc, #220]	; (8000a18 <HAL_I2C_MspInit+0x10c>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000944:	23c0      	movs	r3, #192	; 0xc0
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000948:	2312      	movs	r3, #18
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0318 	add.w	r3, r7, #24
 8000954:	4619      	mov	r1, r3
 8000956:	4831      	ldr	r0, [pc, #196]	; (8000a1c <HAL_I2C_MspInit+0x110>)
 8000958:	f000 fb6a 	bl	8001030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095c:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <HAL_I2C_MspInit+0x10c>)
 800095e:	69db      	ldr	r3, [r3, #28]
 8000960:	4a2d      	ldr	r2, [pc, #180]	; (8000a18 <HAL_I2C_MspInit+0x10c>)
 8000962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000966:	61d3      	str	r3, [r2, #28]
 8000968:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <HAL_I2C_MspInit+0x10c>)
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	201f      	movs	r0, #31
 800097a:	f000 faa0 	bl	8000ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800097e:	201f      	movs	r0, #31
 8000980:	f000 fab9 	bl	8000ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2020      	movs	r0, #32
 800098a:	f000 fa98 	bl	8000ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800098e:	2020      	movs	r0, #32
 8000990:	f000 fab1 	bl	8000ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000994:	e039      	b.n	8000a0a <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <HAL_I2C_MspInit+0x114>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d134      	bne.n	8000a0a <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <HAL_I2C_MspInit+0x10c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <HAL_I2C_MspInit+0x10c>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <HAL_I2C_MspInit+0x10c>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009be:	2312      	movs	r3, #18
 80009c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	4619      	mov	r1, r3
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <HAL_I2C_MspInit+0x110>)
 80009ce:	f000 fb2f 	bl	8001030 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_I2C_MspInit+0x10c>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <HAL_I2C_MspInit+0x10c>)
 80009d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009dc:	61d3      	str	r3, [r2, #28]
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_I2C_MspInit+0x10c>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2021      	movs	r0, #33	; 0x21
 80009f0:	f000 fa65 	bl	8000ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80009f4:	2021      	movs	r0, #33	; 0x21
 80009f6:	f000 fa7e 	bl	8000ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2022      	movs	r0, #34	; 0x22
 8000a00:	f000 fa5d 	bl	8000ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000a04:	2022      	movs	r0, #34	; 0x22
 8000a06:	f000 fa76 	bl	8000ef6 <HAL_NVIC_EnableIRQ>
}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40005400 	.word	0x40005400
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010c00 	.word	0x40010c00
 8000a20:	40005800 	.word	0x40005800

08000a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a34:	d10b      	bne.n	8000a4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_TIM_Base_MspInit+0x34>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_TIM_Base_MspInit+0x34>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	61d3      	str	r3, [r2, #28]
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_TIM_Base_MspInit+0x34>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa2:	f000 f8f5 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  adc1_rdy = 1;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <EXTI3_IRQHandler+0x14>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000ab6:	2008      	movs	r0, #8
 8000ab8:	f000 fc56 	bl	8001368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200002f8 	.word	0x200002f8

08000ac4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000aca:	f003 fa64 	bl	8003f96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20001020 	.word	0x20001020

08000ad8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  adc2_rdy = 1;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <EXTI9_5_IRQHandler+0x14>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000ae2:	2020      	movs	r0, #32
 8000ae4:	f000 fc40 	bl	8001368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200002f9 	.word	0x200002f9

08000af0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <I2C1_EV_IRQHandler+0x10>)
 8000af6:	f001 f903 	bl	8001d00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000200 	.word	0x20000200

08000b04 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <I2C1_ER_IRQHandler+0x10>)
 8000b0a:	f001 fa6a 	bl	8001fe2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000200 	.word	0x20000200

08000b18 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <I2C2_EV_IRQHandler+0x10>)
 8000b1e:	f001 f8ef 	bl	8001d00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000254 	.word	0x20000254

08000b2c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <I2C2_ER_IRQHandler+0x10>)
 8000b32:	f001 fa56 	bl	8001fe2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000254 	.word	0x20000254

08000b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <_sbrk+0x5c>)
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <_sbrk+0x60>)
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <_sbrk+0x64>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <_sbrk+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d207      	bcs.n	8000b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b70:	f00b fe94 	bl	800c89c <__errno>
 8000b74:	4603      	mov	r3, r0
 8000b76:	220c      	movs	r2, #12
 8000b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	e009      	b.n	8000b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <_sbrk+0x64>)
 8000b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20005000 	.word	0x20005000
 8000ba0:	00000400 	.word	0x00000400
 8000ba4:	20000350 	.word	0x20000350
 8000ba8:	200015c8 	.word	0x200015c8

08000bac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	; (8000bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bde:	f7ff ffe5 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f00b fe61 	bl	800c8a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be6:	f7ff fbc1 	bl	800036c <main>
  bx lr
 8000bea:	4770      	bx	lr
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000bf4:	0800cb24 	.word	0x0800cb24
  ldr r2, =_sbss
 8000bf8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000bfc:	200015c4 	.word	0x200015c4

08000c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_2_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x28>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x28>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f947 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe42 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f95f 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 f927 	bl	8000ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000004 	.word	0x20000004
 8000c88:	2000000c 	.word	0x2000000c
 8000c8c:	20000008 	.word	0x20000008

08000c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_IncTick+0x1c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a03      	ldr	r2, [pc, #12]	; (8000cb0 <HAL_IncTick+0x20>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	2000000c 	.word	0x2000000c
 8000cb0:	20000354 	.word	0x20000354

08000cb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b02      	ldr	r3, [pc, #8]	; (8000cc4 <HAL_GetTick+0x10>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	20000354 	.word	0x20000354

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff fff0 	bl	8000cb4 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_Delay+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffe0 	bl	8000cb4 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000000c 	.word	0x2000000c

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4906      	ldr	r1, [pc, #24]	; (8000da8 <__NVIC_EnableIRQ+0x34>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff90 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff2d 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff42 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff90 	bl	8000e00 <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5f 	bl	8000dac <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff35 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa2 	bl	8000e64 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d005      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2204      	movs	r2, #4
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e051      	b.n	8000ff2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 020e 	bic.w	r2, r2, #14
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0201 	bic.w	r2, r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <HAL_DMA_Abort_IT+0xd0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d029      	beq.n	8000fcc <HAL_DMA_Abort_IT+0xa0>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a20      	ldr	r2, [pc, #128]	; (8001000 <HAL_DMA_Abort_IT+0xd4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d022      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x9c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <HAL_DMA_Abort_IT+0xd8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d01a      	beq.n	8000fc2 <HAL_DMA_Abort_IT+0x96>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <HAL_DMA_Abort_IT+0xdc>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d012      	beq.n	8000fbc <HAL_DMA_Abort_IT+0x90>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <HAL_DMA_Abort_IT+0xe0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d00a      	beq.n	8000fb6 <HAL_DMA_Abort_IT+0x8a>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <HAL_DMA_Abort_IT+0xe4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d102      	bne.n	8000fb0 <HAL_DMA_Abort_IT+0x84>
 8000faa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fae:	e00e      	b.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fb4:	e00b      	b.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000fb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fba:	e008      	b.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	e005      	b.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc6:	e002      	b.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000fc8:	2310      	movs	r3, #16
 8000fca:	e000      	b.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	4a11      	ldr	r2, [pc, #68]	; (8001014 <HAL_DMA_Abort_IT+0xe8>)
 8000fd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	4798      	blx	r3
    } 
  }
  return status;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40020008 	.word	0x40020008
 8001000:	4002001c 	.word	0x4002001c
 8001004:	40020030 	.word	0x40020030
 8001008:	40020044 	.word	0x40020044
 800100c:	40020058 	.word	0x40020058
 8001010:	4002006c 	.word	0x4002006c
 8001014:	40020000 	.word	0x40020000

08001018 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b08b      	sub	sp, #44	; 0x2c
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001042:	e169      	b.n	8001318 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001044:	2201      	movs	r2, #1
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 8158 	bne.w	8001312 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4a9a      	ldr	r2, [pc, #616]	; (80012d0 <HAL_GPIO_Init+0x2a0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d05e      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 800106c:	4a98      	ldr	r2, [pc, #608]	; (80012d0 <HAL_GPIO_Init+0x2a0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d875      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 8001072:	4a98      	ldr	r2, [pc, #608]	; (80012d4 <HAL_GPIO_Init+0x2a4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d058      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 8001078:	4a96      	ldr	r2, [pc, #600]	; (80012d4 <HAL_GPIO_Init+0x2a4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d86f      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 800107e:	4a96      	ldr	r2, [pc, #600]	; (80012d8 <HAL_GPIO_Init+0x2a8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d052      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 8001084:	4a94      	ldr	r2, [pc, #592]	; (80012d8 <HAL_GPIO_Init+0x2a8>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d869      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 800108a:	4a94      	ldr	r2, [pc, #592]	; (80012dc <HAL_GPIO_Init+0x2ac>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d04c      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 8001090:	4a92      	ldr	r2, [pc, #584]	; (80012dc <HAL_GPIO_Init+0x2ac>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d863      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 8001096:	4a92      	ldr	r2, [pc, #584]	; (80012e0 <HAL_GPIO_Init+0x2b0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d046      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 800109c:	4a90      	ldr	r2, [pc, #576]	; (80012e0 <HAL_GPIO_Init+0x2b0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d85d      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 80010a2:	2b12      	cmp	r3, #18
 80010a4:	d82a      	bhi.n	80010fc <HAL_GPIO_Init+0xcc>
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d859      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 80010aa:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <HAL_GPIO_Init+0x80>)
 80010ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b0:	0800112b 	.word	0x0800112b
 80010b4:	08001105 	.word	0x08001105
 80010b8:	08001117 	.word	0x08001117
 80010bc:	08001159 	.word	0x08001159
 80010c0:	0800115f 	.word	0x0800115f
 80010c4:	0800115f 	.word	0x0800115f
 80010c8:	0800115f 	.word	0x0800115f
 80010cc:	0800115f 	.word	0x0800115f
 80010d0:	0800115f 	.word	0x0800115f
 80010d4:	0800115f 	.word	0x0800115f
 80010d8:	0800115f 	.word	0x0800115f
 80010dc:	0800115f 	.word	0x0800115f
 80010e0:	0800115f 	.word	0x0800115f
 80010e4:	0800115f 	.word	0x0800115f
 80010e8:	0800115f 	.word	0x0800115f
 80010ec:	0800115f 	.word	0x0800115f
 80010f0:	0800115f 	.word	0x0800115f
 80010f4:	0800110d 	.word	0x0800110d
 80010f8:	08001121 	.word	0x08001121
 80010fc:	4a79      	ldr	r2, [pc, #484]	; (80012e4 <HAL_GPIO_Init+0x2b4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001102:	e02c      	b.n	800115e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	623b      	str	r3, [r7, #32]
          break;
 800110a:	e029      	b.n	8001160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	3304      	adds	r3, #4
 8001112:	623b      	str	r3, [r7, #32]
          break;
 8001114:	e024      	b.n	8001160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	3308      	adds	r3, #8
 800111c:	623b      	str	r3, [r7, #32]
          break;
 800111e:	e01f      	b.n	8001160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	330c      	adds	r3, #12
 8001126:	623b      	str	r3, [r7, #32]
          break;
 8001128:	e01a      	b.n	8001160 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001132:	2304      	movs	r3, #4
 8001134:	623b      	str	r3, [r7, #32]
          break;
 8001136:	e013      	b.n	8001160 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d105      	bne.n	800114c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001140:	2308      	movs	r3, #8
 8001142:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	611a      	str	r2, [r3, #16]
          break;
 800114a:	e009      	b.n	8001160 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800114c:	2308      	movs	r3, #8
 800114e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	615a      	str	r2, [r3, #20]
          break;
 8001156:	e003      	b.n	8001160 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
          break;
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x130>
          break;
 800115e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2bff      	cmp	r3, #255	; 0xff
 8001164:	d801      	bhi.n	800116a <HAL_GPIO_Init+0x13a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	e001      	b.n	800116e <HAL_GPIO_Init+0x13e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3304      	adds	r3, #4
 800116e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2bff      	cmp	r3, #255	; 0xff
 8001174:	d802      	bhi.n	800117c <HAL_GPIO_Init+0x14c>
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	e002      	b.n	8001182 <HAL_GPIO_Init+0x152>
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	3b08      	subs	r3, #8
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	210f      	movs	r1, #15
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	6a39      	ldr	r1, [r7, #32]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	431a      	orrs	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80b1 	beq.w	8001312 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011b0:	4b4d      	ldr	r3, [pc, #308]	; (80012e8 <HAL_GPIO_Init+0x2b8>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <HAL_GPIO_Init+0x2b8>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b4a      	ldr	r3, [pc, #296]	; (80012e8 <HAL_GPIO_Init+0x2b8>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011c8:	4a48      	ldr	r2, [pc, #288]	; (80012ec <HAL_GPIO_Init+0x2bc>)
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a40      	ldr	r2, [pc, #256]	; (80012f0 <HAL_GPIO_Init+0x2c0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d013      	beq.n	800121c <HAL_GPIO_Init+0x1ec>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <HAL_GPIO_Init+0x2c4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d00d      	beq.n	8001218 <HAL_GPIO_Init+0x1e8>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a3e      	ldr	r2, [pc, #248]	; (80012f8 <HAL_GPIO_Init+0x2c8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d007      	beq.n	8001214 <HAL_GPIO_Init+0x1e4>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a3d      	ldr	r2, [pc, #244]	; (80012fc <HAL_GPIO_Init+0x2cc>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d101      	bne.n	8001210 <HAL_GPIO_Init+0x1e0>
 800120c:	2303      	movs	r3, #3
 800120e:	e006      	b.n	800121e <HAL_GPIO_Init+0x1ee>
 8001210:	2304      	movs	r3, #4
 8001212:	e004      	b.n	800121e <HAL_GPIO_Init+0x1ee>
 8001214:	2302      	movs	r3, #2
 8001216:	e002      	b.n	800121e <HAL_GPIO_Init+0x1ee>
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <HAL_GPIO_Init+0x1ee>
 800121c:	2300      	movs	r3, #0
 800121e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001220:	f002 0203 	and.w	r2, r2, #3
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	4093      	lsls	r3, r2
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800122e:	492f      	ldr	r1, [pc, #188]	; (80012ec <HAL_GPIO_Init+0x2bc>)
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	492c      	ldr	r1, [pc, #176]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	43db      	mvns	r3, r3
 800125e:	4928      	ldr	r1, [pc, #160]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 8001260:	4013      	ands	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001270:	4b23      	ldr	r3, [pc, #140]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4922      	ldr	r1, [pc, #136]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	43db      	mvns	r3, r3
 8001286:	491e      	ldr	r1, [pc, #120]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 8001288:	4013      	ands	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	4918      	ldr	r1, [pc, #96]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	608b      	str	r3, [r1, #8]
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	4914      	ldr	r1, [pc, #80]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d021      	beq.n	8001304 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	490e      	ldr	r1, [pc, #56]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60cb      	str	r3, [r1, #12]
 80012cc:	e021      	b.n	8001312 <HAL_GPIO_Init+0x2e2>
 80012ce:	bf00      	nop
 80012d0:	10320000 	.word	0x10320000
 80012d4:	10310000 	.word	0x10310000
 80012d8:	10220000 	.word	0x10220000
 80012dc:	10210000 	.word	0x10210000
 80012e0:	10120000 	.word	0x10120000
 80012e4:	10110000 	.word	0x10110000
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000
 80012f0:	40010800 	.word	0x40010800
 80012f4:	40010c00 	.word	0x40010c00
 80012f8:	40011000 	.word	0x40011000
 80012fc:	40011400 	.word	0x40011400
 8001300:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_GPIO_Init+0x304>)
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	43db      	mvns	r3, r3
 800130c:	4909      	ldr	r1, [pc, #36]	; (8001334 <HAL_GPIO_Init+0x304>)
 800130e:	4013      	ands	r3, r2
 8001310:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	3301      	adds	r3, #1
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	fa22 f303 	lsr.w	r3, r2, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	f47f ae8e 	bne.w	8001044 <HAL_GPIO_Init+0x14>
  }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	372c      	adds	r7, #44	; 0x2c
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001354:	e003      	b.n	800135e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	611a      	str	r2, [r3, #16]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f806 	bl	8001398 <HAL_GPIO_EXTI_Callback>
  }
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e12b      	b.n	8001616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fa9a 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2224      	movs	r2, #36	; 0x24
 80013dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0201 	bic.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800140e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001410:	f004 fd28 	bl	8005e64 <HAL_RCC_GetPCLK1Freq>
 8001414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a81      	ldr	r2, [pc, #516]	; (8001620 <HAL_I2C_Init+0x274>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d807      	bhi.n	8001430 <HAL_I2C_Init+0x84>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4a80      	ldr	r2, [pc, #512]	; (8001624 <HAL_I2C_Init+0x278>)
 8001424:	4293      	cmp	r3, r2
 8001426:	bf94      	ite	ls
 8001428:	2301      	movls	r3, #1
 800142a:	2300      	movhi	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	e006      	b.n	800143e <HAL_I2C_Init+0x92>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4a7d      	ldr	r2, [pc, #500]	; (8001628 <HAL_I2C_Init+0x27c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	bf94      	ite	ls
 8001438:	2301      	movls	r3, #1
 800143a:	2300      	movhi	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0e7      	b.n	8001616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4a78      	ldr	r2, [pc, #480]	; (800162c <HAL_I2C_Init+0x280>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	0c9b      	lsrs	r3, r3, #18
 8001450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	430a      	orrs	r2, r1
 8001464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a6a      	ldr	r2, [pc, #424]	; (8001620 <HAL_I2C_Init+0x274>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d802      	bhi.n	8001480 <HAL_I2C_Init+0xd4>
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3301      	adds	r3, #1
 800147e:	e009      	b.n	8001494 <HAL_I2C_Init+0xe8>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	4a69      	ldr	r2, [pc, #420]	; (8001630 <HAL_I2C_Init+0x284>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	099b      	lsrs	r3, r3, #6
 8001492:	3301      	adds	r3, #1
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	430b      	orrs	r3, r1
 800149a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	495c      	ldr	r1, [pc, #368]	; (8001620 <HAL_I2C_Init+0x274>)
 80014b0:	428b      	cmp	r3, r1
 80014b2:	d819      	bhi.n	80014e8 <HAL_I2C_Init+0x13c>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1e59      	subs	r1, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c2:	1c59      	adds	r1, r3, #1
 80014c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014c8:	400b      	ands	r3, r1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00a      	beq.n	80014e4 <HAL_I2C_Init+0x138>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1e59      	subs	r1, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e2:	e051      	b.n	8001588 <HAL_I2C_Init+0x1dc>
 80014e4:	2304      	movs	r3, #4
 80014e6:	e04f      	b.n	8001588 <HAL_I2C_Init+0x1dc>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d111      	bne.n	8001514 <HAL_I2C_Init+0x168>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1e58      	subs	r0, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	440b      	add	r3, r1
 80014fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001502:	3301      	adds	r3, #1
 8001504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	e012      	b.n	800153a <HAL_I2C_Init+0x18e>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1e58      	subs	r0, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	0099      	lsls	r1, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	fbb0 f3f3 	udiv	r3, r0, r3
 800152a:	3301      	adds	r3, #1
 800152c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf0c      	ite	eq
 8001534:	2301      	moveq	r3, #1
 8001536:	2300      	movne	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_I2C_Init+0x196>
 800153e:	2301      	movs	r3, #1
 8001540:	e022      	b.n	8001588 <HAL_I2C_Init+0x1dc>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10e      	bne.n	8001568 <HAL_I2C_Init+0x1bc>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1e58      	subs	r0, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6859      	ldr	r1, [r3, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	440b      	add	r3, r1
 8001558:	fbb0 f3f3 	udiv	r3, r0, r3
 800155c:	3301      	adds	r3, #1
 800155e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001566:	e00f      	b.n	8001588 <HAL_I2C_Init+0x1dc>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1e58      	subs	r0, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	0099      	lsls	r1, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	fbb0 f3f3 	udiv	r3, r0, r3
 800157e:	3301      	adds	r3, #1
 8001580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	6809      	ldr	r1, [r1, #0]
 800158c:	4313      	orrs	r3, r2
 800158e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69da      	ldr	r2, [r3, #28]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6911      	ldr	r1, [r2, #16]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68d2      	ldr	r2, [r2, #12]
 80015c2:	4311      	orrs	r1, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2220      	movs	r2, #32
 8001602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	000186a0 	.word	0x000186a0
 8001624:	001e847f 	.word	0x001e847f
 8001628:	003d08ff 	.word	0x003d08ff
 800162c:	431bde83 	.word	0x431bde83
 8001630:	10624dd3 	.word	0x10624dd3

08001634 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af02      	add	r7, sp, #8
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	461a      	mov	r2, r3
 8001640:	460b      	mov	r3, r1
 8001642:	817b      	strh	r3, [r7, #10]
 8001644:	4613      	mov	r3, r2
 8001646:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff fb34 	bl	8000cb4 <HAL_GetTick>
 800164c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b20      	cmp	r3, #32
 8001658:	f040 80e0 	bne.w	800181c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2319      	movs	r3, #25
 8001662:	2201      	movs	r2, #1
 8001664:	4970      	ldr	r1, [pc, #448]	; (8001828 <HAL_I2C_Master_Transmit+0x1f4>)
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f002 f93c 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001672:	2302      	movs	r3, #2
 8001674:	e0d3      	b.n	800181e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_I2C_Master_Transmit+0x50>
 8001680:	2302      	movs	r3, #2
 8001682:	e0cc      	b.n	800181e <HAL_I2C_Master_Transmit+0x1ea>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b01      	cmp	r3, #1
 8001698:	d007      	beq.n	80016aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0201 	orr.w	r2, r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2221      	movs	r2, #33	; 0x21
 80016be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2210      	movs	r2, #16
 80016c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	893a      	ldrh	r2, [r7, #8]
 80016da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4a50      	ldr	r2, [pc, #320]	; (800182c <HAL_I2C_Master_Transmit+0x1f8>)
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016ec:	8979      	ldrh	r1, [r7, #10]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	6a3a      	ldr	r2, [r7, #32]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f001 fee4 	bl	80034c0 <I2C_MasterRequestWrite>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e08d      	b.n	800181e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001718:	e066      	b.n	80017e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	6a39      	ldr	r1, [r7, #32]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f002 f9b6 	bl	8003a90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00d      	beq.n	8001746 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	2b04      	cmp	r3, #4
 8001730:	d107      	bne.n	8001742 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001740:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06b      	b.n	800181e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	781a      	ldrb	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001760:	b29b      	uxth	r3, r3
 8001762:	3b01      	subs	r3, #1
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176e:	3b01      	subs	r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b04      	cmp	r3, #4
 8001782:	d11b      	bne.n	80017bc <HAL_I2C_Master_Transmit+0x188>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001788:	2b00      	cmp	r3, #0
 800178a:	d017      	beq.n	80017bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	6a39      	ldr	r1, [r7, #32]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f002 f9a6 	bl	8003b12 <I2C_WaitOnBTFFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00d      	beq.n	80017e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d107      	bne.n	80017e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e01a      	b.n	800181e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d194      	bne.n	800171a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2220      	movs	r2, #32
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e000      	b.n	800181e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800181c:	2302      	movs	r3, #2
  }
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	00100002 	.word	0x00100002
 800182c:	ffff0000 	.word	0xffff0000

08001830 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4603      	mov	r3, r0
 8001840:	817b      	strh	r3, [r7, #10]
 8001842:	460b      	mov	r3, r1
 8001844:	813b      	strh	r3, [r7, #8]
 8001846:	4613      	mov	r3, r2
 8001848:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800184e:	f7ff fa31 	bl	8000cb4 <HAL_GetTick>
 8001852:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b20      	cmp	r3, #32
 800185e:	f040 8244 	bne.w	8001cea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2319      	movs	r3, #25
 8001868:	2201      	movs	r2, #1
 800186a:	4982      	ldr	r1, [pc, #520]	; (8001a74 <HAL_I2C_Mem_Read+0x244>)
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f002 f839 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001878:	2302      	movs	r3, #2
 800187a:	e237      	b.n	8001cec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_I2C_Mem_Read+0x5a>
 8001886:	2302      	movs	r3, #2
 8001888:	e230      	b.n	8001cec <HAL_I2C_Mem_Read+0x4bc>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d007      	beq.n	80018b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2222      	movs	r2, #34	; 0x22
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2240      	movs	r2, #64	; 0x40
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4a62      	ldr	r2, [pc, #392]	; (8001a78 <HAL_I2C_Mem_Read+0x248>)
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018f2:	88f8      	ldrh	r0, [r7, #6]
 80018f4:	893a      	ldrh	r2, [r7, #8]
 80018f6:	8979      	ldrh	r1, [r7, #10]
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4603      	mov	r3, r0
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f001 fe5e 	bl	80035c4 <I2C_RequestMemoryRead>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e1ec      	b.n	8001cec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	2b00      	cmp	r3, #0
 8001918:	d113      	bne.n	8001942 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e1c0      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001946:	2b01      	cmp	r3, #1
 8001948:	d11e      	bne.n	8001988 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001958:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800195a:	b672      	cpsid	i
}
 800195c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001982:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001984:	b662      	cpsie	i
}
 8001986:	e035      	b.n	80019f4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198c:	2b02      	cmp	r3, #2
 800198e:	d11e      	bne.n	80019ce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800199e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019ca:	b662      	cpsie	i
}
 80019cc:	e012      	b.n	80019f4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019dc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80019f4:	e166      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	f200 811f 	bhi.w	8001c3e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d123      	bne.n	8001a50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f002 f8f3 	bl	8003bf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e167      	b.n	8001cec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a4e:	e139      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d152      	bne.n	8001afe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4906      	ldr	r1, [pc, #24]	; (8001a7c <HAL_I2C_Mem_Read+0x24c>)
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f001 ff3e 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e13c      	b.n	8001cec <HAL_I2C_Mem_Read+0x4bc>
 8001a72:	bf00      	nop
 8001a74:	00100002 	.word	0x00100002
 8001a78:	ffff0000 	.word	0xffff0000
 8001a7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691a      	ldr	r2, [r3, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ac6:	b662      	cpsie	i
}
 8001ac8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001afc:	e0e2      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b04:	2200      	movs	r2, #0
 8001b06:	497b      	ldr	r1, [pc, #492]	; (8001cf4 <HAL_I2C_Mem_Read+0x4c4>)
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f001 feeb 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0e9      	b.n	8001cec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001b5e:	4b66      	ldr	r3, [pc, #408]	; (8001cf8 <HAL_I2C_Mem_Read+0x4c8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	08db      	lsrs	r3, r3, #3
 8001b64:	4a65      	ldr	r2, [pc, #404]	; (8001cfc <HAL_I2C_Mem_Read+0x4cc>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	0a1a      	lsrs	r2, r3, #8
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00da      	lsls	r2, r3, #3
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d118      	bne.n	8001bb6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f043 0220 	orr.w	r2, r3, #32
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001ba6:	b662      	cpsie	i
}
 8001ba8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e09a      	b.n	8001cec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d1d9      	bne.n	8001b78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c06:	b662      	cpsie	i
}
 8001c08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c3c:	e042      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f001 ffd8 	bl	8003bf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e04c      	b.n	8001cec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d118      	bne.n	8001cc4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f47f ae94 	bne.w	80019f6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001cea:	2302      	movs	r3, #2
  }
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	00010004 	.word	0x00010004
 8001cf8:	20000004 	.word	0x20000004
 8001cfc:	14f8b589 	.word	0x14f8b589

08001d00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d20:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d28:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d003      	beq.n	8001d38 <HAL_I2C_EV_IRQHandler+0x38>
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b40      	cmp	r3, #64	; 0x40
 8001d34:	f040 80c1 	bne.w	8001eba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10d      	bne.n	8001d6e <HAL_I2C_EV_IRQHandler+0x6e>
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001d58:	d003      	beq.n	8001d62 <HAL_I2C_EV_IRQHandler+0x62>
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d60:	d101      	bne.n	8001d66 <HAL_I2C_EV_IRQHandler+0x66>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_I2C_EV_IRQHandler+0x68>
 8001d66:	2300      	movs	r3, #0
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	f000 8132 	beq.w	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00c      	beq.n	8001d92 <HAL_I2C_EV_IRQHandler+0x92>
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	0a5b      	lsrs	r3, r3, #9
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f001 ffbb 	bl	8003d00 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fd77 	bl	800287e <I2C_Master_SB>
 8001d90:	e092      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_I2C_EV_IRQHandler+0xb2>
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	0a5b      	lsrs	r3, r3, #9
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fdec 	bl	8002988 <I2C_Master_ADD10>
 8001db0:	e082      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d009      	beq.n	8001dd2 <HAL_I2C_EV_IRQHandler+0xd2>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	0a5b      	lsrs	r3, r3, #9
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fe05 	bl	80029da <I2C_Master_ADDR>
 8001dd0:	e072      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d03b      	beq.n	8001e56 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dec:	f000 80f3 	beq.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	09db      	lsrs	r3, r3, #7
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00f      	beq.n	8001e1c <HAL_I2C_EV_IRQHandler+0x11c>
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	0a9b      	lsrs	r3, r3, #10
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <HAL_I2C_EV_IRQHandler+0x11c>
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d103      	bne.n	8001e1c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f9f1 	bl	80021fc <I2C_MasterTransmit_TXE>
 8001e1a:	e04d      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80d6 	beq.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	0a5b      	lsrs	r3, r3, #9
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80cf 	beq.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	2b21      	cmp	r3, #33	; 0x21
 8001e3c:	d103      	bne.n	8001e46 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fa78 	bl	8002334 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e44:	e0c7      	b.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2b40      	cmp	r3, #64	; 0x40
 8001e4a:	f040 80c4 	bne.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fae6 	bl	8002420 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e54:	e0bf      	b.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e64:	f000 80b7 	beq.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00f      	beq.n	8001e94 <HAL_I2C_EV_IRQHandler+0x194>
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	0a9b      	lsrs	r3, r3, #10
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d009      	beq.n	8001e94 <HAL_I2C_EV_IRQHandler+0x194>
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d103      	bne.n	8001e94 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fb5b 	bl	8002548 <I2C_MasterReceive_RXNE>
 8001e92:	e011      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 809a 	beq.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	0a5b      	lsrs	r3, r3, #9
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8093 	beq.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fbfa 	bl	80026aa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eb6:	e08e      	b.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001eb8:	e08d      	b.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d004      	beq.n	8001ecc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e007      	b.n	8001edc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d012      	beq.n	8001f0e <HAL_I2C_EV_IRQHandler+0x20e>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	0a5b      	lsrs	r3, r3, #9
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00c      	beq.n	8001f0e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f04:	69b9      	ldr	r1, [r7, #24]
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 ffbe 	bl	8002e88 <I2C_Slave_ADDR>
 8001f0c:	e066      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HAL_I2C_EV_IRQHandler+0x22e>
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	0a5b      	lsrs	r3, r3, #9
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fff8 	bl	8002f1c <I2C_Slave_STOPF>
 8001f2c:	e056      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f2e:	7bbb      	ldrb	r3, [r7, #14]
 8001f30:	2b21      	cmp	r3, #33	; 0x21
 8001f32:	d002      	beq.n	8001f3a <HAL_I2C_EV_IRQHandler+0x23a>
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
 8001f36:	2b29      	cmp	r3, #41	; 0x29
 8001f38:	d125      	bne.n	8001f86 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	09db      	lsrs	r3, r3, #7
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00f      	beq.n	8001f66 <HAL_I2C_EV_IRQHandler+0x266>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	0a9b      	lsrs	r3, r3, #10
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_I2C_EV_IRQHandler+0x266>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fed6 	bl	8002d10 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f64:	e039      	b.n	8001fda <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d033      	beq.n	8001fda <HAL_I2C_EV_IRQHandler+0x2da>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	0a5b      	lsrs	r3, r3, #9
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d02d      	beq.n	8001fda <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 ff03 	bl	8002d8a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f84:	e029      	b.n	8001fda <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	099b      	lsrs	r3, r3, #6
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00f      	beq.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	0a9b      	lsrs	r3, r3, #10
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 ff0d 	bl	8002dca <I2C_SlaveReceive_RXNE>
 8001fb0:	e014      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00e      	beq.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	0a5b      	lsrs	r3, r3, #9
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d008      	beq.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 ff3b 	bl	8002e46 <I2C_SlaveReceive_BTF>
 8001fd0:	e004      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001fd2:	bf00      	nop
 8001fd4:	e002      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fd6:	bf00      	nop
 8001fd8:	e000      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fda:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b08a      	sub	sp, #40	; 0x28
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002004:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d016      	beq.n	8002040 <HAL_I2C_ER_IRQHandler+0x5e>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d010      	beq.n	8002040 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800202e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800203e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	0a5b      	lsrs	r3, r3, #9
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00e      	beq.n	800206a <HAL_I2C_ER_IRQHandler+0x88>
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002068:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	0a9b      	lsrs	r3, r3, #10
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d03f      	beq.n	80020f6 <HAL_I2C_ER_IRQHandler+0x114>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d039      	beq.n	80020f6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002082:	7efb      	ldrb	r3, [r7, #27]
 8002084:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29b      	uxth	r3, r3
 800208c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002094:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800209c:	7ebb      	ldrb	r3, [r7, #26]
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d112      	bne.n	80020c8 <HAL_I2C_ER_IRQHandler+0xe6>
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10f      	bne.n	80020c8 <HAL_I2C_ER_IRQHandler+0xe6>
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	2b21      	cmp	r3, #33	; 0x21
 80020ac:	d008      	beq.n	80020c0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	2b29      	cmp	r3, #41	; 0x29
 80020b2:	d005      	beq.n	80020c0 <HAL_I2C_ER_IRQHandler+0xde>
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	2b28      	cmp	r3, #40	; 0x28
 80020b8:	d106      	bne.n	80020c8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b21      	cmp	r3, #33	; 0x21
 80020be:	d103      	bne.n	80020c8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f001 f85b 	bl	800317c <I2C_Slave_AF>
 80020c6:	e016      	b.n	80020f6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020da:	7efb      	ldrb	r3, [r7, #27]
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d002      	beq.n	80020e6 <HAL_I2C_ER_IRQHandler+0x104>
 80020e0:	7efb      	ldrb	r3, [r7, #27]
 80020e2:	2b40      	cmp	r3, #64	; 0x40
 80020e4:	d107      	bne.n	80020f6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	0adb      	lsrs	r3, r3, #11
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00e      	beq.n	8002120 <HAL_I2C_ER_IRQHandler+0x13e>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	f043 0308 	orr.w	r3, r3, #8
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800211e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f001 f892 	bl	800325c <I2C_ITError>
  }
}
 8002138:	bf00      	nop
 800213a:	3728      	adds	r7, #40	; 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
 8002194:	4613      	mov	r3, r2
 8002196:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002212:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	2b00      	cmp	r3, #0
 8002220:	d150      	bne.n	80022c4 <I2C_MasterTransmit_TXE+0xc8>
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b21      	cmp	r3, #33	; 0x21
 8002226:	d14d      	bne.n	80022c4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b08      	cmp	r3, #8
 800222c:	d01d      	beq.n	800226a <I2C_MasterTransmit_TXE+0x6e>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b20      	cmp	r3, #32
 8002232:	d01a      	beq.n	800226a <I2C_MasterTransmit_TXE+0x6e>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800223a:	d016      	beq.n	800226a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800224a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2211      	movs	r2, #17
 8002250:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ff6c 	bl	8002140 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002268:	e060      	b.n	800232c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002278:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002288:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	d107      	bne.n	80022b4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff81 	bl	80021b4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022b2:	e03b      	b.n	800232c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff3f 	bl	8002140 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022c2:	e033      	b.n	800232c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b21      	cmp	r3, #33	; 0x21
 80022c8:	d005      	beq.n	80022d6 <I2C_MasterTransmit_TXE+0xda>
 80022ca:	7bbb      	ldrb	r3, [r7, #14]
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d12d      	bne.n	800232c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b22      	cmp	r3, #34	; 0x22
 80022d4:	d12a      	bne.n	800232c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d108      	bne.n	80022f2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ee:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022f0:	e01c      	b.n	800232c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b40      	cmp	r3, #64	; 0x40
 80022fc:	d103      	bne.n	8002306 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f88e 	bl	8002420 <I2C_MemoryTransmit_TXE_BTF>
}
 8002304:	e012      	b.n	800232c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800232a:	e7ff      	b.n	800232c <I2C_MasterTransmit_TXE+0x130>
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b21      	cmp	r3, #33	; 0x21
 800234c:	d164      	bne.n	8002418 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d012      	beq.n	800237e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800237c:	e04c      	b.n	8002418 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d01d      	beq.n	80023c0 <I2C_MasterTransmit_BTF+0x8c>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b20      	cmp	r3, #32
 8002388:	d01a      	beq.n	80023c0 <I2C_MasterTransmit_BTF+0x8c>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002390:	d016      	beq.n	80023c0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023a0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2211      	movs	r2, #17
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff fec1 	bl	8002140 <HAL_I2C_MasterTxCpltCallback>
}
 80023be:	e02b      	b.n	8002418 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023ce:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023de:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b40      	cmp	r3, #64	; 0x40
 80023f8:	d107      	bne.n	800240a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fed6 	bl	80021b4 <HAL_I2C_MemTxCpltCallback>
}
 8002408:	e006      	b.n	8002418 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fe94 	bl	8002140 <HAL_I2C_MasterTxCpltCallback>
}
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002434:	2b00      	cmp	r3, #0
 8002436:	d11d      	bne.n	8002474 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d10b      	bne.n	8002458 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002444:	b2da      	uxtb	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002450:	1c9a      	adds	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002456:	e073      	b.n	8002540 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245c:	b29b      	uxth	r3, r3
 800245e:	121b      	asrs	r3, r3, #8
 8002460:	b2da      	uxtb	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002472:	e065      	b.n	8002540 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10b      	bne.n	8002494 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	b2da      	uxtb	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002492:	e055      	b.n	8002540 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002498:	2b02      	cmp	r3, #2
 800249a:	d151      	bne.n	8002540 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b22      	cmp	r3, #34	; 0x22
 80024a0:	d10d      	bne.n	80024be <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80024bc:	e040      	b.n	8002540 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d015      	beq.n	80024f4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b21      	cmp	r3, #33	; 0x21
 80024cc:	d112      	bne.n	80024f4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024f2:	e025      	b.n	8002540 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d120      	bne.n	8002540 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	2b21      	cmp	r3, #33	; 0x21
 8002502:	d11d      	bne.n	8002540 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002512:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002522:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff fe3a 	bl	80021b4 <HAL_I2C_MemTxCpltCallback>
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b22      	cmp	r3, #34	; 0x22
 800255a:	f040 80a2 	bne.w	80026a2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d921      	bls.n	80025b0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b03      	cmp	r3, #3
 800259a:	f040 8082 	bne.w	80026a2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ac:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80025ae:	e078      	b.n	80026a2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d074      	beq.n	80026a2 <I2C_MasterReceive_RXNE+0x15a>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d002      	beq.n	80025c4 <I2C_MasterReceive_RXNE+0x7c>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d16e      	bne.n	80026a2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f001 fae5 	bl	8003b94 <I2C_WaitOnSTOPRequestThroughIT>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d142      	bne.n	8002656 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025de:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b40      	cmp	r3, #64	; 0x40
 8002628:	d10a      	bne.n	8002640 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff fdc4 	bl	80021c6 <HAL_I2C_MemRxCpltCallback>
}
 800263e:	e030      	b.n	80026a2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2212      	movs	r2, #18
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fd7f 	bl	8002152 <HAL_I2C_MasterRxCpltCallback>
}
 8002654:	e025      	b.n	80026a2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002664:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff fd9b 	bl	80021d8 <HAL_I2C_ErrorCallback>
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d11b      	bne.n	80026fa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80026f8:	e0bd      	b.n	8002876 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2b03      	cmp	r3, #3
 8002702:	d129      	bne.n	8002758 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002712:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d00a      	beq.n	8002730 <I2C_MasterReceive_BTF+0x86>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d007      	beq.n	8002730 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002756:	e08e      	b.n	8002876 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d176      	bne.n	8002850 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d002      	beq.n	800276e <I2C_MasterReceive_BTF+0xc4>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b10      	cmp	r3, #16
 800276c:	d108      	bne.n	8002780 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e019      	b.n	80027b4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b04      	cmp	r3, #4
 8002784:	d002      	beq.n	800278c <I2C_MasterReceive_BTF+0xe2>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d108      	bne.n	800279e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e00a      	b.n	80027b4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d007      	beq.n	80027b4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800280e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b40      	cmp	r3, #64	; 0x40
 8002822:	d10a      	bne.n	800283a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff fcc7 	bl	80021c6 <HAL_I2C_MemRxCpltCallback>
}
 8002838:	e01d      	b.n	8002876 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2212      	movs	r2, #18
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff fc82 	bl	8002152 <HAL_I2C_MasterRxCpltCallback>
}
 800284e:	e012      	b.n	8002876 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d117      	bne.n	80028c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80028ac:	e067      	b.n	800297e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]
}
 80028c0:	e05d      	b.n	800297e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ca:	d133      	bne.n	8002934 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b21      	cmp	r3, #33	; 0x21
 80028d6:	d109      	bne.n	80028ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028e8:	611a      	str	r2, [r3, #16]
 80028ea:	e008      	b.n	80028fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <I2C_Master_SB+0x92>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	d108      	bne.n	8002922 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	2b00      	cmp	r3, #0
 8002916:	d032      	beq.n	800297e <I2C_Master_SB+0x100>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	2b00      	cmp	r3, #0
 8002920:	d02d      	beq.n	800297e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002930:	605a      	str	r2, [r3, #4]
}
 8002932:	e024      	b.n	800297e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10e      	bne.n	800295a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002940:	b29b      	uxth	r3, r3
 8002942:	11db      	asrs	r3, r3, #7
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f003 0306 	and.w	r3, r3, #6
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f063 030f 	orn	r3, r3, #15
 8002950:	b2da      	uxtb	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	611a      	str	r2, [r3, #16]
}
 8002958:	e011      	b.n	800297e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10d      	bne.n	800297e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	b29b      	uxth	r3, r3
 8002968:	11db      	asrs	r3, r3, #7
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f003 0306 	and.w	r3, r3, #6
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f063 030e 	orn	r3, r3, #14
 8002976:	b2da      	uxtb	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	611a      	str	r2, [r3, #16]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	b2da      	uxtb	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <I2C_Master_ADD10+0x26>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d108      	bne.n	80029c0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00c      	beq.n	80029d0 <I2C_Master_ADD10+0x48>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ce:	605a      	str	r2, [r3, #4]
  }
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80029da:	b480      	push	{r7}
 80029dc:	b091      	sub	sp, #68	; 0x44
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b22      	cmp	r3, #34	; 0x22
 8002a02:	f040 8174 	bne.w	8002cee <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <I2C_Master_ADDR+0x54>
 8002a0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a12:	2b40      	cmp	r3, #64	; 0x40
 8002a14:	d10b      	bne.n	8002a2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a16:	2300      	movs	r3, #0
 8002a18:	633b      	str	r3, [r7, #48]	; 0x30
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	e16b      	b.n	8002d06 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11d      	bne.n	8002a72 <I2C_Master_ADDR+0x98>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a3e:	d118      	bne.n	8002a72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	651a      	str	r2, [r3, #80]	; 0x50
 8002a70:	e149      	b.n	8002d06 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d113      	bne.n	8002aa4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e120      	b.n	8002ce6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	f040 808a 	bne.w	8002bc4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ab6:	d137      	bne.n	8002b28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad6:	d113      	bne.n	8002b00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	e0f2      	b.n	8002ce6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b00:	2300      	movs	r3, #0
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	623b      	str	r3, [r7, #32]
 8002b14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e0de      	b.n	8002ce6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d02e      	beq.n	8002b8c <I2C_Master_ADDR+0x1b2>
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d02b      	beq.n	8002b8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	2b12      	cmp	r3, #18
 8002b38:	d102      	bne.n	8002b40 <I2C_Master_ADDR+0x166>
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d125      	bne.n	8002b8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d00e      	beq.n	8002b64 <I2C_Master_ADDR+0x18a>
 8002b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d00b      	beq.n	8002b64 <I2C_Master_ADDR+0x18a>
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d008      	beq.n	8002b64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e007      	b.n	8002b74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	e0ac      	b.n	8002ce6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	61bb      	str	r3, [r7, #24]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e090      	b.n	8002ce6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d158      	bne.n	8002c80 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d021      	beq.n	8002c18 <I2C_Master_ADDR+0x23e>
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d01e      	beq.n	8002c18 <I2C_Master_ADDR+0x23e>
 8002bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d01b      	beq.n	8002c18 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e012      	b.n	8002c3e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c26:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c4c:	d14b      	bne.n	8002ce6 <I2C_Master_ADDR+0x30c>
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c54:	d00b      	beq.n	8002c6e <I2C_Master_ADDR+0x294>
 8002c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d008      	beq.n	8002c6e <I2C_Master_ADDR+0x294>
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d005      	beq.n	8002c6e <I2C_Master_ADDR+0x294>
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d002      	beq.n	8002c6e <I2C_Master_ADDR+0x294>
 8002c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d13b      	bne.n	8002ce6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	e032      	b.n	8002ce6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c8e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9e:	d117      	bne.n	8002cd0 <I2C_Master_ADDR+0x2f6>
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ca6:	d00b      	beq.n	8002cc0 <I2C_Master_ADDR+0x2e6>
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d008      	beq.n	8002cc0 <I2C_Master_ADDR+0x2e6>
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d005      	beq.n	8002cc0 <I2C_Master_ADDR+0x2e6>
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d002      	beq.n	8002cc0 <I2C_Master_ADDR+0x2e6>
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d107      	bne.n	8002cd0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002cec:	e00b      	b.n	8002d06 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
}
 8002d04:	e7ff      	b.n	8002d06 <I2C_Master_ADDR+0x32c>
 8002d06:	bf00      	nop
 8002d08:	3744      	adds	r7, #68	; 0x44
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02b      	beq.n	8002d82 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	781a      	ldrb	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d114      	bne.n	8002d82 <I2C_SlaveTransmit_TXE+0x72>
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b29      	cmp	r3, #41	; 0x29
 8002d5c:	d111      	bne.n	8002d82 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2221      	movs	r2, #33	; 0x21
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2228      	movs	r2, #40	; 0x28
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff f9f1 	bl	8002164 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d011      	beq.n	8002dc0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr

08002dca <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d02c      	beq.n	8002e3e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d114      	bne.n	8002e3e <I2C_SlaveReceive_RXNE+0x74>
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	2b2a      	cmp	r3, #42	; 0x2a
 8002e18:	d111      	bne.n	8002e3e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e28:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2222      	movs	r2, #34	; 0x22
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2228      	movs	r2, #40	; 0x28
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff f99c 	bl	8002176 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d012      	beq.n	8002e7e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ea2:	2b28      	cmp	r3, #40	; 0x28
 8002ea4:	d127      	bne.n	8002ef6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	09db      	lsrs	r3, r3, #7
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d103      	bne.n	8002eda <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	81bb      	strh	r3, [r7, #12]
 8002ed8:	e002      	b.n	8002ee0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002ee8:	89ba      	ldrh	r2, [r7, #12]
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	4619      	mov	r1, r3
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff f94a 	bl	8002188 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ef4:	e00e      	b.n	8002f14 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f68:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f78:	d172      	bne.n	8003060 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	2b22      	cmp	r3, #34	; 0x22
 8002f7e:	d002      	beq.n	8002f86 <I2C_Slave_STOPF+0x6a>
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b2a      	cmp	r3, #42	; 0x2a
 8002f84:	d135      	bne.n	8002ff2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f043 0204 	orr.w	r2, r3, #4
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe f82a 	bl	8001018 <HAL_DMA_GetState>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d049      	beq.n	800305e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	4a69      	ldr	r2, [pc, #420]	; (8003174 <I2C_Slave_STOPF+0x258>)
 8002fd0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd ffa8 	bl	8000f2c <HAL_DMA_Abort_IT>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d03d      	beq.n	800305e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fec:	4610      	mov	r0, r2
 8002fee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ff0:	e035      	b.n	800305e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f043 0204 	orr.w	r2, r3, #4
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003024:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fff4 	bl	8001018 <HAL_DMA_GetState>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d014      	beq.n	8003060 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	4a4e      	ldr	r2, [pc, #312]	; (8003174 <I2C_Slave_STOPF+0x258>)
 800303c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd ff72 	bl	8000f2c <HAL_DMA_Abort_IT>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003058:	4610      	mov	r0, r2
 800305a:	4798      	blx	r3
 800305c:	e000      	b.n	8003060 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800305e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d03e      	beq.n	80030e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b04      	cmp	r3, #4
 8003076:	d112      	bne.n	800309e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d112      	bne.n	80030d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f043 0204 	orr.w	r2, r3, #4
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f8b3 	bl	800325c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80030f6:	e039      	b.n	800316c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b2a      	cmp	r3, #42	; 0x2a
 80030fc:	d109      	bne.n	8003112 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2228      	movs	r2, #40	; 0x28
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff f832 	bl	8002176 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b28      	cmp	r3, #40	; 0x28
 800311c:	d111      	bne.n	8003142 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a15      	ldr	r2, [pc, #84]	; (8003178 <I2C_Slave_STOPF+0x25c>)
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff f831 	bl	80021a2 <HAL_I2C_ListenCpltCallback>
}
 8003140:	e014      	b.n	800316c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	2b22      	cmp	r3, #34	; 0x22
 8003148:	d002      	beq.n	8003150 <I2C_Slave_STOPF+0x234>
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	2b22      	cmp	r3, #34	; 0x22
 800314e:	d10d      	bne.n	800316c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff f805 	bl	8002176 <HAL_I2C_SlaveRxCpltCallback>
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	08003795 	.word	0x08003795
 8003178:	ffff0000 	.word	0xffff0000

0800317c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d002      	beq.n	800319e <I2C_Slave_AF+0x22>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b20      	cmp	r3, #32
 800319c:	d129      	bne.n	80031f2 <I2C_Slave_AF+0x76>
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	2b28      	cmp	r3, #40	; 0x28
 80031a2:	d126      	bne.n	80031f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a2c      	ldr	r2, [pc, #176]	; (8003258 <I2C_Slave_AF+0xdc>)
 80031a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fe ffd9 	bl	80021a2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80031f0:	e02e      	b.n	8003250 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	2b21      	cmp	r3, #33	; 0x21
 80031f6:	d126      	bne.n	8003246 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a17      	ldr	r2, [pc, #92]	; (8003258 <I2C_Slave_AF+0xdc>)
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2221      	movs	r2, #33	; 0x21
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003222:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800322c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fe ff90 	bl	8002164 <HAL_I2C_SlaveTxCpltCallback>
}
 8003244:	e004      	b.n	8003250 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800324e:	615a      	str	r2, [r3, #20]
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	ffff0000 	.word	0xffff0000

0800325c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003272:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003274:	7bbb      	ldrb	r3, [r7, #14]
 8003276:	2b10      	cmp	r3, #16
 8003278:	d002      	beq.n	8003280 <I2C_ITError+0x24>
 800327a:	7bbb      	ldrb	r3, [r7, #14]
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d10a      	bne.n	8003296 <I2C_ITError+0x3a>
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b22      	cmp	r3, #34	; 0x22
 8003284:	d107      	bne.n	8003296 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003294:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800329c:	2b28      	cmp	r3, #40	; 0x28
 800329e:	d107      	bne.n	80032b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2228      	movs	r2, #40	; 0x28
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032ae:	e015      	b.n	80032dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032be:	d00a      	beq.n	80032d6 <I2C_ITError+0x7a>
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b60      	cmp	r3, #96	; 0x60
 80032c4:	d007      	beq.n	80032d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ea:	d161      	bne.n	80033b0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003304:	2b01      	cmp	r3, #1
 8003306:	d020      	beq.n	800334a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330c:	4a6a      	ldr	r2, [pc, #424]	; (80034b8 <I2C_ITError+0x25c>)
 800330e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd fe09 	bl	8000f2c <HAL_DMA_Abort_IT>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8089 	beq.w	8003434 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003344:	4610      	mov	r0, r2
 8003346:	4798      	blx	r3
 8003348:	e074      	b.n	8003434 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	4a5a      	ldr	r2, [pc, #360]	; (80034b8 <I2C_ITError+0x25c>)
 8003350:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd fde8 	bl	8000f2c <HAL_DMA_Abort_IT>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d068      	beq.n	8003434 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d10b      	bne.n	8003388 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033aa:	4610      	mov	r0, r2
 80033ac:	4798      	blx	r3
 80033ae:	e041      	b.n	8003434 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b60      	cmp	r3, #96	; 0x60
 80033ba:	d125      	bne.n	8003408 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d10b      	bne.n	80033f0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7fe fef2 	bl	80021ea <HAL_I2C_AbortCpltCallback>
 8003406:	e015      	b.n	8003434 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d10b      	bne.n	800342e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe fed2 	bl	80021d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10e      	bne.n	8003462 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003470:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d113      	bne.n	80034ae <I2C_ITError+0x252>
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	2b28      	cmp	r3, #40	; 0x28
 800348a:	d110      	bne.n	80034ae <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a0b      	ldr	r2, [pc, #44]	; (80034bc <I2C_ITError+0x260>)
 8003490:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fe fe7a 	bl	80021a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	08003795 	.word	0x08003795
 80034bc:	ffff0000 	.word	0xffff0000

080034c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	460b      	mov	r3, r1
 80034ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d006      	beq.n	80034ea <I2C_MasterRequestWrite+0x2a>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d003      	beq.n	80034ea <I2C_MasterRequestWrite+0x2a>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e8:	d108      	bne.n	80034fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e00b      	b.n	8003514 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	2b12      	cmp	r3, #18
 8003502:	d107      	bne.n	8003514 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003512:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f9df 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353a:	d103      	bne.n	8003544 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e035      	b.n	80035b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003550:	d108      	bne.n	8003564 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003560:	611a      	str	r2, [r3, #16]
 8003562:	e01b      	b.n	800359c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003564:	897b      	ldrh	r3, [r7, #10]
 8003566:	11db      	asrs	r3, r3, #7
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f003 0306 	and.w	r3, r3, #6
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f063 030f 	orn	r3, r3, #15
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	490e      	ldr	r1, [pc, #56]	; (80035bc <I2C_MasterRequestWrite+0xfc>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fa05 	bl	8003992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e010      	b.n	80035b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003592:	897b      	ldrh	r3, [r7, #10]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4907      	ldr	r1, [pc, #28]	; (80035c0 <I2C_MasterRequestWrite+0x100>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f9f5 	bl	8003992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	00010008 	.word	0x00010008
 80035c0:	00010002 	.word	0x00010002

080035c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	4608      	mov	r0, r1
 80035ce:	4611      	mov	r1, r2
 80035d0:	461a      	mov	r2, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	817b      	strh	r3, [r7, #10]
 80035d6:	460b      	mov	r3, r1
 80035d8:	813b      	strh	r3, [r7, #8]
 80035da:	4613      	mov	r3, r2
 80035dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	2200      	movs	r2, #0
 8003606:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f96a 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00d      	beq.n	8003632 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003624:	d103      	bne.n	800362e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0aa      	b.n	8003788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003632:	897b      	ldrh	r3, [r7, #10]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003640:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	4952      	ldr	r1, [pc, #328]	; (8003790 <I2C_RequestMemoryRead+0x1cc>)
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f9a2 	bl	8003992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e097      	b.n	8003788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800366e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003670:	6a39      	ldr	r1, [r7, #32]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fa0c 	bl	8003a90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00d      	beq.n	800369a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2b04      	cmp	r3, #4
 8003684:	d107      	bne.n	8003696 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003694:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e076      	b.n	8003788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d105      	bne.n	80036ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036a0:	893b      	ldrh	r3, [r7, #8]
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	611a      	str	r2, [r3, #16]
 80036aa:	e021      	b.n	80036f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036ac:	893b      	ldrh	r3, [r7, #8]
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	6a39      	ldr	r1, [r7, #32]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f9e6 	bl	8003a90 <I2C_WaitOnTXEFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00d      	beq.n	80036e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d107      	bne.n	80036e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e050      	b.n	8003788 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036e6:	893b      	ldrh	r3, [r7, #8]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f2:	6a39      	ldr	r1, [r7, #32]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f9cb 	bl	8003a90 <I2C_WaitOnTXEFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00d      	beq.n	800371c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	2b04      	cmp	r3, #4
 8003706:	d107      	bne.n	8003718 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003716:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e035      	b.n	8003788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800372a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	2200      	movs	r2, #0
 8003734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f8d3 	bl	80038e4 <I2C_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003752:	d103      	bne.n	800375c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e013      	b.n	8003788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003760:	897b      	ldrh	r3, [r7, #10]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	6a3a      	ldr	r2, [r7, #32]
 8003774:	4906      	ldr	r1, [pc, #24]	; (8003790 <I2C_RequestMemoryRead+0x1cc>)
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f90b 	bl	8003992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	00010002 	.word	0x00010002

08003794 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80037ae:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <I2C_DMAAbort+0x148>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	08db      	lsrs	r3, r3, #3
 80037b4:	4a4a      	ldr	r2, [pc, #296]	; (80038e0 <I2C_DMAAbort+0x14c>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	0a1a      	lsrs	r2, r3, #8
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00da      	lsls	r2, r3, #3
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f043 0220 	orr.w	r2, r3, #32
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80037da:	e00a      	b.n	80037f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	3b01      	subs	r3, #1
 80037e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f0:	d0ea      	beq.n	80037c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fe:	2200      	movs	r2, #0
 8003800:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	2200      	movs	r2, #0
 8003810:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003820:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2200      	movs	r2, #0
 8003826:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	2200      	movs	r2, #0
 8003836:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	2200      	movs	r2, #0
 8003846:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b60      	cmp	r3, #96	; 0x60
 8003862:	d10e      	bne.n	8003882 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2200      	movs	r2, #0
 8003878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800387a:	6978      	ldr	r0, [r7, #20]
 800387c:	f7fe fcb5 	bl	80021ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003880:	e027      	b.n	80038d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003888:	2b28      	cmp	r3, #40	; 0x28
 800388a:	d117      	bne.n	80038bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2200      	movs	r2, #0
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2228      	movs	r2, #40	; 0x28
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038ba:	e007      	b.n	80038cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80038cc:	6978      	ldr	r0, [r7, #20]
 80038ce:	f7fe fc83 	bl	80021d8 <HAL_I2C_ErrorCallback>
}
 80038d2:	bf00      	nop
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000004 	.word	0x20000004
 80038e0:	14f8b589 	.word	0x14f8b589

080038e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f4:	e025      	b.n	8003942 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d021      	beq.n	8003942 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fd f9d9 	bl	8000cb4 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d116      	bne.n	8003942 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e023      	b.n	800398a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	d10d      	bne.n	8003968 <I2C_WaitOnFlagUntilTimeout+0x84>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	43da      	mvns	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4013      	ands	r3, r2
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf0c      	ite	eq
 800395e:	2301      	moveq	r3, #1
 8003960:	2300      	movne	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	e00c      	b.n	8003982 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	43da      	mvns	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4013      	ands	r3, r2
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	bf0c      	ite	eq
 800397a:	2301      	moveq	r3, #1
 800397c:	2300      	movne	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	429a      	cmp	r2, r3
 8003986:	d0b6      	beq.n	80038f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039a0:	e051      	b.n	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b0:	d123      	bne.n	80039fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f043 0204 	orr.w	r2, r3, #4
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e046      	b.n	8003a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d021      	beq.n	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a02:	f7fd f957 	bl	8000cb4 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d116      	bne.n	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e020      	b.n	8003a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d10c      	bne.n	8003a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	43da      	mvns	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bf14      	ite	ne
 8003a62:	2301      	movne	r3, #1
 8003a64:	2300      	moveq	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	e00b      	b.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	43da      	mvns	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4013      	ands	r3, r2
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d18d      	bne.n	80039a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a9c:	e02d      	b.n	8003afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f900 	bl	8003ca4 <I2C_IsAcknowledgeFailed>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e02d      	b.n	8003b0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d021      	beq.n	8003afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	f7fd f8fd 	bl	8000cb4 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d116      	bne.n	8003afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f043 0220 	orr.w	r2, r3, #32
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e007      	b.n	8003b0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b04:	2b80      	cmp	r3, #128	; 0x80
 8003b06:	d1ca      	bne.n	8003a9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b1e:	e02d      	b.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f8bf 	bl	8003ca4 <I2C_IsAcknowledgeFailed>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e02d      	b.n	8003b8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b36:	d021      	beq.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b38:	f7fd f8bc 	bl	8000cb4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d302      	bcc.n	8003b4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d116      	bne.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	f043 0220 	orr.w	r2, r3, #32
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e007      	b.n	8003b8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d1ca      	bne.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ba0:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	08db      	lsrs	r3, r3, #3
 8003ba6:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	0a1a      	lsrs	r2, r3, #8
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d107      	bne.n	8003bd2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e008      	b.n	8003be4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be0:	d0e9      	beq.n	8003bb6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000004 	.word	0x20000004
 8003bf4:	14f8b589 	.word	0x14f8b589

08003bf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c04:	e042      	b.n	8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d119      	bne.n	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0210 	mvn.w	r2, #16
 8003c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e029      	b.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c48:	f7fd f834 	bl	8000cb4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d302      	bcc.n	8003c5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d116      	bne.n	8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e007      	b.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d1b5      	bne.n	8003c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cba:	d11b      	bne.n	8003cf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f043 0204 	orr.w	r2, r3, #4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d10:	d103      	bne.n	8003d1a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d18:	e007      	b.n	8003d2a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d22:	d102      	bne.n	8003d2a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2208      	movs	r2, #8
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d36:	b08b      	sub	sp, #44	; 0x2c
 8003d38:	af06      	add	r7, sp, #24
 8003d3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0fd      	b.n	8003f42 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f006 ff1e 	bl	800ab9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2203      	movs	r2, #3
 8003d64:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f002 fbf1 	bl	8006554 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	687e      	ldr	r6, [r7, #4]
 8003d7a:	466d      	mov	r5, sp
 8003d7c:	f106 0410 	add.w	r4, r6, #16
 8003d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	602b      	str	r3, [r5, #0]
 8003d88:	1d33      	adds	r3, r6, #4
 8003d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d8c:	6838      	ldr	r0, [r7, #0]
 8003d8e:	f002 fbbb 	bl	8006508 <USB_CoreInit>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0ce      	b.n	8003f42 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f002 fbec 	bl	8006588 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db0:	2300      	movs	r3, #0
 8003db2:	73fb      	strb	r3, [r7, #15]
 8003db4:	e04c      	b.n	8003e50 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	440b      	add	r3, r1
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003de0:	7bfa      	ldrb	r2, [r7, #15]
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	b298      	uxth	r0, r3
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	440b      	add	r3, r1
 8003df2:	3336      	adds	r3, #54	; 0x36
 8003df4:	4602      	mov	r2, r0
 8003df6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	440b      	add	r3, r1
 8003e08:	3303      	adds	r3, #3
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e0e:	7bfa      	ldrb	r2, [r7, #15]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	440b      	add	r3, r1
 8003e1c:	3338      	adds	r3, #56	; 0x38
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	440b      	add	r3, r1
 8003e30:	333c      	adds	r3, #60	; 0x3c
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	440b      	add	r3, r1
 8003e44:	3340      	adds	r3, #64	; 0x40
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
 8003e50:	7bfa      	ldrb	r2, [r7, #15]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d3ad      	bcc.n	8003db6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]
 8003e5e:	e044      	b.n	8003eea <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e60:	7bfa      	ldrb	r2, [r7, #15]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	440b      	add	r3, r1
 8003e6e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e76:	7bfa      	ldrb	r2, [r7, #15]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e88:	7bfa      	ldrb	r2, [r7, #15]
 8003e8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e8c:	7bfa      	ldrb	r2, [r7, #15]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	440b      	add	r3, r1
 8003e9a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ea2:	7bfa      	ldrb	r2, [r7, #15]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	440b      	add	r3, r1
 8003eb0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eb8:	7bfa      	ldrb	r2, [r7, #15]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	440b      	add	r3, r1
 8003ec6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	440b      	add	r3, r1
 8003edc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	7bfa      	ldrb	r2, [r7, #15]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d3b5      	bcc.n	8003e60 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	687e      	ldr	r6, [r7, #4]
 8003efc:	466d      	mov	r5, sp
 8003efe:	f106 0410 	add.w	r4, r6, #16
 8003f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	602b      	str	r3, [r5, #0]
 8003f0a:	1d33      	adds	r3, r6, #4
 8003f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f0e:	6838      	ldr	r0, [r7, #0]
 8003f10:	f002 fb46 	bl	80065a0 <USB_DevInit>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e00d      	b.n	8003f42 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f004 fff8 	bl	8008f30 <USB_DevDisconnect>

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_PCD_Start+0x16>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e016      	b.n	8003f8e <HAL_PCD_Start+0x44>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f002 fadb 	bl	8006528 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003f72:	2101      	movs	r1, #1
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f007 f884 	bl	800b082 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f004 ffcc 	bl	8008f1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b088      	sub	sp, #32
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f004 ffce 	bl	8008f44 <USB_ReadInterrupts>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb2:	d102      	bne.n	8003fba <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fb5f 	bl	8004678 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f004 ffc0 	bl	8008f44 <USB_ReadInterrupts>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d112      	bne.n	8003ff6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f006 fe52 	bl	800ac92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003fee:	2100      	movs	r1, #0
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f923 	bl	800423c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 ffa2 	bl	8008f44 <USB_ReadInterrupts>
 8004000:	4603      	mov	r3, r0
 8004002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004006:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400a:	d10b      	bne.n	8004024 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800401e:	b292      	uxth	r2, r2
 8004020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f004 ff8b 	bl	8008f44 <USB_ReadInterrupts>
 800402e:	4603      	mov	r3, r0
 8004030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004038:	d10b      	bne.n	8004052 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800404c:	b292      	uxth	r2, r2
 800404e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f004 ff74 	bl	8008f44 <USB_ReadInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004066:	d126      	bne.n	80040b6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004070:	b29a      	uxth	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0204 	bic.w	r2, r2, #4
 800407a:	b292      	uxth	r2, r2
 800407c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004088:	b29a      	uxth	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0208 	bic.w	r2, r2, #8
 8004092:	b292      	uxth	r2, r2
 8004094:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f006 fe33 	bl	800ad04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040b0:	b292      	uxth	r2, r2
 80040b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f004 ff42 	bl	8008f44 <USB_ReadInterrupts>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ca:	f040 8082 	bne.w	80041d2 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	77fb      	strb	r3, [r7, #31]
 80040d2:	e010      	b.n	80040f6 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	7ffb      	ldrb	r3, [r7, #31]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	7ffb      	ldrb	r3, [r7, #31]
 80040e2:	8812      	ldrh	r2, [r2, #0]
 80040e4:	b292      	uxth	r2, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	3320      	adds	r3, #32
 80040ea:	443b      	add	r3, r7
 80040ec:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80040f0:	7ffb      	ldrb	r3, [r7, #31]
 80040f2:	3301      	adds	r3, #1
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	7ffb      	ldrb	r3, [r7, #31]
 80040f8:	2b07      	cmp	r3, #7
 80040fa:	d9eb      	bls.n	80040d4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	b292      	uxth	r2, r2
 8004110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800411c:	b29a      	uxth	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	b292      	uxth	r2, r2
 8004128:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800412c:	bf00      	nop
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004136:	b29b      	uxth	r3, r3
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f6      	beq.n	800412e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004148:	b29a      	uxth	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004152:	b292      	uxth	r2, r2
 8004154:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004158:	2300      	movs	r3, #0
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	e00f      	b.n	800417e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800415e:	7ffb      	ldrb	r3, [r7, #31]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	4611      	mov	r1, r2
 8004166:	7ffa      	ldrb	r2, [r7, #31]
 8004168:	0092      	lsls	r2, r2, #2
 800416a:	440a      	add	r2, r1
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	3320      	adds	r3, #32
 8004170:	443b      	add	r3, r7
 8004172:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004176:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004178:	7ffb      	ldrb	r3, [r7, #31]
 800417a:	3301      	adds	r3, #1
 800417c:	77fb      	strb	r3, [r7, #31]
 800417e:	7ffb      	ldrb	r3, [r7, #31]
 8004180:	2b07      	cmp	r3, #7
 8004182:	d9ec      	bls.n	800415e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800418c:	b29a      	uxth	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0208 	orr.w	r2, r2, #8
 8004196:	b292      	uxth	r2, r2
 8004198:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ae:	b292      	uxth	r2, r2
 80041b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041bc:	b29a      	uxth	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0204 	orr.w	r2, r2, #4
 80041c6:	b292      	uxth	r2, r2
 80041c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f006 fd7f 	bl	800acd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f004 feb4 	bl	8008f44 <USB_ReadInterrupts>
 80041dc:	4603      	mov	r3, r0
 80041de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e6:	d10e      	bne.n	8004206 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041fa:	b292      	uxth	r2, r2
 80041fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f006 fd38 	bl	800ac76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f004 fe9a 	bl	8008f44 <USB_ReadInterrupts>
 8004210:	4603      	mov	r3, r0
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421a:	d10b      	bne.n	8004234 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800422e:	b292      	uxth	r2, r2
 8004230:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004234:	bf00      	nop
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_PCD_SetAddress+0x1a>
 8004252:	2302      	movs	r3, #2
 8004254:	e013      	b.n	800427e <HAL_PCD_SetAddress+0x42>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f004 fe41 	bl	8008ef6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	4608      	mov	r0, r1
 8004290:	4611      	mov	r1, r2
 8004292:	461a      	mov	r2, r3
 8004294:	4603      	mov	r3, r0
 8004296:	70fb      	strb	r3, [r7, #3]
 8004298:	460b      	mov	r3, r1
 800429a:	803b      	strh	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	da0e      	bge.n	80042ca <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4413      	add	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	705a      	strb	r2, [r3, #1]
 80042c8:	e00e      	b.n	80042e8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	f003 0207 	and.w	r2, r3, #7
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4413      	add	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042f4:	883a      	ldrh	r2, [r7, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	78ba      	ldrb	r2, [r7, #2]
 80042fe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	785b      	ldrb	r3, [r3, #1]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004312:	78bb      	ldrb	r3, [r7, #2]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d102      	bne.n	800431e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_PCD_EP_Open+0xa6>
 8004328:	2302      	movs	r3, #2
 800432a:	e00e      	b.n	800434a <HAL_PCD_EP_Open+0xc4>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68f9      	ldr	r1, [r7, #12]
 800433a:	4618      	mov	r0, r3
 800433c:	f002 f950 	bl	80065e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004348:	7afb      	ldrb	r3, [r7, #11]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800435e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004362:	2b00      	cmp	r3, #0
 8004364:	da0e      	bge.n	8004384 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4413      	add	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	705a      	strb	r2, [r3, #1]
 8004382:	e00e      	b.n	80043a2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	f003 0207 	and.w	r2, r3, #7
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_PCD_EP_Close+0x6a>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e00e      	b.n	80043da <HAL_PCD_EP_Close+0x88>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f002 fc72 	bl	8006cb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b086      	sub	sp, #24
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
 80043ee:	460b      	mov	r3, r1
 80043f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043f2:	7afb      	ldrb	r3, [r7, #11]
 80043f4:	f003 0207 	and.w	r2, r3, #7
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2200      	movs	r2, #0
 8004420:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004422:	7afb      	ldrb	r3, [r7, #11]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	b2da      	uxtb	r2, r3
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800442e:	7afb      	ldrb	r3, [r7, #11]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	2b00      	cmp	r3, #0
 8004436:	d106      	bne.n	8004446 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	4618      	mov	r0, r3
 8004440:	f002 fe24 	bl	800708c <USB_EPStartXfer>
 8004444:	e005      	b.n	8004452 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6979      	ldr	r1, [r7, #20]
 800444c:	4618      	mov	r0, r3
 800444e:	f002 fe1d 	bl	800708c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	f003 0207 	and.w	r2, r3, #7
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	440b      	add	r3, r1
 800447a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
 8004496:	460b      	mov	r3, r1
 8004498:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800449a:	7afb      	ldrb	r3, [r7, #11]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2201      	movs	r2, #1
 80044d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d6:	7afb      	ldrb	r3, [r7, #11]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044e2:	7afb      	ldrb	r3, [r7, #11]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6979      	ldr	r1, [r7, #20]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f002 fdca 	bl	800708c <USB_EPStartXfer>
 80044f8:	e005      	b.n	8004506 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6979      	ldr	r1, [r7, #20]
 8004500:	4618      	mov	r0, r3
 8004502:	f002 fdc3 	bl	800708c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	f003 0207 	and.w	r2, r3, #7
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d901      	bls.n	800452e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e04c      	b.n	80045c8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800452e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004532:	2b00      	cmp	r3, #0
 8004534:	da0e      	bge.n	8004554 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4413      	add	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	705a      	strb	r2, [r3, #1]
 8004552:	e00c      	b.n	800456e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	4413      	add	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	b2da      	uxtb	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_PCD_EP_SetStall+0x7e>
 800458a:	2302      	movs	r3, #2
 800458c:	e01c      	b.n	80045c8 <HAL_PCD_EP_SetStall+0xb8>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	4618      	mov	r0, r3
 800459e:	f004 fbad 	bl	8008cfc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d108      	bne.n	80045be <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f004 fcd2 	bl	8008f62 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	f003 020f 	and.w	r2, r3, #15
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d901      	bls.n	80045ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e040      	b.n	8004670 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	da0e      	bge.n	8004614 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	705a      	strb	r2, [r3, #1]
 8004612:	e00e      	b.n	8004632 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	f003 0207 	and.w	r2, r3, #7
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4413      	add	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	b2da      	uxtb	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_PCD_EP_ClrStall+0x82>
 800464e:	2302      	movs	r3, #2
 8004650:	e00e      	b.n	8004670 <HAL_PCD_EP_ClrStall+0xa0>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	4618      	mov	r0, r3
 8004662:	f004 fb9b 	bl	8008d9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08e      	sub	sp, #56	; 0x38
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004680:	e2ec      	b.n	8004c5c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800468a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800468c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800468e:	b2db      	uxtb	r3, r3
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004698:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800469c:	2b00      	cmp	r3, #0
 800469e:	f040 8161 	bne.w	8004964 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80046a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d152      	bne.n	8004752 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80046b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046bc:	81fb      	strh	r3, [r7, #14]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	89fb      	ldrh	r3, [r7, #14]
 80046c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3328      	adds	r3, #40	; 0x28
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046de:	b29b      	uxth	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	3302      	adds	r3, #2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	441a      	add	r2, r3
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004710:	2100      	movs	r1, #0
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f006 fa95 	bl	800ac42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 829b 	beq.w	8004c5c <PCD_EP_ISR_Handler+0x5e4>
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f040 8296 	bne.w	8004c5c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800473c:	b2da      	uxtb	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	b292      	uxth	r2, r2
 8004744:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004750:	e284      	b.n	8004c5c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004762:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004768:	2b00      	cmp	r3, #0
 800476a:	d034      	beq.n	80047d6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004774:	b29b      	uxth	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	3306      	adds	r3, #6
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f004 fc29 	bl	8009002 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80047bc:	4013      	ands	r3, r2
 80047be:	823b      	strh	r3, [r7, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	8a3a      	ldrh	r2, [r7, #16]
 80047c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047ca:	b292      	uxth	r2, r2
 80047cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f006 fa0a 	bl	800abe8 <HAL_PCD_SetupStageCallback>
 80047d4:	e242      	b.n	8004c5c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80047d6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f280 823e 	bge.w	8004c5c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80047ec:	4013      	ands	r3, r2
 80047ee:	83bb      	strh	r3, [r7, #28]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	8bba      	ldrh	r2, [r7, #28]
 80047f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047fa:	b292      	uxth	r2, r2
 80047fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004806:	b29b      	uxth	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	3306      	adds	r3, #6
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d019      	beq.n	8004866 <PCD_EP_ISR_Handler+0x1ee>
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d015      	beq.n	8004866 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	6959      	ldr	r1, [r3, #20]
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800484a:	b29b      	uxth	r3, r3
 800484c:	f004 fbd9 	bl	8009002 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	441a      	add	r2, r3
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800485e:	2100      	movs	r1, #0
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f006 f9d3 	bl	800ac0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004872:	2b00      	cmp	r3, #0
 8004874:	f040 81f2 	bne.w	8004c5c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004886:	b29b      	uxth	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4413      	add	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d112      	bne.n	80048c6 <PCD_EP_ISR_Handler+0x24e>
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	801a      	strh	r2, [r3, #0]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048be:	b29a      	uxth	r2, r3
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	801a      	strh	r2, [r3, #0]
 80048c4:	e02f      	b.n	8004926 <PCD_EP_ISR_Handler+0x2ae>
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b3e      	cmp	r3, #62	; 0x3e
 80048cc:	d813      	bhi.n	80048f6 <PCD_EP_ISR_Handler+0x27e>
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	633b      	str	r3, [r7, #48]	; 0x30
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <PCD_EP_ISR_Handler+0x270>
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	3301      	adds	r3, #1
 80048e6:	633b      	str	r3, [r7, #48]	; 0x30
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	029b      	lsls	r3, r3, #10
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	801a      	strh	r2, [r3, #0]
 80048f4:	e017      	b.n	8004926 <PCD_EP_ISR_Handler+0x2ae>
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	633b      	str	r3, [r7, #48]	; 0x30
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <PCD_EP_ISR_Handler+0x298>
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	3b01      	subs	r3, #1
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	b29b      	uxth	r3, r3
 8004914:	029b      	lsls	r3, r3, #10
 8004916:	b29b      	uxth	r3, r3
 8004918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800491c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004920:	b29a      	uxth	r2, r3
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	827b      	strh	r3, [r7, #18]
 8004938:	8a7b      	ldrh	r3, [r7, #18]
 800493a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800493e:	827b      	strh	r3, [r7, #18]
 8004940:	8a7b      	ldrh	r3, [r7, #18]
 8004942:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004946:	827b      	strh	r3, [r7, #18]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	8a7b      	ldrh	r3, [r7, #18]
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]
 8004962:	e17b      	b.n	8004c5c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004976:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800497a:	2b00      	cmp	r3, #0
 800497c:	f280 80ea 	bge.w	8004b54 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29a      	uxth	r2, r3
 8004992:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004996:	4013      	ands	r3, r2
 8004998:	853b      	strh	r3, [r7, #40]	; 0x28
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049ae:	b292      	uxth	r2, r2
 80049b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80049b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4413      	add	r3, r2
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	7b1b      	ldrb	r3, [r3, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d122      	bne.n	8004a16 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d8:	b29b      	uxth	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4413      	add	r3, r2
 80049e4:	3306      	adds	r3, #6
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80049fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8087 	beq.w	8004b10 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	6959      	ldr	r1, [r3, #20]
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	88da      	ldrh	r2, [r3, #6]
 8004a0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a10:	f004 faf7 	bl	8009002 <USB_ReadPMA>
 8004a14:	e07c      	b.n	8004b10 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	78db      	ldrb	r3, [r3, #3]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d108      	bne.n	8004a30 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004a1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a20:	461a      	mov	r2, r3
 8004a22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f927 	bl	8004c78 <HAL_PCD_EP_DB_Receive>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004a2e:	e06f      	b.n	8004b10 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	441a      	add	r2, r3
 8004a5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d021      	beq.n	8004ace <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ab2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004ab4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d02a      	beq.n	8004b10 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	6959      	ldr	r1, [r3, #20]
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	891a      	ldrh	r2, [r3, #8]
 8004ac6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ac8:	f004 fa9b 	bl	8009002 <USB_ReadPMA>
 8004acc:	e020      	b.n	8004b10 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	3306      	adds	r3, #6
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004af8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	6959      	ldr	r1, [r3, #20]
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	895a      	ldrh	r2, [r3, #10]
 8004b0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b0c:	f004 fa79 	bl	8009002 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b16:	441a      	add	r2, r3
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b22:	441a      	add	r2, r3
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <PCD_EP_ISR_Handler+0x4c2>
 8004b30:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d206      	bcs.n	8004b48 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f006 f863 	bl	800ac0c <HAL_PCD_DataOutStageCallback>
 8004b46:	e005      	b.n	8004b54 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f002 fa9c 	bl	800708c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004b54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d07e      	beq.n	8004c5c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004b5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4413      	add	r3, r2
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8c:	843b      	strh	r3, [r7, #32]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	441a      	add	r2, r3
 8004b9c:	8c3b      	ldrh	r3, [r7, #32]
 8004b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	78db      	ldrb	r3, [r3, #3]
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d00c      	beq.n	8004bcc <PCD_EP_ISR_Handler+0x554>
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	78db      	ldrb	r3, [r3, #3]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d146      	bne.n	8004c50 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004bc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d141      	bne.n	8004c50 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	3302      	adds	r3, #2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	8bfb      	ldrh	r3, [r7, #30]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d906      	bls.n	8004c0e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	8bfb      	ldrh	r3, [r7, #30]
 8004c06:	1ad2      	subs	r2, r2, r3
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	619a      	str	r2, [r3, #24]
 8004c0c:	e002      	b.n	8004c14 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	2200      	movs	r2, #0
 8004c12:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f006 f80d 	bl	800ac42 <HAL_PCD_DataInStageCallback>
 8004c28:	e018      	b.n	8004c5c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	8bfb      	ldrh	r3, [r7, #30]
 8004c30:	441a      	add	r2, r3
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	69da      	ldr	r2, [r3, #28]
 8004c3a:	8bfb      	ldrh	r3, [r7, #30]
 8004c3c:	441a      	add	r2, r3
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f002 fa1f 	bl	800708c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004c4e:	e005      	b.n	8004c5c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004c50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c52:	461a      	mov	r2, r3
 8004c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f91b 	bl	8004e92 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	b21b      	sxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f6ff ad0a 	blt.w	8004682 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3738      	adds	r7, #56	; 0x38
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d07e      	beq.n	8004d8e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cb8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	8b7b      	ldrh	r3, [r7, #26]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d306      	bcc.n	8004cd2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	699a      	ldr	r2, [r3, #24]
 8004cc8:	8b7b      	ldrh	r3, [r7, #26]
 8004cca:	1ad2      	subs	r2, r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	619a      	str	r2, [r3, #24]
 8004cd0:	e002      	b.n	8004cd8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d123      	bne.n	8004d28 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	833b      	strh	r3, [r7, #24]
 8004cfc:	8b3b      	ldrh	r3, [r7, #24]
 8004cfe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d02:	833b      	strh	r3, [r7, #24]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	8b3b      	ldrh	r3, [r7, #24]
 8004d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01f      	beq.n	8004d72 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4c:	82fb      	strh	r3, [r7, #22]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	8afb      	ldrh	r3, [r7, #22]
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d72:	8b7b      	ldrh	r3, [r7, #26]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 8087 	beq.w	8004e88 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6959      	ldr	r1, [r3, #20]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	891a      	ldrh	r2, [r3, #8]
 8004d86:	8b7b      	ldrh	r3, [r7, #26]
 8004d88:	f004 f93b 	bl	8009002 <USB_ReadPMA>
 8004d8c:	e07c      	b.n	8004e88 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4413      	add	r3, r2
 8004da2:	3306      	adds	r3, #6
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004db6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	699a      	ldr	r2, [r3, #24]
 8004dbc:	8b7b      	ldrh	r3, [r7, #26]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d306      	bcc.n	8004dd0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	8b7b      	ldrh	r3, [r7, #26]
 8004dc8:	1ad2      	subs	r2, r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	619a      	str	r2, [r3, #24]
 8004dce:	e002      	b.n	8004dd6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d123      	bne.n	8004e26 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df8:	83fb      	strh	r3, [r7, #30]
 8004dfa:	8bfb      	ldrh	r3, [r7, #30]
 8004dfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e00:	83fb      	strh	r3, [r7, #30]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	8bfb      	ldrh	r3, [r7, #30]
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d11f      	bne.n	8004e70 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	83bb      	strh	r3, [r7, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	8bbb      	ldrh	r3, [r7, #28]
 8004e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e70:	8b7b      	ldrh	r3, [r7, #26]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	6959      	ldr	r1, [r3, #20]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	895a      	ldrh	r2, [r3, #10]
 8004e82:	8b7b      	ldrh	r3, [r7, #26]
 8004e84:	f004 f8bd 	bl	8009002 <USB_ReadPMA>
    }
  }

  return count;
 8004e88:	8b7b      	ldrh	r3, [r7, #26]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b0a2      	sub	sp, #136	; 0x88
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 81c7 	beq.w	800523a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3302      	adds	r3, #2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ed4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d907      	bls.n	8004ef4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	699a      	ldr	r2, [r3, #24]
 8004ee8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004eec:	1ad2      	subs	r2, r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	619a      	str	r2, [r3, #24]
 8004ef2:	e002      	b.n	8004efa <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f040 80b9 	bne.w	8005076 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d126      	bne.n	8004f5a <HAL_PCD_EP_DB_Transmit+0xc8>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	4413      	add	r3, r2
 8004f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	011a      	lsls	r2, r3, #4
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	801a      	strh	r2, [r3, #0]
 8004f58:	e01a      	b.n	8004f90 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	785b      	ldrb	r3, [r3, #1]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d116      	bne.n	8004f90 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	633b      	str	r3, [r7, #48]	; 0x30
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	4413      	add	r3, r2
 8004f78:	633b      	str	r3, [r7, #48]	; 0x30
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	011a      	lsls	r2, r3, #4
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	4413      	add	r3, r2
 8004f84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	623b      	str	r3, [r7, #32]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d126      	bne.n	8004fec <HAL_PCD_EP_DB_Transmit+0x15a>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	011a      	lsls	r2, r3, #4
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	801a      	strh	r2, [r3, #0]
 8004fea:	e017      	b.n	800501c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d113      	bne.n	800501c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	4413      	add	r3, r2
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	011a      	lsls	r2, r3, #4
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	4413      	add	r3, r2
 8005010:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2200      	movs	r2, #0
 800501a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	4619      	mov	r1, r3
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f005 fe0d 	bl	800ac42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005028:	88fb      	ldrh	r3, [r7, #6]
 800502a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 82d4 	beq.w	80055dc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	827b      	strh	r3, [r7, #18]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	8a7b      	ldrh	r3, [r7, #18]
 8005060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005068:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800506c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]
 8005074:	e2b2      	b.n	80055dc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d021      	beq.n	80050c4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	441a      	add	r2, r3
 80050ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	f040 8286 	bne.w	80055dc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050d8:	441a      	add	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	69da      	ldr	r2, [r3, #28]
 80050e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050e6:	441a      	add	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6a1a      	ldr	r2, [r3, #32]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d309      	bcc.n	800510c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	6a1a      	ldr	r2, [r3, #32]
 8005102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005104:	1ad2      	subs	r2, r2, r3
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	621a      	str	r2, [r3, #32]
 800510a:	e015      	b.n	8005138 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d107      	bne.n	8005124 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005114:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005118:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005122:	e009      	b.n	8005138 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2200      	movs	r2, #0
 8005136:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d155      	bne.n	80051ec <HAL_PCD_EP_DB_Transmit+0x35a>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	63bb      	str	r3, [r7, #56]	; 0x38
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514e:	b29b      	uxth	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	4413      	add	r3, r2
 8005156:	63bb      	str	r3, [r7, #56]	; 0x38
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	011a      	lsls	r2, r3, #4
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	4413      	add	r3, r2
 8005162:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005166:	637b      	str	r3, [r7, #52]	; 0x34
 8005168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800516a:	2b00      	cmp	r3, #0
 800516c:	d112      	bne.n	8005194 <HAL_PCD_EP_DB_Transmit+0x302>
 800516e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005178:	b29a      	uxth	r2, r3
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517c:	801a      	strh	r2, [r3, #0]
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800518c:	b29a      	uxth	r2, r3
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	e047      	b.n	8005224 <HAL_PCD_EP_DB_Transmit+0x392>
 8005194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005196:	2b3e      	cmp	r3, #62	; 0x3e
 8005198:	d811      	bhi.n	80051be <HAL_PCD_EP_DB_Transmit+0x32c>
 800519a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	64bb      	str	r3, [r7, #72]	; 0x48
 80051a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_PCD_EP_DB_Transmit+0x31e>
 80051aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ac:	3301      	adds	r3, #1
 80051ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80051b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	029b      	lsls	r3, r3, #10
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ba:	801a      	strh	r2, [r3, #0]
 80051bc:	e032      	b.n	8005224 <HAL_PCD_EP_DB_Transmit+0x392>
 80051be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d102      	bne.n	80051d4 <HAL_PCD_EP_DB_Transmit+0x342>
 80051ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d0:	3b01      	subs	r3, #1
 80051d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	029b      	lsls	r3, r3, #10
 80051da:	b29b      	uxth	r3, r3
 80051dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	e01b      	b.n	8005224 <HAL_PCD_EP_DB_Transmit+0x392>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d117      	bne.n	8005224 <HAL_PCD_EP_DB_Transmit+0x392>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	643b      	str	r3, [r7, #64]	; 0x40
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005202:	b29b      	uxth	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005208:	4413      	add	r3, r2
 800520a:	643b      	str	r3, [r7, #64]	; 0x40
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	011a      	lsls	r2, r3, #4
 8005212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005214:	4413      	add	r3, r2
 8005216:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800521c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800521e:	b29a      	uxth	r2, r3
 8005220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005222:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6818      	ldr	r0, [r3, #0]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	6959      	ldr	r1, [r3, #20]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	891a      	ldrh	r2, [r3, #8]
 8005230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005232:	b29b      	uxth	r3, r3
 8005234:	f003 fea0 	bl	8008f78 <USB_WritePMA>
 8005238:	e1d0      	b.n	80055dc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005242:	b29b      	uxth	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	4413      	add	r3, r2
 800524e:	3306      	adds	r3, #6
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	6812      	ldr	r2, [r2, #0]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005262:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800526e:	429a      	cmp	r2, r3
 8005270:	d307      	bcc.n	8005282 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800527a:	1ad2      	subs	r2, r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	619a      	str	r2, [r3, #24]
 8005280:	e002      	b.n	8005288 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2200      	movs	r2, #0
 8005286:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f040 80c4 	bne.w	800541a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	785b      	ldrb	r3, [r3, #1]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d126      	bne.n	80052e8 <HAL_PCD_EP_DB_Transmit+0x456>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ae:	4413      	add	r3, r2
 80052b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	011a      	lsls	r2, r3, #4
 80052b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ba:	4413      	add	r3, r2
 80052bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80052c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052d0:	801a      	strh	r2, [r3, #0]
 80052d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	e01a      	b.n	800531e <HAL_PCD_EP_DB_Transmit+0x48c>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d116      	bne.n	800531e <HAL_PCD_EP_DB_Transmit+0x48c>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	677b      	str	r3, [r7, #116]	; 0x74
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fe:	b29b      	uxth	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005304:	4413      	add	r3, r2
 8005306:	677b      	str	r3, [r7, #116]	; 0x74
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	011a      	lsls	r2, r3, #4
 800530e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005310:	4413      	add	r3, r2
 8005312:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005316:	673b      	str	r3, [r7, #112]	; 0x70
 8005318:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800531a:	2200      	movs	r2, #0
 800531c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	67bb      	str	r3, [r7, #120]	; 0x78
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d12f      	bne.n	800538c <HAL_PCD_EP_DB_Transmit+0x4fa>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800533c:	b29b      	uxth	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005344:	4413      	add	r3, r2
 8005346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	011a      	lsls	r2, r3, #4
 8005350:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005354:	4413      	add	r3, r2
 8005356:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800535a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800535e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800536a:	b29a      	uxth	r2, r3
 800536c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005382:	b29a      	uxth	r2, r3
 8005384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	e017      	b.n	80053bc <HAL_PCD_EP_DB_Transmit+0x52a>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d113      	bne.n	80053bc <HAL_PCD_EP_DB_Transmit+0x52a>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539c:	b29b      	uxth	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053a2:	4413      	add	r3, r2
 80053a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	011a      	lsls	r2, r3, #4
 80053ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ae:	4413      	add	r3, r2
 80053b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053b8:	2200      	movs	r2, #0
 80053ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	4619      	mov	r1, r3
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f005 fc3d 	bl	800ac42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f040 8104 	bne.w	80055dc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	441a      	add	r2, r3
 8005400:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005414:	b29b      	uxth	r3, r3
 8005416:	8013      	strh	r3, [r2, #0]
 8005418:	e0e0      	b.n	80055dc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d121      	bne.n	8005468 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005464:	b29b      	uxth	r3, r3
 8005466:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800546e:	2b01      	cmp	r3, #1
 8005470:	f040 80b4 	bne.w	80055dc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800547c:	441a      	add	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	69da      	ldr	r2, [r3, #28]
 8005486:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800548a:	441a      	add	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	6a1a      	ldr	r2, [r3, #32]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	429a      	cmp	r2, r3
 800549a:	d309      	bcc.n	80054b0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6a1a      	ldr	r2, [r3, #32]
 80054a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a8:	1ad2      	subs	r2, r2, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	621a      	str	r2, [r3, #32]
 80054ae:	e015      	b.n	80054dc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d107      	bne.n	80054c8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80054b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054c6:	e009      	b.n	80054dc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2200      	movs	r2, #0
 80054d2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	667b      	str	r3, [r7, #100]	; 0x64
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d155      	bne.n	8005596 <HAL_PCD_EP_DB_Transmit+0x704>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054fe:	4413      	add	r3, r2
 8005500:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	011a      	lsls	r2, r3, #4
 8005508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800550a:	4413      	add	r3, r2
 800550c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005510:	65bb      	str	r3, [r7, #88]	; 0x58
 8005512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005514:	2b00      	cmp	r3, #0
 8005516:	d112      	bne.n	800553e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29b      	uxth	r3, r3
 800551e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005522:	b29a      	uxth	r2, r3
 8005524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005526:	801a      	strh	r2, [r3, #0]
 8005528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005536:	b29a      	uxth	r2, r3
 8005538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	e044      	b.n	80055c8 <HAL_PCD_EP_DB_Transmit+0x736>
 800553e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005540:	2b3e      	cmp	r3, #62	; 0x3e
 8005542:	d811      	bhi.n	8005568 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005546:	085b      	lsrs	r3, r3, #1
 8005548:	657b      	str	r3, [r7, #84]	; 0x54
 800554a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005556:	3301      	adds	r3, #1
 8005558:	657b      	str	r3, [r7, #84]	; 0x54
 800555a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800555c:	b29b      	uxth	r3, r3
 800555e:	029b      	lsls	r3, r3, #10
 8005560:	b29a      	uxth	r2, r3
 8005562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005564:	801a      	strh	r2, [r3, #0]
 8005566:	e02f      	b.n	80055c8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	657b      	str	r3, [r7, #84]	; 0x54
 800556e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005570:	f003 031f 	and.w	r3, r3, #31
 8005574:	2b00      	cmp	r3, #0
 8005576:	d102      	bne.n	800557e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557a:	3b01      	subs	r3, #1
 800557c:	657b      	str	r3, [r7, #84]	; 0x54
 800557e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005580:	b29b      	uxth	r3, r3
 8005582:	029b      	lsls	r3, r3, #10
 8005584:	b29b      	uxth	r3, r3
 8005586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558e:	b29a      	uxth	r2, r3
 8005590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005592:	801a      	strh	r2, [r3, #0]
 8005594:	e018      	b.n	80055c8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d114      	bne.n	80055c8 <HAL_PCD_EP_DB_Transmit+0x736>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ac:	4413      	add	r3, r2
 80055ae:	667b      	str	r3, [r7, #100]	; 0x64
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	011a      	lsls	r2, r3, #4
 80055b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b8:	4413      	add	r3, r2
 80055ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055be:	663b      	str	r3, [r7, #96]	; 0x60
 80055c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	6959      	ldr	r1, [r3, #20]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	895a      	ldrh	r2, [r3, #10]
 80055d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f003 fcce 	bl	8008f78 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f6:	823b      	strh	r3, [r7, #16]
 80055f8:	8a3b      	ldrh	r3, [r7, #16]
 80055fa:	f083 0310 	eor.w	r3, r3, #16
 80055fe:	823b      	strh	r3, [r7, #16]
 8005600:	8a3b      	ldrh	r3, [r7, #16]
 8005602:	f083 0320 	eor.w	r3, r3, #32
 8005606:	823b      	strh	r3, [r7, #16]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	8a3b      	ldrh	r3, [r7, #16]
 8005618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005628:	b29b      	uxth	r3, r3
 800562a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3788      	adds	r7, #136	; 0x88
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005636:	b480      	push	{r7}
 8005638:	b087      	sub	sp, #28
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	607b      	str	r3, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	817b      	strh	r3, [r7, #10]
 8005644:	4613      	mov	r3, r2
 8005646:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005648:	897b      	ldrh	r3, [r7, #10]
 800564a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00b      	beq.n	800566c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005654:	897b      	ldrh	r3, [r7, #10]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	e009      	b.n	8005680 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800566c:	897a      	ldrh	r2, [r7, #10]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005680:	893b      	ldrh	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d107      	bne.n	8005696 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2200      	movs	r2, #0
 800568a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	b29a      	uxth	r2, r3
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	80da      	strh	r2, [r3, #6]
 8005694:	e00b      	b.n	80056ae <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2201      	movs	r2, #1
 800569a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	b29a      	uxth	r2, r3
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	0c1b      	lsrs	r3, r3, #16
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr
	...

080056bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e272      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 8087 	beq.w	80057ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056dc:	4b92      	ldr	r3, [pc, #584]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 030c 	and.w	r3, r3, #12
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d00c      	beq.n	8005702 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056e8:	4b8f      	ldr	r3, [pc, #572]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f003 030c 	and.w	r3, r3, #12
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d112      	bne.n	800571a <HAL_RCC_OscConfig+0x5e>
 80056f4:	4b8c      	ldr	r3, [pc, #560]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005700:	d10b      	bne.n	800571a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005702:	4b89      	ldr	r3, [pc, #548]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d06c      	beq.n	80057e8 <HAL_RCC_OscConfig+0x12c>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d168      	bne.n	80057e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e24c      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005722:	d106      	bne.n	8005732 <HAL_RCC_OscConfig+0x76>
 8005724:	4b80      	ldr	r3, [pc, #512]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a7f      	ldr	r2, [pc, #508]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 800572a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	e02e      	b.n	8005790 <HAL_RCC_OscConfig+0xd4>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10c      	bne.n	8005754 <HAL_RCC_OscConfig+0x98>
 800573a:	4b7b      	ldr	r3, [pc, #492]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a7a      	ldr	r2, [pc, #488]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	4b78      	ldr	r3, [pc, #480]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a77      	ldr	r2, [pc, #476]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 800574c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	e01d      	b.n	8005790 <HAL_RCC_OscConfig+0xd4>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800575c:	d10c      	bne.n	8005778 <HAL_RCC_OscConfig+0xbc>
 800575e:	4b72      	ldr	r3, [pc, #456]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a71      	ldr	r2, [pc, #452]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	4b6f      	ldr	r3, [pc, #444]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a6e      	ldr	r2, [pc, #440]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	e00b      	b.n	8005790 <HAL_RCC_OscConfig+0xd4>
 8005778:	4b6b      	ldr	r3, [pc, #428]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a6a      	ldr	r2, [pc, #424]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 800577e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	4b68      	ldr	r3, [pc, #416]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a67      	ldr	r2, [pc, #412]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 800578a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800578e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d013      	beq.n	80057c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005798:	f7fb fa8c 	bl	8000cb4 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a0:	f7fb fa88 	bl	8000cb4 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b64      	cmp	r3, #100	; 0x64
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e200      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b2:	4b5d      	ldr	r3, [pc, #372]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0xe4>
 80057be:	e014      	b.n	80057ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c0:	f7fb fa78 	bl	8000cb4 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c8:	f7fb fa74 	bl	8000cb4 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b64      	cmp	r3, #100	; 0x64
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e1ec      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057da:	4b53      	ldr	r3, [pc, #332]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f0      	bne.n	80057c8 <HAL_RCC_OscConfig+0x10c>
 80057e6:	e000      	b.n	80057ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d063      	beq.n	80058be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057f6:	4b4c      	ldr	r3, [pc, #304]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005802:	4b49      	ldr	r3, [pc, #292]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f003 030c 	and.w	r3, r3, #12
 800580a:	2b08      	cmp	r3, #8
 800580c:	d11c      	bne.n	8005848 <HAL_RCC_OscConfig+0x18c>
 800580e:	4b46      	ldr	r3, [pc, #280]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d116      	bne.n	8005848 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800581a:	4b43      	ldr	r3, [pc, #268]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_RCC_OscConfig+0x176>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d001      	beq.n	8005832 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e1c0      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005832:	4b3d      	ldr	r3, [pc, #244]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	4939      	ldr	r1, [pc, #228]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005842:	4313      	orrs	r3, r2
 8005844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005846:	e03a      	b.n	80058be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d020      	beq.n	8005892 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005850:	4b36      	ldr	r3, [pc, #216]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005856:	f7fb fa2d 	bl	8000cb4 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800585e:	f7fb fa29 	bl	8000cb4 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e1a1      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005870:	4b2d      	ldr	r3, [pc, #180]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587c:	4b2a      	ldr	r3, [pc, #168]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	4927      	ldr	r1, [pc, #156]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 800588c:	4313      	orrs	r3, r2
 800588e:	600b      	str	r3, [r1, #0]
 8005890:	e015      	b.n	80058be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005892:	4b26      	ldr	r3, [pc, #152]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005898:	f7fb fa0c 	bl	8000cb4 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a0:	f7fb fa08 	bl	8000cb4 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e180      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058b2:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d03a      	beq.n	8005940 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d019      	beq.n	8005906 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058d2:	4b17      	ldr	r3, [pc, #92]	; (8005930 <HAL_RCC_OscConfig+0x274>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d8:	f7fb f9ec 	bl	8000cb4 <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058e0:	f7fb f9e8 	bl	8000cb4 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e160      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058f2:	4b0d      	ldr	r3, [pc, #52]	; (8005928 <HAL_RCC_OscConfig+0x26c>)
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f0      	beq.n	80058e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058fe:	2001      	movs	r0, #1
 8005900:	f000 fac4 	bl	8005e8c <RCC_Delay>
 8005904:	e01c      	b.n	8005940 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005906:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <HAL_RCC_OscConfig+0x274>)
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800590c:	f7fb f9d2 	bl	8000cb4 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005912:	e00f      	b.n	8005934 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005914:	f7fb f9ce 	bl	8000cb4 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d908      	bls.n	8005934 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e146      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000
 800592c:	42420000 	.word	0x42420000
 8005930:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005934:	4b92      	ldr	r3, [pc, #584]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e9      	bne.n	8005914 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 80a6 	beq.w	8005a9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005952:	4b8b      	ldr	r3, [pc, #556]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10d      	bne.n	800597a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800595e:	4b88      	ldr	r3, [pc, #544]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	4a87      	ldr	r2, [pc, #540]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005968:	61d3      	str	r3, [r2, #28]
 800596a:	4b85      	ldr	r3, [pc, #532]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005972:	60bb      	str	r3, [r7, #8]
 8005974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005976:	2301      	movs	r3, #1
 8005978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597a:	4b82      	ldr	r3, [pc, #520]	; (8005b84 <HAL_RCC_OscConfig+0x4c8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	2b00      	cmp	r3, #0
 8005984:	d118      	bne.n	80059b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005986:	4b7f      	ldr	r3, [pc, #508]	; (8005b84 <HAL_RCC_OscConfig+0x4c8>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a7e      	ldr	r2, [pc, #504]	; (8005b84 <HAL_RCC_OscConfig+0x4c8>)
 800598c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005992:	f7fb f98f 	bl	8000cb4 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800599a:	f7fb f98b 	bl	8000cb4 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b64      	cmp	r3, #100	; 0x64
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e103      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ac:	4b75      	ldr	r3, [pc, #468]	; (8005b84 <HAL_RCC_OscConfig+0x4c8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d106      	bne.n	80059ce <HAL_RCC_OscConfig+0x312>
 80059c0:	4b6f      	ldr	r3, [pc, #444]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	4a6e      	ldr	r2, [pc, #440]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 80059c6:	f043 0301 	orr.w	r3, r3, #1
 80059ca:	6213      	str	r3, [r2, #32]
 80059cc:	e02d      	b.n	8005a2a <HAL_RCC_OscConfig+0x36e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10c      	bne.n	80059f0 <HAL_RCC_OscConfig+0x334>
 80059d6:	4b6a      	ldr	r3, [pc, #424]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	4a69      	ldr	r2, [pc, #420]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	6213      	str	r3, [r2, #32]
 80059e2:	4b67      	ldr	r3, [pc, #412]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	4a66      	ldr	r2, [pc, #408]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 80059e8:	f023 0304 	bic.w	r3, r3, #4
 80059ec:	6213      	str	r3, [r2, #32]
 80059ee:	e01c      	b.n	8005a2a <HAL_RCC_OscConfig+0x36e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	2b05      	cmp	r3, #5
 80059f6:	d10c      	bne.n	8005a12 <HAL_RCC_OscConfig+0x356>
 80059f8:	4b61      	ldr	r3, [pc, #388]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	4a60      	ldr	r2, [pc, #384]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 80059fe:	f043 0304 	orr.w	r3, r3, #4
 8005a02:	6213      	str	r3, [r2, #32]
 8005a04:	4b5e      	ldr	r3, [pc, #376]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	4a5d      	ldr	r2, [pc, #372]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	6213      	str	r3, [r2, #32]
 8005a10:	e00b      	b.n	8005a2a <HAL_RCC_OscConfig+0x36e>
 8005a12:	4b5b      	ldr	r3, [pc, #364]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	4a5a      	ldr	r2, [pc, #360]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005a18:	f023 0301 	bic.w	r3, r3, #1
 8005a1c:	6213      	str	r3, [r2, #32]
 8005a1e:	4b58      	ldr	r3, [pc, #352]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	4a57      	ldr	r2, [pc, #348]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005a24:	f023 0304 	bic.w	r3, r3, #4
 8005a28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d015      	beq.n	8005a5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a32:	f7fb f93f 	bl	8000cb4 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a38:	e00a      	b.n	8005a50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3a:	f7fb f93b 	bl	8000cb4 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e0b1      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a50:	4b4b      	ldr	r3, [pc, #300]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0ee      	beq.n	8005a3a <HAL_RCC_OscConfig+0x37e>
 8005a5c:	e014      	b.n	8005a88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5e:	f7fb f929 	bl	8000cb4 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a64:	e00a      	b.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a66:	f7fb f925 	bl	8000cb4 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e09b      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a7c:	4b40      	ldr	r3, [pc, #256]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1ee      	bne.n	8005a66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d105      	bne.n	8005a9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a8e:	4b3c      	ldr	r3, [pc, #240]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	4a3b      	ldr	r2, [pc, #236]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 8087 	beq.w	8005bb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aa4:	4b36      	ldr	r3, [pc, #216]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f003 030c 	and.w	r3, r3, #12
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d061      	beq.n	8005b74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d146      	bne.n	8005b46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab8:	4b33      	ldr	r3, [pc, #204]	; (8005b88 <HAL_RCC_OscConfig+0x4cc>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abe:	f7fb f8f9 	bl	8000cb4 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac6:	f7fb f8f5 	bl	8000cb4 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e06d      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ad8:	4b29      	ldr	r3, [pc, #164]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1f0      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aec:	d108      	bne.n	8005b00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005aee:	4b24      	ldr	r3, [pc, #144]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	4921      	ldr	r1, [pc, #132]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b00:	4b1f      	ldr	r3, [pc, #124]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a19      	ldr	r1, [r3, #32]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	430b      	orrs	r3, r1
 8005b12:	491b      	ldr	r1, [pc, #108]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b18:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <HAL_RCC_OscConfig+0x4cc>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7fb f8c9 	bl	8000cb4 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b26:	f7fb f8c5 	bl	8000cb4 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e03d      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b38:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f0      	beq.n	8005b26 <HAL_RCC_OscConfig+0x46a>
 8005b44:	e035      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b46:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <HAL_RCC_OscConfig+0x4cc>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b4c:	f7fb f8b2 	bl	8000cb4 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b54:	f7fb f8ae 	bl	8000cb4 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e026      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <HAL_RCC_OscConfig+0x4c4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f0      	bne.n	8005b54 <HAL_RCC_OscConfig+0x498>
 8005b72:	e01e      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e019      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
 8005b80:	40021000 	.word	0x40021000
 8005b84:	40007000 	.word	0x40007000
 8005b88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <HAL_RCC_OscConfig+0x500>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d106      	bne.n	8005bae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d001      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40021000 	.word	0x40021000

08005bc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0d0      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bd4:	4b6a      	ldr	r3, [pc, #424]	; (8005d80 <HAL_RCC_ClockConfig+0x1c0>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d910      	bls.n	8005c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be2:	4b67      	ldr	r3, [pc, #412]	; (8005d80 <HAL_RCC_ClockConfig+0x1c0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f023 0207 	bic.w	r2, r3, #7
 8005bea:	4965      	ldr	r1, [pc, #404]	; (8005d80 <HAL_RCC_ClockConfig+0x1c0>)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf2:	4b63      	ldr	r3, [pc, #396]	; (8005d80 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0b8      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d020      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c1c:	4b59      	ldr	r3, [pc, #356]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	4a58      	ldr	r2, [pc, #352]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005c22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c34:	4b53      	ldr	r3, [pc, #332]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	4a52      	ldr	r2, [pc, #328]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c40:	4b50      	ldr	r3, [pc, #320]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	494d      	ldr	r1, [pc, #308]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d040      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d107      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c66:	4b47      	ldr	r3, [pc, #284]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d115      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e07f      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d107      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c7e:	4b41      	ldr	r3, [pc, #260]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e073      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c8e:	4b3d      	ldr	r3, [pc, #244]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e06b      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c9e:	4b39      	ldr	r3, [pc, #228]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f023 0203 	bic.w	r2, r3, #3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	4936      	ldr	r1, [pc, #216]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cb0:	f7fb f800 	bl	8000cb4 <HAL_GetTick>
 8005cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb8:	f7fa fffc 	bl	8000cb4 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e053      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cce:	4b2d      	ldr	r3, [pc, #180]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f003 020c 	and.w	r2, r3, #12
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d1eb      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce0:	4b27      	ldr	r3, [pc, #156]	; (8005d80 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d210      	bcs.n	8005d10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cee:	4b24      	ldr	r3, [pc, #144]	; (8005d80 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 0207 	bic.w	r2, r3, #7
 8005cf6:	4922      	ldr	r1, [pc, #136]	; (8005d80 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	4b20      	ldr	r3, [pc, #128]	; (8005d80 <HAL_RCC_ClockConfig+0x1c0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d001      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e032      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d1c:	4b19      	ldr	r3, [pc, #100]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	4916      	ldr	r1, [pc, #88]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d3a:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	490e      	ldr	r1, [pc, #56]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d4e:	f000 f821 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8005d52:	4602      	mov	r2, r0
 8005d54:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	091b      	lsrs	r3, r3, #4
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	490a      	ldr	r1, [pc, #40]	; (8005d88 <HAL_RCC_ClockConfig+0x1c8>)
 8005d60:	5ccb      	ldrb	r3, [r1, r3]
 8005d62:	fa22 f303 	lsr.w	r3, r2, r3
 8005d66:	4a09      	ldr	r2, [pc, #36]	; (8005d8c <HAL_RCC_ClockConfig+0x1cc>)
 8005d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d6a:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <HAL_RCC_ClockConfig+0x1d0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fa ff5e 	bl	8000c30 <HAL_InitTick>

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40022000 	.word	0x40022000
 8005d84:	40021000 	.word	0x40021000
 8005d88:	0800cb04 	.word	0x0800cb04
 8005d8c:	20000004 	.word	0x20000004
 8005d90:	20000008 	.word	0x20000008

08005d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d94:	b490      	push	{r4, r7}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d9a:	4b29      	ldr	r3, [pc, #164]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xac>)
 8005d9c:	1d3c      	adds	r4, r7, #4
 8005d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005da4:	f240 2301 	movw	r3, #513	; 0x201
 8005da8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	2300      	movs	r3, #0
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005dbe:	4b21      	ldr	r3, [pc, #132]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f003 030c 	and.w	r3, r3, #12
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d002      	beq.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d003      	beq.n	8005dda <HAL_RCC_GetSysClockFreq+0x46>
 8005dd2:	e02b      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dd4:	4b1c      	ldr	r3, [pc, #112]	; (8005e48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005dd6:	623b      	str	r3, [r7, #32]
      break;
 8005dd8:	e02b      	b.n	8005e32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	0c9b      	lsrs	r3, r3, #18
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	3328      	adds	r3, #40	; 0x28
 8005de4:	443b      	add	r3, r7
 8005de6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005dea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d012      	beq.n	8005e1c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005df6:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	0c5b      	lsrs	r3, r3, #17
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	3328      	adds	r3, #40	; 0x28
 8005e02:	443b      	add	r3, r7
 8005e04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	4a0e      	ldr	r2, [pc, #56]	; (8005e48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e0e:	fb03 f202 	mul.w	r2, r3, r2
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1a:	e004      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	4a0b      	ldr	r2, [pc, #44]	; (8005e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e20:	fb02 f303 	mul.w	r3, r2, r3
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	623b      	str	r3, [r7, #32]
      break;
 8005e2a:	e002      	b.n	8005e32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e2c:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e2e:	623b      	str	r3, [r7, #32]
      break;
 8005e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e32:	6a3b      	ldr	r3, [r7, #32]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3728      	adds	r7, #40	; 0x28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc90      	pop	{r4, r7}
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	0800caa8 	.word	0x0800caa8
 8005e44:	40021000 	.word	0x40021000
 8005e48:	007a1200 	.word	0x007a1200
 8005e4c:	003d0900 	.word	0x003d0900

08005e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e54:	4b02      	ldr	r3, [pc, #8]	; (8005e60 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e56:	681b      	ldr	r3, [r3, #0]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr
 8005e60:	20000004 	.word	0x20000004

08005e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e68:	f7ff fff2 	bl	8005e50 <HAL_RCC_GetHCLKFreq>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	4903      	ldr	r1, [pc, #12]	; (8005e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e7a:	5ccb      	ldrb	r3, [r1, r3]
 8005e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40021000 	.word	0x40021000
 8005e88:	0800cb14 	.word	0x0800cb14

08005e8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e94:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <RCC_Delay+0x34>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a0a      	ldr	r2, [pc, #40]	; (8005ec4 <RCC_Delay+0x38>)
 8005e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9e:	0a5b      	lsrs	r3, r3, #9
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ea8:	bf00      	nop
  }
  while (Delay --);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	1e5a      	subs	r2, r3, #1
 8005eae:	60fa      	str	r2, [r7, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1f9      	bne.n	8005ea8 <RCC_Delay+0x1c>
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	20000004 	.word	0x20000004
 8005ec4:	10624dd3 	.word	0x10624dd3

08005ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d07d      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ee8:	4b4f      	ldr	r3, [pc, #316]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10d      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef4:	4b4c      	ldr	r3, [pc, #304]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	4a4b      	ldr	r2, [pc, #300]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efe:	61d3      	str	r3, [r2, #28]
 8005f00:	4b49      	ldr	r3, [pc, #292]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f10:	4b46      	ldr	r3, [pc, #280]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d118      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f1c:	4b43      	ldr	r3, [pc, #268]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a42      	ldr	r2, [pc, #264]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f28:	f7fa fec4 	bl	8000cb4 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2e:	e008      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f30:	f7fa fec0 	bl	8000cb4 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b64      	cmp	r3, #100	; 0x64
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e06d      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f42:	4b3a      	ldr	r3, [pc, #232]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f4e:	4b36      	ldr	r3, [pc, #216]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d02e      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d027      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f6c:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f76:	4b2e      	ldr	r3, [pc, #184]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f7c:	4b2c      	ldr	r3, [pc, #176]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f82:	4a29      	ldr	r2, [pc, #164]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d014      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f92:	f7fa fe8f 	bl	8000cb4 <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f98:	e00a      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f9a:	f7fa fe8b 	bl	8000cb4 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e036      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb0:	4b1d      	ldr	r3, [pc, #116]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0ee      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fbc:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	4917      	ldr	r1, [pc, #92]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005fce:	7dfb      	ldrb	r3, [r7, #23]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d105      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd4:	4b14      	ldr	r3, [pc, #80]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	4a13      	ldr	r2, [pc, #76]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d008      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fec:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	490b      	ldr	r1, [pc, #44]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b00      	cmp	r3, #0
 8006008:	d008      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800600a:	4b07      	ldr	r3, [pc, #28]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	4904      	ldr	r1, [pc, #16]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006018:	4313      	orrs	r3, r2
 800601a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40021000 	.word	0x40021000
 800602c:	40007000 	.word	0x40007000
 8006030:	42420440 	.word	0x42420440

08006034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e041      	b.n	80060ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fa fce2 	bl	8000a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3304      	adds	r3, #4
 8006070:	4619      	mov	r1, r3
 8006072:	4610      	mov	r0, r2
 8006074:	f000 f8f2 	bl	800625c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_TIM_ConfigClockSource+0x18>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e0b3      	b.n	8006252 <HAL_TIM_ConfigClockSource+0x180>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006108:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006110:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006122:	d03e      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0xd0>
 8006124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006128:	f200 8087 	bhi.w	800623a <HAL_TIM_ConfigClockSource+0x168>
 800612c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006130:	f000 8085 	beq.w	800623e <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006138:	d87f      	bhi.n	800623a <HAL_TIM_ConfigClockSource+0x168>
 800613a:	2b70      	cmp	r3, #112	; 0x70
 800613c:	d01a      	beq.n	8006174 <HAL_TIM_ConfigClockSource+0xa2>
 800613e:	2b70      	cmp	r3, #112	; 0x70
 8006140:	d87b      	bhi.n	800623a <HAL_TIM_ConfigClockSource+0x168>
 8006142:	2b60      	cmp	r3, #96	; 0x60
 8006144:	d050      	beq.n	80061e8 <HAL_TIM_ConfigClockSource+0x116>
 8006146:	2b60      	cmp	r3, #96	; 0x60
 8006148:	d877      	bhi.n	800623a <HAL_TIM_ConfigClockSource+0x168>
 800614a:	2b50      	cmp	r3, #80	; 0x50
 800614c:	d03c      	beq.n	80061c8 <HAL_TIM_ConfigClockSource+0xf6>
 800614e:	2b50      	cmp	r3, #80	; 0x50
 8006150:	d873      	bhi.n	800623a <HAL_TIM_ConfigClockSource+0x168>
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	d058      	beq.n	8006208 <HAL_TIM_ConfigClockSource+0x136>
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d86f      	bhi.n	800623a <HAL_TIM_ConfigClockSource+0x168>
 800615a:	2b30      	cmp	r3, #48	; 0x30
 800615c:	d064      	beq.n	8006228 <HAL_TIM_ConfigClockSource+0x156>
 800615e:	2b30      	cmp	r3, #48	; 0x30
 8006160:	d86b      	bhi.n	800623a <HAL_TIM_ConfigClockSource+0x168>
 8006162:	2b20      	cmp	r3, #32
 8006164:	d060      	beq.n	8006228 <HAL_TIM_ConfigClockSource+0x156>
 8006166:	2b20      	cmp	r3, #32
 8006168:	d867      	bhi.n	800623a <HAL_TIM_ConfigClockSource+0x168>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d05c      	beq.n	8006228 <HAL_TIM_ConfigClockSource+0x156>
 800616e:	2b10      	cmp	r3, #16
 8006170:	d05a      	beq.n	8006228 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006172:	e062      	b.n	800623a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	6899      	ldr	r1, [r3, #8]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f000 f943 	bl	800640e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006196:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	609a      	str	r2, [r3, #8]
      break;
 80061a0:	e04e      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6899      	ldr	r1, [r3, #8]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f000 f92c 	bl	800640e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061c4:	609a      	str	r2, [r3, #8]
      break;
 80061c6:	e03b      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	6859      	ldr	r1, [r3, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	461a      	mov	r2, r3
 80061d6:	f000 f8a3 	bl	8006320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2150      	movs	r1, #80	; 0x50
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 f8fa 	bl	80063da <TIM_ITRx_SetConfig>
      break;
 80061e6:	e02b      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6859      	ldr	r1, [r3, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	461a      	mov	r2, r3
 80061f6:	f000 f8c1 	bl	800637c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2160      	movs	r1, #96	; 0x60
 8006200:	4618      	mov	r0, r3
 8006202:	f000 f8ea 	bl	80063da <TIM_ITRx_SetConfig>
      break;
 8006206:	e01b      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6859      	ldr	r1, [r3, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	461a      	mov	r2, r3
 8006216:	f000 f883 	bl	8006320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2140      	movs	r1, #64	; 0x40
 8006220:	4618      	mov	r0, r3
 8006222:	f000 f8da 	bl	80063da <TIM_ITRx_SetConfig>
      break;
 8006226:	e00b      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4619      	mov	r1, r3
 8006232:	4610      	mov	r0, r2
 8006234:	f000 f8d1 	bl	80063da <TIM_ITRx_SetConfig>
        break;
 8006238:	e002      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800623a:	bf00      	nop
 800623c:	e000      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800623e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a29      	ldr	r2, [pc, #164]	; (8006314 <TIM_Base_SetConfig+0xb8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00b      	beq.n	800628c <TIM_Base_SetConfig+0x30>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627a:	d007      	beq.n	800628c <TIM_Base_SetConfig+0x30>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a26      	ldr	r2, [pc, #152]	; (8006318 <TIM_Base_SetConfig+0xbc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d003      	beq.n	800628c <TIM_Base_SetConfig+0x30>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a25      	ldr	r2, [pc, #148]	; (800631c <TIM_Base_SetConfig+0xc0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d108      	bne.n	800629e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a1c      	ldr	r2, [pc, #112]	; (8006314 <TIM_Base_SetConfig+0xb8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00b      	beq.n	80062be <TIM_Base_SetConfig+0x62>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ac:	d007      	beq.n	80062be <TIM_Base_SetConfig+0x62>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a19      	ldr	r2, [pc, #100]	; (8006318 <TIM_Base_SetConfig+0xbc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d003      	beq.n	80062be <TIM_Base_SetConfig+0x62>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a18      	ldr	r2, [pc, #96]	; (800631c <TIM_Base_SetConfig+0xc0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d108      	bne.n	80062d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a07      	ldr	r2, [pc, #28]	; (8006314 <TIM_Base_SetConfig+0xb8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d103      	bne.n	8006304 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	615a      	str	r2, [r3, #20]
}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800

08006320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f023 0201 	bic.w	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800634a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f023 030a 	bic.w	r3, r3, #10
 800635c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr

0800637c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f023 0210 	bic.w	r2, r3, #16
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	031b      	lsls	r3, r3, #12
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	621a      	str	r2, [r3, #32]
}
 80063d0:	bf00      	nop
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr

080063da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f043 0307 	orr.w	r3, r3, #7
 80063fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	609a      	str	r2, [r3, #8]
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr

0800640e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800640e:	b480      	push	{r7}
 8006410:	b087      	sub	sp, #28
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	607a      	str	r2, [r7, #4]
 800641a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006428:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	021a      	lsls	r2, r3, #8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	431a      	orrs	r2, r3
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	4313      	orrs	r3, r2
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	609a      	str	r2, [r3, #8]
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr

0800644c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006460:	2302      	movs	r3, #2
 8006462:	e046      	b.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a16      	ldr	r2, [pc, #88]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b0:	d009      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a12      	ldr	r2, [pc, #72]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a10      	ldr	r2, [pc, #64]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d10c      	bne.n	80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bc80      	pop	{r7}
 80064fa:	4770      	bx	lr
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	40000400 	.word	0x40000400
 8006504:	40000800 	.word	0x40000800

08006508 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006508:	b084      	sub	sp, #16
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	f107 0014 	add.w	r0, r7, #20
 8006516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	b004      	add	sp, #16
 8006526:	4770      	bx	lr

08006528 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006538:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800653c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	b29a      	uxth	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	bc80      	pop	{r7}
 8006552:	4770      	bx	lr

08006554 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800655c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006560:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	b29b      	uxth	r3, r3
 800656e:	43db      	mvns	r3, r3
 8006570:	b29b      	uxth	r3, r3
 8006572:	4013      	ands	r3, r2
 8006574:	b29a      	uxth	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr

08006588 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr

080065a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065a0:	b084      	sub	sp, #16
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	f107 0014 	add.w	r0, r7, #20
 80065ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	bc80      	pop	{r7}
 80065dc:	b004      	add	sp, #16
 80065de:	4770      	bx	lr

080065e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b09b      	sub	sp, #108	; 0x6c
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006606:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	78db      	ldrb	r3, [r3, #3]
 800660e:	2b03      	cmp	r3, #3
 8006610:	d81f      	bhi.n	8006652 <USB_ActivateEndpoint+0x72>
 8006612:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <USB_ActivateEndpoint+0x38>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	08006629 	.word	0x08006629
 800661c:	08006645 	.word	0x08006645
 8006620:	0800665b 	.word	0x0800665b
 8006624:	08006637 	.word	0x08006637
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006628:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800662c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006630:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006634:	e012      	b.n	800665c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006636:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800663a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800663e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006642:	e00b      	b.n	800665c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006644:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800664c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006650:	e004      	b.n	800665c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006658:	e000      	b.n	800665c <USB_ActivateEndpoint+0x7c>
      break;
 800665a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800666a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800666e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667a:	b29b      	uxth	r3, r3
 800667c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006694:	b29a      	uxth	r2, r3
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	b29b      	uxth	r3, r3
 800669c:	4313      	orrs	r3, r2
 800669e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80066b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	7b1b      	ldrb	r3, [r3, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f040 8149 	bne.w	8006960 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8084 	beq.w	80067e0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	4413      	add	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	011a      	lsls	r2, r3, #4
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066fa:	613b      	str	r3, [r7, #16]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	88db      	ldrh	r3, [r3, #6]
 8006700:	085b      	lsrs	r3, r3, #1
 8006702:	b29b      	uxth	r3, r3
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	81fb      	strh	r3, [r7, #14]
 800671a:	89fb      	ldrh	r3, [r7, #14]
 800671c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01b      	beq.n	800675c <USB_ActivateEndpoint+0x17c>
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673a:	81bb      	strh	r3, [r7, #12]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	441a      	add	r2, r3
 8006746:	89bb      	ldrh	r3, [r7, #12]
 8006748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006754:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006758:	b29b      	uxth	r3, r3
 800675a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	78db      	ldrb	r3, [r3, #3]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d020      	beq.n	80067a6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800677a:	813b      	strh	r3, [r7, #8]
 800677c:	893b      	ldrh	r3, [r7, #8]
 800677e:	f083 0320 	eor.w	r3, r3, #32
 8006782:	813b      	strh	r3, [r7, #8]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	441a      	add	r2, r3
 800678e:	893b      	ldrh	r3, [r7, #8]
 8006790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	8013      	strh	r3, [r2, #0]
 80067a4:	e27f      	b.n	8006ca6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067bc:	817b      	strh	r3, [r7, #10]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	441a      	add	r2, r3
 80067c8:	897b      	ldrh	r3, [r7, #10]
 80067ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067da:	b29b      	uxth	r3, r3
 80067dc:	8013      	strh	r3, [r2, #0]
 80067de:	e262      	b.n	8006ca6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	4413      	add	r3, r2
 80067f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	011a      	lsls	r2, r3, #4
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	88db      	ldrh	r3, [r3, #6]
 8006808:	085b      	lsrs	r3, r3, #1
 800680a:	b29b      	uxth	r3, r3
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006812:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681e:	b29b      	uxth	r3, r3
 8006820:	461a      	mov	r2, r3
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	4413      	add	r3, r2
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	011a      	lsls	r2, r3, #4
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	4413      	add	r3, r2
 8006832:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006836:	623b      	str	r3, [r7, #32]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d112      	bne.n	8006866 <USB_ActivateEndpoint+0x286>
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29b      	uxth	r3, r3
 8006846:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800684a:	b29a      	uxth	r2, r3
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	801a      	strh	r2, [r3, #0]
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800685a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685e:	b29a      	uxth	r2, r3
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	801a      	strh	r2, [r3, #0]
 8006864:	e02f      	b.n	80068c6 <USB_ActivateEndpoint+0x2e6>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b3e      	cmp	r3, #62	; 0x3e
 800686c:	d813      	bhi.n	8006896 <USB_ActivateEndpoint+0x2b6>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	085b      	lsrs	r3, r3, #1
 8006874:	663b      	str	r3, [r7, #96]	; 0x60
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <USB_ActivateEndpoint+0x2a8>
 8006882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006884:	3301      	adds	r3, #1
 8006886:	663b      	str	r3, [r7, #96]	; 0x60
 8006888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800688a:	b29b      	uxth	r3, r3
 800688c:	029b      	lsls	r3, r3, #10
 800688e:	b29a      	uxth	r2, r3
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	801a      	strh	r2, [r3, #0]
 8006894:	e017      	b.n	80068c6 <USB_ActivateEndpoint+0x2e6>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	663b      	str	r3, [r7, #96]	; 0x60
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 031f 	and.w	r3, r3, #31
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d102      	bne.n	80068b0 <USB_ActivateEndpoint+0x2d0>
 80068aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ac:	3b01      	subs	r3, #1
 80068ae:	663b      	str	r3, [r7, #96]	; 0x60
 80068b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	029b      	lsls	r3, r3, #10
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	83fb      	strh	r3, [r7, #30]
 80068d4:	8bfb      	ldrh	r3, [r7, #30]
 80068d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01b      	beq.n	8006916 <USB_ActivateEndpoint+0x336>
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f4:	83bb      	strh	r3, [r7, #28]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	441a      	add	r2, r3
 8006900:	8bbb      	ldrh	r3, [r7, #28]
 8006902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800690a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800690e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006912:	b29b      	uxth	r3, r3
 8006914:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692c:	837b      	strh	r3, [r7, #26]
 800692e:	8b7b      	ldrh	r3, [r7, #26]
 8006930:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006934:	837b      	strh	r3, [r7, #26]
 8006936:	8b7b      	ldrh	r3, [r7, #26]
 8006938:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800693c:	837b      	strh	r3, [r7, #26]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	441a      	add	r2, r3
 8006948:	8b7b      	ldrh	r3, [r7, #26]
 800694a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695a:	b29b      	uxth	r3, r3
 800695c:	8013      	strh	r3, [r2, #0]
 800695e:	e1a2      	b.n	8006ca6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006976:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	441a      	add	r2, r3
 8006984:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006990:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006998:	b29b      	uxth	r3, r3
 800699a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	65bb      	str	r3, [r7, #88]	; 0x58
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069ac:	4413      	add	r3, r2
 80069ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	011a      	lsls	r2, r3, #4
 80069b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069be:	657b      	str	r3, [r7, #84]	; 0x54
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	891b      	ldrh	r3, [r3, #8]
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ce:	801a      	strh	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	653b      	str	r3, [r7, #80]	; 0x50
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069da:	b29b      	uxth	r3, r3
 80069dc:	461a      	mov	r2, r3
 80069de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e0:	4413      	add	r3, r2
 80069e2:	653b      	str	r3, [r7, #80]	; 0x50
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	011a      	lsls	r2, r3, #4
 80069ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80069f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	895b      	ldrh	r3, [r3, #10]
 80069f8:	085b      	lsrs	r3, r3, #1
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a02:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	785b      	ldrb	r3, [r3, #1]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f040 8091 	bne.w	8006b30 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006a1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01b      	beq.n	8006a5e <USB_ActivateEndpoint+0x47e>
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	441a      	add	r2, r3
 8006a48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	873b      	strh	r3, [r7, #56]	; 0x38
 8006a6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d01b      	beq.n	8006aae <USB_ActivateEndpoint+0x4ce>
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	441a      	add	r2, r3
 8006a98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006ac6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ac8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006acc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006ace:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ad0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ad4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b0c:	867b      	strh	r3, [r7, #50]	; 0x32
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	441a      	add	r2, r3
 8006b18:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	8013      	strh	r3, [r2, #0]
 8006b2e:	e0ba      	b.n	8006ca6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006b40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01d      	beq.n	8006b88 <USB_ActivateEndpoint+0x5a8>
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	441a      	add	r2, r3
 8006b70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006b98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01d      	beq.n	8006be0 <USB_ActivateEndpoint+0x600>
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	441a      	add	r2, r3
 8006bc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	78db      	ldrb	r3, [r3, #3]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d024      	beq.n	8006c32 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006c02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c06:	f083 0320 	eor.w	r3, r3, #32
 8006c0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	441a      	add	r2, r3
 8006c18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	8013      	strh	r3, [r2, #0]
 8006c30:	e01d      	b.n	8006c6e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c84:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	441a      	add	r2, r3
 8006c90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006ca6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	376c      	adds	r7, #108	; 0x6c
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b08d      	sub	sp, #52	; 0x34
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	7b1b      	ldrb	r3, [r3, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 808e 	bne.w	8006de4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d044      	beq.n	8006d5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	81bb      	strh	r3, [r7, #12]
 8006cde:	89bb      	ldrh	r3, [r7, #12]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01b      	beq.n	8006d20 <USB_DeactivateEndpoint+0x6c>
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	817b      	strh	r3, [r7, #10]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	897b      	ldrh	r3, [r7, #10]
 8006d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d36:	813b      	strh	r3, [r7, #8]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	893b      	ldrh	r3, [r7, #8]
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]
 8006d58:	e192      	b.n	8007080 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	827b      	strh	r3, [r7, #18]
 8006d68:	8a7b      	ldrh	r3, [r7, #18]
 8006d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01b      	beq.n	8006daa <USB_DeactivateEndpoint+0xf6>
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d88:	823b      	strh	r3, [r7, #16]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	441a      	add	r2, r3
 8006d94:	8a3b      	ldrh	r3, [r7, #16]
 8006d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc0:	81fb      	strh	r3, [r7, #14]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	89fb      	ldrh	r3, [r7, #14]
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]
 8006de2:	e14d      	b.n	8007080 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f040 80a5 	bne.w	8006f38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	843b      	strh	r3, [r7, #32]
 8006dfc:	8c3b      	ldrh	r3, [r7, #32]
 8006dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01b      	beq.n	8006e3e <USB_DeactivateEndpoint+0x18a>
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1c:	83fb      	strh	r3, [r7, #30]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	441a      	add	r2, r3
 8006e28:	8bfb      	ldrh	r3, [r7, #30]
 8006e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	83bb      	strh	r3, [r7, #28]
 8006e4c:	8bbb      	ldrh	r3, [r7, #28]
 8006e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d01b      	beq.n	8006e8e <USB_DeactivateEndpoint+0x1da>
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6c:	837b      	strh	r3, [r7, #26]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	441a      	add	r2, r3
 8006e78:	8b7b      	ldrh	r3, [r7, #26]
 8006e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea4:	833b      	strh	r3, [r7, #24]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	441a      	add	r2, r3
 8006eb0:	8b3b      	ldrh	r3, [r7, #24]
 8006eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ebe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006edc:	82fb      	strh	r3, [r7, #22]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	441a      	add	r2, r3
 8006ee8:	8afb      	ldrh	r3, [r7, #22]
 8006eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f14:	82bb      	strh	r3, [r7, #20]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	441a      	add	r2, r3
 8006f20:	8abb      	ldrh	r3, [r7, #20]
 8006f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	8013      	strh	r3, [r2, #0]
 8006f36:	e0a3      	b.n	8007080 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006f46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d01b      	beq.n	8006f88 <USB_DeactivateEndpoint+0x2d4>
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	441a      	add	r2, r3
 8006f72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006f96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01b      	beq.n	8006fd8 <USB_DeactivateEndpoint+0x324>
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb6:	853b      	strh	r3, [r7, #40]	; 0x28
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	441a      	add	r2, r3
 8006fc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	441a      	add	r2, r3
 8006ffa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700c:	b29b      	uxth	r3, r3
 800700e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007026:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	441a      	add	r2, r3
 8007032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800703c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007044:	b29b      	uxth	r3, r3
 8007046:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3734      	adds	r7, #52	; 0x34
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr

0800708c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b0cc      	sub	sp, #304	; 0x130
 8007090:	af00      	add	r7, sp, #0
 8007092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800709a:	6018      	str	r0, [r3, #0]
 800709c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	785b      	ldrb	r3, [r3, #1]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	f041 817d 	bne.w	80083b2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80070b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d908      	bls.n	80070e6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80070d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80070e4:	e007      	b.n	80070f6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80070e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80070f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	7b1b      	ldrb	r3, [r3, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d152      	bne.n	80071ac <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6959      	ldr	r1, [r3, #20]
 8007112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	88da      	ldrh	r2, [r3, #6]
 800711e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007122:	b29b      	uxth	r3, r3
 8007124:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007128:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800712c:	6800      	ldr	r0, [r0, #0]
 800712e:	f001 ff23 	bl	8008f78 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007136:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800713a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800713e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007154:	b29b      	uxth	r3, r3
 8007156:	4619      	mov	r1, r3
 8007158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007160:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007164:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007168:	6812      	ldr	r2, [r2, #0]
 800716a:	440a      	add	r2, r1
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	011a      	lsls	r2, r3, #4
 800717c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007180:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4413      	add	r3, r2
 8007188:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800718c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007190:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719a:	b29a      	uxth	r2, r3
 800719c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	f001 b8b5 	b.w	8008316 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80071ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	78db      	ldrb	r3, [r3, #3]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	f040 84c6 	bne.w	8007b4a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80071be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6a1a      	ldr	r2, [r3, #32]
 80071ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	f240 8443 	bls.w	8007a62 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80071dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007202:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	441a      	add	r2, r3
 8007220:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800722c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007234:	b29b      	uxth	r3, r3
 8007236:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6a1a      	ldr	r2, [r3, #32]
 8007244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007248:	1ad2      	subs	r2, r2, r3
 800724a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 823e 	beq.w	80076fa <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800727e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007282:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007286:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800728a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800728e:	6812      	ldr	r2, [r2, #0]
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	785b      	ldrb	r3, [r3, #1]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f040 809a 	bne.w	80073d8 <USB_EPStartXfer+0x34c>
 80072a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072b0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	4619      	mov	r1, r3
 80072ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072d6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	440a      	add	r2, r1
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	011a      	lsls	r2, r3, #4
 80072ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4413      	add	r3, r2
 80072fa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80072fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007302:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800730c:	2b00      	cmp	r3, #0
 800730e:	d122      	bne.n	8007356 <USB_EPStartXfer+0x2ca>
 8007310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007314:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007322:	b29a      	uxth	r2, r3
 8007324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007328:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	801a      	strh	r2, [r3, #0]
 8007330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007334:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007346:	b29a      	uxth	r2, r3
 8007348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	801a      	strh	r2, [r3, #0]
 8007354:	e079      	b.n	800744a <USB_EPStartXfer+0x3be>
 8007356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800735a:	2b3e      	cmp	r3, #62	; 0x3e
 800735c:	d81b      	bhi.n	8007396 <USB_EPStartXfer+0x30a>
 800735e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007362:	085b      	lsrs	r3, r3, #1
 8007364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d004      	beq.n	800737e <USB_EPStartXfer+0x2f2>
 8007374:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007378:	3301      	adds	r3, #1
 800737a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800737e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007382:	b29b      	uxth	r3, r3
 8007384:	029b      	lsls	r3, r3, #10
 8007386:	b29a      	uxth	r2, r3
 8007388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	801a      	strh	r2, [r3, #0]
 8007394:	e059      	b.n	800744a <USB_EPStartXfer+0x3be>
 8007396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80073a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a4:	f003 031f 	and.w	r3, r3, #31
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <USB_EPStartXfer+0x32a>
 80073ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073b0:	3b01      	subs	r3, #1
 80073b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80073b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	029b      	lsls	r3, r3, #10
 80073be:	b29b      	uxth	r3, r3
 80073c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	e038      	b.n	800744a <USB_EPStartXfer+0x3be>
 80073d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	785b      	ldrb	r3, [r3, #1]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d130      	bne.n	800744a <USB_EPStartXfer+0x3be>
 80073e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	4619      	mov	r1, r3
 80073fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007402:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007406:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800740a:	6812      	ldr	r2, [r2, #0]
 800740c:	440a      	add	r2, r1
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	011a      	lsls	r2, r3, #4
 800741e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007422:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4413      	add	r3, r2
 800742a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800742e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800743c:	b29a      	uxth	r2, r3
 800743e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800744a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	895b      	ldrh	r3, [r3, #10]
 8007456:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800745a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6959      	ldr	r1, [r3, #20]
 8007466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746a:	b29b      	uxth	r3, r3
 800746c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007470:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007474:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007478:	6800      	ldr	r0, [r0, #0]
 800747a:	f001 fd7d 	bl	8008f78 <USB_WritePMA>
            ep->xfer_buff += len;
 800747e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695a      	ldr	r2, [r3, #20]
 800748a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748e:	441a      	add	r2, r3
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800749c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6a1a      	ldr	r2, [r3, #32]
 80074a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d90f      	bls.n	80074d8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80074b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6a1a      	ldr	r2, [r3, #32]
 80074c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c8:	1ad2      	subs	r2, r2, r3
 80074ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	621a      	str	r2, [r3, #32]
 80074d6:	e00e      	b.n	80074f6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80074d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80074e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2200      	movs	r2, #0
 80074f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f040 809a 	bne.w	800763c <USB_EPStartXfer+0x5b0>
 8007508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007510:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007514:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007518:	6812      	ldr	r2, [r2, #0]
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007520:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800752a:	b29b      	uxth	r3, r3
 800752c:	4619      	mov	r1, r3
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007536:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800753a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	440a      	add	r2, r1
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	011a      	lsls	r2, r3, #4
 8007552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007556:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4413      	add	r3, r2
 800755e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007566:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007570:	2b00      	cmp	r3, #0
 8007572:	d122      	bne.n	80075ba <USB_EPStartXfer+0x52e>
 8007574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007578:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007586:	b29a      	uxth	r2, r3
 8007588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007598:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	e083      	b.n	80076c2 <USB_EPStartXfer+0x636>
 80075ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075be:	2b3e      	cmp	r3, #62	; 0x3e
 80075c0:	d81b      	bhi.n	80075fa <USB_EPStartXfer+0x56e>
 80075c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c6:	085b      	lsrs	r3, r3, #1
 80075c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80075cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <USB_EPStartXfer+0x556>
 80075d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075dc:	3301      	adds	r3, #1
 80075de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80075e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	029b      	lsls	r3, r3, #10
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	801a      	strh	r2, [r3, #0]
 80075f8:	e063      	b.n	80076c2 <USB_EPStartXfer+0x636>
 80075fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007608:	f003 031f 	and.w	r3, r3, #31
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <USB_EPStartXfer+0x58e>
 8007610:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007614:	3b01      	subs	r3, #1
 8007616:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800761a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800761e:	b29b      	uxth	r3, r3
 8007620:	029b      	lsls	r3, r3, #10
 8007622:	b29b      	uxth	r3, r3
 8007624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800762c:	b29a      	uxth	r2, r3
 800762e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007632:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	801a      	strh	r2, [r3, #0]
 800763a:	e042      	b.n	80076c2 <USB_EPStartXfer+0x636>
 800763c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d13a      	bne.n	80076c2 <USB_EPStartXfer+0x636>
 800764c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007650:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007654:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007658:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800765c:	6812      	ldr	r2, [r2, #0]
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766e:	b29b      	uxth	r3, r3
 8007670:	4619      	mov	r1, r3
 8007672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007676:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800767a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800767e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	440a      	add	r2, r1
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	011a      	lsls	r2, r3, #4
 8007696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4413      	add	r3, r2
 80076a2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80076a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	891b      	ldrh	r3, [r3, #8]
 80076ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6959      	ldr	r1, [r3, #20]
 80076de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076e8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076ec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076f0:	6800      	ldr	r0, [r0, #0]
 80076f2:	f001 fc41 	bl	8008f78 <USB_WritePMA>
 80076f6:	f000 be0e 	b.w	8008316 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	785b      	ldrb	r3, [r3, #1]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d16d      	bne.n	80077e6 <USB_EPStartXfer+0x75a>
 800770a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	64bb      	str	r3, [r7, #72]	; 0x48
 8007716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007724:	b29b      	uxth	r3, r3
 8007726:	461a      	mov	r2, r3
 8007728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800772a:	4413      	add	r3, r2
 800772c:	64bb      	str	r3, [r7, #72]	; 0x48
 800772e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007732:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	011a      	lsls	r2, r3, #4
 800773c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773e:	4413      	add	r3, r2
 8007740:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007744:	647b      	str	r3, [r7, #68]	; 0x44
 8007746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d112      	bne.n	8007774 <USB_EPStartXfer+0x6e8>
 800774e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	b29b      	uxth	r3, r3
 8007754:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007758:	b29a      	uxth	r2, r3
 800775a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800775c:	801a      	strh	r2, [r3, #0]
 800775e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	b29b      	uxth	r3, r3
 8007764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776c:	b29a      	uxth	r2, r3
 800776e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007770:	801a      	strh	r2, [r3, #0]
 8007772:	e063      	b.n	800783c <USB_EPStartXfer+0x7b0>
 8007774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007778:	2b3e      	cmp	r3, #62	; 0x3e
 800777a:	d817      	bhi.n	80077ac <USB_EPStartXfer+0x720>
 800777c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007780:	085b      	lsrs	r3, r3, #1
 8007782:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <USB_EPStartXfer+0x710>
 8007792:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007796:	3301      	adds	r3, #1
 8007798:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800779c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	029b      	lsls	r3, r3, #10
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077a8:	801a      	strh	r2, [r3, #0]
 80077aa:	e047      	b.n	800783c <USB_EPStartXfer+0x7b0>
 80077ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b0:	095b      	lsrs	r3, r3, #5
 80077b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80077b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ba:	f003 031f 	and.w	r3, r3, #31
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d104      	bne.n	80077cc <USB_EPStartXfer+0x740>
 80077c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077c6:	3b01      	subs	r3, #1
 80077c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80077cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	029b      	lsls	r3, r3, #10
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077de:	b29a      	uxth	r2, r3
 80077e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	e02a      	b.n	800783c <USB_EPStartXfer+0x7b0>
 80077e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d122      	bne.n	800783c <USB_EPStartXfer+0x7b0>
 80077f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	653b      	str	r3, [r7, #80]	; 0x50
 8007802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007806:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007810:	b29b      	uxth	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007816:	4413      	add	r3, r2
 8007818:	653b      	str	r3, [r7, #80]	; 0x50
 800781a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	011a      	lsls	r2, r3, #4
 8007828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800782a:	4413      	add	r3, r2
 800782c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007836:	b29a      	uxth	r2, r3
 8007838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800783a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800783c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	891b      	ldrh	r3, [r3, #8]
 8007848:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800784c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6959      	ldr	r1, [r3, #20]
 8007858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800785c:	b29b      	uxth	r3, r3
 800785e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007862:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007866:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800786a:	6800      	ldr	r0, [r0, #0]
 800786c:	f001 fb84 	bl	8008f78 <USB_WritePMA>
            ep->xfer_buff += len;
 8007870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007880:	441a      	add	r2, r3
 8007882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800788e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6a1a      	ldr	r2, [r3, #32]
 800789a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d90f      	bls.n	80078ca <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80078aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6a1a      	ldr	r2, [r3, #32]
 80078b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ba:	1ad2      	subs	r2, r2, r3
 80078bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	621a      	str	r2, [r3, #32]
 80078c8:	e00e      	b.n	80078e8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80078ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80078da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2200      	movs	r2, #0
 80078e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	643b      	str	r3, [r7, #64]	; 0x40
 80078f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d16d      	bne.n	80079e0 <USB_EPStartXfer+0x954>
 8007904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791e:	b29b      	uxth	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	4413      	add	r3, r2
 8007926:	63bb      	str	r3, [r7, #56]	; 0x38
 8007928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	011a      	lsls	r2, r3, #4
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	4413      	add	r3, r2
 800793a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800793e:	637b      	str	r3, [r7, #52]	; 0x34
 8007940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d112      	bne.n	800796e <USB_EPStartXfer+0x8e2>
 8007948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007952:	b29a      	uxth	r2, r3
 8007954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007966:	b29a      	uxth	r2, r3
 8007968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796a:	801a      	strh	r2, [r3, #0]
 800796c:	e05d      	b.n	8007a2a <USB_EPStartXfer+0x99e>
 800796e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007972:	2b3e      	cmp	r3, #62	; 0x3e
 8007974:	d817      	bhi.n	80079a6 <USB_EPStartXfer+0x91a>
 8007976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797a:	085b      	lsrs	r3, r3, #1
 800797c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <USB_EPStartXfer+0x90a>
 800798c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007990:	3301      	adds	r3, #1
 8007992:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007996:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800799a:	b29b      	uxth	r3, r3
 800799c:	029b      	lsls	r3, r3, #10
 800799e:	b29a      	uxth	r2, r3
 80079a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a2:	801a      	strh	r2, [r3, #0]
 80079a4:	e041      	b.n	8007a2a <USB_EPStartXfer+0x99e>
 80079a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079aa:	095b      	lsrs	r3, r3, #5
 80079ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80079b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b4:	f003 031f 	and.w	r3, r3, #31
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d104      	bne.n	80079c6 <USB_EPStartXfer+0x93a>
 80079bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80079c0:	3b01      	subs	r3, #1
 80079c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80079c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d8:	b29a      	uxth	r2, r3
 80079da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	e024      	b.n	8007a2a <USB_EPStartXfer+0x99e>
 80079e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	785b      	ldrb	r3, [r3, #1]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d11c      	bne.n	8007a2a <USB_EPStartXfer+0x99e>
 80079f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a04:	4413      	add	r3, r2
 8007a06:	643b      	str	r3, [r7, #64]	; 0x40
 8007a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	011a      	lsls	r2, r3, #4
 8007a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a18:	4413      	add	r3, r2
 8007a1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	895b      	ldrh	r3, [r3, #10]
 8007a36:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6959      	ldr	r1, [r3, #20]
 8007a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a50:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a54:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a58:	6800      	ldr	r0, [r0, #0]
 8007a5a:	f001 fa8d 	bl	8008f78 <USB_WritePMA>
 8007a5e:	f000 bc5a 	b.w	8008316 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a98:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	441a      	add	r2, r3
 8007ab6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ade:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	461a      	mov	r2, r3
 8007aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aee:	4413      	add	r3, r2
 8007af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	011a      	lsls	r2, r3, #4
 8007b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b02:	4413      	add	r3, r2
 8007b04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b08:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	891b      	ldrh	r3, [r3, #8]
 8007b20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6959      	ldr	r1, [r3, #20]
 8007b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b3a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b3e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b42:	6800      	ldr	r0, [r0, #0]
 8007b44:	f001 fa18 	bl	8008f78 <USB_WritePMA>
 8007b48:	e3e5      	b.n	8008316 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b70:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	441a      	add	r2, r3
 8007b8e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b9a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6a1a      	ldr	r2, [r3, #32]
 8007bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 81bc 	beq.w	8007f64 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	785b      	ldrb	r3, [r3, #1]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d16d      	bne.n	8007ce6 <USB_EPStartXfer+0xc5a>
 8007c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	461a      	mov	r2, r3
 8007c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c2a:	4413      	add	r3, r2
 8007c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	011a      	lsls	r2, r3, #4
 8007c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c3e:	4413      	add	r3, r2
 8007c40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c44:	677b      	str	r3, [r7, #116]	; 0x74
 8007c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d112      	bne.n	8007c74 <USB_EPStartXfer+0xbe8>
 8007c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c5c:	801a      	strh	r2, [r3, #0]
 8007c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c70:	801a      	strh	r2, [r3, #0]
 8007c72:	e060      	b.n	8007d36 <USB_EPStartXfer+0xcaa>
 8007c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c78:	2b3e      	cmp	r3, #62	; 0x3e
 8007c7a:	d817      	bhi.n	8007cac <USB_EPStartXfer+0xc20>
 8007c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c80:	085b      	lsrs	r3, r3, #1
 8007c82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d004      	beq.n	8007c9c <USB_EPStartXfer+0xc10>
 8007c92:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c96:	3301      	adds	r3, #1
 8007c98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	029b      	lsls	r3, r3, #10
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	e044      	b.n	8007d36 <USB_EPStartXfer+0xcaa>
 8007cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb0:	095b      	lsrs	r3, r3, #5
 8007cb2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cba:	f003 031f 	and.w	r3, r3, #31
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d104      	bne.n	8007ccc <USB_EPStartXfer+0xc40>
 8007cc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ccc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	029b      	lsls	r3, r3, #10
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	e027      	b.n	8007d36 <USB_EPStartXfer+0xcaa>
 8007ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d11f      	bne.n	8007d36 <USB_EPStartXfer+0xcaa>
 8007cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	461a      	mov	r2, r3
 8007d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	011a      	lsls	r2, r3, #4
 8007d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d24:	4413      	add	r3, r2
 8007d26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	895b      	ldrh	r3, [r3, #10]
 8007d42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6959      	ldr	r1, [r3, #20]
 8007d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d64:	6800      	ldr	r0, [r0, #0]
 8007d66:	f001 f907 	bl	8008f78 <USB_WritePMA>
          ep->xfer_buff += len;
 8007d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	695a      	ldr	r2, [r3, #20]
 8007d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d7a:	441a      	add	r2, r3
 8007d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6a1a      	ldr	r2, [r3, #32]
 8007d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d90f      	bls.n	8007dc4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6a1a      	ldr	r2, [r3, #32]
 8007db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db4:	1ad2      	subs	r2, r2, r3
 8007db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	621a      	str	r2, [r3, #32]
 8007dc2:	e00e      	b.n	8007de2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2200      	movs	r2, #0
 8007de0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 8295 	beq.w	8008316 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	785b      	ldrb	r3, [r3, #1]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d16d      	bne.n	8007ed8 <USB_EPStartXfer+0xe4c>
 8007dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e1c:	4413      	add	r3, r2
 8007e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	011a      	lsls	r2, r3, #4
 8007e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e30:	4413      	add	r3, r2
 8007e32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e36:	667b      	str	r3, [r7, #100]	; 0x64
 8007e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d112      	bne.n	8007e66 <USB_EPStartXfer+0xdda>
 8007e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e4e:	801a      	strh	r2, [r3, #0]
 8007e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e62:	801a      	strh	r2, [r3, #0]
 8007e64:	e063      	b.n	8007f2e <USB_EPStartXfer+0xea2>
 8007e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e6c:	d817      	bhi.n	8007e9e <USB_EPStartXfer+0xe12>
 8007e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e72:	085b      	lsrs	r3, r3, #1
 8007e74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <USB_EPStartXfer+0xe02>
 8007e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e88:	3301      	adds	r3, #1
 8007e8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	029b      	lsls	r3, r3, #10
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e9a:	801a      	strh	r2, [r3, #0]
 8007e9c:	e047      	b.n	8007f2e <USB_EPStartXfer+0xea2>
 8007e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d104      	bne.n	8007ebe <USB_EPStartXfer+0xe32>
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	029b      	lsls	r3, r3, #10
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ed4:	801a      	strh	r2, [r3, #0]
 8007ed6:	e02a      	b.n	8007f2e <USB_EPStartXfer+0xea2>
 8007ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	785b      	ldrb	r3, [r3, #1]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d122      	bne.n	8007f2e <USB_EPStartXfer+0xea2>
 8007ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8007ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f08:	4413      	add	r3, r2
 8007f0a:	673b      	str	r3, [r7, #112]	; 0x70
 8007f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	011a      	lsls	r2, r3, #4
 8007f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	891b      	ldrh	r3, [r3, #8]
 8007f3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6959      	ldr	r1, [r3, #20]
 8007f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f54:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f58:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	f001 f80b 	bl	8008f78 <USB_WritePMA>
 8007f62:	e1d8      	b.n	8008316 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	785b      	ldrb	r3, [r3, #1]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d178      	bne.n	8008066 <USB_EPStartXfer+0xfda>
 8007f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	461a      	mov	r2, r3
 8007f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f98:	4413      	add	r3, r2
 8007f9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	011a      	lsls	r2, r3, #4
 8007fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d116      	bne.n	8007ff0 <USB_EPStartXfer+0xf64>
 8007fc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fd4:	801a      	strh	r2, [r3, #0]
 8007fd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fec:	801a      	strh	r2, [r3, #0]
 8007fee:	e06b      	b.n	80080c8 <USB_EPStartXfer+0x103c>
 8007ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ff6:	d818      	bhi.n	800802a <USB_EPStartXfer+0xf9e>
 8007ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffc:	085b      	lsrs	r3, r3, #1
 8007ffe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d004      	beq.n	8008018 <USB_EPStartXfer+0xf8c>
 800800e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008012:	3301      	adds	r3, #1
 8008014:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008018:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800801c:	b29b      	uxth	r3, r3
 800801e:	029b      	lsls	r3, r3, #10
 8008020:	b29a      	uxth	r2, r3
 8008022:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008026:	801a      	strh	r2, [r3, #0]
 8008028:	e04e      	b.n	80080c8 <USB_EPStartXfer+0x103c>
 800802a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008038:	f003 031f 	and.w	r3, r3, #31
 800803c:	2b00      	cmp	r3, #0
 800803e:	d104      	bne.n	800804a <USB_EPStartXfer+0xfbe>
 8008040:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008044:	3b01      	subs	r3, #1
 8008046:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800804a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800804e:	b29b      	uxth	r3, r3
 8008050:	029b      	lsls	r3, r3, #10
 8008052:	b29b      	uxth	r3, r3
 8008054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800805c:	b29a      	uxth	r2, r3
 800805e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008062:	801a      	strh	r2, [r3, #0]
 8008064:	e030      	b.n	80080c8 <USB_EPStartXfer+0x103c>
 8008066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	785b      	ldrb	r3, [r3, #1]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d128      	bne.n	80080c8 <USB_EPStartXfer+0x103c>
 8008076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008092:	b29b      	uxth	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800809a:	4413      	add	r3, r2
 800809c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80080a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	011a      	lsls	r2, r3, #4
 80080ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80080b2:	4413      	add	r3, r2
 80080b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	891b      	ldrh	r3, [r3, #8]
 80080d4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6959      	ldr	r1, [r3, #20]
 80080e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80080ee:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80080f2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80080f6:	6800      	ldr	r0, [r0, #0]
 80080f8:	f000 ff3e 	bl	8008f78 <USB_WritePMA>
          ep->xfer_buff += len;
 80080fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	695a      	ldr	r2, [r3, #20]
 8008108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810c:	441a      	add	r2, r3
 800810e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800811a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6a1a      	ldr	r2, [r3, #32]
 8008126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	429a      	cmp	r2, r3
 8008134:	d90f      	bls.n	8008156 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8008136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800813a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6a1a      	ldr	r2, [r3, #32]
 8008142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008146:	1ad2      	subs	r2, r2, r3
 8008148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	621a      	str	r2, [r3, #32]
 8008154:	e00e      	b.n	8008174 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8008156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2200      	movs	r2, #0
 8008172:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 80cc 	beq.w	8008316 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800817e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800818c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	785b      	ldrb	r3, [r3, #1]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d178      	bne.n	800828e <USB_EPStartXfer+0x1202>
 800819c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	461a      	mov	r2, r3
 80081bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081c0:	4413      	add	r3, r2
 80081c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	011a      	lsls	r2, r3, #4
 80081d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081d8:	4413      	add	r3, r2
 80081da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d116      	bne.n	8008218 <USB_EPStartXfer+0x118c>
 80081ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081fc:	801a      	strh	r2, [r3, #0]
 80081fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	b29b      	uxth	r3, r3
 8008206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820e:	b29a      	uxth	r2, r3
 8008210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008214:	801a      	strh	r2, [r3, #0]
 8008216:	e064      	b.n	80082e2 <USB_EPStartXfer+0x1256>
 8008218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800821c:	2b3e      	cmp	r3, #62	; 0x3e
 800821e:	d818      	bhi.n	8008252 <USB_EPStartXfer+0x11c6>
 8008220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008224:	085b      	lsrs	r3, r3, #1
 8008226:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800822a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d004      	beq.n	8008240 <USB_EPStartXfer+0x11b4>
 8008236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800823a:	3301      	adds	r3, #1
 800823c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008244:	b29b      	uxth	r3, r3
 8008246:	029b      	lsls	r3, r3, #10
 8008248:	b29a      	uxth	r2, r3
 800824a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800824e:	801a      	strh	r2, [r3, #0]
 8008250:	e047      	b.n	80082e2 <USB_EPStartXfer+0x1256>
 8008252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008256:	095b      	lsrs	r3, r3, #5
 8008258:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800825c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008260:	f003 031f 	and.w	r3, r3, #31
 8008264:	2b00      	cmp	r3, #0
 8008266:	d104      	bne.n	8008272 <USB_EPStartXfer+0x11e6>
 8008268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800826c:	3b01      	subs	r3, #1
 800826e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008276:	b29b      	uxth	r3, r3
 8008278:	029b      	lsls	r3, r3, #10
 800827a:	b29b      	uxth	r3, r3
 800827c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008284:	b29a      	uxth	r2, r3
 8008286:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800828a:	801a      	strh	r2, [r3, #0]
 800828c:	e029      	b.n	80082e2 <USB_EPStartXfer+0x1256>
 800828e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d121      	bne.n	80082e2 <USB_EPStartXfer+0x1256>
 800829e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	461a      	mov	r2, r3
 80082b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082b4:	4413      	add	r3, r2
 80082b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	011a      	lsls	r2, r3, #4
 80082c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082cc:	4413      	add	r3, r2
 80082ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80082d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082da:	b29a      	uxth	r2, r3
 80082dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80082e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	895b      	ldrh	r3, [r3, #10]
 80082ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6959      	ldr	r1, [r3, #20]
 80082fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008302:	b29b      	uxth	r3, r3
 8008304:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008308:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800830c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008310:	6800      	ldr	r0, [r0, #0]
 8008312:	f000 fe31 	bl	8008f78 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	b29b      	uxth	r3, r3
 8008334:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008338:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800833c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008344:	8013      	strh	r3, [r2, #0]
 8008346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800834e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008352:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008356:	8812      	ldrh	r2, [r2, #0]
 8008358:	f082 0210 	eor.w	r2, r2, #16
 800835c:	801a      	strh	r2, [r3, #0]
 800835e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008362:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008366:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800836a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800836e:	8812      	ldrh	r2, [r2, #0]
 8008370:	f082 0220 	eor.w	r2, r2, #32
 8008374:	801a      	strh	r2, [r3, #0]
 8008376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	441a      	add	r2, r3
 8008390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008394:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800839e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	8013      	strh	r3, [r2, #0]
 80083ae:	f000 bc9f 	b.w	8008cf0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80083b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	7b1b      	ldrb	r3, [r3, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f040 80ae 	bne.w	8008520 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80083c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	699a      	ldr	r2, [r3, #24]
 80083d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d917      	bls.n	8008410 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80083e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80083f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	699a      	ldr	r2, [r3, #24]
 80083fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008400:	1ad2      	subs	r2, r2, r3
 8008402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	619a      	str	r2, [r3, #24]
 800840e:	e00e      	b.n	800842e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2200      	movs	r2, #0
 800842c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800842e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008432:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800843c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008440:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800844a:	b29b      	uxth	r3, r3
 800844c:	461a      	mov	r2, r3
 800844e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008452:	4413      	add	r3, r2
 8008454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	011a      	lsls	r2, r3, #4
 8008466:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800846a:	4413      	add	r3, r2
 800846c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008478:	2b00      	cmp	r3, #0
 800847a:	d116      	bne.n	80084aa <USB_EPStartXfer+0x141e>
 800847c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008488:	b29a      	uxth	r2, r3
 800848a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800848e:	801a      	strh	r2, [r3, #0]
 8008490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800849c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084a6:	801a      	strh	r2, [r3, #0]
 80084a8:	e3e8      	b.n	8008c7c <USB_EPStartXfer+0x1bf0>
 80084aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ae:	2b3e      	cmp	r3, #62	; 0x3e
 80084b0:	d818      	bhi.n	80084e4 <USB_EPStartXfer+0x1458>
 80084b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b6:	085b      	lsrs	r3, r3, #1
 80084b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d004      	beq.n	80084d2 <USB_EPStartXfer+0x1446>
 80084c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084cc:	3301      	adds	r3, #1
 80084ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	029b      	lsls	r3, r3, #10
 80084da:	b29a      	uxth	r2, r3
 80084dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084e0:	801a      	strh	r2, [r3, #0]
 80084e2:	e3cb      	b.n	8008c7c <USB_EPStartXfer+0x1bf0>
 80084e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f2:	f003 031f 	and.w	r3, r3, #31
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d104      	bne.n	8008504 <USB_EPStartXfer+0x1478>
 80084fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084fe:	3b01      	subs	r3, #1
 8008500:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008508:	b29b      	uxth	r3, r3
 800850a:	029b      	lsls	r3, r3, #10
 800850c:	b29b      	uxth	r3, r3
 800850e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008516:	b29a      	uxth	r2, r3
 8008518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800851c:	801a      	strh	r2, [r3, #0]
 800851e:	e3ad      	b.n	8008c7c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	78db      	ldrb	r3, [r3, #3]
 800852c:	2b02      	cmp	r3, #2
 800852e:	f040 8200 	bne.w	8008932 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f040 8091 	bne.w	8008666 <USB_EPStartXfer+0x15da>
 8008544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008556:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008560:	b29b      	uxth	r3, r3
 8008562:	461a      	mov	r2, r3
 8008564:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008568:	4413      	add	r3, r2
 800856a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800856e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	011a      	lsls	r2, r3, #4
 800857c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008580:	4413      	add	r3, r2
 8008582:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800858a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800858e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d116      	bne.n	80085c8 <USB_EPStartXfer+0x153c>
 800859a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085ac:	801a      	strh	r2, [r3, #0]
 80085ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085be:	b29a      	uxth	r2, r3
 80085c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085c4:	801a      	strh	r2, [r3, #0]
 80085c6:	e083      	b.n	80086d0 <USB_EPStartXfer+0x1644>
 80085c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	2b3e      	cmp	r3, #62	; 0x3e
 80085d6:	d820      	bhi.n	800861a <USB_EPStartXfer+0x158e>
 80085d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	085b      	lsrs	r3, r3, #1
 80085e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d004      	beq.n	8008608 <USB_EPStartXfer+0x157c>
 80085fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008602:	3301      	adds	r3, #1
 8008604:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800860c:	b29b      	uxth	r3, r3
 800860e:	029b      	lsls	r3, r3, #10
 8008610:	b29a      	uxth	r2, r3
 8008612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008616:	801a      	strh	r2, [r3, #0]
 8008618:	e05a      	b.n	80086d0 <USB_EPStartXfer+0x1644>
 800861a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	095b      	lsrs	r3, r3, #5
 8008628:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800862c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	f003 031f 	and.w	r3, r3, #31
 800863c:	2b00      	cmp	r3, #0
 800863e:	d104      	bne.n	800864a <USB_EPStartXfer+0x15be>
 8008640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008644:	3b01      	subs	r3, #1
 8008646:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800864a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864e:	b29b      	uxth	r3, r3
 8008650:	029b      	lsls	r3, r3, #10
 8008652:	b29b      	uxth	r3, r3
 8008654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800865c:	b29a      	uxth	r2, r3
 800865e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008662:	801a      	strh	r2, [r3, #0]
 8008664:	e034      	b.n	80086d0 <USB_EPStartXfer+0x1644>
 8008666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800866a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	785b      	ldrb	r3, [r3, #1]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d12c      	bne.n	80086d0 <USB_EPStartXfer+0x1644>
 8008676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800867a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008692:	b29b      	uxth	r3, r3
 8008694:	461a      	mov	r2, r3
 8008696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800869a:	4413      	add	r3, r2
 800869c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80086a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	011a      	lsls	r2, r3, #4
 80086ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086b2:	4413      	add	r3, r2
 80086b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80086ce:	801a      	strh	r2, [r3, #0]
 80086d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	785b      	ldrb	r3, [r3, #1]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f040 8091 	bne.w	8008812 <USB_EPStartXfer+0x1786>
 80086f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80086fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008702:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800870c:	b29b      	uxth	r3, r3
 800870e:	461a      	mov	r2, r3
 8008710:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008714:	4413      	add	r3, r2
 8008716:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800871a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	011a      	lsls	r2, r3, #4
 8008728:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800872c:	4413      	add	r3, r2
 800872e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d116      	bne.n	8008774 <USB_EPStartXfer+0x16e8>
 8008746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	b29b      	uxth	r3, r3
 800874e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008752:	b29a      	uxth	r2, r3
 8008754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008758:	801a      	strh	r2, [r3, #0]
 800875a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	b29b      	uxth	r3, r3
 8008762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800876a:	b29a      	uxth	r2, r3
 800876c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008770:	801a      	strh	r2, [r3, #0]
 8008772:	e07c      	b.n	800886e <USB_EPStartXfer+0x17e2>
 8008774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	2b3e      	cmp	r3, #62	; 0x3e
 8008782:	d820      	bhi.n	80087c6 <USB_EPStartXfer+0x173a>
 8008784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	085b      	lsrs	r3, r3, #1
 8008792:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d004      	beq.n	80087b4 <USB_EPStartXfer+0x1728>
 80087aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087ae:	3301      	adds	r3, #1
 80087b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	029b      	lsls	r3, r3, #10
 80087bc:	b29a      	uxth	r2, r3
 80087be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087c2:	801a      	strh	r2, [r3, #0]
 80087c4:	e053      	b.n	800886e <USB_EPStartXfer+0x17e2>
 80087c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	095b      	lsrs	r3, r3, #5
 80087d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	f003 031f 	and.w	r3, r3, #31
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d104      	bne.n	80087f6 <USB_EPStartXfer+0x176a>
 80087ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087f0:	3b01      	subs	r3, #1
 80087f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	029b      	lsls	r3, r3, #10
 80087fe:	b29b      	uxth	r3, r3
 8008800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008808:	b29a      	uxth	r2, r3
 800880a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800880e:	801a      	strh	r2, [r3, #0]
 8008810:	e02d      	b.n	800886e <USB_EPStartXfer+0x17e2>
 8008812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d125      	bne.n	800886e <USB_EPStartXfer+0x17e2>
 8008822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008826:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008830:	b29b      	uxth	r3, r3
 8008832:	461a      	mov	r2, r3
 8008834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008838:	4413      	add	r3, r2
 800883a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800883e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	011a      	lsls	r2, r3, #4
 800884c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008850:	4413      	add	r3, r2
 8008852:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008856:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800885a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	b29a      	uxth	r2, r3
 8008868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800886c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800886e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 81fe 	beq.w	8008c7c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80088a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d005      	beq.n	80088b8 <USB_EPStartXfer+0x182c>
 80088ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10d      	bne.n	80088d4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f040 81db 	bne.w	8008c7c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f040 81d4 	bne.w	8008c7c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80088d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fa:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80088fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008902:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	441a      	add	r2, r3
 8008918:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800891c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800892c:	b29b      	uxth	r3, r3
 800892e:	8013      	strh	r3, [r2, #0]
 8008930:	e1a4      	b.n	8008c7c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	78db      	ldrb	r3, [r3, #3]
 800893e:	2b01      	cmp	r3, #1
 8008940:	f040 819a 	bne.w	8008c78 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	699a      	ldr	r2, [r3, #24]
 8008950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	429a      	cmp	r2, r3
 800895e:	d917      	bls.n	8008990 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	699a      	ldr	r2, [r3, #24]
 800897c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008980:	1ad2      	subs	r2, r2, r3
 8008982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	619a      	str	r2, [r3, #24]
 800898e:	e00e      	b.n	80089ae <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80089a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2200      	movs	r2, #0
 80089ac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80089ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d178      	bne.n	8008ab0 <USB_EPStartXfer+0x1a24>
 80089be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089da:	b29b      	uxth	r3, r3
 80089dc:	461a      	mov	r2, r3
 80089de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089e2:	4413      	add	r3, r2
 80089e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	011a      	lsls	r2, r3, #4
 80089f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089fa:	4413      	add	r3, r2
 80089fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d116      	bne.n	8008a3a <USB_EPStartXfer+0x19ae>
 8008a0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a1e:	801a      	strh	r2, [r3, #0]
 8008a20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a36:	801a      	strh	r2, [r3, #0]
 8008a38:	e06b      	b.n	8008b12 <USB_EPStartXfer+0x1a86>
 8008a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8008a40:	d818      	bhi.n	8008a74 <USB_EPStartXfer+0x19e8>
 8008a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a46:	085b      	lsrs	r3, r3, #1
 8008a48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <USB_EPStartXfer+0x19d6>
 8008a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	029b      	lsls	r3, r3, #10
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a70:	801a      	strh	r2, [r3, #0]
 8008a72:	e04e      	b.n	8008b12 <USB_EPStartXfer+0x1a86>
 8008a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a78:	095b      	lsrs	r3, r3, #5
 8008a7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a82:	f003 031f 	and.w	r3, r3, #31
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d104      	bne.n	8008a94 <USB_EPStartXfer+0x1a08>
 8008a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	029b      	lsls	r3, r3, #10
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aac:	801a      	strh	r2, [r3, #0]
 8008aae:	e030      	b.n	8008b12 <USB_EPStartXfer+0x1a86>
 8008ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d128      	bne.n	8008b12 <USB_EPStartXfer+0x1a86>
 8008ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	011a      	lsls	r2, r3, #4
 8008af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afc:	4413      	add	r3, r2
 8008afe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b10:	801a      	strh	r2, [r3, #0]
 8008b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	785b      	ldrb	r3, [r3, #1]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d178      	bne.n	8008c22 <USB_EPStartXfer+0x1b96>
 8008b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b54:	4413      	add	r3, r2
 8008b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	011a      	lsls	r2, r3, #4
 8008b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d116      	bne.n	8008bac <USB_EPStartXfer+0x1b20>
 8008b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b90:	801a      	strh	r2, [r3, #0]
 8008b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ba8:	801a      	strh	r2, [r3, #0]
 8008baa:	e067      	b.n	8008c7c <USB_EPStartXfer+0x1bf0>
 8008bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb0:	2b3e      	cmp	r3, #62	; 0x3e
 8008bb2:	d818      	bhi.n	8008be6 <USB_EPStartXfer+0x1b5a>
 8008bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb8:	085b      	lsrs	r3, r3, #1
 8008bba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d004      	beq.n	8008bd4 <USB_EPStartXfer+0x1b48>
 8008bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008bce:	3301      	adds	r3, #1
 8008bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008bd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	029b      	lsls	r3, r3, #10
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008be2:	801a      	strh	r2, [r3, #0]
 8008be4:	e04a      	b.n	8008c7c <USB_EPStartXfer+0x1bf0>
 8008be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bea:	095b      	lsrs	r3, r3, #5
 8008bec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bf4:	f003 031f 	and.w	r3, r3, #31
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d104      	bne.n	8008c06 <USB_EPStartXfer+0x1b7a>
 8008bfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c00:	3b01      	subs	r3, #1
 8008c02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	029b      	lsls	r3, r3, #10
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c1e:	801a      	strh	r2, [r3, #0]
 8008c20:	e02c      	b.n	8008c7c <USB_EPStartXfer+0x1bf0>
 8008c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	785b      	ldrb	r3, [r3, #1]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d124      	bne.n	8008c7c <USB_EPStartXfer+0x1bf0>
 8008c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	461a      	mov	r2, r3
 8008c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c48:	4413      	add	r3, r2
 8008c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	011a      	lsls	r2, r3, #4
 8008c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c60:	4413      	add	r3, r2
 8008c62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c74:	801a      	strh	r2, [r3, #0]
 8008c76:	e001      	b.n	8008c7c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e03a      	b.n	8008cf2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ca6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008caa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008cb2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008cb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	441a      	add	r2, r3
 8008cd8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	785b      	ldrb	r3, [r3, #1]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d020      	beq.n	8008d50 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d24:	81bb      	strh	r3, [r7, #12]
 8008d26:	89bb      	ldrh	r3, [r7, #12]
 8008d28:	f083 0310 	eor.w	r3, r3, #16
 8008d2c:	81bb      	strh	r3, [r7, #12]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	441a      	add	r2, r3
 8008d38:	89bb      	ldrh	r3, [r7, #12]
 8008d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	8013      	strh	r3, [r2, #0]
 8008d4e:	e01f      	b.n	8008d90 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d66:	81fb      	strh	r3, [r7, #14]
 8008d68:	89fb      	ldrh	r3, [r7, #14]
 8008d6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d6e:	81fb      	strh	r3, [r7, #14]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	441a      	add	r2, r3
 8008d7a:	89fb      	ldrh	r3, [r7, #14]
 8008d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr

08008d9c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b087      	sub	sp, #28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	7b1b      	ldrb	r3, [r3, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f040 809d 	bne.w	8008eea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	785b      	ldrb	r3, [r3, #1]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d04c      	beq.n	8008e52 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	823b      	strh	r3, [r7, #16]
 8008dc6:	8a3b      	ldrh	r3, [r7, #16]
 8008dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d01b      	beq.n	8008e08 <USB_EPClearStall+0x6c>
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de6:	81fb      	strh	r3, [r7, #14]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	441a      	add	r2, r3
 8008df2:	89fb      	ldrh	r3, [r7, #14]
 8008df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	78db      	ldrb	r3, [r3, #3]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d06c      	beq.n	8008eea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e26:	81bb      	strh	r3, [r7, #12]
 8008e28:	89bb      	ldrh	r3, [r7, #12]
 8008e2a:	f083 0320 	eor.w	r3, r3, #32
 8008e2e:	81bb      	strh	r3, [r7, #12]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	441a      	add	r2, r3
 8008e3a:	89bb      	ldrh	r3, [r7, #12]
 8008e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	8013      	strh	r3, [r2, #0]
 8008e50:	e04b      	b.n	8008eea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	82fb      	strh	r3, [r7, #22]
 8008e60:	8afb      	ldrh	r3, [r7, #22]
 8008e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d01b      	beq.n	8008ea2 <USB_EPClearStall+0x106>
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e80:	82bb      	strh	r3, [r7, #20]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	441a      	add	r2, r3
 8008e8c:	8abb      	ldrh	r3, [r7, #20]
 8008e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb8:	827b      	strh	r3, [r7, #18]
 8008eba:	8a7b      	ldrh	r3, [r7, #18]
 8008ebc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ec0:	827b      	strh	r3, [r7, #18]
 8008ec2:	8a7b      	ldrh	r3, [r7, #18]
 8008ec4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ec8:	827b      	strh	r3, [r7, #18]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	441a      	add	r2, r3
 8008ed4:	8a7b      	ldrh	r3, [r7, #18]
 8008ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	371c      	adds	r7, #28
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bc80      	pop	{r7}
 8008ef4:	4770      	bx	lr

08008ef6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	460b      	mov	r3, r1
 8008f00:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d103      	bne.n	8008f10 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2280      	movs	r2, #128	; 0x80
 8008f0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bc80      	pop	{r7}
 8008f1a:	4770      	bx	lr

08008f1c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bc80      	pop	{r7}
 8008f2e:	4770      	bx	lr

08008f30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bc80      	pop	{r7}
 8008f42:	4770      	bx	lr

08008f44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f56:	68fb      	ldr	r3, [r7, #12]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc80      	pop	{r7}
 8008f60:	4770      	bx	lr

08008f62 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b083      	sub	sp, #12
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bc80      	pop	{r7}
 8008f76:	4770      	bx	lr

08008f78 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b08d      	sub	sp, #52	; 0x34
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	4611      	mov	r1, r2
 8008f84:	461a      	mov	r2, r3
 8008f86:	460b      	mov	r3, r1
 8008f88:	80fb      	strh	r3, [r7, #6]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f8e:	88bb      	ldrh	r3, [r7, #4]
 8008f90:	3301      	adds	r3, #1
 8008f92:	085b      	lsrs	r3, r3, #1
 8008f94:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f9e:	88fb      	ldrh	r3, [r7, #6]
 8008fa0:	005a      	lsls	r2, r3, #1
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008faa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fb0:	e01e      	b.n	8008ff0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	3301      	adds	r3, #1
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	021b      	lsls	r3, r3, #8
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	461a      	mov	r2, r3
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	3302      	adds	r3, #2
 8008fdc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	3302      	adds	r3, #2
 8008fe2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	3b01      	subs	r3, #1
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1dd      	bne.n	8008fb2 <USB_WritePMA+0x3a>
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	bf00      	nop
 8008ffa:	3734      	adds	r7, #52	; 0x34
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr

08009002 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009002:	b480      	push	{r7}
 8009004:	b08b      	sub	sp, #44	; 0x2c
 8009006:	af00      	add	r7, sp, #0
 8009008:	60f8      	str	r0, [r7, #12]
 800900a:	60b9      	str	r1, [r7, #8]
 800900c:	4611      	mov	r1, r2
 800900e:	461a      	mov	r2, r3
 8009010:	460b      	mov	r3, r1
 8009012:	80fb      	strh	r3, [r7, #6]
 8009014:	4613      	mov	r3, r2
 8009016:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009018:	88bb      	ldrh	r3, [r7, #4]
 800901a:	085b      	lsrs	r3, r3, #1
 800901c:	b29b      	uxth	r3, r3
 800901e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009028:	88fb      	ldrh	r3, [r7, #6]
 800902a:	005a      	lsls	r2, r3, #1
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	4413      	add	r3, r2
 8009030:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009034:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
 800903a:	e01b      	b.n	8009074 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	b29b      	uxth	r3, r3
 8009042:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	3302      	adds	r3, #2
 8009048:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	b2da      	uxtb	r2, r3
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	3301      	adds	r3, #1
 8009056:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	0a1b      	lsrs	r3, r3, #8
 800905c:	b2da      	uxtb	r2, r3
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	3301      	adds	r3, #1
 8009066:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	3302      	adds	r3, #2
 800906c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	3b01      	subs	r3, #1
 8009072:	627b      	str	r3, [r7, #36]	; 0x24
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1e0      	bne.n	800903c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800907a:	88bb      	ldrh	r3, [r7, #4]
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	b29b      	uxth	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d007      	beq.n	8009096 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	b29b      	uxth	r3, r3
 800908c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	b2da      	uxtb	r2, r3
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	701a      	strb	r2, [r3, #0]
  }
}
 8009096:	bf00      	nop
 8009098:	372c      	adds	r7, #44	; 0x2c
 800909a:	46bd      	mov	sp, r7
 800909c:	bc80      	pop	{r7}
 800909e:	4770      	bx	lr

080090a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	7c1b      	ldrb	r3, [r3, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d115      	bne.n	80090e4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090bc:	2202      	movs	r2, #2
 80090be:	2181      	movs	r1, #129	; 0x81
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 fea2 	bl	800ae0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090d0:	2202      	movs	r2, #2
 80090d2:	2101      	movs	r1, #1
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f001 fe98 	bl	800ae0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80090e2:	e012      	b.n	800910a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090e4:	2340      	movs	r3, #64	; 0x40
 80090e6:	2202      	movs	r2, #2
 80090e8:	2181      	movs	r1, #129	; 0x81
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 fe8d 	bl	800ae0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090f6:	2340      	movs	r3, #64	; 0x40
 80090f8:	2202      	movs	r2, #2
 80090fa:	2101      	movs	r1, #1
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 fe84 	bl	800ae0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800910a:	2308      	movs	r3, #8
 800910c:	2203      	movs	r2, #3
 800910e:	2182      	movs	r1, #130	; 0x82
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 fe7a 	bl	800ae0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800911c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009120:	f001 ff9a 	bl	800b058 <USBD_static_malloc>
 8009124:	4602      	mov	r2, r0
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009132:	2b00      	cmp	r3, #0
 8009134:	d102      	bne.n	800913c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009136:	2301      	movs	r3, #1
 8009138:	73fb      	strb	r3, [r7, #15]
 800913a:	e026      	b.n	800918a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009142:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2200      	movs	r2, #0
 8009152:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	2200      	movs	r2, #0
 800915a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	7c1b      	ldrb	r3, [r3, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d109      	bne.n	800917a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800916c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009170:	2101      	movs	r1, #1
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 ff3a 	bl	800afec <USBD_LL_PrepareReceive>
 8009178:	e007      	b.n	800918a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009180:	2340      	movs	r3, #64	; 0x40
 8009182:	2101      	movs	r1, #1
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 ff31 	bl	800afec <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800918a:	7bfb      	ldrb	r3, [r7, #15]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80091a4:	2181      	movs	r1, #129	; 0x81
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f001 fe55 	bl	800ae56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80091b2:	2101      	movs	r1, #1
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 fe4e 	bl	800ae56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80091c2:	2182      	movs	r1, #130	; 0x82
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 fe46 	bl	800ae56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00e      	beq.n	80091f8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ea:	4618      	mov	r0, r3
 80091ec:	f001 ff40 	bl	800b070 <USBD_static_free>
    pdev->pClassData = NULL;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b086      	sub	sp, #24
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009212:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009228:	2b00      	cmp	r3, #0
 800922a:	d039      	beq.n	80092a0 <USBD_CDC_Setup+0x9e>
 800922c:	2b20      	cmp	r3, #32
 800922e:	d17f      	bne.n	8009330 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	88db      	ldrh	r3, [r3, #6]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d029      	beq.n	800928c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	b25b      	sxtb	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	da11      	bge.n	8009266 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800924e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	88d2      	ldrh	r2, [r2, #6]
 8009254:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009256:	6939      	ldr	r1, [r7, #16]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	88db      	ldrh	r3, [r3, #6]
 800925c:	461a      	mov	r2, r3
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f001 fa09 	bl	800a676 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009264:	e06b      	b.n	800933e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	785a      	ldrb	r2, [r3, #1]
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	88db      	ldrh	r3, [r3, #6]
 8009274:	b2da      	uxtb	r2, r3
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800927c:	6939      	ldr	r1, [r7, #16]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	88db      	ldrh	r3, [r3, #6]
 8009282:	461a      	mov	r2, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 fa24 	bl	800a6d2 <USBD_CtlPrepareRx>
      break;
 800928a:	e058      	b.n	800933e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	7850      	ldrb	r0, [r2, #1]
 8009298:	2200      	movs	r2, #0
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	4798      	blx	r3
      break;
 800929e:	e04e      	b.n	800933e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	785b      	ldrb	r3, [r3, #1]
 80092a4:	2b0b      	cmp	r3, #11
 80092a6:	d02e      	beq.n	8009306 <USBD_CDC_Setup+0x104>
 80092a8:	2b0b      	cmp	r3, #11
 80092aa:	dc38      	bgt.n	800931e <USBD_CDC_Setup+0x11c>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <USBD_CDC_Setup+0xb4>
 80092b0:	2b0a      	cmp	r3, #10
 80092b2:	d014      	beq.n	80092de <USBD_CDC_Setup+0xdc>
 80092b4:	e033      	b.n	800931e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092bc:	2b03      	cmp	r3, #3
 80092be:	d107      	bne.n	80092d0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80092c0:	f107 030c 	add.w	r3, r7, #12
 80092c4:	2202      	movs	r2, #2
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 f9d4 	bl	800a676 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092ce:	e02e      	b.n	800932e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f001 f965 	bl	800a5a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80092d8:	2302      	movs	r3, #2
 80092da:	75fb      	strb	r3, [r7, #23]
          break;
 80092dc:	e027      	b.n	800932e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e4:	2b03      	cmp	r3, #3
 80092e6:	d107      	bne.n	80092f8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80092e8:	f107 030f 	add.w	r3, r7, #15
 80092ec:	2201      	movs	r2, #1
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f001 f9c0 	bl	800a676 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092f6:	e01a      	b.n	800932e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 f951 	bl	800a5a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009300:	2302      	movs	r3, #2
 8009302:	75fb      	strb	r3, [r7, #23]
          break;
 8009304:	e013      	b.n	800932e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800930c:	2b03      	cmp	r3, #3
 800930e:	d00d      	beq.n	800932c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 f945 	bl	800a5a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009318:	2302      	movs	r3, #2
 800931a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800931c:	e006      	b.n	800932c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f001 f93e 	bl	800a5a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009326:	2302      	movs	r3, #2
 8009328:	75fb      	strb	r3, [r7, #23]
          break;
 800932a:	e000      	b.n	800932e <USBD_CDC_Setup+0x12c>
          break;
 800932c:	bf00      	nop
      }
      break;
 800932e:	e006      	b.n	800933e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 f935 	bl	800a5a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009338:	2302      	movs	r3, #2
 800933a:	75fb      	strb	r3, [r7, #23]
      break;
 800933c:	bf00      	nop
  }

  return ret;
 800933e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009362:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936a:	2b00      	cmp	r3, #0
 800936c:	d03a      	beq.n	80093e4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800936e:	78fa      	ldrb	r2, [r7, #3]
 8009370:	6879      	ldr	r1, [r7, #4]
 8009372:	4613      	mov	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	440b      	add	r3, r1
 800937c:	331c      	adds	r3, #28
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d029      	beq.n	80093d8 <USBD_CDC_DataIn+0x90>
 8009384:	78fa      	ldrb	r2, [r7, #3]
 8009386:	6879      	ldr	r1, [r7, #4]
 8009388:	4613      	mov	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	440b      	add	r3, r1
 8009392:	331c      	adds	r3, #28
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	78f9      	ldrb	r1, [r7, #3]
 8009398:	68b8      	ldr	r0, [r7, #8]
 800939a:	460b      	mov	r3, r1
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	440b      	add	r3, r1
 80093a0:	00db      	lsls	r3, r3, #3
 80093a2:	4403      	add	r3, r0
 80093a4:	3338      	adds	r3, #56	; 0x38
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80093ac:	fb01 f303 	mul.w	r3, r1, r3
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d110      	bne.n	80093d8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80093b6:	78fa      	ldrb	r2, [r7, #3]
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	440b      	add	r3, r1
 80093c4:	331c      	adds	r3, #28
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80093ca:	78f9      	ldrb	r1, [r7, #3]
 80093cc:	2300      	movs	r3, #0
 80093ce:	2200      	movs	r2, #0
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 fde8 	bl	800afa6 <USBD_LL_Transmit>
 80093d6:	e003      	b.n	80093e0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	e000      	b.n	80093e6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80093e4:	2302      	movs	r3, #2
  }
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	460b      	mov	r3, r1
 80093f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009400:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009402:	78fb      	ldrb	r3, [r7, #3]
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f001 fe13 	bl	800b032 <USBD_LL_GetRxDataSize>
 800940c:	4602      	mov	r2, r0
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00d      	beq.n	800943a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009432:	4611      	mov	r1, r2
 8009434:	4798      	blx	r3

    return USBD_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	e000      	b.n	800943c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800943a:	2302      	movs	r3, #2
  }
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009452:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800945a:	2b00      	cmp	r3, #0
 800945c:	d015      	beq.n	800948a <USBD_CDC_EP0_RxReady+0x46>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009464:	2bff      	cmp	r3, #255	; 0xff
 8009466:	d010      	beq.n	800948a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009476:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800947e:	b292      	uxth	r2, r2
 8009480:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	22ff      	movs	r2, #255	; 0xff
 8009486:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2243      	movs	r2, #67	; 0x43
 80094a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80094a2:	4b03      	ldr	r3, [pc, #12]	; (80094b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bc80      	pop	{r7}
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	20000098 	.word	0x20000098

080094b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2243      	movs	r2, #67	; 0x43
 80094c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80094c2:	4b03      	ldr	r3, [pc, #12]	; (80094d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bc80      	pop	{r7}
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	20000054 	.word	0x20000054

080094d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2243      	movs	r2, #67	; 0x43
 80094e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80094e2:	4b03      	ldr	r3, [pc, #12]	; (80094f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bc80      	pop	{r7}
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	200000dc 	.word	0x200000dc

080094f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	220a      	movs	r2, #10
 8009500:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009502:	4b03      	ldr	r3, [pc, #12]	; (8009510 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	bc80      	pop	{r7}
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	20000010 	.word	0x20000010

08009514 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800951e:	2302      	movs	r3, #2
 8009520:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d005      	beq.n	8009534 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	bc80      	pop	{r7}
 800953e:	4770      	bx	lr

08009540 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	4613      	mov	r3, r2
 800954c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009554:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800955e:	88fa      	ldrh	r2, [r7, #6]
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	371c      	adds	r7, #28
 800956c:	46bd      	mov	sp, r7
 800956e:	bc80      	pop	{r7}
 8009570:	4770      	bx	lr

08009572 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009572:	b480      	push	{r7}
 8009574:	b085      	sub	sp, #20
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009582:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	bc80      	pop	{r7}
 8009596:	4770      	bx	lr

08009598 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d01c      	beq.n	80095ec <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d115      	bne.n	80095e8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2201      	movs	r2, #1
 80095c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80095da:	b29b      	uxth	r3, r3
 80095dc:	2181      	movs	r1, #129	; 0x81
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f001 fce1 	bl	800afa6 <USBD_LL_Transmit>

      return USBD_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	e002      	b.n	80095ee <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e000      	b.n	80095ee <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80095ec:	2302      	movs	r3, #2
  }
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009604:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800960c:	2b00      	cmp	r3, #0
 800960e:	d017      	beq.n	8009640 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	7c1b      	ldrb	r3, [r3, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d109      	bne.n	800962c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800961e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009622:	2101      	movs	r1, #1
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f001 fce1 	bl	800afec <USBD_LL_PrepareReceive>
 800962a:	e007      	b.n	800963c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009632:	2340      	movs	r3, #64	; 0x40
 8009634:	2101      	movs	r1, #1
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f001 fcd8 	bl	800afec <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	e000      	b.n	8009642 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009640:	2302      	movs	r3, #2
  }
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	60f8      	str	r0, [r7, #12]
 8009652:	60b9      	str	r1, [r7, #8]
 8009654:	4613      	mov	r3, r2
 8009656:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800965e:	2302      	movs	r3, #2
 8009660:	e01a      	b.n	8009698 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009668:	2b00      	cmp	r3, #0
 800966a:	d003      	beq.n	8009674 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d003      	beq.n	8009682 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	79fa      	ldrb	r2, [r7, #7]
 800968e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f001 fb45 	bl	800ad20 <USBD_LL_Init>

  return USBD_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d006      	beq.n	80096c2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73fb      	strb	r3, [r7, #15]
 80096c0:	e001      	b.n	80096c6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80096c2:	2302      	movs	r3, #2
 80096c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bc80      	pop	{r7}
 80096d0:	4770      	bx	lr

080096d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f001 fb7a 	bl	800add4 <USBD_LL_Start>

  return USBD_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bc80      	pop	{r7}
 80096fc:	4770      	bx	lr

080096fe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b084      	sub	sp, #16
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800970a:	2302      	movs	r3, #2
 800970c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00c      	beq.n	8009732 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	78fa      	ldrb	r2, [r7, #3]
 8009722:	4611      	mov	r1, r2
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	4798      	blx	r3
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009732:	7bfb      	ldrb	r3, [r7, #15]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	78fa      	ldrb	r2, [r7, #3]
 8009752:	4611      	mov	r1, r2
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	4798      	blx	r3

  return USBD_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	4618      	mov	r0, r3
 8009776:	f000 fed8 	bl	800a52a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009788:	461a      	mov	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009796:	f003 031f 	and.w	r3, r3, #31
 800979a:	2b02      	cmp	r3, #2
 800979c:	d016      	beq.n	80097cc <USBD_LL_SetupStage+0x6a>
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d81c      	bhi.n	80097dc <USBD_LL_SetupStage+0x7a>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <USBD_LL_SetupStage+0x4a>
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d008      	beq.n	80097bc <USBD_LL_SetupStage+0x5a>
 80097aa:	e017      	b.n	80097dc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f9cb 	bl	8009b50 <USBD_StdDevReq>
      break;
 80097ba:	e01a      	b.n	80097f2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fa2d 	bl	8009c24 <USBD_StdItfReq>
      break;
 80097ca:	e012      	b.n	80097f2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fa6d 	bl	8009cb4 <USBD_StdEPReq>
      break;
 80097da:	e00a      	b.n	80097f2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80097e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f001 fb52 	bl	800ae94 <USBD_LL_StallEP>
      break;
 80097f0:	bf00      	nop
  }

  return USBD_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	460b      	mov	r3, r1
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800980a:	7afb      	ldrb	r3, [r7, #11]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d14b      	bne.n	80098a8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009816:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800981e:	2b03      	cmp	r3, #3
 8009820:	d134      	bne.n	800988c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	68da      	ldr	r2, [r3, #12]
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	429a      	cmp	r2, r3
 800982c:	d919      	bls.n	8009862 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	68da      	ldr	r2, [r3, #12]
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	1ad2      	subs	r2, r2, r3
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	68da      	ldr	r2, [r3, #12]
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009844:	429a      	cmp	r2, r3
 8009846:	d203      	bcs.n	8009850 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800984c:	b29b      	uxth	r3, r3
 800984e:	e002      	b.n	8009856 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009854:	b29b      	uxth	r3, r3
 8009856:	461a      	mov	r2, r3
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f000 ff57 	bl	800a70e <USBD_CtlContinueRx>
 8009860:	e038      	b.n	80098d4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00a      	beq.n	8009884 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009874:	2b03      	cmp	r3, #3
 8009876:	d105      	bne.n	8009884 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 ff54 	bl	800a732 <USBD_CtlSendStatus>
 800988a:	e023      	b.n	80098d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009892:	2b05      	cmp	r3, #5
 8009894:	d11e      	bne.n	80098d4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800989e:	2100      	movs	r1, #0
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f001 faf7 	bl	800ae94 <USBD_LL_StallEP>
 80098a6:	e015      	b.n	80098d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00d      	beq.n	80098d0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d108      	bne.n	80098d0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	7afa      	ldrb	r2, [r7, #11]
 80098c8:	4611      	mov	r1, r2
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	4798      	blx	r3
 80098ce:	e001      	b.n	80098d4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80098d0:	2302      	movs	r3, #2
 80098d2:	e000      	b.n	80098d6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b086      	sub	sp, #24
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	60f8      	str	r0, [r7, #12]
 80098e6:	460b      	mov	r3, r1
 80098e8:	607a      	str	r2, [r7, #4]
 80098ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80098ec:	7afb      	ldrb	r3, [r7, #11]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d17f      	bne.n	80099f2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3314      	adds	r3, #20
 80098f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d15c      	bne.n	80099bc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	429a      	cmp	r2, r3
 800990c:	d915      	bls.n	800993a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	68da      	ldr	r2, [r3, #12]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	1ad2      	subs	r2, r2, r3
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	b29b      	uxth	r3, r3
 8009922:	461a      	mov	r2, r3
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 fec1 	bl	800a6ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800992c:	2300      	movs	r3, #0
 800992e:	2200      	movs	r2, #0
 8009930:	2100      	movs	r1, #0
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f001 fb5a 	bl	800afec <USBD_LL_PrepareReceive>
 8009938:	e04e      	b.n	80099d8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	6912      	ldr	r2, [r2, #16]
 8009942:	fbb3 f1f2 	udiv	r1, r3, r2
 8009946:	fb01 f202 	mul.w	r2, r1, r2
 800994a:	1a9b      	subs	r3, r3, r2
 800994c:	2b00      	cmp	r3, #0
 800994e:	d11c      	bne.n	800998a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	689a      	ldr	r2, [r3, #8]
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009958:	429a      	cmp	r2, r3
 800995a:	d316      	bcc.n	800998a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	689a      	ldr	r2, [r3, #8]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009966:	429a      	cmp	r2, r3
 8009968:	d20f      	bcs.n	800998a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800996a:	2200      	movs	r2, #0
 800996c:	2100      	movs	r1, #0
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 fe9d 	bl	800a6ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800997c:	2300      	movs	r3, #0
 800997e:	2200      	movs	r2, #0
 8009980:	2100      	movs	r1, #0
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f001 fb32 	bl	800afec <USBD_LL_PrepareReceive>
 8009988:	e026      	b.n	80099d8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00a      	beq.n	80099ac <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800999c:	2b03      	cmp	r3, #3
 800999e:	d105      	bne.n	80099ac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80099ac:	2180      	movs	r1, #128	; 0x80
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f001 fa70 	bl	800ae94 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 fecf 	bl	800a758 <USBD_CtlReceiveStatus>
 80099ba:	e00d      	b.n	80099d8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099c2:	2b04      	cmp	r3, #4
 80099c4:	d004      	beq.n	80099d0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d103      	bne.n	80099d8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80099d0:	2180      	movs	r1, #128	; 0x80
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f001 fa5e 	bl	800ae94 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d11d      	bne.n	8009a1e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f7ff fe81 	bl	80096ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80099f0:	e015      	b.n	8009a1e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00d      	beq.n	8009a1a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	d108      	bne.n	8009a1a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	7afa      	ldrb	r2, [r7, #11]
 8009a12:	4611      	mov	r1, r2
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	4798      	blx	r3
 8009a18:	e001      	b.n	8009a1e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	e000      	b.n	8009a20 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a30:	2340      	movs	r3, #64	; 0x40
 8009a32:	2200      	movs	r2, #0
 8009a34:	2100      	movs	r1, #0
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 f9e7 	bl	800ae0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2240      	movs	r2, #64	; 0x40
 8009a48:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a4c:	2340      	movs	r3, #64	; 0x40
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2180      	movs	r1, #128	; 0x80
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f001 f9d9 	bl	800ae0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2240      	movs	r2, #64	; 0x40
 8009a62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d009      	beq.n	8009aa0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	6852      	ldr	r2, [r2, #4]
 8009a98:	b2d2      	uxtb	r2, r2
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	4798      	blx	r3
  }

  return USBD_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	78fa      	ldrb	r2, [r7, #3]
 8009aba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bc80      	pop	{r7}
 8009ac6:	4770      	bx	lr

08009ac8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2204      	movs	r2, #4
 8009ae0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bc80      	pop	{r7}
 8009aee:	4770      	bx	lr

08009af0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	d105      	bne.n	8009b0e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bc80      	pop	{r7}
 8009b18:	4770      	bx	lr

08009b1a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d10b      	bne.n	8009b44 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b32:	69db      	ldr	r3, [r3, #28]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d005      	beq.n	8009b44 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3e:	69db      	ldr	r3, [r3, #28]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b66:	2b40      	cmp	r3, #64	; 0x40
 8009b68:	d005      	beq.n	8009b76 <USBD_StdDevReq+0x26>
 8009b6a:	2b40      	cmp	r3, #64	; 0x40
 8009b6c:	d84f      	bhi.n	8009c0e <USBD_StdDevReq+0xbe>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d009      	beq.n	8009b86 <USBD_StdDevReq+0x36>
 8009b72:	2b20      	cmp	r3, #32
 8009b74:	d14b      	bne.n	8009c0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	4798      	blx	r3
      break;
 8009b84:	e048      	b.n	8009c18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	785b      	ldrb	r3, [r3, #1]
 8009b8a:	2b09      	cmp	r3, #9
 8009b8c:	d839      	bhi.n	8009c02 <USBD_StdDevReq+0xb2>
 8009b8e:	a201      	add	r2, pc, #4	; (adr r2, 8009b94 <USBD_StdDevReq+0x44>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009be5 	.word	0x08009be5
 8009b98:	08009bf9 	.word	0x08009bf9
 8009b9c:	08009c03 	.word	0x08009c03
 8009ba0:	08009bef 	.word	0x08009bef
 8009ba4:	08009c03 	.word	0x08009c03
 8009ba8:	08009bc7 	.word	0x08009bc7
 8009bac:	08009bbd 	.word	0x08009bbd
 8009bb0:	08009c03 	.word	0x08009c03
 8009bb4:	08009bdb 	.word	0x08009bdb
 8009bb8:	08009bd1 	.word	0x08009bd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f9dc 	bl	8009f7c <USBD_GetDescriptor>
          break;
 8009bc4:	e022      	b.n	8009c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fb3f 	bl	800a24c <USBD_SetAddress>
          break;
 8009bce:	e01d      	b.n	8009c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fb7e 	bl	800a2d4 <USBD_SetConfig>
          break;
 8009bd8:	e018      	b.n	8009c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fc07 	bl	800a3f0 <USBD_GetConfig>
          break;
 8009be2:	e013      	b.n	8009c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fc37 	bl	800a45a <USBD_GetStatus>
          break;
 8009bec:	e00e      	b.n	8009c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fc65 	bl	800a4c0 <USBD_SetFeature>
          break;
 8009bf6:	e009      	b.n	8009c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fc74 	bl	800a4e8 <USBD_ClrFeature>
          break;
 8009c00:	e004      	b.n	8009c0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fccc 	bl	800a5a2 <USBD_CtlError>
          break;
 8009c0a:	bf00      	nop
      }
      break;
 8009c0c:	e004      	b.n	8009c18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fcc6 	bl	800a5a2 <USBD_CtlError>
      break;
 8009c16:	bf00      	nop
  }

  return ret;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop

08009c24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c3a:	2b40      	cmp	r3, #64	; 0x40
 8009c3c:	d005      	beq.n	8009c4a <USBD_StdItfReq+0x26>
 8009c3e:	2b40      	cmp	r3, #64	; 0x40
 8009c40:	d82e      	bhi.n	8009ca0 <USBD_StdItfReq+0x7c>
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <USBD_StdItfReq+0x26>
 8009c46:	2b20      	cmp	r3, #32
 8009c48:	d12a      	bne.n	8009ca0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c50:	3b01      	subs	r3, #1
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d81d      	bhi.n	8009c92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	889b      	ldrh	r3, [r3, #4]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d813      	bhi.n	8009c88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	4798      	blx	r3
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	88db      	ldrh	r3, [r3, #6]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d110      	bne.n	8009c9c <USBD_StdItfReq+0x78>
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10d      	bne.n	8009c9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fd56 	bl	800a732 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c86:	e009      	b.n	8009c9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fc89 	bl	800a5a2 <USBD_CtlError>
          break;
 8009c90:	e004      	b.n	8009c9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fc84 	bl	800a5a2 <USBD_CtlError>
          break;
 8009c9a:	e000      	b.n	8009c9e <USBD_StdItfReq+0x7a>
          break;
 8009c9c:	bf00      	nop
      }
      break;
 8009c9e:	e004      	b.n	8009caa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fc7d 	bl	800a5a2 <USBD_CtlError>
      break;
 8009ca8:	bf00      	nop
  }

  return USBD_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	889b      	ldrh	r3, [r3, #4]
 8009cc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cd0:	2b40      	cmp	r3, #64	; 0x40
 8009cd2:	d007      	beq.n	8009ce4 <USBD_StdEPReq+0x30>
 8009cd4:	2b40      	cmp	r3, #64	; 0x40
 8009cd6:	f200 8146 	bhi.w	8009f66 <USBD_StdEPReq+0x2b2>
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00a      	beq.n	8009cf4 <USBD_StdEPReq+0x40>
 8009cde:	2b20      	cmp	r3, #32
 8009ce0:	f040 8141 	bne.w	8009f66 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	4798      	blx	r3
      break;
 8009cf2:	e13d      	b.n	8009f70 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cfc:	2b20      	cmp	r3, #32
 8009cfe:	d10a      	bne.n	8009d16 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
 8009d0e:	4603      	mov	r3, r0
 8009d10:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
 8009d14:	e12d      	b.n	8009f72 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	785b      	ldrb	r3, [r3, #1]
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d007      	beq.n	8009d2e <USBD_StdEPReq+0x7a>
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	f300 811b 	bgt.w	8009f5a <USBD_StdEPReq+0x2a6>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d072      	beq.n	8009e0e <USBD_StdEPReq+0x15a>
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d03a      	beq.n	8009da2 <USBD_StdEPReq+0xee>
 8009d2c:	e115      	b.n	8009f5a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d002      	beq.n	8009d3e <USBD_StdEPReq+0x8a>
 8009d38:	2b03      	cmp	r3, #3
 8009d3a:	d015      	beq.n	8009d68 <USBD_StdEPReq+0xb4>
 8009d3c:	e02b      	b.n	8009d96 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00c      	beq.n	8009d5e <USBD_StdEPReq+0xaa>
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	2b80      	cmp	r3, #128	; 0x80
 8009d48:	d009      	beq.n	8009d5e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d4a:	7bbb      	ldrb	r3, [r7, #14]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f001 f8a0 	bl	800ae94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d54:	2180      	movs	r1, #128	; 0x80
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f001 f89c 	bl	800ae94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d5c:	e020      	b.n	8009da0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fc1e 	bl	800a5a2 <USBD_CtlError>
              break;
 8009d66:	e01b      	b.n	8009da0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	885b      	ldrh	r3, [r3, #2]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10e      	bne.n	8009d8e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00b      	beq.n	8009d8e <USBD_StdEPReq+0xda>
 8009d76:	7bbb      	ldrb	r3, [r7, #14]
 8009d78:	2b80      	cmp	r3, #128	; 0x80
 8009d7a:	d008      	beq.n	8009d8e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	88db      	ldrh	r3, [r3, #6]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d104      	bne.n	8009d8e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009d84:	7bbb      	ldrb	r3, [r7, #14]
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f001 f883 	bl	800ae94 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fccf 	bl	800a732 <USBD_CtlSendStatus>

              break;
 8009d94:	e004      	b.n	8009da0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fc02 	bl	800a5a2 <USBD_CtlError>
              break;
 8009d9e:	bf00      	nop
          }
          break;
 8009da0:	e0e0      	b.n	8009f64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d002      	beq.n	8009db2 <USBD_StdEPReq+0xfe>
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	d015      	beq.n	8009ddc <USBD_StdEPReq+0x128>
 8009db0:	e026      	b.n	8009e00 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00c      	beq.n	8009dd2 <USBD_StdEPReq+0x11e>
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
 8009dba:	2b80      	cmp	r3, #128	; 0x80
 8009dbc:	d009      	beq.n	8009dd2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 f866 	bl	800ae94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009dc8:	2180      	movs	r1, #128	; 0x80
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f001 f862 	bl	800ae94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009dd0:	e01c      	b.n	8009e0c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fbe4 	bl	800a5a2 <USBD_CtlError>
              break;
 8009dda:	e017      	b.n	8009e0c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	885b      	ldrh	r3, [r3, #2]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d112      	bne.n	8009e0a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d004      	beq.n	8009df8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009dee:	7bbb      	ldrb	r3, [r7, #14]
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f001 f86d 	bl	800aed2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fc9a 	bl	800a732 <USBD_CtlSendStatus>
              }
              break;
 8009dfe:	e004      	b.n	8009e0a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fbcd 	bl	800a5a2 <USBD_CtlError>
              break;
 8009e08:	e000      	b.n	8009e0c <USBD_StdEPReq+0x158>
              break;
 8009e0a:	bf00      	nop
          }
          break;
 8009e0c:	e0aa      	b.n	8009f64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d002      	beq.n	8009e1e <USBD_StdEPReq+0x16a>
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d032      	beq.n	8009e82 <USBD_StdEPReq+0x1ce>
 8009e1c:	e097      	b.n	8009f4e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d007      	beq.n	8009e34 <USBD_StdEPReq+0x180>
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
 8009e26:	2b80      	cmp	r3, #128	; 0x80
 8009e28:	d004      	beq.n	8009e34 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fbb8 	bl	800a5a2 <USBD_CtlError>
                break;
 8009e32:	e091      	b.n	8009f58 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	da0b      	bge.n	8009e54 <USBD_StdEPReq+0x1a0>
 8009e3c:	7bbb      	ldrb	r3, [r7, #14]
 8009e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e42:	4613      	mov	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	3310      	adds	r3, #16
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	4413      	add	r3, r2
 8009e50:	3304      	adds	r3, #4
 8009e52:	e00b      	b.n	8009e6c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4413      	add	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	4413      	add	r3, r2
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2200      	movs	r2, #0
 8009e72:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2202      	movs	r2, #2
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fbfb 	bl	800a676 <USBD_CtlSendData>
              break;
 8009e80:	e06a      	b.n	8009f58 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	da11      	bge.n	8009eae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	f003 020f 	and.w	r2, r3, #15
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	440b      	add	r3, r1
 8009e9c:	3318      	adds	r3, #24
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d117      	bne.n	8009ed4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fb7b 	bl	800a5a2 <USBD_CtlError>
                  break;
 8009eac:	e054      	b.n	8009f58 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	f003 020f 	and.w	r2, r3, #15
 8009eb4:	6879      	ldr	r1, [r7, #4]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	440b      	add	r3, r1
 8009ec0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d104      	bne.n	8009ed4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fb68 	bl	800a5a2 <USBD_CtlError>
                  break;
 8009ed2:	e041      	b.n	8009f58 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	da0b      	bge.n	8009ef4 <USBD_StdEPReq+0x240>
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	3310      	adds	r3, #16
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	4413      	add	r3, r2
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	e00b      	b.n	8009f0c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009efa:	4613      	mov	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	4413      	add	r3, r2
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f0e:	7bbb      	ldrb	r3, [r7, #14]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <USBD_StdEPReq+0x266>
 8009f14:	7bbb      	ldrb	r3, [r7, #14]
 8009f16:	2b80      	cmp	r3, #128	; 0x80
 8009f18:	d103      	bne.n	8009f22 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	e00e      	b.n	8009f40 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	4619      	mov	r1, r3
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fff2 	bl	800af10 <USBD_LL_IsStallEP>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d003      	beq.n	8009f3a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2201      	movs	r2, #1
 8009f36:	601a      	str	r2, [r3, #0]
 8009f38:	e002      	b.n	8009f40 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2202      	movs	r2, #2
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fb95 	bl	800a676 <USBD_CtlSendData>
              break;
 8009f4c:	e004      	b.n	8009f58 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fb26 	bl	800a5a2 <USBD_CtlError>
              break;
 8009f56:	bf00      	nop
          }
          break;
 8009f58:	e004      	b.n	8009f64 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fb20 	bl	800a5a2 <USBD_CtlError>
          break;
 8009f62:	bf00      	nop
      }
      break;
 8009f64:	e004      	b.n	8009f70 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fb1a 	bl	800a5a2 <USBD_CtlError>
      break;
 8009f6e:	bf00      	nop
  }

  return ret;
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	885b      	ldrh	r3, [r3, #2]
 8009f96:	0a1b      	lsrs	r3, r3, #8
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	2b06      	cmp	r3, #6
 8009f9e:	f200 8128 	bhi.w	800a1f2 <USBD_GetDescriptor+0x276>
 8009fa2:	a201      	add	r2, pc, #4	; (adr r2, 8009fa8 <USBD_GetDescriptor+0x2c>)
 8009fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa8:	08009fc5 	.word	0x08009fc5
 8009fac:	08009fdd 	.word	0x08009fdd
 8009fb0:	0800a01d 	.word	0x0800a01d
 8009fb4:	0800a1f3 	.word	0x0800a1f3
 8009fb8:	0800a1f3 	.word	0x0800a1f3
 8009fbc:	0800a193 	.word	0x0800a193
 8009fc0:	0800a1bf 	.word	0x0800a1bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	7c12      	ldrb	r2, [r2, #16]
 8009fd0:	f107 0108 	add.w	r1, r7, #8
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4798      	blx	r3
 8009fd8:	60f8      	str	r0, [r7, #12]
      break;
 8009fda:	e112      	b.n	800a202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	7c1b      	ldrb	r3, [r3, #16]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10d      	bne.n	800a000 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fec:	f107 0208 	add.w	r2, r7, #8
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	4798      	blx	r3
 8009ff4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ffe:	e100      	b.n	800a202 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a008:	f107 0208 	add.w	r2, r7, #8
 800a00c:	4610      	mov	r0, r2
 800a00e:	4798      	blx	r3
 800a010:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3301      	adds	r3, #1
 800a016:	2202      	movs	r2, #2
 800a018:	701a      	strb	r2, [r3, #0]
      break;
 800a01a:	e0f2      	b.n	800a202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	885b      	ldrh	r3, [r3, #2]
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b05      	cmp	r3, #5
 800a024:	f200 80ac 	bhi.w	800a180 <USBD_GetDescriptor+0x204>
 800a028:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <USBD_GetDescriptor+0xb4>)
 800a02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02e:	bf00      	nop
 800a030:	0800a049 	.word	0x0800a049
 800a034:	0800a07d 	.word	0x0800a07d
 800a038:	0800a0b1 	.word	0x0800a0b1
 800a03c:	0800a0e5 	.word	0x0800a0e5
 800a040:	0800a119 	.word	0x0800a119
 800a044:	0800a14d 	.word	0x0800a14d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00b      	beq.n	800a06c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	7c12      	ldrb	r2, [r2, #16]
 800a060:	f107 0108 	add.w	r1, r7, #8
 800a064:	4610      	mov	r0, r2
 800a066:	4798      	blx	r3
 800a068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a06a:	e091      	b.n	800a190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fa97 	bl	800a5a2 <USBD_CtlError>
            err++;
 800a074:	7afb      	ldrb	r3, [r7, #11]
 800a076:	3301      	adds	r3, #1
 800a078:	72fb      	strb	r3, [r7, #11]
          break;
 800a07a:	e089      	b.n	800a190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00b      	beq.n	800a0a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	7c12      	ldrb	r2, [r2, #16]
 800a094:	f107 0108 	add.w	r1, r7, #8
 800a098:	4610      	mov	r0, r2
 800a09a:	4798      	blx	r3
 800a09c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a09e:	e077      	b.n	800a190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fa7d 	bl	800a5a2 <USBD_CtlError>
            err++;
 800a0a8:	7afb      	ldrb	r3, [r7, #11]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ae:	e06f      	b.n	800a190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00b      	beq.n	800a0d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	7c12      	ldrb	r2, [r2, #16]
 800a0c8:	f107 0108 	add.w	r1, r7, #8
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	4798      	blx	r3
 800a0d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0d2:	e05d      	b.n	800a190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d4:	6839      	ldr	r1, [r7, #0]
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fa63 	bl	800a5a2 <USBD_CtlError>
            err++;
 800a0dc:	7afb      	ldrb	r3, [r7, #11]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0e2:	e055      	b.n	800a190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00b      	beq.n	800a108 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	7c12      	ldrb	r2, [r2, #16]
 800a0fc:	f107 0108 	add.w	r1, r7, #8
 800a100:	4610      	mov	r0, r2
 800a102:	4798      	blx	r3
 800a104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a106:	e043      	b.n	800a190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fa49 	bl	800a5a2 <USBD_CtlError>
            err++;
 800a110:	7afb      	ldrb	r3, [r7, #11]
 800a112:	3301      	adds	r3, #1
 800a114:	72fb      	strb	r3, [r7, #11]
          break;
 800a116:	e03b      	b.n	800a190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00b      	beq.n	800a13c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	7c12      	ldrb	r2, [r2, #16]
 800a130:	f107 0108 	add.w	r1, r7, #8
 800a134:	4610      	mov	r0, r2
 800a136:	4798      	blx	r3
 800a138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a13a:	e029      	b.n	800a190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fa2f 	bl	800a5a2 <USBD_CtlError>
            err++;
 800a144:	7afb      	ldrb	r3, [r7, #11]
 800a146:	3301      	adds	r3, #1
 800a148:	72fb      	strb	r3, [r7, #11]
          break;
 800a14a:	e021      	b.n	800a190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00b      	beq.n	800a170 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	7c12      	ldrb	r2, [r2, #16]
 800a164:	f107 0108 	add.w	r1, r7, #8
 800a168:	4610      	mov	r0, r2
 800a16a:	4798      	blx	r3
 800a16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a16e:	e00f      	b.n	800a190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fa15 	bl	800a5a2 <USBD_CtlError>
            err++;
 800a178:	7afb      	ldrb	r3, [r7, #11]
 800a17a:	3301      	adds	r3, #1
 800a17c:	72fb      	strb	r3, [r7, #11]
          break;
 800a17e:	e007      	b.n	800a190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fa0d 	bl	800a5a2 <USBD_CtlError>
          err++;
 800a188:	7afb      	ldrb	r3, [r7, #11]
 800a18a:	3301      	adds	r3, #1
 800a18c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a18e:	e038      	b.n	800a202 <USBD_GetDescriptor+0x286>
 800a190:	e037      	b.n	800a202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	7c1b      	ldrb	r3, [r3, #16]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d109      	bne.n	800a1ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a2:	f107 0208 	add.w	r2, r7, #8
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	4798      	blx	r3
 800a1aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1ac:	e029      	b.n	800a202 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f9f6 	bl	800a5a2 <USBD_CtlError>
        err++;
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a1bc:	e021      	b.n	800a202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	7c1b      	ldrb	r3, [r3, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10d      	bne.n	800a1e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ce:	f107 0208 	add.w	r2, r7, #8
 800a1d2:	4610      	mov	r0, r2
 800a1d4:	4798      	blx	r3
 800a1d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	2207      	movs	r2, #7
 800a1de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1e0:	e00f      	b.n	800a202 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f9dc 	bl	800a5a2 <USBD_CtlError>
        err++;
 800a1ea:	7afb      	ldrb	r3, [r7, #11]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a1f0:	e007      	b.n	800a202 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f9d4 	bl	800a5a2 <USBD_CtlError>
      err++;
 800a1fa:	7afb      	ldrb	r3, [r7, #11]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	72fb      	strb	r3, [r7, #11]
      break;
 800a200:	bf00      	nop
  }

  if (err != 0U)
 800a202:	7afb      	ldrb	r3, [r7, #11]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d11c      	bne.n	800a242 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a208:	893b      	ldrh	r3, [r7, #8]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d011      	beq.n	800a232 <USBD_GetDescriptor+0x2b6>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	88db      	ldrh	r3, [r3, #6]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00d      	beq.n	800a232 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	88da      	ldrh	r2, [r3, #6]
 800a21a:	893b      	ldrh	r3, [r7, #8]
 800a21c:	4293      	cmp	r3, r2
 800a21e:	bf28      	it	cs
 800a220:	4613      	movcs	r3, r2
 800a222:	b29b      	uxth	r3, r3
 800a224:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a226:	893b      	ldrh	r3, [r7, #8]
 800a228:	461a      	mov	r2, r3
 800a22a:	68f9      	ldr	r1, [r7, #12]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fa22 	bl	800a676 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	88db      	ldrh	r3, [r3, #6]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d104      	bne.n	800a244 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fa79 	bl	800a732 <USBD_CtlSendStatus>
 800a240:	e000      	b.n	800a244 <USBD_GetDescriptor+0x2c8>
    return;
 800a242:	bf00      	nop
    }
  }
}
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop

0800a24c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	889b      	ldrh	r3, [r3, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d130      	bne.n	800a2c0 <USBD_SetAddress+0x74>
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	88db      	ldrh	r3, [r3, #6]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d12c      	bne.n	800a2c0 <USBD_SetAddress+0x74>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	885b      	ldrh	r3, [r3, #2]
 800a26a:	2b7f      	cmp	r3, #127	; 0x7f
 800a26c:	d828      	bhi.n	800a2c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	885b      	ldrh	r3, [r3, #2]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a278:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a280:	2b03      	cmp	r3, #3
 800a282:	d104      	bne.n	800a28e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f98b 	bl	800a5a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a28c:	e01d      	b.n	800a2ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	7bfa      	ldrb	r2, [r7, #15]
 800a292:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	4619      	mov	r1, r3
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fe64 	bl	800af68 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 fa46 	bl	800a732 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d004      	beq.n	800a2b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b4:	e009      	b.n	800a2ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2be:	e004      	b.n	800a2ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2c0:	6839      	ldr	r1, [r7, #0]
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f96d 	bl	800a5a2 <USBD_CtlError>
  }
}
 800a2c8:	bf00      	nop
 800a2ca:	bf00      	nop
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
	...

0800a2d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	885b      	ldrh	r3, [r3, #2]
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	4b41      	ldr	r3, [pc, #260]	; (800a3ec <USBD_SetConfig+0x118>)
 800a2e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2e8:	4b40      	ldr	r3, [pc, #256]	; (800a3ec <USBD_SetConfig+0x118>)
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d904      	bls.n	800a2fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f955 	bl	800a5a2 <USBD_CtlError>
 800a2f8:	e075      	b.n	800a3e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a300:	2b02      	cmp	r3, #2
 800a302:	d002      	beq.n	800a30a <USBD_SetConfig+0x36>
 800a304:	2b03      	cmp	r3, #3
 800a306:	d023      	beq.n	800a350 <USBD_SetConfig+0x7c>
 800a308:	e062      	b.n	800a3d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a30a:	4b38      	ldr	r3, [pc, #224]	; (800a3ec <USBD_SetConfig+0x118>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d01a      	beq.n	800a348 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a312:	4b36      	ldr	r3, [pc, #216]	; (800a3ec <USBD_SetConfig+0x118>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2203      	movs	r2, #3
 800a320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a324:	4b31      	ldr	r3, [pc, #196]	; (800a3ec <USBD_SetConfig+0x118>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	4619      	mov	r1, r3
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7ff f9e7 	bl	80096fe <USBD_SetClassConfig>
 800a330:	4603      	mov	r3, r0
 800a332:	2b02      	cmp	r3, #2
 800a334:	d104      	bne.n	800a340 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a336:	6839      	ldr	r1, [r7, #0]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f932 	bl	800a5a2 <USBD_CtlError>
            return;
 800a33e:	e052      	b.n	800a3e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f9f6 	bl	800a732 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a346:	e04e      	b.n	800a3e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 f9f2 	bl	800a732 <USBD_CtlSendStatus>
        break;
 800a34e:	e04a      	b.n	800a3e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a350:	4b26      	ldr	r3, [pc, #152]	; (800a3ec <USBD_SetConfig+0x118>)
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d112      	bne.n	800a37e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a360:	4b22      	ldr	r3, [pc, #136]	; (800a3ec <USBD_SetConfig+0x118>)
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	461a      	mov	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a36a:	4b20      	ldr	r3, [pc, #128]	; (800a3ec <USBD_SetConfig+0x118>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7ff f9e3 	bl	800973c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f9db 	bl	800a732 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a37c:	e033      	b.n	800a3e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a37e:	4b1b      	ldr	r3, [pc, #108]	; (800a3ec <USBD_SetConfig+0x118>)
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	461a      	mov	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d01d      	beq.n	800a3c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	b2db      	uxtb	r3, r3
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff f9d1 	bl	800973c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a39a:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <USBD_SetConfig+0x118>)
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a3a4:	4b11      	ldr	r3, [pc, #68]	; (800a3ec <USBD_SetConfig+0x118>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff f9a7 	bl	80096fe <USBD_SetClassConfig>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d104      	bne.n	800a3c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f8f2 	bl	800a5a2 <USBD_CtlError>
            return;
 800a3be:	e012      	b.n	800a3e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f9b6 	bl	800a732 <USBD_CtlSendStatus>
        break;
 800a3c6:	e00e      	b.n	800a3e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f9b2 	bl	800a732 <USBD_CtlSendStatus>
        break;
 800a3ce:	e00a      	b.n	800a3e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f8e5 	bl	800a5a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a3d8:	4b04      	ldr	r3, [pc, #16]	; (800a3ec <USBD_SetConfig+0x118>)
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7ff f9ac 	bl	800973c <USBD_ClrClassConfig>
        break;
 800a3e4:	bf00      	nop
    }
  }
}
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	20000358 	.word	0x20000358

0800a3f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	88db      	ldrh	r3, [r3, #6]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d004      	beq.n	800a40c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f8cc 	bl	800a5a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a40a:	e022      	b.n	800a452 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a412:	2b02      	cmp	r3, #2
 800a414:	dc02      	bgt.n	800a41c <USBD_GetConfig+0x2c>
 800a416:	2b00      	cmp	r3, #0
 800a418:	dc03      	bgt.n	800a422 <USBD_GetConfig+0x32>
 800a41a:	e015      	b.n	800a448 <USBD_GetConfig+0x58>
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d00b      	beq.n	800a438 <USBD_GetConfig+0x48>
 800a420:	e012      	b.n	800a448 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3308      	adds	r3, #8
 800a42c:	2201      	movs	r2, #1
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 f920 	bl	800a676 <USBD_CtlSendData>
        break;
 800a436:	e00c      	b.n	800a452 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3304      	adds	r3, #4
 800a43c:	2201      	movs	r2, #1
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f918 	bl	800a676 <USBD_CtlSendData>
        break;
 800a446:	e004      	b.n	800a452 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f8a9 	bl	800a5a2 <USBD_CtlError>
        break;
 800a450:	bf00      	nop
}
 800a452:	bf00      	nop
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b082      	sub	sp, #8
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a46a:	3b01      	subs	r3, #1
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d81e      	bhi.n	800a4ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	88db      	ldrh	r3, [r3, #6]
 800a474:	2b02      	cmp	r3, #2
 800a476:	d004      	beq.n	800a482 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f891 	bl	800a5a2 <USBD_CtlError>
        break;
 800a480:	e01a      	b.n	800a4b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2201      	movs	r2, #1
 800a486:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d005      	beq.n	800a49e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	f043 0202 	orr.w	r2, r3, #2
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	330c      	adds	r3, #12
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f8e5 	bl	800a676 <USBD_CtlSendData>
      break;
 800a4ac:	e004      	b.n	800a4b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f876 	bl	800a5a2 <USBD_CtlError>
      break;
 800a4b6:	bf00      	nop
  }
}
 800a4b8:	bf00      	nop
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	885b      	ldrh	r3, [r3, #2]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d106      	bne.n	800a4e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f929 	bl	800a732 <USBD_CtlSendStatus>
  }
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d80b      	bhi.n	800a516 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	885b      	ldrh	r3, [r3, #2]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d10c      	bne.n	800a520 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f90f 	bl	800a732 <USBD_CtlSendStatus>
      }
      break;
 800a514:	e004      	b.n	800a520 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f842 	bl	800a5a2 <USBD_CtlError>
      break;
 800a51e:	e000      	b.n	800a522 <USBD_ClrFeature+0x3a>
      break;
 800a520:	bf00      	nop
  }
}
 800a522:	bf00      	nop
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a52a:	b480      	push	{r7}
 800a52c:	b083      	sub	sp, #12
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	781a      	ldrb	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	785a      	ldrb	r2, [r3, #1]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	3302      	adds	r3, #2
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	3303      	adds	r3, #3
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	b29b      	uxth	r3, r3
 800a554:	021b      	lsls	r3, r3, #8
 800a556:	b29b      	uxth	r3, r3
 800a558:	4413      	add	r3, r2
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	3304      	adds	r3, #4
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	b29a      	uxth	r2, r3
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	3305      	adds	r3, #5
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	b29b      	uxth	r3, r3
 800a570:	021b      	lsls	r3, r3, #8
 800a572:	b29b      	uxth	r3, r3
 800a574:	4413      	add	r3, r2
 800a576:	b29a      	uxth	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	3306      	adds	r3, #6
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	b29a      	uxth	r2, r3
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	3307      	adds	r3, #7
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	021b      	lsls	r3, r3, #8
 800a58e:	b29b      	uxth	r3, r3
 800a590:	4413      	add	r3, r2
 800a592:	b29a      	uxth	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	80da      	strh	r2, [r3, #6]

}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bc80      	pop	{r7}
 800a5a0:	4770      	bx	lr

0800a5a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a5ac:	2180      	movs	r1, #128	; 0x80
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 fc70 	bl	800ae94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fc6c 	bl	800ae94 <USBD_LL_StallEP>
}
 800a5bc:	bf00      	nop
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d032      	beq.n	800a640 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f000 f834 	bl	800a648 <USBD_GetLen>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	005b      	lsls	r3, r3, #1
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	75fa      	strb	r2, [r7, #23]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	7812      	ldrb	r2, [r2, #0]
 800a5fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a600:	7dfb      	ldrb	r3, [r7, #23]
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	75fa      	strb	r2, [r7, #23]
 800a606:	461a      	mov	r2, r3
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	4413      	add	r3, r2
 800a60c:	2203      	movs	r2, #3
 800a60e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a610:	e012      	b.n	800a638 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	60fa      	str	r2, [r7, #12]
 800a618:	7dfa      	ldrb	r2, [r7, #23]
 800a61a:	1c51      	adds	r1, r2, #1
 800a61c:	75f9      	strb	r1, [r7, #23]
 800a61e:	4611      	mov	r1, r2
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	440a      	add	r2, r1
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a628:	7dfb      	ldrb	r3, [r7, #23]
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	75fa      	strb	r2, [r7, #23]
 800a62e:	461a      	mov	r2, r3
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	4413      	add	r3, r2
 800a634:	2200      	movs	r2, #0
 800a636:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1e8      	bne.n	800a612 <USBD_GetString+0x4e>
    }
  }
}
 800a640:	bf00      	nop
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a654:	e005      	b.n	800a662 <USBD_GetLen+0x1a>
  {
    len++;
 800a656:	7bfb      	ldrb	r3, [r7, #15]
 800a658:	3301      	adds	r3, #1
 800a65a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	3301      	adds	r3, #1
 800a660:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1f5      	bne.n	800a656 <USBD_GetLen+0xe>
  }

  return len;
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	bc80      	pop	{r7}
 800a674:	4770      	bx	lr

0800a676 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b084      	sub	sp, #16
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	60f8      	str	r0, [r7, #12]
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	4613      	mov	r3, r2
 800a682:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2202      	movs	r2, #2
 800a688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a68c:	88fa      	ldrh	r2, [r7, #6]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a692:	88fa      	ldrh	r2, [r7, #6]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a698:	88fb      	ldrh	r3, [r7, #6]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	2100      	movs	r1, #0
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 fc81 	bl	800afa6 <USBD_LL_Transmit>

  return USBD_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6bc:	88fb      	ldrh	r3, [r7, #6]
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f000 fc6f 	bl	800afa6 <USBD_LL_Transmit>

  return USBD_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b084      	sub	sp, #16
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	60f8      	str	r0, [r7, #12]
 800a6da:	60b9      	str	r1, [r7, #8]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2203      	movs	r2, #3
 800a6e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a6e8:	88fa      	ldrh	r2, [r7, #6]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a6f0:	88fa      	ldrh	r2, [r7, #6]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6f8:	88fb      	ldrh	r3, [r7, #6]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f000 fc74 	bl	800afec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	60f8      	str	r0, [r7, #12]
 800a716:	60b9      	str	r1, [r7, #8]
 800a718:	4613      	mov	r3, r2
 800a71a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a71c:	88fb      	ldrh	r3, [r7, #6]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	2100      	movs	r1, #0
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f000 fc62 	bl	800afec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b082      	sub	sp, #8
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2204      	movs	r2, #4
 800a73e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a742:	2300      	movs	r3, #0
 800a744:	2200      	movs	r2, #0
 800a746:	2100      	movs	r1, #0
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fc2c 	bl	800afa6 <USBD_LL_Transmit>

  return USBD_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2205      	movs	r2, #5
 800a764:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a768:	2300      	movs	r3, #0
 800a76a:	2200      	movs	r2, #0
 800a76c:	2100      	movs	r1, #0
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fc3c 	bl	800afec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a784:	2200      	movs	r2, #0
 800a786:	4912      	ldr	r1, [pc, #72]	; (800a7d0 <MX_USB_DEVICE_Init+0x50>)
 800a788:	4812      	ldr	r0, [pc, #72]	; (800a7d4 <MX_USB_DEVICE_Init+0x54>)
 800a78a:	f7fe ff5e 	bl	800964a <USBD_Init>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a794:	f7f6 f883 	bl	800089e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a798:	490f      	ldr	r1, [pc, #60]	; (800a7d8 <MX_USB_DEVICE_Init+0x58>)
 800a79a:	480e      	ldr	r0, [pc, #56]	; (800a7d4 <MX_USB_DEVICE_Init+0x54>)
 800a79c:	f7fe ff80 	bl	80096a0 <USBD_RegisterClass>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a7a6:	f7f6 f87a 	bl	800089e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a7aa:	490c      	ldr	r1, [pc, #48]	; (800a7dc <MX_USB_DEVICE_Init+0x5c>)
 800a7ac:	4809      	ldr	r0, [pc, #36]	; (800a7d4 <MX_USB_DEVICE_Init+0x54>)
 800a7ae:	f7fe feb1 	bl	8009514 <USBD_CDC_RegisterInterface>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a7b8:	f7f6 f871 	bl	800089e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a7bc:	4805      	ldr	r0, [pc, #20]	; (800a7d4 <MX_USB_DEVICE_Init+0x54>)
 800a7be:	f7fe ff88 	bl	80096d2 <USBD_Start>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7c8:	f7f6 f869 	bl	800089e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7cc:	bf00      	nop
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20000130 	.word	0x20000130
 800a7d4:	2000035c 	.word	0x2000035c
 800a7d8:	2000001c 	.word	0x2000001c
 800a7dc:	20000120 	.word	0x20000120

0800a7e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	4905      	ldr	r1, [pc, #20]	; (800a7fc <CDC_Init_FS+0x1c>)
 800a7e8:	4805      	ldr	r0, [pc, #20]	; (800a800 <CDC_Init_FS+0x20>)
 800a7ea:	f7fe fea9 	bl	8009540 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7ee:	4905      	ldr	r1, [pc, #20]	; (800a804 <CDC_Init_FS+0x24>)
 800a7f0:	4803      	ldr	r0, [pc, #12]	; (800a800 <CDC_Init_FS+0x20>)
 800a7f2:	f7fe febe 	bl	8009572 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	20000a20 	.word	0x20000a20
 800a800:	2000035c 	.word	0x2000035c
 800a804:	20000620 	.word	0x20000620

0800a808 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a808:	b480      	push	{r7}
 800a80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a80c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a80e:	4618      	mov	r0, r3
 800a810:	46bd      	mov	sp, r7
 800a812:	bc80      	pop	{r7}
 800a814:	4770      	bx	lr
	...

0800a818 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	4603      	mov	r3, r0
 800a820:	6039      	str	r1, [r7, #0]
 800a822:	71fb      	strb	r3, [r7, #7]
 800a824:	4613      	mov	r3, r2
 800a826:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a828:	79fb      	ldrb	r3, [r7, #7]
 800a82a:	2b23      	cmp	r3, #35	; 0x23
 800a82c:	d84a      	bhi.n	800a8c4 <CDC_Control_FS+0xac>
 800a82e:	a201      	add	r2, pc, #4	; (adr r2, 800a834 <CDC_Control_FS+0x1c>)
 800a830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a834:	0800a8c5 	.word	0x0800a8c5
 800a838:	0800a8c5 	.word	0x0800a8c5
 800a83c:	0800a8c5 	.word	0x0800a8c5
 800a840:	0800a8c5 	.word	0x0800a8c5
 800a844:	0800a8c5 	.word	0x0800a8c5
 800a848:	0800a8c5 	.word	0x0800a8c5
 800a84c:	0800a8c5 	.word	0x0800a8c5
 800a850:	0800a8c5 	.word	0x0800a8c5
 800a854:	0800a8c5 	.word	0x0800a8c5
 800a858:	0800a8c5 	.word	0x0800a8c5
 800a85c:	0800a8c5 	.word	0x0800a8c5
 800a860:	0800a8c5 	.word	0x0800a8c5
 800a864:	0800a8c5 	.word	0x0800a8c5
 800a868:	0800a8c5 	.word	0x0800a8c5
 800a86c:	0800a8c5 	.word	0x0800a8c5
 800a870:	0800a8c5 	.word	0x0800a8c5
 800a874:	0800a8c5 	.word	0x0800a8c5
 800a878:	0800a8c5 	.word	0x0800a8c5
 800a87c:	0800a8c5 	.word	0x0800a8c5
 800a880:	0800a8c5 	.word	0x0800a8c5
 800a884:	0800a8c5 	.word	0x0800a8c5
 800a888:	0800a8c5 	.word	0x0800a8c5
 800a88c:	0800a8c5 	.word	0x0800a8c5
 800a890:	0800a8c5 	.word	0x0800a8c5
 800a894:	0800a8c5 	.word	0x0800a8c5
 800a898:	0800a8c5 	.word	0x0800a8c5
 800a89c:	0800a8c5 	.word	0x0800a8c5
 800a8a0:	0800a8c5 	.word	0x0800a8c5
 800a8a4:	0800a8c5 	.word	0x0800a8c5
 800a8a8:	0800a8c5 	.word	0x0800a8c5
 800a8ac:	0800a8c5 	.word	0x0800a8c5
 800a8b0:	0800a8c5 	.word	0x0800a8c5
 800a8b4:	0800a8c5 	.word	0x0800a8c5
 800a8b8:	0800a8c5 	.word	0x0800a8c5
 800a8bc:	0800a8c5 	.word	0x0800a8c5
 800a8c0:	0800a8c5 	.word	0x0800a8c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a8c4:	bf00      	nop
  }

  return (USBD_OK);
 800a8c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bc80      	pop	{r7}
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop

0800a8d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; ++i)
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60fb      	str	r3, [r7, #12]
 800a8e2:	e00b      	b.n	800a8fc <CDC_Receive_FS+0x28>
  {
	  Buffer_Write(FIFO_buf, Buf[i]);
 800a8e4:	4b11      	ldr	r3, [pc, #68]	; (800a92c <CDC_Receive_FS+0x58>)
 800a8e6:	6818      	ldr	r0, [r3, #0]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	f7f5 fcbf 	bl	8000274 <Buffer_Write>
  for (int i = 0; i < *Len; ++i)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	429a      	cmp	r2, r3
 800a904:	d8ee      	bhi.n	800a8e4 <CDC_Receive_FS+0x10>
  }
  memset(Buf, 0, *Len);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	2100      	movs	r1, #0
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f002 f804 	bl	800c91c <memset>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a914:	6879      	ldr	r1, [r7, #4]
 800a916:	4806      	ldr	r0, [pc, #24]	; (800a930 <CDC_Receive_FS+0x5c>)
 800a918:	f7fe fe2b 	bl	8009572 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a91c:	4804      	ldr	r0, [pc, #16]	; (800a930 <CDC_Receive_FS+0x5c>)
 800a91e:	f7fe fe6a 	bl	80095f6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a922:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	200002f4 	.word	0x200002f4
 800a930:	2000035c 	.word	0x2000035c

0800a934 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a940:	2300      	movs	r3, #0
 800a942:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a944:	4b0d      	ldr	r3, [pc, #52]	; (800a97c <CDC_Transmit_FS+0x48>)
 800a946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a94a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a956:	2301      	movs	r3, #1
 800a958:	e00b      	b.n	800a972 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a95a:	887b      	ldrh	r3, [r7, #2]
 800a95c:	461a      	mov	r2, r3
 800a95e:	6879      	ldr	r1, [r7, #4]
 800a960:	4806      	ldr	r0, [pc, #24]	; (800a97c <CDC_Transmit_FS+0x48>)
 800a962:	f7fe fded 	bl	8009540 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a966:	4805      	ldr	r0, [pc, #20]	; (800a97c <CDC_Transmit_FS+0x48>)
 800a968:	f7fe fe16 	bl	8009598 <USBD_CDC_TransmitPacket>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a970:	7bfb      	ldrb	r3, [r7, #15]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	2000035c 	.word	0x2000035c

0800a980 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	4603      	mov	r3, r0
 800a988:	6039      	str	r1, [r7, #0]
 800a98a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2212      	movs	r2, #18
 800a990:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a992:	4b03      	ldr	r3, [pc, #12]	; (800a9a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	bc80      	pop	{r7}
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	2000014c 	.word	0x2000014c

0800a9a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	6039      	str	r1, [r7, #0]
 800a9ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2204      	movs	r2, #4
 800a9b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a9b6:	4b03      	ldr	r3, [pc, #12]	; (800a9c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bc80      	pop	{r7}
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	20000160 	.word	0x20000160

0800a9c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	6039      	str	r1, [r7, #0]
 800a9d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d105      	bne.n	800a9e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	4907      	ldr	r1, [pc, #28]	; (800a9fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a9de:	4808      	ldr	r0, [pc, #32]	; (800aa00 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9e0:	f7ff fdf0 	bl	800a5c4 <USBD_GetString>
 800a9e4:	e004      	b.n	800a9f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	4904      	ldr	r1, [pc, #16]	; (800a9fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a9ea:	4805      	ldr	r0, [pc, #20]	; (800aa00 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9ec:	f7ff fdea 	bl	800a5c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9f0:	4b02      	ldr	r3, [pc, #8]	; (800a9fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20000e20 	.word	0x20000e20
 800aa00:	0800cab8 	.word	0x0800cab8

0800aa04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	6039      	str	r1, [r7, #0]
 800aa0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa10:	683a      	ldr	r2, [r7, #0]
 800aa12:	4904      	ldr	r1, [pc, #16]	; (800aa24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa14:	4804      	ldr	r0, [pc, #16]	; (800aa28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa16:	f7ff fdd5 	bl	800a5c4 <USBD_GetString>
  return USBD_StrDesc;
 800aa1a:	4b02      	ldr	r3, [pc, #8]	; (800aa24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	20000e20 	.word	0x20000e20
 800aa28:	0800cad0 	.word	0x0800cad0

0800aa2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	6039      	str	r1, [r7, #0]
 800aa36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	221a      	movs	r2, #26
 800aa3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa3e:	f000 f843 	bl	800aac8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa42:	4b02      	ldr	r3, [pc, #8]	; (800aa4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20000164 	.word	0x20000164

0800aa50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	6039      	str	r1, [r7, #0]
 800aa5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa5c:	79fb      	ldrb	r3, [r7, #7]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d105      	bne.n	800aa6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	4907      	ldr	r1, [pc, #28]	; (800aa84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa66:	4808      	ldr	r0, [pc, #32]	; (800aa88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa68:	f7ff fdac 	bl	800a5c4 <USBD_GetString>
 800aa6c:	e004      	b.n	800aa78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa6e:	683a      	ldr	r2, [r7, #0]
 800aa70:	4904      	ldr	r1, [pc, #16]	; (800aa84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa72:	4805      	ldr	r0, [pc, #20]	; (800aa88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa74:	f7ff fda6 	bl	800a5c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa78:	4b02      	ldr	r3, [pc, #8]	; (800aa84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20000e20 	.word	0x20000e20
 800aa88:	0800cae4 	.word	0x0800cae4

0800aa8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	4603      	mov	r3, r0
 800aa94:	6039      	str	r1, [r7, #0]
 800aa96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa98:	79fb      	ldrb	r3, [r7, #7]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d105      	bne.n	800aaaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	4907      	ldr	r1, [pc, #28]	; (800aac0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaa2:	4808      	ldr	r0, [pc, #32]	; (800aac4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaa4:	f7ff fd8e 	bl	800a5c4 <USBD_GetString>
 800aaa8:	e004      	b.n	800aab4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	4904      	ldr	r1, [pc, #16]	; (800aac0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaae:	4805      	ldr	r0, [pc, #20]	; (800aac4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aab0:	f7ff fd88 	bl	800a5c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aab4:	4b02      	ldr	r3, [pc, #8]	; (800aac0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	20000e20 	.word	0x20000e20
 800aac4:	0800caf0 	.word	0x0800caf0

0800aac8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aace:	4b0f      	ldr	r3, [pc, #60]	; (800ab0c <Get_SerialNum+0x44>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aad4:	4b0e      	ldr	r3, [pc, #56]	; (800ab10 <Get_SerialNum+0x48>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aada:	4b0e      	ldr	r3, [pc, #56]	; (800ab14 <Get_SerialNum+0x4c>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4413      	add	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d009      	beq.n	800ab02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aaee:	2208      	movs	r2, #8
 800aaf0:	4909      	ldr	r1, [pc, #36]	; (800ab18 <Get_SerialNum+0x50>)
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f000 f814 	bl	800ab20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aaf8:	2204      	movs	r2, #4
 800aafa:	4908      	ldr	r1, [pc, #32]	; (800ab1c <Get_SerialNum+0x54>)
 800aafc:	68b8      	ldr	r0, [r7, #8]
 800aafe:	f000 f80f 	bl	800ab20 <IntToUnicode>
  }
}
 800ab02:	bf00      	nop
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	1ffff7e8 	.word	0x1ffff7e8
 800ab10:	1ffff7ec 	.word	0x1ffff7ec
 800ab14:	1ffff7f0 	.word	0x1ffff7f0
 800ab18:	20000166 	.word	0x20000166
 800ab1c:	20000176 	.word	0x20000176

0800ab20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab32:	2300      	movs	r3, #0
 800ab34:	75fb      	strb	r3, [r7, #23]
 800ab36:	e027      	b.n	800ab88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	0f1b      	lsrs	r3, r3, #28
 800ab3c:	2b09      	cmp	r3, #9
 800ab3e:	d80b      	bhi.n	800ab58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	0f1b      	lsrs	r3, r3, #28
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	7dfb      	ldrb	r3, [r7, #23]
 800ab48:	005b      	lsls	r3, r3, #1
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	440b      	add	r3, r1
 800ab50:	3230      	adds	r2, #48	; 0x30
 800ab52:	b2d2      	uxtb	r2, r2
 800ab54:	701a      	strb	r2, [r3, #0]
 800ab56:	e00a      	b.n	800ab6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	0f1b      	lsrs	r3, r3, #28
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
 800ab60:	005b      	lsls	r3, r3, #1
 800ab62:	4619      	mov	r1, r3
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	440b      	add	r3, r1
 800ab68:	3237      	adds	r2, #55	; 0x37
 800ab6a:	b2d2      	uxtb	r2, r2
 800ab6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	011b      	lsls	r3, r3, #4
 800ab72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab74:	7dfb      	ldrb	r3, [r7, #23]
 800ab76:	005b      	lsls	r3, r3, #1
 800ab78:	3301      	adds	r3, #1
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	2200      	movs	r2, #0
 800ab80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
 800ab84:	3301      	adds	r3, #1
 800ab86:	75fb      	strb	r3, [r7, #23]
 800ab88:	7dfa      	ldrb	r2, [r7, #23]
 800ab8a:	79fb      	ldrb	r3, [r7, #7]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d3d3      	bcc.n	800ab38 <IntToUnicode+0x18>
  }
}
 800ab90:	bf00      	nop
 800ab92:	bf00      	nop
 800ab94:	371c      	adds	r7, #28
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bc80      	pop	{r7}
 800ab9a:	4770      	bx	lr

0800ab9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a0d      	ldr	r2, [pc, #52]	; (800abe0 <HAL_PCD_MspInit+0x44>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d113      	bne.n	800abd6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800abae:	4b0d      	ldr	r3, [pc, #52]	; (800abe4 <HAL_PCD_MspInit+0x48>)
 800abb0:	69db      	ldr	r3, [r3, #28]
 800abb2:	4a0c      	ldr	r2, [pc, #48]	; (800abe4 <HAL_PCD_MspInit+0x48>)
 800abb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800abb8:	61d3      	str	r3, [r2, #28]
 800abba:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <HAL_PCD_MspInit+0x48>)
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abc2:	60fb      	str	r3, [r7, #12]
 800abc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800abc6:	2200      	movs	r2, #0
 800abc8:	2100      	movs	r1, #0
 800abca:	2014      	movs	r0, #20
 800abcc:	f7f6 f977 	bl	8000ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800abd0:	2014      	movs	r0, #20
 800abd2:	f7f6 f990 	bl	8000ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800abd6:	bf00      	nop
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	40005c00 	.word	0x40005c00
 800abe4:	40021000 	.word	0x40021000

0800abe8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800abfc:	4619      	mov	r1, r3
 800abfe:	4610      	mov	r0, r2
 800ac00:	f7fe fdaf 	bl	8009762 <USBD_LL_SetupStage>
}
 800ac04:	bf00      	nop
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ac1e:	78fa      	ldrb	r2, [r7, #3]
 800ac20:	6879      	ldr	r1, [r7, #4]
 800ac22:	4613      	mov	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	440b      	add	r3, r1
 800ac2c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	78fb      	ldrb	r3, [r7, #3]
 800ac34:	4619      	mov	r1, r3
 800ac36:	f7fe fde1 	bl	80097fc <USBD_LL_DataOutStage>
}
 800ac3a:	bf00      	nop
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b082      	sub	sp, #8
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ac54:	78fa      	ldrb	r2, [r7, #3]
 800ac56:	6879      	ldr	r1, [r7, #4]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	00db      	lsls	r3, r3, #3
 800ac60:	440b      	add	r3, r1
 800ac62:	333c      	adds	r3, #60	; 0x3c
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	78fb      	ldrb	r3, [r7, #3]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	f7fe fe38 	bl	80098de <USBD_LL_DataInStage>
}
 800ac6e:	bf00      	nop
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b082      	sub	sp, #8
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fe ff48 	bl	8009b1a <USBD_LL_SOF>
}
 800ac8a:	bf00      	nop
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b084      	sub	sp, #16
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d001      	beq.n	800acaa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aca6:	f7f5 fdfa 	bl	800089e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800acb0:	7bfa      	ldrb	r2, [r7, #15]
 800acb2:	4611      	mov	r1, r2
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fe fef8 	bl	8009aaa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fe feb1 	bl	8009a28 <USBD_LL_Reset>
}
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
	...

0800acd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fe fef2 	bl	8009ac8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acec:	4b04      	ldr	r3, [pc, #16]	; (800ad00 <HAL_PCD_SuspendCallback+0x30>)
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	4a03      	ldr	r2, [pc, #12]	; (800ad00 <HAL_PCD_SuspendCallback+0x30>)
 800acf2:	f043 0306 	orr.w	r3, r3, #6
 800acf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800acf8:	bf00      	nop
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	e000ed00 	.word	0xe000ed00

0800ad04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe feec 	bl	8009af0 <USBD_LL_Resume>
}
 800ad18:	bf00      	nop
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ad28:	4a28      	ldr	r2, [pc, #160]	; (800adcc <USBD_LL_Init+0xac>)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a26      	ldr	r2, [pc, #152]	; (800adcc <USBD_LL_Init+0xac>)
 800ad34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ad38:	4b24      	ldr	r3, [pc, #144]	; (800adcc <USBD_LL_Init+0xac>)
 800ad3a:	4a25      	ldr	r2, [pc, #148]	; (800add0 <USBD_LL_Init+0xb0>)
 800ad3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ad3e:	4b23      	ldr	r3, [pc, #140]	; (800adcc <USBD_LL_Init+0xac>)
 800ad40:	2208      	movs	r2, #8
 800ad42:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ad44:	4b21      	ldr	r3, [pc, #132]	; (800adcc <USBD_LL_Init+0xac>)
 800ad46:	2202      	movs	r2, #2
 800ad48:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ad4a:	4b20      	ldr	r3, [pc, #128]	; (800adcc <USBD_LL_Init+0xac>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ad50:	4b1e      	ldr	r3, [pc, #120]	; (800adcc <USBD_LL_Init+0xac>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ad56:	4b1d      	ldr	r3, [pc, #116]	; (800adcc <USBD_LL_Init+0xac>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ad5c:	481b      	ldr	r0, [pc, #108]	; (800adcc <USBD_LL_Init+0xac>)
 800ad5e:	f7f8 ffe9 	bl	8003d34 <HAL_PCD_Init>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ad68:	f7f5 fd99 	bl	800089e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad72:	2318      	movs	r3, #24
 800ad74:	2200      	movs	r2, #0
 800ad76:	2100      	movs	r1, #0
 800ad78:	f7fa fc5d 	bl	8005636 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad82:	2358      	movs	r3, #88	; 0x58
 800ad84:	2200      	movs	r2, #0
 800ad86:	2180      	movs	r1, #128	; 0x80
 800ad88:	f7fa fc55 	bl	8005636 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad92:	23c0      	movs	r3, #192	; 0xc0
 800ad94:	2200      	movs	r2, #0
 800ad96:	2181      	movs	r1, #129	; 0x81
 800ad98:	f7fa fc4d 	bl	8005636 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ada2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ada6:	2200      	movs	r2, #0
 800ada8:	2101      	movs	r1, #1
 800adaa:	f7fa fc44 	bl	8005636 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adb8:	2200      	movs	r2, #0
 800adba:	2182      	movs	r1, #130	; 0x82
 800adbc:	f7fa fc3b 	bl	8005636 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	20001020 	.word	0x20001020
 800add0:	40005c00 	.word	0x40005c00

0800add4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adea:	4618      	mov	r0, r3
 800adec:	f7f9 f8ad 	bl	8003f4a <HAL_PCD_Start>
 800adf0:	4603      	mov	r3, r0
 800adf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 f94e 	bl	800b098 <USBD_Get_USB_Status>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	4608      	mov	r0, r1
 800ae14:	4611      	mov	r1, r2
 800ae16:	461a      	mov	r2, r3
 800ae18:	4603      	mov	r3, r0
 800ae1a:	70fb      	strb	r3, [r7, #3]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	70bb      	strb	r3, [r7, #2]
 800ae20:	4613      	mov	r3, r2
 800ae22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae32:	78bb      	ldrb	r3, [r7, #2]
 800ae34:	883a      	ldrh	r2, [r7, #0]
 800ae36:	78f9      	ldrb	r1, [r7, #3]
 800ae38:	f7f9 fa25 	bl	8004286 <HAL_PCD_EP_Open>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f000 f928 	bl	800b098 <USBD_Get_USB_Status>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b084      	sub	sp, #16
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
 800ae5e:	460b      	mov	r3, r1
 800ae60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae66:	2300      	movs	r3, #0
 800ae68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae70:	78fa      	ldrb	r2, [r7, #3]
 800ae72:	4611      	mov	r1, r2
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7f9 fa6c 	bl	8004352 <HAL_PCD_EP_Close>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f000 f909 	bl	800b098 <USBD_Get_USB_Status>
 800ae86:	4603      	mov	r3, r0
 800ae88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aeae:	78fa      	ldrb	r2, [r7, #3]
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7f9 fb2c 	bl	8004510 <HAL_PCD_EP_SetStall>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 f8ea 	bl	800b098 <USBD_Get_USB_Status>
 800aec4:	4603      	mov	r3, r0
 800aec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aec8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b084      	sub	sp, #16
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	460b      	mov	r3, r1
 800aedc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aee2:	2300      	movs	r3, #0
 800aee4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aeec:	78fa      	ldrb	r2, [r7, #3]
 800aeee:	4611      	mov	r1, r2
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7f9 fb6d 	bl	80045d0 <HAL_PCD_EP_ClrStall>
 800aef6:	4603      	mov	r3, r0
 800aef8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aefa:	7bfb      	ldrb	r3, [r7, #15]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f000 f8cb 	bl	800b098 <USBD_Get_USB_Status>
 800af02:	4603      	mov	r3, r0
 800af04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af06:	7bbb      	ldrb	r3, [r7, #14]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	460b      	mov	r3, r1
 800af1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	da0c      	bge.n	800af46 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af2c:	78fb      	ldrb	r3, [r7, #3]
 800af2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af32:	68f9      	ldr	r1, [r7, #12]
 800af34:	1c5a      	adds	r2, r3, #1
 800af36:	4613      	mov	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4413      	add	r3, r2
 800af3c:	00db      	lsls	r3, r3, #3
 800af3e:	440b      	add	r3, r1
 800af40:	3302      	adds	r3, #2
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	e00b      	b.n	800af5e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af46:	78fb      	ldrb	r3, [r7, #3]
 800af48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af4c:	68f9      	ldr	r1, [r7, #12]
 800af4e:	4613      	mov	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	4413      	add	r3, r2
 800af54:	00db      	lsls	r3, r3, #3
 800af56:	440b      	add	r3, r1
 800af58:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800af5c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3714      	adds	r7, #20
 800af62:	46bd      	mov	sp, r7
 800af64:	bc80      	pop	{r7}
 800af66:	4770      	bx	lr

0800af68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af82:	78fa      	ldrb	r2, [r7, #3]
 800af84:	4611      	mov	r1, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f7f9 f958 	bl	800423c <HAL_PCD_SetAddress>
 800af8c:	4603      	mov	r3, r0
 800af8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af90:	7bfb      	ldrb	r3, [r7, #15]
 800af92:	4618      	mov	r0, r3
 800af94:	f000 f880 	bl	800b098 <USBD_Get_USB_Status>
 800af98:	4603      	mov	r3, r0
 800af9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b086      	sub	sp, #24
 800afaa:	af00      	add	r7, sp, #0
 800afac:	60f8      	str	r0, [r7, #12]
 800afae:	607a      	str	r2, [r7, #4]
 800afb0:	461a      	mov	r2, r3
 800afb2:	460b      	mov	r3, r1
 800afb4:	72fb      	strb	r3, [r7, #11]
 800afb6:	4613      	mov	r3, r2
 800afb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afc8:	893b      	ldrh	r3, [r7, #8]
 800afca:	7af9      	ldrb	r1, [r7, #11]
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	f7f9 fa5c 	bl	800448a <HAL_PCD_EP_Transmit>
 800afd2:	4603      	mov	r3, r0
 800afd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afd6:	7dfb      	ldrb	r3, [r7, #23]
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 f85d 	bl	800b098 <USBD_Get_USB_Status>
 800afde:	4603      	mov	r3, r0
 800afe0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afe2:	7dbb      	ldrb	r3, [r7, #22]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3718      	adds	r7, #24
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	607a      	str	r2, [r7, #4]
 800aff6:	461a      	mov	r2, r3
 800aff8:	460b      	mov	r3, r1
 800affa:	72fb      	strb	r3, [r7, #11]
 800affc:	4613      	mov	r3, r2
 800affe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b004:	2300      	movs	r3, #0
 800b006:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b00e:	893b      	ldrh	r3, [r7, #8]
 800b010:	7af9      	ldrb	r1, [r7, #11]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	f7f9 f9e5 	bl	80043e2 <HAL_PCD_EP_Receive>
 800b018:	4603      	mov	r3, r0
 800b01a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b01c:	7dfb      	ldrb	r3, [r7, #23]
 800b01e:	4618      	mov	r0, r3
 800b020:	f000 f83a 	bl	800b098 <USBD_Get_USB_Status>
 800b024:	4603      	mov	r3, r0
 800b026:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b028:	7dbb      	ldrb	r3, [r7, #22]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	460b      	mov	r3, r1
 800b03c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b044:	78fa      	ldrb	r2, [r7, #3]
 800b046:	4611      	mov	r1, r2
 800b048:	4618      	mov	r0, r3
 800b04a:	f7f9 fa07 	bl	800445c <HAL_PCD_EP_GetRxCount>
 800b04e:	4603      	mov	r3, r0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b060:	4b02      	ldr	r3, [pc, #8]	; (800b06c <USBD_static_malloc+0x14>)
}
 800b062:	4618      	mov	r0, r3
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	bc80      	pop	{r7}
 800b06a:	4770      	bx	lr
 800b06c:	2000130c 	.word	0x2000130c

0800b070 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]

}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bc80      	pop	{r7}
 800b080:	4770      	bx	lr

0800b082 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b082:	b480      	push	{r7}
 800b084:	b083      	sub	sp, #12
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	460b      	mov	r3, r1
 800b08c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b08e:	bf00      	nop
 800b090:	370c      	adds	r7, #12
 800b092:	46bd      	mov	sp, r7
 800b094:	bc80      	pop	{r7}
 800b096:	4770      	bx	lr

0800b098 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0a6:	79fb      	ldrb	r3, [r7, #7]
 800b0a8:	2b03      	cmp	r3, #3
 800b0aa:	d817      	bhi.n	800b0dc <USBD_Get_USB_Status+0x44>
 800b0ac:	a201      	add	r2, pc, #4	; (adr r2, 800b0b4 <USBD_Get_USB_Status+0x1c>)
 800b0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b2:	bf00      	nop
 800b0b4:	0800b0c5 	.word	0x0800b0c5
 800b0b8:	0800b0cb 	.word	0x0800b0cb
 800b0bc:	0800b0d1 	.word	0x0800b0d1
 800b0c0:	0800b0d7 	.word	0x0800b0d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0c8:	e00b      	b.n	800b0e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0ca:	2302      	movs	r3, #2
 800b0cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ce:	e008      	b.n	800b0e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d4:	e005      	b.n	800b0e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0d6:	2302      	movs	r3, #2
 800b0d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b0da:	e002      	b.n	800b0e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b0dc:	2302      	movs	r3, #2
 800b0de:	73fb      	strb	r3, [r7, #15]
    break;
 800b0e0:	bf00      	nop
  }
  return usb_status;
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bc80      	pop	{r7}
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop

0800b0f0 <afe4404_RstSet>:
/* Private variables ---------------------------------------------------------*/
extern uint8_t transmit_cplt;
extern I2C_HandleTypeDef cur_i2c;
/* Private user code ---------------------------------------------------------*/
void afe4404_RstSet(void)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(afe4404_RST_GPIO_PORT, afe4404_RST_PIN, SET);
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	2110      	movs	r1, #16
 800b0f8:	4802      	ldr	r0, [pc, #8]	; (800b104 <afe4404_RstSet+0x14>)
 800b0fa:	f7f6 f91d 	bl	8001338 <HAL_GPIO_WritePin>
}
 800b0fe:	bf00      	nop
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	40010c00 	.word	0x40010c00

0800b108 <afe4404_RstReset>:


void afe4404_RstReset(void)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(afe4404_RST_GPIO_PORT, afe4404_RST_PIN, RESET);
 800b10c:	2200      	movs	r2, #0
 800b10e:	2110      	movs	r1, #16
 800b110:	4802      	ldr	r0, [pc, #8]	; (800b11c <afe4404_RstReset+0x14>)
 800b112:	f7f6 f911 	bl	8001338 <HAL_GPIO_WritePin>
}
 800b116:	bf00      	nop
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	40010c00 	.word	0x40010c00

0800b120 <afe4404_I2C_Write>:

void afe4404_I2C_Write(uint8_t * data, uint8_t count)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af02      	add	r7, sp, #8
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&cur_i2c, afe4404_address<< 1, data, count, 10);
 800b12c:	78fb      	ldrb	r3, [r7, #3]
 800b12e:	b29b      	uxth	r3, r3
 800b130:	220a      	movs	r2, #10
 800b132:	9200      	str	r2, [sp, #0]
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	21b0      	movs	r1, #176	; 0xb0
 800b138:	4803      	ldr	r0, [pc, #12]	; (800b148 <afe4404_I2C_Write+0x28>)
 800b13a:	f7f6 fa7b 	bl	8001634 <HAL_I2C_Master_Transmit>
}
 800b13e:	bf00      	nop
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	200002fc 	.word	0x200002fc

0800b14c <afe4404_I2C_Read>:

void afe4404_I2C_Read(uint8_t * reg, uint8_t * buffer, uint8_t cmd_size, uint8_t count)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af04      	add	r7, sp, #16
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	4611      	mov	r1, r2
 800b158:	461a      	mov	r2, r3
 800b15a:	460b      	mov	r3, r1
 800b15c:	71fb      	strb	r3, [r7, #7]
 800b15e:	4613      	mov	r3, r2
 800b160:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&cur_i2c, afe4404_address<< 1, *reg, cmd_size, buffer, count, 10);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	b29a      	uxth	r2, r3
 800b168:	79fb      	ldrb	r3, [r7, #7]
 800b16a:	b299      	uxth	r1, r3
 800b16c:	79bb      	ldrb	r3, [r7, #6]
 800b16e:	b29b      	uxth	r3, r3
 800b170:	200a      	movs	r0, #10
 800b172:	9002      	str	r0, [sp, #8]
 800b174:	9301      	str	r3, [sp, #4]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	460b      	mov	r3, r1
 800b17c:	21b0      	movs	r1, #176	; 0xb0
 800b17e:	4803      	ldr	r0, [pc, #12]	; (800b18c <afe4404_I2C_Read+0x40>)
 800b180:	f7f6 fb56 	bl	8001830 <HAL_I2C_Mem_Read>
}
 800b184:	bf00      	nop
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	200002fc 	.word	0x200002fc

0800b190 <afe4404_Delay_ms>:

void afe4404_Delay_ms(uint32_t ms)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7f5 fd95 	bl	8000cc8 <HAL_Delay>
}
 800b19e:	bf00      	nop
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <afe4404_send_results>:

void afe4404_send_results(uint8_t num, uint16_t hr, uint32_t led1, uint32_t led2, uint32_t led3)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b086      	sub	sp, #24
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	60ba      	str	r2, [r7, #8]
 800b1ae:	607b      	str	r3, [r7, #4]
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73fb      	strb	r3, [r7, #15]
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	81bb      	strh	r3, [r7, #12]
	unsigned char channel_num = 3;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	75fb      	strb	r3, [r7, #23]
	afe4404_send_preambula();
 800b1bc:	f000 f82f 	bl	800b21e <afe4404_send_preambula>
	afe4404_Delay_ms(5);
 800b1c0:	2005      	movs	r0, #5
 800b1c2:	f7ff ffe5 	bl	800b190 <afe4404_Delay_ms>

	CDC_Transmit_FS((unsigned char*) &num, 1);
 800b1c6:	f107 030f 	add.w	r3, r7, #15
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7ff fbb1 	bl	800a934 <CDC_Transmit_FS>
	afe4404_Delay_ms(5);
 800b1d2:	2005      	movs	r0, #5
 800b1d4:	f7ff ffdc 	bl	800b190 <afe4404_Delay_ms>
	CDC_Transmit_FS((unsigned char*) &channel_num, 1);
 800b1d8:	f107 0317 	add.w	r3, r7, #23
 800b1dc:	2101      	movs	r1, #1
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7ff fba8 	bl	800a934 <CDC_Transmit_FS>

	afe4404_Delay_ms(5);
 800b1e4:	2005      	movs	r0, #5
 800b1e6:	f7ff ffd3 	bl	800b190 <afe4404_Delay_ms>
	CDC_Transmit_FS((unsigned char*) &led1, 4);
 800b1ea:	f107 0308 	add.w	r3, r7, #8
 800b1ee:	2104      	movs	r1, #4
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff fb9f 	bl	800a934 <CDC_Transmit_FS>
	afe4404_Delay_ms(5);
 800b1f6:	2005      	movs	r0, #5
 800b1f8:	f7ff ffca 	bl	800b190 <afe4404_Delay_ms>

	CDC_Transmit_FS((unsigned char*) &led2, 4);
 800b1fc:	1d3b      	adds	r3, r7, #4
 800b1fe:	2104      	movs	r1, #4
 800b200:	4618      	mov	r0, r3
 800b202:	f7ff fb97 	bl	800a934 <CDC_Transmit_FS>
	afe4404_Delay_ms(5);
 800b206:	2005      	movs	r0, #5
 800b208:	f7ff ffc2 	bl	800b190 <afe4404_Delay_ms>

	CDC_Transmit_FS((unsigned char*) &led3, 4);
 800b20c:	2104      	movs	r1, #4
 800b20e:	f107 0020 	add.w	r0, r7, #32
 800b212:	f7ff fb8f 	bl	800a934 <CDC_Transmit_FS>

	//	char send[128];
	//	sprintf(send, "%d, %ld\r\n", num, led1);
	//	CDC_Transmit_FS((unsigned char*) send, strlen(send));
	//
}
 800b216:	bf00      	nop
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <afe4404_send_preambula>:

void afe4404_send_preambula()
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
	char preambula[4];
	preambula[0] = 0xAA;
 800b224:	23aa      	movs	r3, #170	; 0xaa
 800b226:	713b      	strb	r3, [r7, #4]
	preambula[1] = 0x55;
 800b228:	2355      	movs	r3, #85	; 0x55
 800b22a:	717b      	strb	r3, [r7, #5]
	preambula[2] = 0xAA;
 800b22c:	23aa      	movs	r3, #170	; 0xaa
 800b22e:	71bb      	strb	r3, [r7, #6]
	preambula[3] = 0x55;
 800b230:	2355      	movs	r3, #85	; 0x55
 800b232:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((unsigned char*) &preambula, 4);
 800b234:	1d3b      	adds	r3, r7, #4
 800b236:	2104      	movs	r1, #4
 800b238:	4618      	mov	r0, r3
 800b23a:	f7ff fb7b 	bl	800a934 <CDC_Transmit_FS>
}
 800b23e:	bf00      	nop
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <hr3_get_heartrate>:

    return &led_values;
}

uint8_t hr3_get_heartrate( void )
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
        uint8_t i = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	71fb      	strb	r3, [r7, #7]
        uint32_t temp = 0;
 800b252:	2300      	movs	r3, #0
 800b254:	603b      	str	r3, [r7, #0]
        
        for( i = 0; i < 12; i++ )
 800b256:	2300      	movs	r3, #0
 800b258:	71fb      	strb	r3, [r7, #7]
 800b25a:	e009      	b.n	800b270 <hr3_get_heartrate+0x28>
            temp += HR[i];
 800b25c:	79fb      	ldrb	r3, [r7, #7]
 800b25e:	4a0c      	ldr	r2, [pc, #48]	; (800b290 <hr3_get_heartrate+0x48>)
 800b260:	5cd3      	ldrb	r3, [r2, r3]
 800b262:	461a      	mov	r2, r3
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	4413      	add	r3, r2
 800b268:	603b      	str	r3, [r7, #0]
        for( i = 0; i < 12; i++ )
 800b26a:	79fb      	ldrb	r3, [r7, #7]
 800b26c:	3301      	adds	r3, #1
 800b26e:	71fb      	strb	r3, [r7, #7]
 800b270:	79fb      	ldrb	r3, [r7, #7]
 800b272:	2b0b      	cmp	r3, #11
 800b274:	d9f2      	bls.n	800b25c <hr3_get_heartrate+0x14>
        temp /= 12;
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	4a06      	ldr	r2, [pc, #24]	; (800b294 <hr3_get_heartrate+0x4c>)
 800b27a:	fba2 2303 	umull	r2, r3, r2, r3
 800b27e:	08db      	lsrs	r3, r3, #3
 800b280:	603b      	str	r3, [r7, #0]
        
        return temp;
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	b2db      	uxtb	r3, r3
}
 800b286:	4618      	mov	r0, r3
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bc80      	pop	{r7}
 800b28e:	4770      	bx	lr
 800b290:	20001588 	.word	0x20001588
 800b294:	aaaaaaab 	.word	0xaaaaaaab

0800b298 <initStatHRM>:

//TI HRM Library Functions
void initStatHRM (void)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
  unsigned char i;

  // Init HR variables
  lastPeak=0;
 800b29e:	4b2a      	ldr	r3, [pc, #168]	; (800b348 <initStatHRM+0xb0>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	601a      	str	r2, [r3, #0]
  lastOnset=0;
 800b2a4:	4b29      	ldr	r3, [pc, #164]	; (800b34c <initStatHRM+0xb4>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]
  movingWindowHP=0;
 800b2aa:	4b29      	ldr	r3, [pc, #164]	; (800b350 <initStatHRM+0xb8>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	601a      	str	r2, [r3, #0]
  movingWindowCount=0;
 800b2b0:	4b28      	ldr	r3, [pc, #160]	; (800b354 <initStatHRM+0xbc>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	701a      	strb	r2, [r3, #0]

  for (i=20; i>=1; i--)
 800b2b6:	2314      	movs	r3, #20
 800b2b8:	71fb      	strb	r3, [r7, #7]
 800b2ba:	e00a      	b.n	800b2d2 <initStatHRM+0x3a>
    peakWindowHP[(unsigned char)(i-1)]=0;
 800b2bc:	79fb      	ldrb	r3, [r7, #7]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	4b24      	ldr	r3, [pc, #144]	; (800b358 <initStatHRM+0xc0>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
  for (i=20; i>=1; i--)
 800b2cc:	79fb      	ldrb	r3, [r7, #7]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	71fb      	strb	r3, [r7, #7]
 800b2d2:	79fb      	ldrb	r3, [r7, #7]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1f1      	bne.n	800b2bc <initStatHRM+0x24>

  for (i=12; i>=1; i--)
 800b2d8:	230c      	movs	r3, #12
 800b2da:	71fb      	strb	r3, [r7, #7]
 800b2dc:	e009      	b.n	800b2f2 <initStatHRM+0x5a>
    HR[(unsigned char)(i-1)]=0;
 800b2de:	79fb      	ldrb	r3, [r7, #7]
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	4b1d      	ldr	r3, [pc, #116]	; (800b35c <initStatHRM+0xc4>)
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	5499      	strb	r1, [r3, r2]
  for (i=12; i>=1; i--)
 800b2ec:	79fb      	ldrb	r3, [r7, #7]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	71fb      	strb	r3, [r7, #7]
 800b2f2:	79fb      	ldrb	r3, [r7, #7]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1f2      	bne.n	800b2de <initStatHRM+0x46>

  // Sampling frequency
  frequency = 100;
 800b2f8:	4b19      	ldr	r3, [pc, #100]	; (800b360 <initStatHRM+0xc8>)
 800b2fa:	2264      	movs	r2, #100	; 0x64
 800b2fc:	601a      	str	r2, [r3, #0]
  // Moving average window size (removes high frequency noise)
  movingWindowSize = frequency/50;
 800b2fe:	4b18      	ldr	r3, [pc, #96]	; (800b360 <initStatHRM+0xc8>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a18      	ldr	r2, [pc, #96]	; (800b364 <initStatHRM+0xcc>)
 800b304:	fba2 2303 	umull	r2, r3, r2, r3
 800b308:	091b      	lsrs	r3, r3, #4
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	4b16      	ldr	r3, [pc, #88]	; (800b368 <initStatHRM+0xd0>)
 800b30e:	701a      	strb	r2, [r3, #0]
  // Length of the shortest pulse possible
  smallest = frequency*60/220;
 800b310:	4b13      	ldr	r3, [pc, #76]	; (800b360 <initStatHRM+0xc8>)
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	4613      	mov	r3, r2
 800b316:	011b      	lsls	r3, r3, #4
 800b318:	1a9b      	subs	r3, r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	089b      	lsrs	r3, r3, #2
 800b31e:	4a13      	ldr	r2, [pc, #76]	; (800b36c <initStatHRM+0xd4>)
 800b320:	fba2 2303 	umull	r2, r3, r2, r3
 800b324:	085b      	lsrs	r3, r3, #1
 800b326:	b2da      	uxtb	r2, r3
 800b328:	4b11      	ldr	r3, [pc, #68]	; (800b370 <initStatHRM+0xd8>)
 800b32a:	701a      	strb	r2, [r3, #0]
  foundPeak=0;
 800b32c:	4b11      	ldr	r3, [pc, #68]	; (800b374 <initStatHRM+0xdc>)
 800b32e:	2200      	movs	r2, #0
 800b330:	701a      	strb	r2, [r3, #0]
  totalFoundPeak=0;
 800b332:	4b11      	ldr	r3, [pc, #68]	; (800b378 <initStatHRM+0xe0>)
 800b334:	2200      	movs	r2, #0
 800b336:	701a      	strb	r2, [r3, #0]
  HeartRate=0;
 800b338:	4b10      	ldr	r3, [pc, #64]	; (800b37c <initStatHRM+0xe4>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	701a      	strb	r2, [r3, #0]
}
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	bc80      	pop	{r7}
 800b346:	4770      	bx	lr
 800b348:	20001598 	.word	0x20001598
 800b34c:	2000159c 	.word	0x2000159c
 800b350:	200015a0 	.word	0x200015a0
 800b354:	200015a5 	.word	0x200015a5
 800b358:	2000152c 	.word	0x2000152c
 800b35c:	20001588 	.word	0x20001588
 800b360:	200015ac 	.word	0x200015ac
 800b364:	51eb851f 	.word	0x51eb851f
 800b368:	200015a6 	.word	0x200015a6
 800b36c:	094f2095 	.word	0x094f2095
 800b370:	200015a7 	.word	0x200015a7
 800b374:	200015a8 	.word	0x200015a8
 800b378:	200015a9 	.word	0x200015a9
 800b37c:	20001594 	.word	0x20001594

0800b380 <statHRMAlgo>:


void statHRMAlgo (unsigned long ppgData)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  unsigned char i;
  // moving average calculation
  movingWindowHP+= ppgData;
 800b388:	4b77      	ldr	r3, [pc, #476]	; (800b568 <statHRMAlgo+0x1e8>)
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4413      	add	r3, r2
 800b390:	4a75      	ldr	r2, [pc, #468]	; (800b568 <statHRMAlgo+0x1e8>)
 800b392:	6013      	str	r3, [r2, #0]

  if (movingWindowCount>movingWindowSize)
 800b394:	4b75      	ldr	r3, [pc, #468]	; (800b56c <statHRMAlgo+0x1ec>)
 800b396:	781a      	ldrb	r2, [r3, #0]
 800b398:	4b75      	ldr	r3, [pc, #468]	; (800b570 <statHRMAlgo+0x1f0>)
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	f240 80ce 	bls.w	800b53e <statHRMAlgo+0x1be>
  {
    // Data processing
    movingWindowCount=0;
 800b3a2:	4b72      	ldr	r3, [pc, #456]	; (800b56c <statHRMAlgo+0x1ec>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	701a      	strb	r2, [r3, #0]
    // update data buffer
    updateWindow(peakWindowHP,movingWindowHP,movingWindowSize+1);
 800b3a8:	4b6f      	ldr	r3, [pc, #444]	; (800b568 <statHRMAlgo+0x1e8>)
 800b3aa:	6819      	ldr	r1, [r3, #0]
 800b3ac:	4b70      	ldr	r3, [pc, #448]	; (800b570 <statHRMAlgo+0x1f0>)
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	486f      	ldr	r0, [pc, #444]	; (800b574 <statHRMAlgo+0x1f4>)
 800b3b8:	f000 f8f6 	bl	800b5a8 <updateWindow>
    // reset moving average
    movingWindowHP=0;
 800b3bc:	4b6a      	ldr	r3, [pc, #424]	; (800b568 <statHRMAlgo+0x1e8>)
 800b3be:	2200      	movs	r2, #0
 800b3c0:	601a      	str	r2, [r3, #0]
    ispeak=0;
 800b3c2:	4b6d      	ldr	r3, [pc, #436]	; (800b578 <statHRMAlgo+0x1f8>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	701a      	strb	r2, [r3, #0]
    if (lastPeak>smallest)
 800b3c8:	4b6c      	ldr	r3, [pc, #432]	; (800b57c <statHRMAlgo+0x1fc>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	4b6c      	ldr	r3, [pc, #432]	; (800b580 <statHRMAlgo+0x200>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d24e      	bcs.n	800b474 <statHRMAlgo+0xf4>
    {
      // looking for a local maximum using the 20 point buffer
      ispeak=1;
 800b3d6:	4b68      	ldr	r3, [pc, #416]	; (800b578 <statHRMAlgo+0x1f8>)
 800b3d8:	2201      	movs	r2, #1
 800b3da:	701a      	strb	r2, [r3, #0]
      for (i=10;i>=1;i--)
 800b3dc:	230a      	movs	r3, #10
 800b3de:	73fb      	strb	r3, [r7, #15]
 800b3e0:	e01d      	b.n	800b41e <statHRMAlgo+0x9e>
      {
        if (peakWindowHP[10]<peakWindowHP[(unsigned int)(10-i)])
 800b3e2:	4b64      	ldr	r3, [pc, #400]	; (800b574 <statHRMAlgo+0x1f4>)
 800b3e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
 800b3e8:	f1c3 030a 	rsb	r3, r3, #10
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4b61      	ldr	r3, [pc, #388]	; (800b574 <statHRMAlgo+0x1f4>)
 800b3f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d202      	bcs.n	800b3fe <statHRMAlgo+0x7e>
          ispeak=0;
 800b3f8:	4b5f      	ldr	r3, [pc, #380]	; (800b578 <statHRMAlgo+0x1f8>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	701a      	strb	r2, [r3, #0]
        if (peakWindowHP[10]<peakWindowHP[(unsigned int)(10+i)])
 800b3fe:	4b5d      	ldr	r3, [pc, #372]	; (800b574 <statHRMAlgo+0x1f4>)
 800b400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b402:	7bfb      	ldrb	r3, [r7, #15]
 800b404:	330a      	adds	r3, #10
 800b406:	4619      	mov	r1, r3
 800b408:	4b5a      	ldr	r3, [pc, #360]	; (800b574 <statHRMAlgo+0x1f4>)
 800b40a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d202      	bcs.n	800b418 <statHRMAlgo+0x98>
          ispeak=0;
 800b412:	4b59      	ldr	r3, [pc, #356]	; (800b578 <statHRMAlgo+0x1f8>)
 800b414:	2200      	movs	r2, #0
 800b416:	701a      	strb	r2, [r3, #0]
      for (i=10;i>=1;i--)
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	73fb      	strb	r3, [r7, #15]
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1de      	bne.n	800b3e2 <statHRMAlgo+0x62>

      }
      if (ispeak==1)
 800b424:	4b54      	ldr	r3, [pc, #336]	; (800b578 <statHRMAlgo+0x1f8>)
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d123      	bne.n	800b474 <statHRMAlgo+0xf4>
      {
        // if we have a local maximum
        // values for SPO2 ratio
        lastPeakValueLED1 = findMax(peakWindowHP);
 800b42c:	4851      	ldr	r0, [pc, #324]	; (800b574 <statHRMAlgo+0x1f4>)
 800b42e:	f000 f9a4 	bl	800b77a <findMax>
 800b432:	4603      	mov	r3, r0
 800b434:	4a53      	ldr	r2, [pc, #332]	; (800b584 <statHRMAlgo+0x204>)
 800b436:	6013      	str	r3, [r2, #0]
        totalFoundPeak++;
 800b438:	4b53      	ldr	r3, [pc, #332]	; (800b588 <statHRMAlgo+0x208>)
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	3301      	adds	r3, #1
 800b43e:	b2da      	uxtb	r2, r3
 800b440:	4b51      	ldr	r3, [pc, #324]	; (800b588 <statHRMAlgo+0x208>)
 800b442:	701a      	strb	r2, [r3, #0]

        if (totalFoundPeak>2)
 800b444:	4b50      	ldr	r3, [pc, #320]	; (800b588 <statHRMAlgo+0x208>)
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d907      	bls.n	800b45c <statHRMAlgo+0xdc>
        {
          // Update the HR and SPO2 buffer
          updateHeartRate(HR,frequency,lastPeak);
 800b44c:	4b4f      	ldr	r3, [pc, #316]	; (800b58c <statHRMAlgo+0x20c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a4b      	ldr	r2, [pc, #300]	; (800b580 <statHRMAlgo+0x200>)
 800b452:	6812      	ldr	r2, [r2, #0]
 800b454:	4619      	mov	r1, r3
 800b456:	484e      	ldr	r0, [pc, #312]	; (800b590 <statHRMAlgo+0x210>)
 800b458:	f000 f954 	bl	800b704 <updateHeartRate>
        }
        ispeak=1;
 800b45c:	4b46      	ldr	r3, [pc, #280]	; (800b578 <statHRMAlgo+0x1f8>)
 800b45e:	2201      	movs	r2, #1
 800b460:	701a      	strb	r2, [r3, #0]
        lastPeak=0;
 800b462:	4b47      	ldr	r3, [pc, #284]	; (800b580 <statHRMAlgo+0x200>)
 800b464:	2200      	movs	r2, #0
 800b466:	601a      	str	r2, [r3, #0]
        foundPeak++;
 800b468:	4b4a      	ldr	r3, [pc, #296]	; (800b594 <statHRMAlgo+0x214>)
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	3301      	adds	r3, #1
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	4b48      	ldr	r3, [pc, #288]	; (800b594 <statHRMAlgo+0x214>)
 800b472:	701a      	strb	r2, [r3, #0]
      }
    }

    if ((lastOnset>smallest)&&(ispeak==0))
 800b474:	4b41      	ldr	r3, [pc, #260]	; (800b57c <statHRMAlgo+0x1fc>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	461a      	mov	r2, r3
 800b47a:	4b47      	ldr	r3, [pc, #284]	; (800b598 <statHRMAlgo+0x218>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d243      	bcs.n	800b50a <statHRMAlgo+0x18a>
 800b482:	4b3d      	ldr	r3, [pc, #244]	; (800b578 <statHRMAlgo+0x1f8>)
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d13f      	bne.n	800b50a <statHRMAlgo+0x18a>
    {
      // looking for a local minimum using the 20 point buffer
      ispeak=1;
 800b48a:	4b3b      	ldr	r3, [pc, #236]	; (800b578 <statHRMAlgo+0x1f8>)
 800b48c:	2201      	movs	r2, #1
 800b48e:	701a      	strb	r2, [r3, #0]
      for (i=10;i>=1;i--)
 800b490:	230a      	movs	r3, #10
 800b492:	73fb      	strb	r3, [r7, #15]
 800b494:	e01d      	b.n	800b4d2 <statHRMAlgo+0x152>
      {
        if (peakWindowHP[10]>peakWindowHP[(unsigned int)(10-i)])
 800b496:	4b37      	ldr	r3, [pc, #220]	; (800b574 <statHRMAlgo+0x1f4>)
 800b498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
 800b49c:	f1c3 030a 	rsb	r3, r3, #10
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	4b34      	ldr	r3, [pc, #208]	; (800b574 <statHRMAlgo+0x1f4>)
 800b4a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d902      	bls.n	800b4b2 <statHRMAlgo+0x132>
          ispeak=0;
 800b4ac:	4b32      	ldr	r3, [pc, #200]	; (800b578 <statHRMAlgo+0x1f8>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	701a      	strb	r2, [r3, #0]
        if (peakWindowHP[10]>peakWindowHP[(unsigned int)(10+i)])
 800b4b2:	4b30      	ldr	r3, [pc, #192]	; (800b574 <statHRMAlgo+0x1f4>)
 800b4b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4b6:	7bfb      	ldrb	r3, [r7, #15]
 800b4b8:	330a      	adds	r3, #10
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	4b2d      	ldr	r3, [pc, #180]	; (800b574 <statHRMAlgo+0x1f4>)
 800b4be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d902      	bls.n	800b4cc <statHRMAlgo+0x14c>
          ispeak=0;
 800b4c6:	4b2c      	ldr	r3, [pc, #176]	; (800b578 <statHRMAlgo+0x1f8>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	701a      	strb	r2, [r3, #0]
      for (i=10;i>=1;i--)
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	73fb      	strb	r3, [r7, #15]
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1de      	bne.n	800b496 <statHRMAlgo+0x116>
      }

      // if we have a local minimum
      if (ispeak==1)
 800b4d8:	4b27      	ldr	r3, [pc, #156]	; (800b578 <statHRMAlgo+0x1f8>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d114      	bne.n	800b50a <statHRMAlgo+0x18a>
      {
        // values for SPO2 ratio
        lastOnsetValueLED1 = findMin(peakWindowHP);
 800b4e0:	4824      	ldr	r0, [pc, #144]	; (800b574 <statHRMAlgo+0x1f4>)
 800b4e2:	f000 f96e 	bl	800b7c2 <findMin>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	4a2c      	ldr	r2, [pc, #176]	; (800b59c <statHRMAlgo+0x21c>)
 800b4ea:	6013      	str	r3, [r2, #0]
        totalFoundPeak++;
 800b4ec:	4b26      	ldr	r3, [pc, #152]	; (800b588 <statHRMAlgo+0x208>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	b2da      	uxtb	r2, r3
 800b4f4:	4b24      	ldr	r3, [pc, #144]	; (800b588 <statHRMAlgo+0x208>)
 800b4f6:	701a      	strb	r2, [r3, #0]

          // If you wanted to run an auto calibration here is the ratio that should be used
          // AutoCalibrate=peakRed/ onsetRed;
          // AutoCalibrate ratio should be greater that 1-2% if not you need to increase the LED current or adjust the setttings
        }
        lastOnset=0;
 800b4f8:	4b27      	ldr	r3, [pc, #156]	; (800b598 <statHRMAlgo+0x218>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	601a      	str	r2, [r3, #0]
        foundPeak++;
 800b4fe:	4b25      	ldr	r3, [pc, #148]	; (800b594 <statHRMAlgo+0x214>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	3301      	adds	r3, #1
 800b504:	b2da      	uxtb	r2, r3
 800b506:	4b23      	ldr	r3, [pc, #140]	; (800b594 <statHRMAlgo+0x214>)
 800b508:	701a      	strb	r2, [r3, #0]
      }
    }
    

    
    if (foundPeak>2)
 800b50a:	4b22      	ldr	r3, [pc, #136]	; (800b594 <statHRMAlgo+0x214>)
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d915      	bls.n	800b53e <statHRMAlgo+0x1be>
    {
      // Every 4 new peaks update return values
      foundPeak=0;
 800b512:	4b20      	ldr	r3, [pc, #128]	; (800b594 <statHRMAlgo+0x214>)
 800b514:	2200      	movs	r2, #0
 800b516:	701a      	strb	r2, [r3, #0]
      temp=chooseRate(HR);
 800b518:	481d      	ldr	r0, [pc, #116]	; (800b590 <statHRMAlgo+0x210>)
 800b51a:	f000 f86d 	bl	800b5f8 <chooseRate>
 800b51e:	4603      	mov	r3, r0
 800b520:	461a      	mov	r2, r3
 800b522:	4b1f      	ldr	r3, [pc, #124]	; (800b5a0 <statHRMAlgo+0x220>)
 800b524:	701a      	strb	r2, [r3, #0]
      if ((temp>40)&&(temp<220))
 800b526:	4b1e      	ldr	r3, [pc, #120]	; (800b5a0 <statHRMAlgo+0x220>)
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b28      	cmp	r3, #40	; 0x28
 800b52c:	d907      	bls.n	800b53e <statHRMAlgo+0x1be>
 800b52e:	4b1c      	ldr	r3, [pc, #112]	; (800b5a0 <statHRMAlgo+0x220>)
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	2bdb      	cmp	r3, #219	; 0xdb
 800b534:	d803      	bhi.n	800b53e <statHRMAlgo+0x1be>
        HeartRate=temp;
 800b536:	4b1a      	ldr	r3, [pc, #104]	; (800b5a0 <statHRMAlgo+0x220>)
 800b538:	781a      	ldrb	r2, [r3, #0]
 800b53a:	4b1a      	ldr	r3, [pc, #104]	; (800b5a4 <statHRMAlgo+0x224>)
 800b53c:	701a      	strb	r2, [r3, #0]
    }
  }
  movingWindowCount++;
 800b53e:	4b0b      	ldr	r3, [pc, #44]	; (800b56c <statHRMAlgo+0x1ec>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	3301      	adds	r3, #1
 800b544:	b2da      	uxtb	r2, r3
 800b546:	4b09      	ldr	r3, [pc, #36]	; (800b56c <statHRMAlgo+0x1ec>)
 800b548:	701a      	strb	r2, [r3, #0]
  lastOnset++;
 800b54a:	4b13      	ldr	r3, [pc, #76]	; (800b598 <statHRMAlgo+0x218>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3301      	adds	r3, #1
 800b550:	4a11      	ldr	r2, [pc, #68]	; (800b598 <statHRMAlgo+0x218>)
 800b552:	6013      	str	r3, [r2, #0]
  lastPeak++;
 800b554:	4b0a      	ldr	r3, [pc, #40]	; (800b580 <statHRMAlgo+0x200>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3301      	adds	r3, #1
 800b55a:	4a09      	ldr	r2, [pc, #36]	; (800b580 <statHRMAlgo+0x200>)
 800b55c:	6013      	str	r3, [r2, #0]
}
 800b55e:	bf00      	nop
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	200015a0 	.word	0x200015a0
 800b56c:	200015a5 	.word	0x200015a5
 800b570:	200015a6 	.word	0x200015a6
 800b574:	2000152c 	.word	0x2000152c
 800b578:	200015a4 	.word	0x200015a4
 800b57c:	200015a7 	.word	0x200015a7
 800b580:	20001598 	.word	0x20001598
 800b584:	20001584 	.word	0x20001584
 800b588:	200015a9 	.word	0x200015a9
 800b58c:	200015ac 	.word	0x200015ac
 800b590:	20001588 	.word	0x20001588
 800b594:	200015a8 	.word	0x200015a8
 800b598:	2000159c 	.word	0x2000159c
 800b59c:	20001580 	.word	0x20001580
 800b5a0:	20001595 	.word	0x20001595
 800b5a4:	20001594 	.word	0x20001594

0800b5a8 <updateWindow>:

void updateWindow(unsigned long *peakWindow, unsigned long Y, unsigned char n)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	71fb      	strb	r3, [r7, #7]
  // Moving average buffer for LED data
  unsigned char i;
  
  for (i=20;i>=1;i--)
 800b5b6:	2314      	movs	r3, #20
 800b5b8:	75fb      	strb	r3, [r7, #23]
 800b5ba:	e00e      	b.n	800b5da <updateWindow+0x32>
  {
    peakWindow[i]=peakWindow[(unsigned char)(i-1)];
 800b5bc:	7dfb      	ldrb	r3, [r7, #23]
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	441a      	add	r2, r3
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	68f9      	ldr	r1, [r7, #12]
 800b5ce:	440b      	add	r3, r1
 800b5d0:	6812      	ldr	r2, [r2, #0]
 800b5d2:	601a      	str	r2, [r3, #0]
  for (i=20;i>=1;i--)
 800b5d4:	7dfb      	ldrb	r3, [r7, #23]
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	75fb      	strb	r3, [r7, #23]
 800b5da:	7dfb      	ldrb	r3, [r7, #23]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1ed      	bne.n	800b5bc <updateWindow+0x14>
  }
  peakWindow[0]=(Y/n);
 800b5e0:	79fb      	ldrb	r3, [r7, #7]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	601a      	str	r2, [r3, #0]

}
 800b5ec:	bf00      	nop
 800b5ee:	371c      	adds	r7, #28
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bc80      	pop	{r7}
 800b5f4:	4770      	bx	lr
	...

0800b5f8 <chooseRate>:

unsigned char chooseRate(unsigned char *rate)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b087      	sub	sp, #28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  // Returns the average rate, after removing the lowest and highest values (based on the number of found HR removing 2-4-6 values).
  unsigned char max,min,i,nb;
  unsigned int sum,fullsum;
  max=rate[0];
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	75fb      	strb	r3, [r7, #23]
  min=rate[0];
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	75bb      	strb	r3, [r7, #22]
  sum=0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	613b      	str	r3, [r7, #16]
  nb=0;
 800b610:	2300      	movs	r3, #0
 800b612:	753b      	strb	r3, [r7, #20]
  for (i=7;i>=1;i--)
 800b614:	2307      	movs	r3, #7
 800b616:	757b      	strb	r3, [r7, #21]
 800b618:	e037      	b.n	800b68a <chooseRate+0x92>
  {
    if (rate[(unsigned int)(i-1)]>0)
 800b61a:	7d7b      	ldrb	r3, [r7, #21]
 800b61c:	3b01      	subs	r3, #1
 800b61e:	461a      	mov	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4413      	add	r3, r2
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d02c      	beq.n	800b684 <chooseRate+0x8c>
    {
      if (rate[(unsigned int)(i-1)]>max)
 800b62a:	7d7b      	ldrb	r3, [r7, #21]
 800b62c:	3b01      	subs	r3, #1
 800b62e:	461a      	mov	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4413      	add	r3, r2
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	7dfa      	ldrb	r2, [r7, #23]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d206      	bcs.n	800b64a <chooseRate+0x52>
      {
        max=rate[(unsigned int)(i-1)];
 800b63c:	7d7b      	ldrb	r3, [r7, #21]
 800b63e:	3b01      	subs	r3, #1
 800b640:	461a      	mov	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4413      	add	r3, r2
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	75fb      	strb	r3, [r7, #23]
      }
      if (rate[(unsigned int)(i-1)]<min)
 800b64a:	7d7b      	ldrb	r3, [r7, #21]
 800b64c:	3b01      	subs	r3, #1
 800b64e:	461a      	mov	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4413      	add	r3, r2
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	7dba      	ldrb	r2, [r7, #22]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d906      	bls.n	800b66a <chooseRate+0x72>
      {
        min=rate[(unsigned int)(i-1)];
 800b65c:	7d7b      	ldrb	r3, [r7, #21]
 800b65e:	3b01      	subs	r3, #1
 800b660:	461a      	mov	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4413      	add	r3, r2
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	75bb      	strb	r3, [r7, #22]
      }
      sum+=rate[(unsigned int)(i-1)];
 800b66a:	7d7b      	ldrb	r3, [r7, #21]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	461a      	mov	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4413      	add	r3, r2
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	4413      	add	r3, r2
 800b67c:	613b      	str	r3, [r7, #16]
      nb++;
 800b67e:	7d3b      	ldrb	r3, [r7, #20]
 800b680:	3301      	adds	r3, #1
 800b682:	753b      	strb	r3, [r7, #20]
  for (i=7;i>=1;i--)
 800b684:	7d7b      	ldrb	r3, [r7, #21]
 800b686:	3b01      	subs	r3, #1
 800b688:	757b      	strb	r3, [r7, #21]
 800b68a:	7d7b      	ldrb	r3, [r7, #21]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1c4      	bne.n	800b61a <chooseRate+0x22>
    }
  }

  if (nb>2)
 800b690:	7d3b      	ldrb	r3, [r7, #20]
 800b692:	2b02      	cmp	r3, #2
 800b694:	d90f      	bls.n	800b6b6 <chooseRate+0xbe>
    fullsum= (sum-max-min)*10/(nb-2);
 800b696:	7dfb      	ldrb	r3, [r7, #23]
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	1ad2      	subs	r2, r2, r3
 800b69c:	7dbb      	ldrb	r3, [r7, #22]
 800b69e:	1ad2      	subs	r2, r2, r3
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	4413      	add	r3, r2
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	7d3b      	ldrb	r3, [r7, #20]
 800b6ac:	3b02      	subs	r3, #2
 800b6ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	e009      	b.n	800b6ca <chooseRate+0xd2>
  else
    fullsum= (sum)*10/(nb);
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	4413      	add	r3, r2
 800b6be:	005b      	lsls	r3, r3, #1
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	7d3b      	ldrb	r3, [r7, #20]
 800b6c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c8:	60fb      	str	r3, [r7, #12]

  sum=fullsum/10;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	4a0c      	ldr	r2, [pc, #48]	; (800b700 <chooseRate+0x108>)
 800b6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d2:	08db      	lsrs	r3, r3, #3
 800b6d4:	613b      	str	r3, [r7, #16]

  if (fullsum-sum*10 > 4)
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	1a9b      	subs	r3, r3, r2
 800b6e6:	2b04      	cmp	r3, #4
 800b6e8:	d902      	bls.n	800b6f0 <chooseRate+0xf8>
    sum++;
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	613b      	str	r3, [r7, #16]
  return sum;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	b2db      	uxtb	r3, r3
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	371c      	adds	r7, #28
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bc80      	pop	{r7}
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	cccccccd 	.word	0xcccccccd

0800b704 <updateHeartRate>:

void updateHeartRate (unsigned char *rate, unsigned int freq, unsigned int last)
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
  // Adds a new Heart rate into the array and lose the oldest
  unsigned char i;
  i=60*freq/last;
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	4613      	mov	r3, r2
 800b714:	011b      	lsls	r3, r3, #4
 800b716:	1a9b      	subs	r3, r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	461a      	mov	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b722:	75fb      	strb	r3, [r7, #23]
  if ((i>40)&&(i<220))
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	2b28      	cmp	r3, #40	; 0x28
 800b728:	d922      	bls.n	800b770 <updateHeartRate+0x6c>
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	2bdb      	cmp	r3, #219	; 0xdb
 800b72e:	d81f      	bhi.n	800b770 <updateHeartRate+0x6c>
  {
    for (i=11;i>=1;i--)
 800b730:	230b      	movs	r3, #11
 800b732:	75fb      	strb	r3, [r7, #23]
 800b734:	e00d      	b.n	800b752 <updateHeartRate+0x4e>
    {
      rate[i]=rate[(unsigned char)(i-1)];
 800b736:	7dfb      	ldrb	r3, [r7, #23]
 800b738:	3b01      	subs	r3, #1
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	461a      	mov	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	441a      	add	r2, r3
 800b742:	7dfb      	ldrb	r3, [r7, #23]
 800b744:	68f9      	ldr	r1, [r7, #12]
 800b746:	440b      	add	r3, r1
 800b748:	7812      	ldrb	r2, [r2, #0]
 800b74a:	701a      	strb	r2, [r3, #0]
    for (i=11;i>=1;i--)
 800b74c:	7dfb      	ldrb	r3, [r7, #23]
 800b74e:	3b01      	subs	r3, #1
 800b750:	75fb      	strb	r3, [r7, #23]
 800b752:	7dfb      	ldrb	r3, [r7, #23]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1ee      	bne.n	800b736 <updateHeartRate+0x32>
    }
    rate[0]=60*freq/last;
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	4613      	mov	r3, r2
 800b75c:	011b      	lsls	r3, r3, #4
 800b75e:	1a9b      	subs	r3, r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	461a      	mov	r2, r3
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	fbb2 f3f3 	udiv	r3, r2, r3
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	701a      	strb	r2, [r3, #0]
  }
}
 800b770:	bf00      	nop
 800b772:	371c      	adds	r7, #28
 800b774:	46bd      	mov	sp, r7
 800b776:	bc80      	pop	{r7}
 800b778:	4770      	bx	lr

0800b77a <findMax>:

unsigned long findMax(unsigned long *X)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b085      	sub	sp, #20
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
  // Finds the maximum around the center of the buffer
  unsigned long res=X[8];
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	60fb      	str	r3, [r7, #12]
  unsigned char i;
  for (i=12; i>=9; i--)
 800b788:	230c      	movs	r3, #12
 800b78a:	72fb      	strb	r3, [r7, #11]
 800b78c:	e010      	b.n	800b7b0 <findMax+0x36>
  {
    if (res<X[i])
 800b78e:	7afb      	ldrb	r3, [r7, #11]
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	4413      	add	r3, r2
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d205      	bcs.n	800b7aa <findMax+0x30>
      res=X[i];
 800b79e:	7afb      	ldrb	r3, [r7, #11]
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	60fb      	str	r3, [r7, #12]
  for (i=12; i>=9; i--)
 800b7aa:	7afb      	ldrb	r3, [r7, #11]
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	72fb      	strb	r3, [r7, #11]
 800b7b0:	7afb      	ldrb	r3, [r7, #11]
 800b7b2:	2b08      	cmp	r3, #8
 800b7b4:	d8eb      	bhi.n	800b78e <findMax+0x14>
  }
  return res;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bc80      	pop	{r7}
 800b7c0:	4770      	bx	lr

0800b7c2 <findMin>:

unsigned long findMin (unsigned long *X)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b085      	sub	sp, #20
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  // Finds the minimum around the center of the buffer
  unsigned long res=X[8];
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a1b      	ldr	r3, [r3, #32]
 800b7ce:	60fb      	str	r3, [r7, #12]
  unsigned char i;
  for (i=12; i>=9; i--)
 800b7d0:	230c      	movs	r3, #12
 800b7d2:	72fb      	strb	r3, [r7, #11]
 800b7d4:	e010      	b.n	800b7f8 <findMin+0x36>
  {
    if (res>X[i])
 800b7d6:	7afb      	ldrb	r3, [r7, #11]
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	4413      	add	r3, r2
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d905      	bls.n	800b7f2 <findMin+0x30>
      res=X[i];
 800b7e6:	7afb      	ldrb	r3, [r7, #11]
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	60fb      	str	r3, [r7, #12]
  for (i=12; i>=9; i--)
 800b7f2:	7afb      	ldrb	r3, [r7, #11]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	72fb      	strb	r3, [r7, #11]
 800b7f8:	7afb      	ldrb	r3, [r7, #11]
 800b7fa:	2b08      	cmp	r3, #8
 800b7fc:	d8eb      	bhi.n	800b7d6 <findMin+0x14>
  }
  return res;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	bc80      	pop	{r7}
 800b808:	4770      	bx	lr
	...

0800b80c <hr3_hal_init>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void hr3_hal_init( uint8_t address_id )
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	4603      	mov	r3, r0
 800b814:	71fb      	strb	r3, [r7, #7]

#if defined( __MIKROC_PRO_FOR_ARM__ )   ||  \
    defined( __MIKROC_PRO_FOR_FT90x__ )
    _i2c_hw_address             = address_id;
#else
    _i2c_hw_address             = ( address_id << 1 );
 800b816:	79fb      	ldrb	r3, [r7, #7]
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	4b03      	ldr	r3, [pc, #12]	; (800b82c <hr3_hal_init+0x20>)
 800b81e:	701a      	strb	r2, [r3, #0]
#endif
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	bc80      	pop	{r7}
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	200015b0 	.word	0x200015b0

0800b830 <hr3_hal_write>:

void hr3_hal_write( uint8_t *command,
                          uint8_t *buffer,
                          uint16_t count )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b0c8      	sub	sp, #288	; 0x120
 800b834:	af00      	add	r7, sp, #0
 800b836:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b83a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b83e:	6018      	str	r0, [r3, #0]
 800b840:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b844:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b848:	6019      	str	r1, [r3, #0]
 800b84a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b84e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800b852:	801a      	strh	r2, [r3, #0]
    uint8_t temp[ BUFF_SIZE ];

    uint8_t cmd_size    = 1;
 800b854:	2301      	movs	r3, #1
 800b856:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    uint16_t i          = 0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
    uint8_t *temp_ptr   = temp;
 800b860:	f107 0310 	add.w	r3, r7, #16
 800b864:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    uint8_t *buff_ptr   = buffer;
 800b868:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b86c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    uint8_t *cmd_ptr    = command;
 800b876:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b87a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    /* Fill the temp buffer with data*/
    while( cmd_size-- )
 800b884:	e00f      	b.n	800b8a6 <hr3_hal_write+0x76>
        temp[ i++ ] = *( cmd_ptr++ );
 800b886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88a:	1c5a      	adds	r2, r3, #1
 800b88c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800b890:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 800b894:	1c51      	adds	r1, r2, #1
 800b896:	f8a7 111c 	strh.w	r1, [r7, #284]	; 0x11c
 800b89a:	7819      	ldrb	r1, [r3, #0]
 800b89c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b8a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b8a4:	5499      	strb	r1, [r3, r2]
    while( cmd_size-- )
 800b8a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8aa:	1e5a      	subs	r2, r3, #1
 800b8ac:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1e8      	bne.n	800b886 <hr3_hal_write+0x56>

    while ( count-- )
 800b8b4:	e00f      	b.n	800b8d6 <hr3_hal_write+0xa6>
        temp[ i++ ] = *( buff_ptr++ );
 800b8b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b8ba:	1c5a      	adds	r2, r3, #1
 800b8bc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800b8c0:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 800b8c4:	1c51      	adds	r1, r2, #1
 800b8c6:	f8a7 111c 	strh.w	r1, [r7, #284]	; 0x11c
 800b8ca:	7819      	ldrb	r1, [r3, #0]
 800b8cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b8d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b8d4:	5499      	strb	r1, [r3, r2]
    while ( count-- )
 800b8d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b8da:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800b8e4:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 800b8e8:	1e59      	subs	r1, r3, #1
 800b8ea:	8011      	strh	r1, [r2, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d1e2      	bne.n	800b8b6 <hr3_hal_write+0x86>


#if defined(HAL_STM32F103)
    afe4404_I2C_Write(temp_ptr, i);
 800b8f0:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800b8fc:	f7ff fc10 	bl	800b120 <afe4404_I2C_Write>
    while( i-- )
        write_i2c_p( *( temp_ptr++ ) );

    stop_i2c_p();
#endif
}
 800b900:	bf00      	nop
 800b902:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <hr3_hal_read>:

void hr3_hal_read( uint8_t *command,
                         uint8_t *buffer,
                         uint16_t count )
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b086      	sub	sp, #24
 800b90e:	af00      	add	r7, sp, #0
 800b910:	60f8      	str	r0, [r7, #12]
 800b912:	60b9      	str	r1, [r7, #8]
 800b914:	4613      	mov	r3, r2
 800b916:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd_size    =  1;
 800b918:	2301      	movs	r3, #1
 800b91a:	75fb      	strb	r3, [r7, #23]

#if defined(HAL_STM32F103)
    afe4404_I2C_Read(command, buffer, cmd_size, count);
 800b91c:	88fb      	ldrh	r3, [r7, #6]
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	7dfa      	ldrb	r2, [r7, #23]
 800b922:	68b9      	ldr	r1, [r7, #8]
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f7ff fc11 	bl	800b14c <afe4404_I2C_Read>

    *buffer = read_i2c_p( PIC_NACK_BIT );

    stop_i2c_p();
#endif
}
 800b92a:	bf00      	nop
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <hr3_init>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

uint8_t hr3_init( uint8_t address, dynamic_modes_t* dyn_modes )
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b082      	sub	sp, #8
 800b936:	af00      	add	r7, sp, #0
 800b938:	4603      	mov	r3, r0
 800b93a:	6039      	str	r1, [r7, #0]
 800b93c:	71fb      	strb	r3, [r7, #7]
    hr3_hal_init( address );
 800b93e:	79fb      	ldrb	r3, [r7, #7]
 800b940:	4618      	mov	r0, r3
 800b942:	f7ff ff63 	bl	800b80c <hr3_hal_init>
    hr3_set_settings( sw_reset_en,diag_mode_dis,susp_count_dis,reg_read_dis );
 800b946:	2300      	movs	r3, #0
 800b948:	2200      	movs	r2, #0
 800b94a:	2100      	movs	r1, #0
 800b94c:	2001      	movs	r0, #1
 800b94e:	f000 f885 	bl	800ba5c <hr3_set_settings>
    hr3_set_led2_start_end( 0, 399 );
 800b952:	f240 118f 	movw	r1, #399	; 0x18f
 800b956:	2000      	movs	r0, #0
 800b958:	f000 f9be 	bl	800bcd8 <hr3_set_led2_start_end>
    hr3_set_led2_sample_start_end( 80, 399 );
 800b95c:	f240 118f 	movw	r1, #399	; 0x18f
 800b960:	2050      	movs	r0, #80	; 0x50
 800b962:	f000 f8c1 	bl	800bae8 <hr3_set_led2_sample_start_end>
    hr3_set_adc_reset0_start_end( 401, 407 );
 800b966:	f240 1197 	movw	r1, #407	; 0x197
 800b96a:	f240 1091 	movw	r0, #401	; 0x191
 800b96e:	f000 fb27 	bl	800bfc0 <hr3_set_adc_reset0_start_end>
    hr3_set_led2_convert_start_end( 408, 1467 );
 800b972:	f240 51bb 	movw	r1, #1467	; 0x5bb
 800b976:	f44f 70cc 	mov.w	r0, #408	; 0x198
 800b97a:	f000 fa29 	bl	800bdd0 <hr3_set_led2_convert_start_end>
    hr3_set_led3_start_stop( 400, 799 );
 800b97e:	f240 311f 	movw	r1, #799	; 0x31f
 800b982:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b986:	f000 fef1 	bl	800c76c <hr3_set_led3_start_stop>
    hr3_set_led3_sample_start_end( 480, 799 );
 800b98a:	f240 311f 	movw	r1, #799	; 0x31f
 800b98e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800b992:	f000 f925 	bl	800bbe0 <hr3_set_led3_sample_start_end>
    hr3_set_adc_reset1_start_end( 1469, 1475 );
 800b996:	f240 51c3 	movw	r1, #1475	; 0x5c3
 800b99a:	f240 50bd 	movw	r0, #1469	; 0x5bd
 800b99e:	f000 fb4d 	bl	800c03c <hr3_set_adc_reset1_start_end>
    hr3_set_led3_convert_start_end( 1476, 2535 );
 800b9a2:	f640 11e7 	movw	r1, #2535	; 0x9e7
 800b9a6:	f240 50c4 	movw	r0, #1476	; 0x5c4
 800b9aa:	f000 fa4f 	bl	800be4c <hr3_set_led3_convert_start_end>
    hr3_set_led1_start_end( 800, 1199 );
 800b9ae:	f240 41af 	movw	r1, #1199	; 0x4af
 800b9b2:	f44f 7048 	mov.w	r0, #800	; 0x320
 800b9b6:	f000 f8d5 	bl	800bb64 <hr3_set_led1_start_end>
    hr3_set_led1_sample_start_end( 880, 1199 );
 800b9ba:	f240 41af 	movw	r1, #1199	; 0x4af
 800b9be:	f44f 705c 	mov.w	r0, #880	; 0x370
 800b9c2:	f000 f94b 	bl	800bc5c <hr3_set_led1_sample_start_end>
    hr3_set_adc_reset2_start_end( 2537, 2543 );
 800b9c6:	f640 11ef 	movw	r1, #2543	; 0x9ef
 800b9ca:	f640 10e9 	movw	r0, #2537	; 0x9e9
 800b9ce:	f000 fb73 	bl	800c0b8 <hr3_set_adc_reset2_start_end>
    hr3_set_led1_convert_start_end( 2544, 3603 );
 800b9d2:	f640 6113 	movw	r1, #3603	; 0xe13
 800b9d6:	f44f 601f 	mov.w	r0, #2544	; 0x9f0
 800b9da:	f000 fa75 	bl	800bec8 <hr3_set_led1_convert_start_end>
    hr3_set_amb1_sample_start_end( 1279, 1598 );
 800b9de:	f240 613e 	movw	r1, #1598	; 0x63e
 800b9e2:	f240 40ff 	movw	r0, #1279	; 0x4ff
 800b9e6:	f000 f9b5 	bl	800bd54 <hr3_set_amb1_sample_start_end>
    hr3_set_adc_reset3_start_end( 3605, 3611 );
 800b9ea:	f640 611b 	movw	r1, #3611	; 0xe1b
 800b9ee:	f640 6015 	movw	r0, #3605	; 0xe15
 800b9f2:	f000 fb9f 	bl	800c134 <hr3_set_adc_reset3_start_end>
    hr3_set_amb1_convert_start_end( 3612, 4671 );
 800b9f6:	f241 213f 	movw	r1, #4671	; 0x123f
 800b9fa:	f640 601c 	movw	r0, #3612	; 0xe1c
 800b9fe:	f000 faa1 	bl	800bf44 <hr3_set_amb1_convert_start_end>
    hr3_set_pdn_cycle_start_end( 5471, 39199 );
 800ba02:	f649 111f 	movw	r1, #39199	; 0x991f
 800ba06:	f241 505f 	movw	r0, #5471	; 0x155f
 800ba0a:	f000 fe71 	bl	800c6f0 <hr3_set_pdn_cycle_start_end>
    hr3_set_prpct_count( 39999 );                              //Clock timing for CLKDIV_PRF  = 1
 800ba0e:	f649 403f 	movw	r0, #39999	; 0x9c3f
 800ba12:	f000 fbcd 	bl	800c1b0 <hr3_set_prpct_count>
    hr3_set_adc_reset3_start_end( 721, 722 );
    hr3_set_amb1_convert_start_end( 722, 934 );
    hr3_set_pdn_cycle_start_end( 1094, 7839 );
    hr3_set_prpct_count( 7999 );        */
    
    hr3_set_timer_and_average_num( true, 3 );
 800ba16:	2103      	movs	r1, #3
 800ba18:	2001      	movs	r0, #1
 800ba1a:	f000 fbed 	bl	800c1f8 <hr3_set_timer_and_average_num>
    hr3_set_seperate_tia_gain( true, 0, 4 );
 800ba1e:	2204      	movs	r2, #4
 800ba20:	2100      	movs	r1, #0
 800ba22:	2001      	movs	r0, #1
 800ba24:	f000 fc26 	bl	800c274 <hr3_set_seperate_tia_gain>
    hr3_set_tia_gain( false, 0, 3 );
 800ba28:	2203      	movs	r2, #3
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	f000 fc73 	bl	800c318 <hr3_set_tia_gain>
    hr3_set_led_currents( 15,3,3 );
 800ba32:	2203      	movs	r2, #3
 800ba34:	2103      	movs	r1, #3
 800ba36:	200f      	movs	r0, #15
 800ba38:	f000 fcc2 	bl	800c3c0 <hr3_set_led_currents>
    hr3_set_dynamic_settings( dyn_modes );
 800ba3c:	6838      	ldr	r0, [r7, #0]
 800ba3e:	f000 fd0f 	bl	800c460 <hr3_set_dynamic_settings>
    hr3_set_clkout_div( false, 2 );
 800ba42:	2102      	movs	r1, #2
 800ba44:	2000      	movs	r0, #0
 800ba46:	f000 fd73 	bl	800c530 <hr3_set_clkout_div>
    hr3_set_int_clk_div( 1 );
 800ba4a:	2001      	movs	r0, #1
 800ba4c:	f000 fecc 	bl	800c7e8 <hr3_set_int_clk_div>

    return 0;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3708      	adds	r7, #8
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
	...

0800ba5c <hr3_set_settings>:

uint8_t hr3_set_settings( sw_reset_t sw_reset, diag_mode_t diag_mode,
                          susp_count_t susp_counter, reg_read_t reg_read )
{
 800ba5c:	b590      	push	{r4, r7, lr}
 800ba5e:	b085      	sub	sp, #20
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	4604      	mov	r4, r0
 800ba64:	4608      	mov	r0, r1
 800ba66:	4611      	mov	r1, r2
 800ba68:	461a      	mov	r2, r3
 800ba6a:	4623      	mov	r3, r4
 800ba6c:	71fb      	strb	r3, [r7, #7]
 800ba6e:	4603      	mov	r3, r0
 800ba70:	71bb      	strb	r3, [r7, #6]
 800ba72:	460b      	mov	r3, r1
 800ba74:	717b      	strb	r3, [r7, #5]
 800ba76:	4613      	mov	r3, r2
 800ba78:	713b      	strb	r3, [r7, #4]
    uint8_t reg = DIAGNOSIS;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800ba7e:	4b19      	ldr	r3, [pc, #100]	; (800bae4 <hr3_set_settings+0x88>)
 800ba80:	881b      	ldrh	r3, [r3, #0]
 800ba82:	81bb      	strh	r3, [r7, #12]
 800ba84:	2300      	movs	r3, #0
 800ba86:	73bb      	strb	r3, [r7, #14]

    temp[2] |= ( sw_reset << DIAG_SW_RST );
 800ba88:	7bbb      	ldrb	r3, [r7, #14]
 800ba8a:	b25a      	sxtb	r2, r3
 800ba8c:	79fb      	ldrb	r3, [r7, #7]
 800ba8e:	00db      	lsls	r3, r3, #3
 800ba90:	b25b      	sxtb	r3, r3
 800ba92:	4313      	orrs	r3, r2
 800ba94:	b25b      	sxtb	r3, r3
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	73bb      	strb	r3, [r7, #14]
    temp[2] |= ( diag_mode << DIAG_EN );
 800ba9a:	7bbb      	ldrb	r3, [r7, #14]
 800ba9c:	b25a      	sxtb	r2, r3
 800ba9e:	79bb      	ldrb	r3, [r7, #6]
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	b25b      	sxtb	r3, r3
 800baa4:	4313      	orrs	r3, r2
 800baa6:	b25b      	sxtb	r3, r3
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	73bb      	strb	r3, [r7, #14]
    temp[2] |= ( susp_counter << DIAG_TM_CNT_RST );
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	b25a      	sxtb	r2, r3
 800bab0:	797b      	ldrb	r3, [r7, #5]
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	b25b      	sxtb	r3, r3
 800bab6:	4313      	orrs	r3, r2
 800bab8:	b25b      	sxtb	r3, r3
 800baba:	b2db      	uxtb	r3, r3
 800babc:	73bb      	strb	r3, [r7, #14]
    temp[2] |= ( reg_read << DIAG_REG_READ );
 800babe:	7bba      	ldrb	r2, [r7, #14]
 800bac0:	793b      	ldrb	r3, [r7, #4]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg, temp, 3 );
 800bac8:	f107 010c 	add.w	r1, r7, #12
 800bacc:	f107 030f 	add.w	r3, r7, #15
 800bad0:	2203      	movs	r2, #3
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7ff feac 	bl	800b830 <hr3_hal_write>
    
    return 0;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3714      	adds	r7, #20
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd90      	pop	{r4, r7, pc}
 800bae2:	bf00      	nop
 800bae4:	0800cb00 	.word	0x0800cb00

0800bae8 <hr3_set_led2_sample_start_end>:

uint8_t hr3_set_led2_sample_start_end( uint16_t start, uint16_t end )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	460a      	mov	r2, r1
 800baf2:	80fb      	strh	r3, [r7, #6]
 800baf4:	4613      	mov	r3, r2
 800baf6:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = SMPL_LED2_ST;
 800baf8:	2301      	movs	r3, #1
 800bafa:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = SMPL_LED2_END;
 800bafc:	2302      	movs	r3, #2
 800bafe:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bb00:	4b17      	ldr	r3, [pc, #92]	; (800bb60 <hr3_set_led2_sample_start_end+0x78>)
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	823b      	strh	r3, [r7, #16]
 800bb06:	2300      	movs	r3, #0
 800bb08:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bb0a:	4b15      	ldr	r3, [pc, #84]	; (800bb60 <hr3_set_led2_sample_start_end+0x78>)
 800bb0c:	881b      	ldrh	r3, [r3, #0]
 800bb0e:	81bb      	strh	r3, [r7, #12]
 800bb10:	2300      	movs	r3, #0
 800bb12:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bb14:	88fb      	ldrh	r3, [r7, #6]
 800bb16:	0a1b      	lsrs	r3, r3, #8
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bb1e:	88fb      	ldrh	r3, [r7, #6]
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bb24:	f107 0110 	add.w	r1, r7, #16
 800bb28:	f107 0317 	add.w	r3, r7, #23
 800bb2c:	2203      	movs	r2, #3
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff fe7e 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bb34:	88bb      	ldrh	r3, [r7, #4]
 800bb36:	0a1b      	lsrs	r3, r3, #8
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bb3e:	88bb      	ldrh	r3, [r7, #4]
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bb44:	f107 010c 	add.w	r1, r7, #12
 800bb48:	f107 0316 	add.w	r3, r7, #22
 800bb4c:	2203      	movs	r2, #3
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7ff fe6e 	bl	800b830 <hr3_hal_write>

    return 0;
 800bb54:	2300      	movs	r3, #0

}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3718      	adds	r7, #24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	0800cb00 	.word	0x0800cb00

0800bb64 <hr3_set_led1_start_end>:

uint8_t hr3_set_led1_start_end( uint16_t start, uint16_t end )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	460a      	mov	r2, r1
 800bb6e:	80fb      	strh	r3, [r7, #6]
 800bb70:	4613      	mov	r3, r2
 800bb72:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED1_ST;
 800bb74:	2303      	movs	r3, #3
 800bb76:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED1_END;
 800bb78:	2304      	movs	r3, #4
 800bb7a:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bb7c:	4b17      	ldr	r3, [pc, #92]	; (800bbdc <hr3_set_led1_start_end+0x78>)
 800bb7e:	881b      	ldrh	r3, [r3, #0]
 800bb80:	823b      	strh	r3, [r7, #16]
 800bb82:	2300      	movs	r3, #0
 800bb84:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bb86:	4b15      	ldr	r3, [pc, #84]	; (800bbdc <hr3_set_led1_start_end+0x78>)
 800bb88:	881b      	ldrh	r3, [r3, #0]
 800bb8a:	81bb      	strh	r3, [r7, #12]
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bb90:	88fb      	ldrh	r3, [r7, #6]
 800bb92:	0a1b      	lsrs	r3, r3, #8
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bb9a:	88fb      	ldrh	r3, [r7, #6]
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bba0:	f107 0110 	add.w	r1, r7, #16
 800bba4:	f107 0317 	add.w	r3, r7, #23
 800bba8:	2203      	movs	r2, #3
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff fe40 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bbb0:	88bb      	ldrh	r3, [r7, #4]
 800bbb2:	0a1b      	lsrs	r3, r3, #8
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bbba:	88bb      	ldrh	r3, [r7, #4]
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bbc0:	f107 010c 	add.w	r1, r7, #12
 800bbc4:	f107 0316 	add.w	r3, r7, #22
 800bbc8:	2203      	movs	r2, #3
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7ff fe30 	bl	800b830 <hr3_hal_write>

    return 0;
 800bbd0:	2300      	movs	r3, #0

}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3718      	adds	r7, #24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	0800cb00 	.word	0x0800cb00

0800bbe0 <hr3_set_led3_sample_start_end>:

uint8_t hr3_set_led3_sample_start_end( uint16_t start, uint16_t end )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	460a      	mov	r2, r1
 800bbea:	80fb      	strh	r3, [r7, #6]
 800bbec:	4613      	mov	r3, r2
 800bbee:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = SMPL_LED3_ST;
 800bbf0:	2305      	movs	r3, #5
 800bbf2:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = SMPL_LED3_END;
 800bbf4:	2306      	movs	r3, #6
 800bbf6:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bbf8:	4b17      	ldr	r3, [pc, #92]	; (800bc58 <hr3_set_led3_sample_start_end+0x78>)
 800bbfa:	881b      	ldrh	r3, [r3, #0]
 800bbfc:	823b      	strh	r3, [r7, #16]
 800bbfe:	2300      	movs	r3, #0
 800bc00:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bc02:	4b15      	ldr	r3, [pc, #84]	; (800bc58 <hr3_set_led3_sample_start_end+0x78>)
 800bc04:	881b      	ldrh	r3, [r3, #0]
 800bc06:	81bb      	strh	r3, [r7, #12]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bc0c:	88fb      	ldrh	r3, [r7, #6]
 800bc0e:	0a1b      	lsrs	r3, r3, #8
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bc16:	88fb      	ldrh	r3, [r7, #6]
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bc1c:	f107 0110 	add.w	r1, r7, #16
 800bc20:	f107 0317 	add.w	r3, r7, #23
 800bc24:	2203      	movs	r2, #3
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff fe02 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bc2c:	88bb      	ldrh	r3, [r7, #4]
 800bc2e:	0a1b      	lsrs	r3, r3, #8
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bc36:	88bb      	ldrh	r3, [r7, #4]
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bc3c:	f107 010c 	add.w	r1, r7, #12
 800bc40:	f107 0316 	add.w	r3, r7, #22
 800bc44:	2203      	movs	r2, #3
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7ff fdf2 	bl	800b830 <hr3_hal_write>

    return 0;
 800bc4c:	2300      	movs	r3, #0

}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	0800cb00 	.word	0x0800cb00

0800bc5c <hr3_set_led1_sample_start_end>:

uint8_t hr3_set_led1_sample_start_end( uint16_t start, uint16_t end )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	460a      	mov	r2, r1
 800bc66:	80fb      	strh	r3, [r7, #6]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = SMPL_LED1_ST;
 800bc6c:	2307      	movs	r3, #7
 800bc6e:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = SMPL_LED1_END;
 800bc70:	2308      	movs	r3, #8
 800bc72:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bc74:	4b17      	ldr	r3, [pc, #92]	; (800bcd4 <hr3_set_led1_sample_start_end+0x78>)
 800bc76:	881b      	ldrh	r3, [r3, #0]
 800bc78:	823b      	strh	r3, [r7, #16]
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bc7e:	4b15      	ldr	r3, [pc, #84]	; (800bcd4 <hr3_set_led1_sample_start_end+0x78>)
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	81bb      	strh	r3, [r7, #12]
 800bc84:	2300      	movs	r3, #0
 800bc86:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bc88:	88fb      	ldrh	r3, [r7, #6]
 800bc8a:	0a1b      	lsrs	r3, r3, #8
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bc92:	88fb      	ldrh	r3, [r7, #6]
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bc98:	f107 0110 	add.w	r1, r7, #16
 800bc9c:	f107 0317 	add.w	r3, r7, #23
 800bca0:	2203      	movs	r2, #3
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff fdc4 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bca8:	88bb      	ldrh	r3, [r7, #4]
 800bcaa:	0a1b      	lsrs	r3, r3, #8
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bcb2:	88bb      	ldrh	r3, [r7, #4]
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bcb8:	f107 010c 	add.w	r1, r7, #12
 800bcbc:	f107 0316 	add.w	r3, r7, #22
 800bcc0:	2203      	movs	r2, #3
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff fdb4 	bl	800b830 <hr3_hal_write>

    return 0;
 800bcc8:	2300      	movs	r3, #0

}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3718      	adds	r7, #24
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	0800cb00 	.word	0x0800cb00

0800bcd8 <hr3_set_led2_start_end>:

uint8_t hr3_set_led2_start_end( uint16_t start, uint16_t end )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	4603      	mov	r3, r0
 800bce0:	460a      	mov	r2, r1
 800bce2:	80fb      	strh	r3, [r7, #6]
 800bce4:	4613      	mov	r3, r2
 800bce6:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED2_ST;
 800bce8:	2309      	movs	r3, #9
 800bcea:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED2_END;
 800bcec:	230a      	movs	r3, #10
 800bcee:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bcf0:	4b17      	ldr	r3, [pc, #92]	; (800bd50 <hr3_set_led2_start_end+0x78>)
 800bcf2:	881b      	ldrh	r3, [r3, #0]
 800bcf4:	823b      	strh	r3, [r7, #16]
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bcfa:	4b15      	ldr	r3, [pc, #84]	; (800bd50 <hr3_set_led2_start_end+0x78>)
 800bcfc:	881b      	ldrh	r3, [r3, #0]
 800bcfe:	81bb      	strh	r3, [r7, #12]
 800bd00:	2300      	movs	r3, #0
 800bd02:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bd04:	88fb      	ldrh	r3, [r7, #6]
 800bd06:	0a1b      	lsrs	r3, r3, #8
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bd0e:	88fb      	ldrh	r3, [r7, #6]
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bd14:	f107 0110 	add.w	r1, r7, #16
 800bd18:	f107 0317 	add.w	r3, r7, #23
 800bd1c:	2203      	movs	r2, #3
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff fd86 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bd24:	88bb      	ldrh	r3, [r7, #4]
 800bd26:	0a1b      	lsrs	r3, r3, #8
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bd2e:	88bb      	ldrh	r3, [r7, #4]
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bd34:	f107 010c 	add.w	r1, r7, #12
 800bd38:	f107 0316 	add.w	r3, r7, #22
 800bd3c:	2203      	movs	r2, #3
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7ff fd76 	bl	800b830 <hr3_hal_write>

    return 0;
 800bd44:	2300      	movs	r3, #0

}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3718      	adds	r7, #24
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	0800cb00 	.word	0x0800cb00

0800bd54 <hr3_set_amb1_sample_start_end>:

uint8_t hr3_set_amb1_sample_start_end( uint16_t start, uint16_t end )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	460a      	mov	r2, r1
 800bd5e:	80fb      	strh	r3, [r7, #6]
 800bd60:	4613      	mov	r3, r2
 800bd62:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = SMPL_AMB1_ST;
 800bd64:	230b      	movs	r3, #11
 800bd66:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = SMPL_AMB1_END;
 800bd68:	230c      	movs	r3, #12
 800bd6a:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bd6c:	4b17      	ldr	r3, [pc, #92]	; (800bdcc <hr3_set_amb1_sample_start_end+0x78>)
 800bd6e:	881b      	ldrh	r3, [r3, #0]
 800bd70:	823b      	strh	r3, [r7, #16]
 800bd72:	2300      	movs	r3, #0
 800bd74:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bd76:	4b15      	ldr	r3, [pc, #84]	; (800bdcc <hr3_set_amb1_sample_start_end+0x78>)
 800bd78:	881b      	ldrh	r3, [r3, #0]
 800bd7a:	81bb      	strh	r3, [r7, #12]
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bd80:	88fb      	ldrh	r3, [r7, #6]
 800bd82:	0a1b      	lsrs	r3, r3, #8
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bd8a:	88fb      	ldrh	r3, [r7, #6]
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bd90:	f107 0110 	add.w	r1, r7, #16
 800bd94:	f107 0317 	add.w	r3, r7, #23
 800bd98:	2203      	movs	r2, #3
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7ff fd48 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bda0:	88bb      	ldrh	r3, [r7, #4]
 800bda2:	0a1b      	lsrs	r3, r3, #8
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bdaa:	88bb      	ldrh	r3, [r7, #4]
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bdb0:	f107 010c 	add.w	r1, r7, #12
 800bdb4:	f107 0316 	add.w	r3, r7, #22
 800bdb8:	2203      	movs	r2, #3
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7ff fd38 	bl	800b830 <hr3_hal_write>

    return 0;
 800bdc0:	2300      	movs	r3, #0

}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3718      	adds	r7, #24
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	0800cb00 	.word	0x0800cb00

0800bdd0 <hr3_set_led2_convert_start_end>:

uint8_t hr3_set_led2_convert_start_end( uint16_t start, uint16_t end )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	460a      	mov	r2, r1
 800bdda:	80fb      	strh	r3, [r7, #6]
 800bddc:	4613      	mov	r3, r2
 800bdde:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED2_CONV_ST;
 800bde0:	230d      	movs	r3, #13
 800bde2:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED2_CONV_END;
 800bde4:	230e      	movs	r3, #14
 800bde6:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bde8:	4b17      	ldr	r3, [pc, #92]	; (800be48 <hr3_set_led2_convert_start_end+0x78>)
 800bdea:	881b      	ldrh	r3, [r3, #0]
 800bdec:	823b      	strh	r3, [r7, #16]
 800bdee:	2300      	movs	r3, #0
 800bdf0:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bdf2:	4b15      	ldr	r3, [pc, #84]	; (800be48 <hr3_set_led2_convert_start_end+0x78>)
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	81bb      	strh	r3, [r7, #12]
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bdfc:	88fb      	ldrh	r3, [r7, #6]
 800bdfe:	0a1b      	lsrs	r3, r3, #8
 800be00:	b29b      	uxth	r3, r3
 800be02:	b2db      	uxtb	r3, r3
 800be04:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800be06:	88fb      	ldrh	r3, [r7, #6]
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800be0c:	f107 0110 	add.w	r1, r7, #16
 800be10:	f107 0317 	add.w	r3, r7, #23
 800be14:	2203      	movs	r2, #3
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff fd0a 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800be1c:	88bb      	ldrh	r3, [r7, #4]
 800be1e:	0a1b      	lsrs	r3, r3, #8
 800be20:	b29b      	uxth	r3, r3
 800be22:	b2db      	uxtb	r3, r3
 800be24:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800be26:	88bb      	ldrh	r3, [r7, #4]
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800be2c:	f107 010c 	add.w	r1, r7, #12
 800be30:	f107 0316 	add.w	r3, r7, #22
 800be34:	2203      	movs	r2, #3
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff fcfa 	bl	800b830 <hr3_hal_write>

    return 0;
 800be3c:	2300      	movs	r3, #0

}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	0800cb00 	.word	0x0800cb00

0800be4c <hr3_set_led3_convert_start_end>:

uint8_t hr3_set_led3_convert_start_end( uint16_t start, uint16_t end )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b086      	sub	sp, #24
 800be50:	af00      	add	r7, sp, #0
 800be52:	4603      	mov	r3, r0
 800be54:	460a      	mov	r2, r1
 800be56:	80fb      	strh	r3, [r7, #6]
 800be58:	4613      	mov	r3, r2
 800be5a:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED3_CONV_ST;
 800be5c:	230f      	movs	r3, #15
 800be5e:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED3_CONV_END;
 800be60:	2310      	movs	r3, #16
 800be62:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800be64:	4b17      	ldr	r3, [pc, #92]	; (800bec4 <hr3_set_led3_convert_start_end+0x78>)
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	823b      	strh	r3, [r7, #16]
 800be6a:	2300      	movs	r3, #0
 800be6c:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800be6e:	4b15      	ldr	r3, [pc, #84]	; (800bec4 <hr3_set_led3_convert_start_end+0x78>)
 800be70:	881b      	ldrh	r3, [r3, #0]
 800be72:	81bb      	strh	r3, [r7, #12]
 800be74:	2300      	movs	r3, #0
 800be76:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800be78:	88fb      	ldrh	r3, [r7, #6]
 800be7a:	0a1b      	lsrs	r3, r3, #8
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800be82:	88fb      	ldrh	r3, [r7, #6]
 800be84:	b2db      	uxtb	r3, r3
 800be86:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800be88:	f107 0110 	add.w	r1, r7, #16
 800be8c:	f107 0317 	add.w	r3, r7, #23
 800be90:	2203      	movs	r2, #3
 800be92:	4618      	mov	r0, r3
 800be94:	f7ff fccc 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800be98:	88bb      	ldrh	r3, [r7, #4]
 800be9a:	0a1b      	lsrs	r3, r3, #8
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bea2:	88bb      	ldrh	r3, [r7, #4]
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bea8:	f107 010c 	add.w	r1, r7, #12
 800beac:	f107 0316 	add.w	r3, r7, #22
 800beb0:	2203      	movs	r2, #3
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7ff fcbc 	bl	800b830 <hr3_hal_write>

    return 0;
 800beb8:	2300      	movs	r3, #0

}
 800beba:	4618      	mov	r0, r3
 800bebc:	3718      	adds	r7, #24
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	0800cb00 	.word	0x0800cb00

0800bec8 <hr3_set_led1_convert_start_end>:

uint8_t hr3_set_led1_convert_start_end( uint16_t start, uint16_t end )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b086      	sub	sp, #24
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	460a      	mov	r2, r1
 800bed2:	80fb      	strh	r3, [r7, #6]
 800bed4:	4613      	mov	r3, r2
 800bed6:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED1_CONV_ST;
 800bed8:	2311      	movs	r3, #17
 800beda:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED1_CONV_END;
 800bedc:	2312      	movs	r3, #18
 800bede:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bee0:	4b17      	ldr	r3, [pc, #92]	; (800bf40 <hr3_set_led1_convert_start_end+0x78>)
 800bee2:	881b      	ldrh	r3, [r3, #0]
 800bee4:	823b      	strh	r3, [r7, #16]
 800bee6:	2300      	movs	r3, #0
 800bee8:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800beea:	4b15      	ldr	r3, [pc, #84]	; (800bf40 <hr3_set_led1_convert_start_end+0x78>)
 800beec:	881b      	ldrh	r3, [r3, #0]
 800beee:	81bb      	strh	r3, [r7, #12]
 800bef0:	2300      	movs	r3, #0
 800bef2:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bef4:	88fb      	ldrh	r3, [r7, #6]
 800bef6:	0a1b      	lsrs	r3, r3, #8
 800bef8:	b29b      	uxth	r3, r3
 800befa:	b2db      	uxtb	r3, r3
 800befc:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800befe:	88fb      	ldrh	r3, [r7, #6]
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bf04:	f107 0110 	add.w	r1, r7, #16
 800bf08:	f107 0317 	add.w	r3, r7, #23
 800bf0c:	2203      	movs	r2, #3
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7ff fc8e 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bf14:	88bb      	ldrh	r3, [r7, #4]
 800bf16:	0a1b      	lsrs	r3, r3, #8
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bf1e:	88bb      	ldrh	r3, [r7, #4]
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bf24:	f107 010c 	add.w	r1, r7, #12
 800bf28:	f107 0316 	add.w	r3, r7, #22
 800bf2c:	2203      	movs	r2, #3
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7ff fc7e 	bl	800b830 <hr3_hal_write>

    return 0;
 800bf34:	2300      	movs	r3, #0

}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3718      	adds	r7, #24
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	0800cb00 	.word	0x0800cb00

0800bf44 <hr3_set_amb1_convert_start_end>:

uint8_t hr3_set_amb1_convert_start_end( uint16_t start, uint16_t end )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	460a      	mov	r2, r1
 800bf4e:	80fb      	strh	r3, [r7, #6]
 800bf50:	4613      	mov	r3, r2
 800bf52:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = AMB1_CONV_ST;
 800bf54:	2313      	movs	r3, #19
 800bf56:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = AMB1_CONV_END;
 800bf58:	2314      	movs	r3, #20
 800bf5a:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bf5c:	4b17      	ldr	r3, [pc, #92]	; (800bfbc <hr3_set_amb1_convert_start_end+0x78>)
 800bf5e:	881b      	ldrh	r3, [r3, #0]
 800bf60:	823b      	strh	r3, [r7, #16]
 800bf62:	2300      	movs	r3, #0
 800bf64:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bf66:	4b15      	ldr	r3, [pc, #84]	; (800bfbc <hr3_set_amb1_convert_start_end+0x78>)
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	81bb      	strh	r3, [r7, #12]
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bf70:	88fb      	ldrh	r3, [r7, #6]
 800bf72:	0a1b      	lsrs	r3, r3, #8
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bf7a:	88fb      	ldrh	r3, [r7, #6]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bf80:	f107 0110 	add.w	r1, r7, #16
 800bf84:	f107 0317 	add.w	r3, r7, #23
 800bf88:	2203      	movs	r2, #3
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7ff fc50 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bf90:	88bb      	ldrh	r3, [r7, #4]
 800bf92:	0a1b      	lsrs	r3, r3, #8
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bf9a:	88bb      	ldrh	r3, [r7, #4]
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bfa0:	f107 010c 	add.w	r1, r7, #12
 800bfa4:	f107 0316 	add.w	r3, r7, #22
 800bfa8:	2203      	movs	r2, #3
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7ff fc40 	bl	800b830 <hr3_hal_write>

    return 0;
 800bfb0:	2300      	movs	r3, #0

}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	0800cb00 	.word	0x0800cb00

0800bfc0 <hr3_set_adc_reset0_start_end>:

uint8_t hr3_set_adc_reset0_start_end( uint16_t start, uint16_t end )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	460a      	mov	r2, r1
 800bfca:	80fb      	strh	r3, [r7, #6]
 800bfcc:	4613      	mov	r3, r2
 800bfce:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = ADC_RST_P0_ST;
 800bfd0:	2315      	movs	r3, #21
 800bfd2:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = ADC_RST_P0_END;
 800bfd4:	2316      	movs	r3, #22
 800bfd6:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bfd8:	4b17      	ldr	r3, [pc, #92]	; (800c038 <hr3_set_adc_reset0_start_end+0x78>)
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	823b      	strh	r3, [r7, #16]
 800bfde:	2300      	movs	r3, #0
 800bfe0:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bfe2:	4b15      	ldr	r3, [pc, #84]	; (800c038 <hr3_set_adc_reset0_start_end+0x78>)
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	81bb      	strh	r3, [r7, #12]
 800bfe8:	2300      	movs	r3, #0
 800bfea:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bfec:	88fb      	ldrh	r3, [r7, #6]
 800bfee:	0a1b      	lsrs	r3, r3, #8
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bff6:	88fb      	ldrh	r3, [r7, #6]
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bffc:	f107 0110 	add.w	r1, r7, #16
 800c000:	f107 0317 	add.w	r3, r7, #23
 800c004:	2203      	movs	r2, #3
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff fc12 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800c00c:	88bb      	ldrh	r3, [r7, #4]
 800c00e:	0a1b      	lsrs	r3, r3, #8
 800c010:	b29b      	uxth	r3, r3
 800c012:	b2db      	uxtb	r3, r3
 800c014:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800c016:	88bb      	ldrh	r3, [r7, #4]
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800c01c:	f107 010c 	add.w	r1, r7, #12
 800c020:	f107 0316 	add.w	r3, r7, #22
 800c024:	2203      	movs	r2, #3
 800c026:	4618      	mov	r0, r3
 800c028:	f7ff fc02 	bl	800b830 <hr3_hal_write>

    return 0;
 800c02c:	2300      	movs	r3, #0

}
 800c02e:	4618      	mov	r0, r3
 800c030:	3718      	adds	r7, #24
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	0800cb00 	.word	0x0800cb00

0800c03c <hr3_set_adc_reset1_start_end>:

uint8_t hr3_set_adc_reset1_start_end( uint16_t start, uint16_t end )
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af00      	add	r7, sp, #0
 800c042:	4603      	mov	r3, r0
 800c044:	460a      	mov	r2, r1
 800c046:	80fb      	strh	r3, [r7, #6]
 800c048:	4613      	mov	r3, r2
 800c04a:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = ADC_RST_P1_ST;
 800c04c:	2317      	movs	r3, #23
 800c04e:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = ADC_RST_P1_END;
 800c050:	2318      	movs	r3, #24
 800c052:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800c054:	4b17      	ldr	r3, [pc, #92]	; (800c0b4 <hr3_set_adc_reset1_start_end+0x78>)
 800c056:	881b      	ldrh	r3, [r3, #0]
 800c058:	823b      	strh	r3, [r7, #16]
 800c05a:	2300      	movs	r3, #0
 800c05c:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800c05e:	4b15      	ldr	r3, [pc, #84]	; (800c0b4 <hr3_set_adc_reset1_start_end+0x78>)
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	81bb      	strh	r3, [r7, #12]
 800c064:	2300      	movs	r3, #0
 800c066:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800c068:	88fb      	ldrh	r3, [r7, #6]
 800c06a:	0a1b      	lsrs	r3, r3, #8
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800c072:	88fb      	ldrh	r3, [r7, #6]
 800c074:	b2db      	uxtb	r3, r3
 800c076:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800c078:	f107 0110 	add.w	r1, r7, #16
 800c07c:	f107 0317 	add.w	r3, r7, #23
 800c080:	2203      	movs	r2, #3
 800c082:	4618      	mov	r0, r3
 800c084:	f7ff fbd4 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800c088:	88bb      	ldrh	r3, [r7, #4]
 800c08a:	0a1b      	lsrs	r3, r3, #8
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800c092:	88bb      	ldrh	r3, [r7, #4]
 800c094:	b2db      	uxtb	r3, r3
 800c096:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800c098:	f107 010c 	add.w	r1, r7, #12
 800c09c:	f107 0316 	add.w	r3, r7, #22
 800c0a0:	2203      	movs	r2, #3
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff fbc4 	bl	800b830 <hr3_hal_write>

    return 0;
 800c0a8:	2300      	movs	r3, #0

}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3718      	adds	r7, #24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	0800cb00 	.word	0x0800cb00

0800c0b8 <hr3_set_adc_reset2_start_end>:

uint8_t hr3_set_adc_reset2_start_end( uint16_t start, uint16_t end )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	4603      	mov	r3, r0
 800c0c0:	460a      	mov	r2, r1
 800c0c2:	80fb      	strh	r3, [r7, #6]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = ADC_RST_P2_ST;
 800c0c8:	2319      	movs	r3, #25
 800c0ca:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = ADC_RST_P2_END;
 800c0cc:	231a      	movs	r3, #26
 800c0ce:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800c0d0:	4b17      	ldr	r3, [pc, #92]	; (800c130 <hr3_set_adc_reset2_start_end+0x78>)
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	823b      	strh	r3, [r7, #16]
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800c0da:	4b15      	ldr	r3, [pc, #84]	; (800c130 <hr3_set_adc_reset2_start_end+0x78>)
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	81bb      	strh	r3, [r7, #12]
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535  )
        return -1;

    temp_st[1] = start >> 8;
 800c0e4:	88fb      	ldrh	r3, [r7, #6]
 800c0e6:	0a1b      	lsrs	r3, r3, #8
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800c0ee:	88fb      	ldrh	r3, [r7, #6]
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800c0f4:	f107 0110 	add.w	r1, r7, #16
 800c0f8:	f107 0317 	add.w	r3, r7, #23
 800c0fc:	2203      	movs	r2, #3
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7ff fb96 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800c104:	88bb      	ldrh	r3, [r7, #4]
 800c106:	0a1b      	lsrs	r3, r3, #8
 800c108:	b29b      	uxth	r3, r3
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800c10e:	88bb      	ldrh	r3, [r7, #4]
 800c110:	b2db      	uxtb	r3, r3
 800c112:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800c114:	f107 010c 	add.w	r1, r7, #12
 800c118:	f107 0316 	add.w	r3, r7, #22
 800c11c:	2203      	movs	r2, #3
 800c11e:	4618      	mov	r0, r3
 800c120:	f7ff fb86 	bl	800b830 <hr3_hal_write>

    return 0;
 800c124:	2300      	movs	r3, #0

}
 800c126:	4618      	mov	r0, r3
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	0800cb00 	.word	0x0800cb00

0800c134 <hr3_set_adc_reset3_start_end>:

uint8_t hr3_set_adc_reset3_start_end( uint16_t start, uint16_t end )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	4603      	mov	r3, r0
 800c13c:	460a      	mov	r2, r1
 800c13e:	80fb      	strh	r3, [r7, #6]
 800c140:	4613      	mov	r3, r2
 800c142:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = ADC_RST_P3_ST;
 800c144:	231b      	movs	r3, #27
 800c146:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = ADC_RST_P3_END;
 800c148:	231c      	movs	r3, #28
 800c14a:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800c14c:	4b17      	ldr	r3, [pc, #92]	; (800c1ac <hr3_set_adc_reset3_start_end+0x78>)
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	823b      	strh	r3, [r7, #16]
 800c152:	2300      	movs	r3, #0
 800c154:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800c156:	4b15      	ldr	r3, [pc, #84]	; (800c1ac <hr3_set_adc_reset3_start_end+0x78>)
 800c158:	881b      	ldrh	r3, [r3, #0]
 800c15a:	81bb      	strh	r3, [r7, #12]
 800c15c:	2300      	movs	r3, #0
 800c15e:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800c160:	88fb      	ldrh	r3, [r7, #6]
 800c162:	0a1b      	lsrs	r3, r3, #8
 800c164:	b29b      	uxth	r3, r3
 800c166:	b2db      	uxtb	r3, r3
 800c168:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800c16a:	88fb      	ldrh	r3, [r7, #6]
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800c170:	f107 0110 	add.w	r1, r7, #16
 800c174:	f107 0317 	add.w	r3, r7, #23
 800c178:	2203      	movs	r2, #3
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7ff fb58 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800c180:	88bb      	ldrh	r3, [r7, #4]
 800c182:	0a1b      	lsrs	r3, r3, #8
 800c184:	b29b      	uxth	r3, r3
 800c186:	b2db      	uxtb	r3, r3
 800c188:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800c18a:	88bb      	ldrh	r3, [r7, #4]
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800c190:	f107 010c 	add.w	r1, r7, #12
 800c194:	f107 0316 	add.w	r3, r7, #22
 800c198:	2203      	movs	r2, #3
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7ff fb48 	bl	800b830 <hr3_hal_write>

    return 0;
 800c1a0:	2300      	movs	r3, #0

}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3718      	adds	r7, #24
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	0800cb00 	.word	0x0800cb00

0800c1b0 <hr3_set_prpct_count>:

uint8_t hr3_set_prpct_count( uint16_t count )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	80fb      	strh	r3, [r7, #6]
    uint8_t reg = PRPCT;
 800c1ba:	231d      	movs	r3, #29
 800c1bc:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c1be:	4b0d      	ldr	r3, [pc, #52]	; (800c1f4 <hr3_set_prpct_count+0x44>)
 800c1c0:	881b      	ldrh	r3, [r3, #0]
 800c1c2:	81bb      	strh	r3, [r7, #12]
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73bb      	strb	r3, [r7, #14]

    if( count > 65535 )
        return -1;

    temp[1] = count >> 8;
 800c1c8:	88fb      	ldrh	r3, [r7, #6]
 800c1ca:	0a1b      	lsrs	r3, r3, #8
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	737b      	strb	r3, [r7, #13]
    temp[2] = (uint8_t)count;
 800c1d2:	88fb      	ldrh	r3, [r7, #6]
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg, temp, 3 );
 800c1d8:	f107 010c 	add.w	r1, r7, #12
 800c1dc:	f107 030f 	add.w	r3, r7, #15
 800c1e0:	2203      	movs	r2, #3
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7ff fb24 	bl	800b830 <hr3_hal_write>

    return 0;
 800c1e8:	2300      	movs	r3, #0

}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	0800cb00 	.word	0x0800cb00

0800c1f8 <hr3_set_timer_and_average_num>:

uint8_t hr3_set_timer_and_average_num( bool enable, uint8_t av_num )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	4603      	mov	r3, r0
 800c200:	460a      	mov	r2, r1
 800c202:	71fb      	strb	r3, [r7, #7]
 800c204:	4613      	mov	r3, r2
 800c206:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = TIM_NUMAV;
 800c208:	231e      	movs	r3, #30
 800c20a:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c20c:	4b18      	ldr	r3, [pc, #96]	; (800c270 <hr3_set_timer_and_average_num+0x78>)
 800c20e:	881b      	ldrh	r3, [r3, #0]
 800c210:	81bb      	strh	r3, [r7, #12]
 800c212:	2300      	movs	r3, #0
 800c214:	73bb      	strb	r3, [r7, #14]

    if( av_num > 15 || av_num < 0 )
 800c216:	79bb      	ldrb	r3, [r7, #6]
 800c218:	2b0f      	cmp	r3, #15
 800c21a:	d901      	bls.n	800c220 <hr3_set_timer_and_average_num+0x28>
        return -1;
 800c21c:	23ff      	movs	r3, #255	; 0xff
 800c21e:	e023      	b.n	800c268 <hr3_set_timer_and_average_num+0x70>

    if( enable )
 800c220:	79fb      	ldrb	r3, [r7, #7]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d012      	beq.n	800c24c <hr3_set_timer_and_average_num+0x54>
    {
        temp[1] |= ( 1 << TIMEREN );
 800c226:	7b7b      	ldrb	r3, [r7, #13]
 800c228:	f043 0301 	orr.w	r3, r3, #1
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	737b      	strb	r3, [r7, #13]
        temp[2] |= ( av_num << NUMAV );
 800c230:	7bba      	ldrb	r2, [r7, #14]
 800c232:	79bb      	ldrb	r3, [r7, #6]
 800c234:	4313      	orrs	r3, r2
 800c236:	b2db      	uxtb	r3, r3
 800c238:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c23a:	f107 010c 	add.w	r1, r7, #12
 800c23e:	f107 030f 	add.w	r3, r7, #15
 800c242:	2203      	movs	r2, #3
 800c244:	4618      	mov	r0, r3
 800c246:	f7ff faf3 	bl	800b830 <hr3_hal_write>
 800c24a:	e00c      	b.n	800c266 <hr3_set_timer_and_average_num+0x6e>
    }
    else
    {
        temp[2] |= ( av_num << NUMAV );
 800c24c:	7bba      	ldrb	r2, [r7, #14]
 800c24e:	79bb      	ldrb	r3, [r7, #6]
 800c250:	4313      	orrs	r3, r2
 800c252:	b2db      	uxtb	r3, r3
 800c254:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c256:	f107 010c 	add.w	r1, r7, #12
 800c25a:	f107 030f 	add.w	r3, r7, #15
 800c25e:	2203      	movs	r2, #3
 800c260:	4618      	mov	r0, r3
 800c262:	f7ff fae5 	bl	800b830 <hr3_hal_write>
    }

    return 0;
 800c266:	2300      	movs	r3, #0

}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	0800cb00 	.word	0x0800cb00

0800c274 <hr3_set_seperate_tia_gain>:

uint8_t hr3_set_seperate_tia_gain( bool seperate, uint8_t cf_setting,
                                   uint8_t gain_setting )
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	4603      	mov	r3, r0
 800c27c:	71fb      	strb	r3, [r7, #7]
 800c27e:	460b      	mov	r3, r1
 800c280:	71bb      	strb	r3, [r7, #6]
 800c282:	4613      	mov	r3, r2
 800c284:	717b      	strb	r3, [r7, #5]
    uint8_t reg = TIA_GAINS2;
 800c286:	2320      	movs	r3, #32
 800c288:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c28a:	4b22      	ldr	r3, [pc, #136]	; (800c314 <hr3_set_seperate_tia_gain+0xa0>)
 800c28c:	881b      	ldrh	r3, [r3, #0]
 800c28e:	81bb      	strh	r3, [r7, #12]
 800c290:	2300      	movs	r3, #0
 800c292:	73bb      	strb	r3, [r7, #14]

    if( cf_setting > 7 || gain_setting > 7 )
 800c294:	79bb      	ldrb	r3, [r7, #6]
 800c296:	2b07      	cmp	r3, #7
 800c298:	d802      	bhi.n	800c2a0 <hr3_set_seperate_tia_gain+0x2c>
 800c29a:	797b      	ldrb	r3, [r7, #5]
 800c29c:	2b07      	cmp	r3, #7
 800c29e:	d901      	bls.n	800c2a4 <hr3_set_seperate_tia_gain+0x30>
        return -1;
 800c2a0:	23ff      	movs	r3, #255	; 0xff
 800c2a2:	e032      	b.n	800c30a <hr3_set_seperate_tia_gain+0x96>

    if( seperate )
 800c2a4:	79fb      	ldrb	r3, [r7, #7]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d018      	beq.n	800c2dc <hr3_set_seperate_tia_gain+0x68>
    {
        temp[1] = TIA_ENSEPGAIN;
 800c2aa:	2308      	movs	r3, #8
 800c2ac:	737b      	strb	r3, [r7, #13]
        temp[2] |= ( cf_setting << TIA_CF_SEP );
 800c2ae:	7bbb      	ldrb	r3, [r7, #14]
 800c2b0:	b25a      	sxtb	r2, r3
 800c2b2:	79bb      	ldrb	r3, [r7, #6]
 800c2b4:	00db      	lsls	r3, r3, #3
 800c2b6:	b25b      	sxtb	r3, r3
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	b25b      	sxtb	r3, r3
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	73bb      	strb	r3, [r7, #14]
        temp[2] |= ( gain_setting << TIA_GAIN_SEP );
 800c2c0:	7bba      	ldrb	r2, [r7, #14]
 800c2c2:	797b      	ldrb	r3, [r7, #5]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c2ca:	f107 010c 	add.w	r1, r7, #12
 800c2ce:	f107 030f 	add.w	r3, r7, #15
 800c2d2:	2203      	movs	r2, #3
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff faab 	bl	800b830 <hr3_hal_write>
 800c2da:	e015      	b.n	800c308 <hr3_set_seperate_tia_gain+0x94>
    }
    else
    {
        temp[2] |= ( cf_setting << TIA_CF_SEP );
 800c2dc:	7bbb      	ldrb	r3, [r7, #14]
 800c2de:	b25a      	sxtb	r2, r3
 800c2e0:	79bb      	ldrb	r3, [r7, #6]
 800c2e2:	00db      	lsls	r3, r3, #3
 800c2e4:	b25b      	sxtb	r3, r3
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	b25b      	sxtb	r3, r3
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	73bb      	strb	r3, [r7, #14]
        temp[2] |= ( gain_setting << TIA_GAIN_SEP );
 800c2ee:	7bba      	ldrb	r2, [r7, #14]
 800c2f0:	797b      	ldrb	r3, [r7, #5]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c2f8:	f107 010c 	add.w	r1, r7, #12
 800c2fc:	f107 030f 	add.w	r3, r7, #15
 800c300:	2203      	movs	r2, #3
 800c302:	4618      	mov	r0, r3
 800c304:	f7ff fa94 	bl	800b830 <hr3_hal_write>
    }
    
    return 0;
 800c308:	2300      	movs	r3, #0

}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	0800cb00 	.word	0x0800cb00

0800c318 <hr3_set_tia_gain>:

uint8_t hr3_set_tia_gain( bool replace, uint8_t cf_setting,
                             uint8_t gain_setting )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	4603      	mov	r3, r0
 800c320:	71fb      	strb	r3, [r7, #7]
 800c322:	460b      	mov	r3, r1
 800c324:	71bb      	strb	r3, [r7, #6]
 800c326:	4613      	mov	r3, r2
 800c328:	717b      	strb	r3, [r7, #5]
    uint8_t reg = TIA_GAINS1;
 800c32a:	2321      	movs	r3, #33	; 0x21
 800c32c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c32e:	4b23      	ldr	r3, [pc, #140]	; (800c3bc <hr3_set_tia_gain+0xa4>)
 800c330:	881b      	ldrh	r3, [r3, #0]
 800c332:	81bb      	strh	r3, [r7, #12]
 800c334:	2300      	movs	r3, #0
 800c336:	73bb      	strb	r3, [r7, #14]

    if( cf_setting > 7 || gain_setting > 7 )
 800c338:	79bb      	ldrb	r3, [r7, #6]
 800c33a:	2b07      	cmp	r3, #7
 800c33c:	d802      	bhi.n	800c344 <hr3_set_tia_gain+0x2c>
 800c33e:	797b      	ldrb	r3, [r7, #5]
 800c340:	2b07      	cmp	r3, #7
 800c342:	d901      	bls.n	800c348 <hr3_set_tia_gain+0x30>
        return -1;
 800c344:	23ff      	movs	r3, #255	; 0xff
 800c346:	e034      	b.n	800c3b2 <hr3_set_tia_gain+0x9a>

    if( replace )
 800c348:	79fb      	ldrb	r3, [r7, #7]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d018      	beq.n	800c380 <hr3_set_tia_gain+0x68>
    {
        temp[1] = TIA_PROG_TG_EN;
 800c34e:	2301      	movs	r3, #1
 800c350:	737b      	strb	r3, [r7, #13]
        temp[2] |= ( cf_setting << TIA_CF );
 800c352:	7bbb      	ldrb	r3, [r7, #14]
 800c354:	b25a      	sxtb	r2, r3
 800c356:	79bb      	ldrb	r3, [r7, #6]
 800c358:	00db      	lsls	r3, r3, #3
 800c35a:	b25b      	sxtb	r3, r3
 800c35c:	4313      	orrs	r3, r2
 800c35e:	b25b      	sxtb	r3, r3
 800c360:	b2db      	uxtb	r3, r3
 800c362:	73bb      	strb	r3, [r7, #14]
        temp[2] |= ( gain_setting << TIA_GAIN );
 800c364:	7bba      	ldrb	r2, [r7, #14]
 800c366:	797b      	ldrb	r3, [r7, #5]
 800c368:	4313      	orrs	r3, r2
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c36e:	f107 010c 	add.w	r1, r7, #12
 800c372:	f107 030f 	add.w	r3, r7, #15
 800c376:	2203      	movs	r2, #3
 800c378:	4618      	mov	r0, r3
 800c37a:	f7ff fa59 	bl	800b830 <hr3_hal_write>
 800c37e:	e017      	b.n	800c3b0 <hr3_set_tia_gain+0x98>
    }
    else
    {
        temp[1] = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	737b      	strb	r3, [r7, #13]
        temp[2] |= ( cf_setting << TIA_CF_SEP );
 800c384:	7bbb      	ldrb	r3, [r7, #14]
 800c386:	b25a      	sxtb	r2, r3
 800c388:	79bb      	ldrb	r3, [r7, #6]
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	b25b      	sxtb	r3, r3
 800c38e:	4313      	orrs	r3, r2
 800c390:	b25b      	sxtb	r3, r3
 800c392:	b2db      	uxtb	r3, r3
 800c394:	73bb      	strb	r3, [r7, #14]
        temp[2] |= ( gain_setting << TIA_GAIN_SEP );
 800c396:	7bba      	ldrb	r2, [r7, #14]
 800c398:	797b      	ldrb	r3, [r7, #5]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c3a0:	f107 010c 	add.w	r1, r7, #12
 800c3a4:	f107 030f 	add.w	r3, r7, #15
 800c3a8:	2203      	movs	r2, #3
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff fa40 	bl	800b830 <hr3_hal_write>
    }

    return 0;
 800c3b0:	2300      	movs	r3, #0

}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	0800cb00 	.word	0x0800cb00

0800c3c0 <hr3_set_led_currents>:

}

uint8_t hr3_set_led_currents( uint8_t led1_current, uint8_t led2_current,
                              uint8_t led3_current )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	71fb      	strb	r3, [r7, #7]
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	71bb      	strb	r3, [r7, #6]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	717b      	strb	r3, [r7, #5]
    uint8_t reg = LED_CONFIG;
 800c3d2:	2322      	movs	r3, #34	; 0x22
 800c3d4:	72fb      	strb	r3, [r7, #11]
    uint8_t temp[3] = { 0 };
 800c3d6:	4b21      	ldr	r3, [pc, #132]	; (800c45c <hr3_set_led_currents+0x9c>)
 800c3d8:	881b      	ldrh	r3, [r3, #0]
 800c3da:	813b      	strh	r3, [r7, #8]
 800c3dc:	2300      	movs	r3, #0
 800c3de:	72bb      	strb	r3, [r7, #10]
    unsigned long currents = 0;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	60fb      	str	r3, [r7, #12]

    if( led1_current > 63 ||
 800c3e4:	79fb      	ldrb	r3, [r7, #7]
 800c3e6:	2b3f      	cmp	r3, #63	; 0x3f
 800c3e8:	d805      	bhi.n	800c3f6 <hr3_set_led_currents+0x36>
 800c3ea:	79bb      	ldrb	r3, [r7, #6]
 800c3ec:	2b3f      	cmp	r3, #63	; 0x3f
 800c3ee:	d802      	bhi.n	800c3f6 <hr3_set_led_currents+0x36>
        led2_current > 63 ||
 800c3f0:	797b      	ldrb	r3, [r7, #5]
 800c3f2:	2b3f      	cmp	r3, #63	; 0x3f
 800c3f4:	d901      	bls.n	800c3fa <hr3_set_led_currents+0x3a>
        led3_current > 63 )
        return -1;
 800c3f6:	23ff      	movs	r3, #255	; 0xff
 800c3f8:	e02c      	b.n	800c454 <hr3_set_led_currents+0x94>

    currents |= ( led3_current << 12 );
 800c3fa:	797b      	ldrb	r3, [r7, #5]
 800c3fc:	031b      	lsls	r3, r3, #12
 800c3fe:	461a      	mov	r2, r3
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	4313      	orrs	r3, r2
 800c404:	60fb      	str	r3, [r7, #12]
    currents |= ( led2_current << 6 );
 800c406:	79bb      	ldrb	r3, [r7, #6]
 800c408:	019b      	lsls	r3, r3, #6
 800c40a:	461a      	mov	r2, r3
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	4313      	orrs	r3, r2
 800c410:	60fb      	str	r3, [r7, #12]
    currents |= led1_current;
 800c412:	79fb      	ldrb	r3, [r7, #7]
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	4313      	orrs	r3, r2
 800c418:	60fb      	str	r3, [r7, #12]

    temp[2] |= currents;
 800c41a:	7aba      	ldrb	r2, [r7, #10]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	4313      	orrs	r3, r2
 800c422:	b2db      	uxtb	r3, r3
 800c424:	72bb      	strb	r3, [r7, #10]
    temp[1] |= currents >> 8;
 800c426:	7a7a      	ldrb	r2, [r7, #9]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	0a1b      	lsrs	r3, r3, #8
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	4313      	orrs	r3, r2
 800c430:	b2db      	uxtb	r3, r3
 800c432:	727b      	strb	r3, [r7, #9]
    temp[0] |= currents >> 16;
 800c434:	7a3a      	ldrb	r2, [r7, #8]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	0c1b      	lsrs	r3, r3, #16
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	4313      	orrs	r3, r2
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	723b      	strb	r3, [r7, #8]


    hr3_hal_write( &reg, temp, 3 );
 800c442:	f107 0108 	add.w	r1, r7, #8
 800c446:	f107 030b 	add.w	r3, r7, #11
 800c44a:	2203      	movs	r2, #3
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7ff f9ef 	bl	800b830 <hr3_hal_write>

    return 0;
 800c452:	2300      	movs	r3, #0

}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	0800cb00 	.word	0x0800cb00

0800c460 <hr3_set_dynamic_settings>:

uint8_t hr3_set_dynamic_settings( dynamic_modes_t* modes )
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
    uint8_t reg = SETTINGS;
 800c468:	2323      	movs	r3, #35	; 0x23
 800c46a:	72fb      	strb	r3, [r7, #11]
    uint8_t temp[3] = { 0 };
 800c46c:	4b2f      	ldr	r3, [pc, #188]	; (800c52c <hr3_set_dynamic_settings+0xcc>)
 800c46e:	881b      	ldrh	r3, [r3, #0]
 800c470:	813b      	strh	r3, [r7, #8]
 800c472:	2300      	movs	r3, #0
 800c474:	72bb      	strb	r3, [r7, #10]
    unsigned long buffer = 0;
 800c476:	2300      	movs	r3, #0
 800c478:	60fb      	str	r3, [r7, #12]

    buffer |= ( modes->transmit << STT_DYNMC1 );
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	051b      	lsls	r3, r3, #20
 800c480:	461a      	mov	r2, r3
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	4313      	orrs	r3, r2
 800c486:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->curr_range << STT_ILED_2X );
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	785b      	ldrb	r3, [r3, #1]
 800c48c:	045b      	lsls	r3, r3, #17
 800c48e:	461a      	mov	r2, r3
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	4313      	orrs	r3, r2
 800c494:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->adc_power << STT_DYNMC2 );
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	789b      	ldrb	r3, [r3, #2]
 800c49a:	039b      	lsls	r3, r3, #14
 800c49c:	461a      	mov	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->clk_mode << STT_OSC_EN );
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	78db      	ldrb	r3, [r3, #3]
 800c4a8:	025b      	lsls	r3, r3, #9
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->tia_power << STT_DYNMC3 );
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	791b      	ldrb	r3, [r3, #4]
 800c4b6:	011b      	lsls	r3, r3, #4
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->rest_of_adc << STT_DYNMC4 );
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	795b      	ldrb	r3, [r3, #5]
 800c4c4:	00db      	lsls	r3, r3, #3
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->afe_rx_mode << STT_PDNRX );
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	799b      	ldrb	r3, [r3, #6]
 800c4d2:	005b      	lsls	r3, r3, #1
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->afe_mode << STT_PDNAFE );
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	79db      	ldrb	r3, [r3, #7]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	60fb      	str	r3, [r7, #12]

    temp[2] |= buffer;
 800c4e8:	7aba      	ldrb	r2, [r7, #10]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	72bb      	strb	r3, [r7, #10]
    temp[1] |= buffer >> 8;
 800c4f4:	7a7a      	ldrb	r2, [r7, #9]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	0a1b      	lsrs	r3, r3, #8
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	727b      	strb	r3, [r7, #9]
    temp[0] |= buffer >> 16;
 800c502:	7a3a      	ldrb	r2, [r7, #8]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	0c1b      	lsrs	r3, r3, #16
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	4313      	orrs	r3, r2
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	723b      	strb	r3, [r7, #8]


    hr3_hal_write( &reg, temp, 3 );
 800c510:	f107 0108 	add.w	r1, r7, #8
 800c514:	f107 030b 	add.w	r3, r7, #11
 800c518:	2203      	movs	r2, #3
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7ff f988 	bl	800b830 <hr3_hal_write>

    return 0;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	0800cb00 	.word	0x0800cb00

0800c530 <hr3_set_clkout_div>:
    return 0;

}

uint8_t hr3_set_clkout_div( bool enable, uint8_t div )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	4603      	mov	r3, r0
 800c538:	460a      	mov	r2, r1
 800c53a:	71fb      	strb	r3, [r7, #7]
 800c53c:	4613      	mov	r3, r2
 800c53e:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = CLKOUT;
 800c540:	2329      	movs	r3, #41	; 0x29
 800c542:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c544:	4b16      	ldr	r3, [pc, #88]	; (800c5a0 <hr3_set_clkout_div+0x70>)
 800c546:	881b      	ldrh	r3, [r3, #0]
 800c548:	81bb      	strh	r3, [r7, #12]
 800c54a:	2300      	movs	r3, #0
 800c54c:	73bb      	strb	r3, [r7, #14]

    if( div > 15 )
 800c54e:	79bb      	ldrb	r3, [r7, #6]
 800c550:	2b0f      	cmp	r3, #15
 800c552:	d901      	bls.n	800c558 <hr3_set_clkout_div+0x28>
        return -1;
 800c554:	23ff      	movs	r3, #255	; 0xff
 800c556:	e01e      	b.n	800c596 <hr3_set_clkout_div+0x66>

    if( enable )
 800c558:	79fb      	ldrb	r3, [r7, #7]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00e      	beq.n	800c57c <hr3_set_clkout_div+0x4c>
    {
        temp[1] = ( 1 << CLKOUT_EN );
 800c55e:	2302      	movs	r3, #2
 800c560:	737b      	strb	r3, [r7, #13]
        temp[2] = ( div << CLKOUT_DIV );
 800c562:	79bb      	ldrb	r3, [r7, #6]
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	b2db      	uxtb	r3, r3
 800c568:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c56a:	f107 010c 	add.w	r1, r7, #12
 800c56e:	f107 030f 	add.w	r3, r7, #15
 800c572:	2203      	movs	r2, #3
 800c574:	4618      	mov	r0, r3
 800c576:	f7ff f95b 	bl	800b830 <hr3_hal_write>
 800c57a:	e00b      	b.n	800c594 <hr3_set_clkout_div+0x64>
    }
    else
    {
        temp[2] = ( div << CLKOUT_DIV );
 800c57c:	79bb      	ldrb	r3, [r7, #6]
 800c57e:	005b      	lsls	r3, r3, #1
 800c580:	b2db      	uxtb	r3, r3
 800c582:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c584:	f107 010c 	add.w	r1, r7, #12
 800c588:	f107 030f 	add.w	r3, r7, #15
 800c58c:	2203      	movs	r2, #3
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff f94e 	bl	800b830 <hr3_hal_write>
    }

    return 0;
 800c594:	2300      	movs	r3, #0

}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	0800cb00 	.word	0x0800cb00

0800c5a4 <hr3_get_led1_val>:

uint32_t hr3_get_led1_val( void )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
    uint8_t reg = LED1VAL;
 800c5aa:	232c      	movs	r3, #44	; 0x2c
 800c5ac:	70fb      	strb	r3, [r7, #3]
    uint8_t temp[3] = { 0 };
 800c5ae:	4b10      	ldr	r3, [pc, #64]	; (800c5f0 <hr3_get_led1_val+0x4c>)
 800c5b0:	881b      	ldrh	r3, [r3, #0]
 800c5b2:	803b      	strh	r3, [r7, #0]
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	70bb      	strb	r3, [r7, #2]
    uint32_t retval = 0;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	607b      	str	r3, [r7, #4]

    hr3_hal_read( &reg, temp, 3 );
 800c5bc:	4639      	mov	r1, r7
 800c5be:	1cfb      	adds	r3, r7, #3
 800c5c0:	2203      	movs	r2, #3
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7ff f9a1 	bl	800b90a <hr3_hal_read>

    retval |= (uint32_t)temp[0] << 16;
 800c5c8:	783b      	ldrb	r3, [r7, #0]
 800c5ca:	041b      	lsls	r3, r3, #16
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[1] << 8;
 800c5d2:	787b      	ldrb	r3, [r7, #1]
 800c5d4:	021b      	lsls	r3, r3, #8
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[2];
 800c5dc:	78bb      	ldrb	r3, [r7, #2]
 800c5de:	461a      	mov	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	607b      	str	r3, [r7, #4]

    return retval;
 800c5e6:	687b      	ldr	r3, [r7, #4]

}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	0800cb00 	.word	0x0800cb00

0800c5f4 <hr3_get_led2_val>:

uint32_t hr3_get_led2_val( void )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
    uint8_t reg = LED2VAL;
 800c5fa:	232a      	movs	r3, #42	; 0x2a
 800c5fc:	70fb      	strb	r3, [r7, #3]
    uint8_t temp[3] = { 0 };
 800c5fe:	4b10      	ldr	r3, [pc, #64]	; (800c640 <hr3_get_led2_val+0x4c>)
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	803b      	strh	r3, [r7, #0]
 800c604:	2300      	movs	r3, #0
 800c606:	70bb      	strb	r3, [r7, #2]
    uint32_t retval = 0;
 800c608:	2300      	movs	r3, #0
 800c60a:	607b      	str	r3, [r7, #4]

    hr3_hal_read( &reg, temp, 3 );
 800c60c:	4639      	mov	r1, r7
 800c60e:	1cfb      	adds	r3, r7, #3
 800c610:	2203      	movs	r2, #3
 800c612:	4618      	mov	r0, r3
 800c614:	f7ff f979 	bl	800b90a <hr3_hal_read>
    
    retval |= (uint32_t)temp[0] << 16;
 800c618:	783b      	ldrb	r3, [r7, #0]
 800c61a:	041b      	lsls	r3, r3, #16
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	4313      	orrs	r3, r2
 800c620:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[1] << 8;
 800c622:	787b      	ldrb	r3, [r7, #1]
 800c624:	021b      	lsls	r3, r3, #8
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	4313      	orrs	r3, r2
 800c62a:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[2];
 800c62c:	78bb      	ldrb	r3, [r7, #2]
 800c62e:	461a      	mov	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4313      	orrs	r3, r2
 800c634:	607b      	str	r3, [r7, #4]

    return retval;
 800c636:	687b      	ldr	r3, [r7, #4]

}
 800c638:	4618      	mov	r0, r3
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	0800cb00 	.word	0x0800cb00

0800c644 <hr3_get_led3_val>:

uint32_t hr3_get_led3_val( void )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
    uint8_t reg = LED3VAL;
 800c64a:	232b      	movs	r3, #43	; 0x2b
 800c64c:	70fb      	strb	r3, [r7, #3]
    uint8_t temp[3] = { 0 };
 800c64e:	4b10      	ldr	r3, [pc, #64]	; (800c690 <hr3_get_led3_val+0x4c>)
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	803b      	strh	r3, [r7, #0]
 800c654:	2300      	movs	r3, #0
 800c656:	70bb      	strb	r3, [r7, #2]
    uint32_t retval = 0;
 800c658:	2300      	movs	r3, #0
 800c65a:	607b      	str	r3, [r7, #4]

    hr3_hal_read( &reg, temp, 3 );
 800c65c:	4639      	mov	r1, r7
 800c65e:	1cfb      	adds	r3, r7, #3
 800c660:	2203      	movs	r2, #3
 800c662:	4618      	mov	r0, r3
 800c664:	f7ff f951 	bl	800b90a <hr3_hal_read>

    retval |= (uint32_t)temp[0] << 16;
 800c668:	783b      	ldrb	r3, [r7, #0]
 800c66a:	041b      	lsls	r3, r3, #16
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	4313      	orrs	r3, r2
 800c670:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[1] << 8;
 800c672:	787b      	ldrb	r3, [r7, #1]
 800c674:	021b      	lsls	r3, r3, #8
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	4313      	orrs	r3, r2
 800c67a:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[2];
 800c67c:	78bb      	ldrb	r3, [r7, #2]
 800c67e:	461a      	mov	r2, r3
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4313      	orrs	r3, r2
 800c684:	607b      	str	r3, [r7, #4]

    return retval;
 800c686:	687b      	ldr	r3, [r7, #4]

}
 800c688:	4618      	mov	r0, r3
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	0800cb00 	.word	0x0800cb00

0800c694 <hr3_get_led1_amb1_val>:
    return retval;

}

uint32_t hr3_get_led1_amb1_val( void )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
    uint8_t reg = LED1_ALED1VAL;
 800c69a:	232f      	movs	r3, #47	; 0x2f
 800c69c:	70fb      	strb	r3, [r7, #3]
    uint8_t temp[3] = { 0 };
 800c69e:	4b13      	ldr	r3, [pc, #76]	; (800c6ec <hr3_get_led1_amb1_val+0x58>)
 800c6a0:	881b      	ldrh	r3, [r3, #0]
 800c6a2:	803b      	strh	r3, [r7, #0]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	70bb      	strb	r3, [r7, #2]
    uint32_t retval = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	607b      	str	r3, [r7, #4]

    hr3_read_enable();
 800c6ac:	f000 f8be 	bl	800c82c <hr3_read_enable>
    hr3_hal_read( &reg, temp, 3 );
 800c6b0:	4639      	mov	r1, r7
 800c6b2:	1cfb      	adds	r3, r7, #3
 800c6b4:	2203      	movs	r2, #3
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff f927 	bl	800b90a <hr3_hal_read>
    hr3_read_disable();
 800c6bc:	f000 f8d2 	bl	800c864 <hr3_read_disable>
    
    retval |= ( temp[0] << 16 );
 800c6c0:	783b      	ldrb	r3, [r7, #0]
 800c6c2:	041b      	lsls	r3, r3, #16
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	607b      	str	r3, [r7, #4]
    retval |= ( temp[1] << 8 );
 800c6cc:	787b      	ldrb	r3, [r7, #1]
 800c6ce:	021b      	lsls	r3, r3, #8
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	607b      	str	r3, [r7, #4]
    retval |= temp[2];
 800c6d8:	78bb      	ldrb	r3, [r7, #2]
 800c6da:	461a      	mov	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	607b      	str	r3, [r7, #4]

    return retval;
 800c6e2:	687b      	ldr	r3, [r7, #4]

}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	0800cb00 	.word	0x0800cb00

0800c6f0 <hr3_set_pdn_cycle_start_end>:
    return 0;

}

uint8_t hr3_set_pdn_cycle_start_end( uint16_t start, uint16_t end )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	460a      	mov	r2, r1
 800c6fa:	80fb      	strh	r3, [r7, #6]
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = PDNCYCLESTC;
 800c700:	2332      	movs	r3, #50	; 0x32
 800c702:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = PDNCYCLEENDC;
 800c704:	2333      	movs	r3, #51	; 0x33
 800c706:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800c708:	4b17      	ldr	r3, [pc, #92]	; (800c768 <hr3_set_pdn_cycle_start_end+0x78>)
 800c70a:	881b      	ldrh	r3, [r3, #0]
 800c70c:	823b      	strh	r3, [r7, #16]
 800c70e:	2300      	movs	r3, #0
 800c710:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800c712:	4b15      	ldr	r3, [pc, #84]	; (800c768 <hr3_set_pdn_cycle_start_end+0x78>)
 800c714:	881b      	ldrh	r3, [r3, #0]
 800c716:	81bb      	strh	r3, [r7, #12]
 800c718:	2300      	movs	r3, #0
 800c71a:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800c71c:	88fb      	ldrh	r3, [r7, #6]
 800c71e:	0a1b      	lsrs	r3, r3, #8
 800c720:	b29b      	uxth	r3, r3
 800c722:	b2db      	uxtb	r3, r3
 800c724:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800c726:	88fb      	ldrh	r3, [r7, #6]
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800c72c:	f107 0110 	add.w	r1, r7, #16
 800c730:	f107 0317 	add.w	r3, r7, #23
 800c734:	2203      	movs	r2, #3
 800c736:	4618      	mov	r0, r3
 800c738:	f7ff f87a 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800c73c:	88bb      	ldrh	r3, [r7, #4]
 800c73e:	0a1b      	lsrs	r3, r3, #8
 800c740:	b29b      	uxth	r3, r3
 800c742:	b2db      	uxtb	r3, r3
 800c744:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800c746:	88bb      	ldrh	r3, [r7, #4]
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800c74c:	f107 010c 	add.w	r1, r7, #12
 800c750:	f107 0316 	add.w	r3, r7, #22
 800c754:	2203      	movs	r2, #3
 800c756:	4618      	mov	r0, r3
 800c758:	f7ff f86a 	bl	800b830 <hr3_hal_write>

    return 0;
 800c75c:	2300      	movs	r3, #0


}
 800c75e:	4618      	mov	r0, r3
 800c760:	3718      	adds	r7, #24
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	0800cb00 	.word	0x0800cb00

0800c76c <hr3_set_led3_start_stop>:


}

uint8_t hr3_set_led3_start_stop( uint16_t start, uint16_t end )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b086      	sub	sp, #24
 800c770:	af00      	add	r7, sp, #0
 800c772:	4603      	mov	r3, r0
 800c774:	460a      	mov	r2, r1
 800c776:	80fb      	strh	r3, [r7, #6]
 800c778:	4613      	mov	r3, r2
 800c77a:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED3LEDSTC;
 800c77c:	2336      	movs	r3, #54	; 0x36
 800c77e:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED3LEDENDC;
 800c780:	2337      	movs	r3, #55	; 0x37
 800c782:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800c784:	4b17      	ldr	r3, [pc, #92]	; (800c7e4 <hr3_set_led3_start_stop+0x78>)
 800c786:	881b      	ldrh	r3, [r3, #0]
 800c788:	823b      	strh	r3, [r7, #16]
 800c78a:	2300      	movs	r3, #0
 800c78c:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800c78e:	4b15      	ldr	r3, [pc, #84]	; (800c7e4 <hr3_set_led3_start_stop+0x78>)
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	81bb      	strh	r3, [r7, #12]
 800c794:	2300      	movs	r3, #0
 800c796:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800c798:	88fb      	ldrh	r3, [r7, #6]
 800c79a:	0a1b      	lsrs	r3, r3, #8
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800c7a2:	88fb      	ldrh	r3, [r7, #6]
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800c7a8:	f107 0110 	add.w	r1, r7, #16
 800c7ac:	f107 0317 	add.w	r3, r7, #23
 800c7b0:	2203      	movs	r2, #3
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7ff f83c 	bl	800b830 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800c7b8:	88bb      	ldrh	r3, [r7, #4]
 800c7ba:	0a1b      	lsrs	r3, r3, #8
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800c7c2:	88bb      	ldrh	r3, [r7, #4]
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800c7c8:	f107 010c 	add.w	r1, r7, #12
 800c7cc:	f107 0316 	add.w	r3, r7, #22
 800c7d0:	2203      	movs	r2, #3
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7ff f82c 	bl	800b830 <hr3_hal_write>

    return 0;
 800c7d8:	2300      	movs	r3, #0


}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3718      	adds	r7, #24
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	0800cb00 	.word	0x0800cb00

0800c7e8 <hr3_set_int_clk_div>:

uint8_t hr3_set_int_clk_div( uint8_t div )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	71fb      	strb	r3, [r7, #7]
    uint8_t reg = CLKDIV_PRF;
 800c7f2:	2339      	movs	r3, #57	; 0x39
 800c7f4:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c7f6:	4b0c      	ldr	r3, [pc, #48]	; (800c828 <hr3_set_int_clk_div+0x40>)
 800c7f8:	881b      	ldrh	r3, [r3, #0]
 800c7fa:	81bb      	strh	r3, [r7, #12]
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	73bb      	strb	r3, [r7, #14]

    if( div > 7 )
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	2b07      	cmp	r3, #7
 800c804:	d901      	bls.n	800c80a <hr3_set_int_clk_div+0x22>
        return -1;
 800c806:	23ff      	movs	r3, #255	; 0xff
 800c808:	e00a      	b.n	800c820 <hr3_set_int_clk_div+0x38>

    temp[2] = div;
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	73bb      	strb	r3, [r7, #14]
    hr3_hal_write( &reg, temp, 3 );
 800c80e:	f107 010c 	add.w	r1, r7, #12
 800c812:	f107 030f 	add.w	r3, r7, #15
 800c816:	2203      	movs	r2, #3
 800c818:	4618      	mov	r0, r3
 800c81a:	f7ff f809 	bl	800b830 <hr3_hal_write>

    return 0;
 800c81e:	2300      	movs	r3, #0

}
 800c820:	4618      	mov	r0, r3
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	0800cb00 	.word	0x0800cb00

0800c82c <hr3_read_enable>:
                */
	return 0;
}

uint8_t hr3_read_enable( void )
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
    uint8_t reg = DIAGNOSIS;
 800c832:	2300      	movs	r3, #0
 800c834:	71fb      	strb	r3, [r7, #7]
    uint8_t temp[3] = { 0 };
 800c836:	4b0a      	ldr	r3, [pc, #40]	; (800c860 <hr3_read_enable+0x34>)
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	80bb      	strh	r3, [r7, #4]
 800c83c:	2300      	movs	r3, #0
 800c83e:	71bb      	strb	r3, [r7, #6]

    temp[2] |= ( 1 << DIAG_REG_READ );
 800c840:	79bb      	ldrb	r3, [r7, #6]
 800c842:	f043 0301 	orr.w	r3, r3, #1
 800c846:	b2db      	uxtb	r3, r3
 800c848:	71bb      	strb	r3, [r7, #6]

    hr3_hal_write( &reg, temp, 3 );
 800c84a:	1d39      	adds	r1, r7, #4
 800c84c:	1dfb      	adds	r3, r7, #7
 800c84e:	2203      	movs	r2, #3
 800c850:	4618      	mov	r0, r3
 800c852:	f7fe ffed 	bl	800b830 <hr3_hal_write>

    return 0;
 800c856:	2300      	movs	r3, #0

}
 800c858:	4618      	mov	r0, r3
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	0800cb00 	.word	0x0800cb00

0800c864 <hr3_read_disable>:

uint8_t hr3_read_disable( void )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
    uint8_t reg = DIAGNOSIS;
 800c86a:	2300      	movs	r3, #0
 800c86c:	71fb      	strb	r3, [r7, #7]
    uint8_t temp[3] = { 0 };
 800c86e:	4b0a      	ldr	r3, [pc, #40]	; (800c898 <hr3_read_disable+0x34>)
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	80bb      	strh	r3, [r7, #4]
 800c874:	2300      	movs	r3, #0
 800c876:	71bb      	strb	r3, [r7, #6]

    temp[2] &= ~( 1 << DIAG_REG_READ );
 800c878:	79bb      	ldrb	r3, [r7, #6]
 800c87a:	f023 0301 	bic.w	r3, r3, #1
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	71bb      	strb	r3, [r7, #6]

    hr3_hal_write( &reg, temp, 3 );
 800c882:	1d39      	adds	r1, r7, #4
 800c884:	1dfb      	adds	r3, r7, #7
 800c886:	2203      	movs	r2, #3
 800c888:	4618      	mov	r0, r3
 800c88a:	f7fe ffd1 	bl	800b830 <hr3_hal_write>

    return 0;
 800c88e:	2300      	movs	r3, #0

}
 800c890:	4618      	mov	r0, r3
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	0800cb00 	.word	0x0800cb00

0800c89c <__errno>:
 800c89c:	4b01      	ldr	r3, [pc, #4]	; (800c8a4 <__errno+0x8>)
 800c89e:	6818      	ldr	r0, [r3, #0]
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	20000180 	.word	0x20000180

0800c8a8 <__libc_init_array>:
 800c8a8:	b570      	push	{r4, r5, r6, lr}
 800c8aa:	2600      	movs	r6, #0
 800c8ac:	4d0c      	ldr	r5, [pc, #48]	; (800c8e0 <__libc_init_array+0x38>)
 800c8ae:	4c0d      	ldr	r4, [pc, #52]	; (800c8e4 <__libc_init_array+0x3c>)
 800c8b0:	1b64      	subs	r4, r4, r5
 800c8b2:	10a4      	asrs	r4, r4, #2
 800c8b4:	42a6      	cmp	r6, r4
 800c8b6:	d109      	bne.n	800c8cc <__libc_init_array+0x24>
 800c8b8:	f000 f8ea 	bl	800ca90 <_init>
 800c8bc:	2600      	movs	r6, #0
 800c8be:	4d0a      	ldr	r5, [pc, #40]	; (800c8e8 <__libc_init_array+0x40>)
 800c8c0:	4c0a      	ldr	r4, [pc, #40]	; (800c8ec <__libc_init_array+0x44>)
 800c8c2:	1b64      	subs	r4, r4, r5
 800c8c4:	10a4      	asrs	r4, r4, #2
 800c8c6:	42a6      	cmp	r6, r4
 800c8c8:	d105      	bne.n	800c8d6 <__libc_init_array+0x2e>
 800c8ca:	bd70      	pop	{r4, r5, r6, pc}
 800c8cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8d0:	4798      	blx	r3
 800c8d2:	3601      	adds	r6, #1
 800c8d4:	e7ee      	b.n	800c8b4 <__libc_init_array+0xc>
 800c8d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8da:	4798      	blx	r3
 800c8dc:	3601      	adds	r6, #1
 800c8de:	e7f2      	b.n	800c8c6 <__libc_init_array+0x1e>
 800c8e0:	0800cb1c 	.word	0x0800cb1c
 800c8e4:	0800cb1c 	.word	0x0800cb1c
 800c8e8:	0800cb1c 	.word	0x0800cb1c
 800c8ec:	0800cb20 	.word	0x0800cb20

0800c8f0 <malloc>:
 800c8f0:	4b02      	ldr	r3, [pc, #8]	; (800c8fc <malloc+0xc>)
 800c8f2:	4601      	mov	r1, r0
 800c8f4:	6818      	ldr	r0, [r3, #0]
 800c8f6:	f000 b839 	b.w	800c96c <_malloc_r>
 800c8fa:	bf00      	nop
 800c8fc:	20000180 	.word	0x20000180

0800c900 <memcpy>:
 800c900:	440a      	add	r2, r1
 800c902:	4291      	cmp	r1, r2
 800c904:	f100 33ff 	add.w	r3, r0, #4294967295
 800c908:	d100      	bne.n	800c90c <memcpy+0xc>
 800c90a:	4770      	bx	lr
 800c90c:	b510      	push	{r4, lr}
 800c90e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c912:	4291      	cmp	r1, r2
 800c914:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c918:	d1f9      	bne.n	800c90e <memcpy+0xe>
 800c91a:	bd10      	pop	{r4, pc}

0800c91c <memset>:
 800c91c:	4603      	mov	r3, r0
 800c91e:	4402      	add	r2, r0
 800c920:	4293      	cmp	r3, r2
 800c922:	d100      	bne.n	800c926 <memset+0xa>
 800c924:	4770      	bx	lr
 800c926:	f803 1b01 	strb.w	r1, [r3], #1
 800c92a:	e7f9      	b.n	800c920 <memset+0x4>

0800c92c <sbrk_aligned>:
 800c92c:	b570      	push	{r4, r5, r6, lr}
 800c92e:	4e0e      	ldr	r6, [pc, #56]	; (800c968 <sbrk_aligned+0x3c>)
 800c930:	460c      	mov	r4, r1
 800c932:	6831      	ldr	r1, [r6, #0]
 800c934:	4605      	mov	r5, r0
 800c936:	b911      	cbnz	r1, 800c93e <sbrk_aligned+0x12>
 800c938:	f000 f88c 	bl	800ca54 <_sbrk_r>
 800c93c:	6030      	str	r0, [r6, #0]
 800c93e:	4621      	mov	r1, r4
 800c940:	4628      	mov	r0, r5
 800c942:	f000 f887 	bl	800ca54 <_sbrk_r>
 800c946:	1c43      	adds	r3, r0, #1
 800c948:	d00a      	beq.n	800c960 <sbrk_aligned+0x34>
 800c94a:	1cc4      	adds	r4, r0, #3
 800c94c:	f024 0403 	bic.w	r4, r4, #3
 800c950:	42a0      	cmp	r0, r4
 800c952:	d007      	beq.n	800c964 <sbrk_aligned+0x38>
 800c954:	1a21      	subs	r1, r4, r0
 800c956:	4628      	mov	r0, r5
 800c958:	f000 f87c 	bl	800ca54 <_sbrk_r>
 800c95c:	3001      	adds	r0, #1
 800c95e:	d101      	bne.n	800c964 <sbrk_aligned+0x38>
 800c960:	f04f 34ff 	mov.w	r4, #4294967295
 800c964:	4620      	mov	r0, r4
 800c966:	bd70      	pop	{r4, r5, r6, pc}
 800c968:	200015b8 	.word	0x200015b8

0800c96c <_malloc_r>:
 800c96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c970:	1ccd      	adds	r5, r1, #3
 800c972:	f025 0503 	bic.w	r5, r5, #3
 800c976:	3508      	adds	r5, #8
 800c978:	2d0c      	cmp	r5, #12
 800c97a:	bf38      	it	cc
 800c97c:	250c      	movcc	r5, #12
 800c97e:	2d00      	cmp	r5, #0
 800c980:	4607      	mov	r7, r0
 800c982:	db01      	blt.n	800c988 <_malloc_r+0x1c>
 800c984:	42a9      	cmp	r1, r5
 800c986:	d905      	bls.n	800c994 <_malloc_r+0x28>
 800c988:	230c      	movs	r3, #12
 800c98a:	2600      	movs	r6, #0
 800c98c:	603b      	str	r3, [r7, #0]
 800c98e:	4630      	mov	r0, r6
 800c990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c994:	4e2e      	ldr	r6, [pc, #184]	; (800ca50 <_malloc_r+0xe4>)
 800c996:	f000 f86d 	bl	800ca74 <__malloc_lock>
 800c99a:	6833      	ldr	r3, [r6, #0]
 800c99c:	461c      	mov	r4, r3
 800c99e:	bb34      	cbnz	r4, 800c9ee <_malloc_r+0x82>
 800c9a0:	4629      	mov	r1, r5
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	f7ff ffc2 	bl	800c92c <sbrk_aligned>
 800c9a8:	1c43      	adds	r3, r0, #1
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	d14d      	bne.n	800ca4a <_malloc_r+0xde>
 800c9ae:	6834      	ldr	r4, [r6, #0]
 800c9b0:	4626      	mov	r6, r4
 800c9b2:	2e00      	cmp	r6, #0
 800c9b4:	d140      	bne.n	800ca38 <_malloc_r+0xcc>
 800c9b6:	6823      	ldr	r3, [r4, #0]
 800c9b8:	4631      	mov	r1, r6
 800c9ba:	4638      	mov	r0, r7
 800c9bc:	eb04 0803 	add.w	r8, r4, r3
 800c9c0:	f000 f848 	bl	800ca54 <_sbrk_r>
 800c9c4:	4580      	cmp	r8, r0
 800c9c6:	d13a      	bne.n	800ca3e <_malloc_r+0xd2>
 800c9c8:	6821      	ldr	r1, [r4, #0]
 800c9ca:	3503      	adds	r5, #3
 800c9cc:	1a6d      	subs	r5, r5, r1
 800c9ce:	f025 0503 	bic.w	r5, r5, #3
 800c9d2:	3508      	adds	r5, #8
 800c9d4:	2d0c      	cmp	r5, #12
 800c9d6:	bf38      	it	cc
 800c9d8:	250c      	movcc	r5, #12
 800c9da:	4638      	mov	r0, r7
 800c9dc:	4629      	mov	r1, r5
 800c9de:	f7ff ffa5 	bl	800c92c <sbrk_aligned>
 800c9e2:	3001      	adds	r0, #1
 800c9e4:	d02b      	beq.n	800ca3e <_malloc_r+0xd2>
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	442b      	add	r3, r5
 800c9ea:	6023      	str	r3, [r4, #0]
 800c9ec:	e00e      	b.n	800ca0c <_malloc_r+0xa0>
 800c9ee:	6822      	ldr	r2, [r4, #0]
 800c9f0:	1b52      	subs	r2, r2, r5
 800c9f2:	d41e      	bmi.n	800ca32 <_malloc_r+0xc6>
 800c9f4:	2a0b      	cmp	r2, #11
 800c9f6:	d916      	bls.n	800ca26 <_malloc_r+0xba>
 800c9f8:	1961      	adds	r1, r4, r5
 800c9fa:	42a3      	cmp	r3, r4
 800c9fc:	6025      	str	r5, [r4, #0]
 800c9fe:	bf18      	it	ne
 800ca00:	6059      	strne	r1, [r3, #4]
 800ca02:	6863      	ldr	r3, [r4, #4]
 800ca04:	bf08      	it	eq
 800ca06:	6031      	streq	r1, [r6, #0]
 800ca08:	5162      	str	r2, [r4, r5]
 800ca0a:	604b      	str	r3, [r1, #4]
 800ca0c:	4638      	mov	r0, r7
 800ca0e:	f104 060b 	add.w	r6, r4, #11
 800ca12:	f000 f835 	bl	800ca80 <__malloc_unlock>
 800ca16:	f026 0607 	bic.w	r6, r6, #7
 800ca1a:	1d23      	adds	r3, r4, #4
 800ca1c:	1af2      	subs	r2, r6, r3
 800ca1e:	d0b6      	beq.n	800c98e <_malloc_r+0x22>
 800ca20:	1b9b      	subs	r3, r3, r6
 800ca22:	50a3      	str	r3, [r4, r2]
 800ca24:	e7b3      	b.n	800c98e <_malloc_r+0x22>
 800ca26:	6862      	ldr	r2, [r4, #4]
 800ca28:	42a3      	cmp	r3, r4
 800ca2a:	bf0c      	ite	eq
 800ca2c:	6032      	streq	r2, [r6, #0]
 800ca2e:	605a      	strne	r2, [r3, #4]
 800ca30:	e7ec      	b.n	800ca0c <_malloc_r+0xa0>
 800ca32:	4623      	mov	r3, r4
 800ca34:	6864      	ldr	r4, [r4, #4]
 800ca36:	e7b2      	b.n	800c99e <_malloc_r+0x32>
 800ca38:	4634      	mov	r4, r6
 800ca3a:	6876      	ldr	r6, [r6, #4]
 800ca3c:	e7b9      	b.n	800c9b2 <_malloc_r+0x46>
 800ca3e:	230c      	movs	r3, #12
 800ca40:	4638      	mov	r0, r7
 800ca42:	603b      	str	r3, [r7, #0]
 800ca44:	f000 f81c 	bl	800ca80 <__malloc_unlock>
 800ca48:	e7a1      	b.n	800c98e <_malloc_r+0x22>
 800ca4a:	6025      	str	r5, [r4, #0]
 800ca4c:	e7de      	b.n	800ca0c <_malloc_r+0xa0>
 800ca4e:	bf00      	nop
 800ca50:	200015b4 	.word	0x200015b4

0800ca54 <_sbrk_r>:
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	2300      	movs	r3, #0
 800ca58:	4d05      	ldr	r5, [pc, #20]	; (800ca70 <_sbrk_r+0x1c>)
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	4608      	mov	r0, r1
 800ca5e:	602b      	str	r3, [r5, #0]
 800ca60:	f7f4 f86e 	bl	8000b40 <_sbrk>
 800ca64:	1c43      	adds	r3, r0, #1
 800ca66:	d102      	bne.n	800ca6e <_sbrk_r+0x1a>
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	b103      	cbz	r3, 800ca6e <_sbrk_r+0x1a>
 800ca6c:	6023      	str	r3, [r4, #0]
 800ca6e:	bd38      	pop	{r3, r4, r5, pc}
 800ca70:	200015bc 	.word	0x200015bc

0800ca74 <__malloc_lock>:
 800ca74:	4801      	ldr	r0, [pc, #4]	; (800ca7c <__malloc_lock+0x8>)
 800ca76:	f000 b809 	b.w	800ca8c <__retarget_lock_acquire_recursive>
 800ca7a:	bf00      	nop
 800ca7c:	200015c0 	.word	0x200015c0

0800ca80 <__malloc_unlock>:
 800ca80:	4801      	ldr	r0, [pc, #4]	; (800ca88 <__malloc_unlock+0x8>)
 800ca82:	f000 b804 	b.w	800ca8e <__retarget_lock_release_recursive>
 800ca86:	bf00      	nop
 800ca88:	200015c0 	.word	0x200015c0

0800ca8c <__retarget_lock_acquire_recursive>:
 800ca8c:	4770      	bx	lr

0800ca8e <__retarget_lock_release_recursive>:
 800ca8e:	4770      	bx	lr

0800ca90 <_init>:
 800ca90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca92:	bf00      	nop
 800ca94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca96:	bc08      	pop	{r3}
 800ca98:	469e      	mov	lr, r3
 800ca9a:	4770      	bx	lr

0800ca9c <_fini>:
 800ca9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9e:	bf00      	nop
 800caa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caa2:	bc08      	pop	{r3}
 800caa4:	469e      	mov	lr, r3
 800caa6:	4770      	bx	lr
