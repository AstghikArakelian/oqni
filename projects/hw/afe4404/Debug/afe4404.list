
afe4404.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800c4dc  0800c4dc  0001c4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c550  0800c550  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c550  0800c550  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c550  0800c550  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c550  0800c550  0001c550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c554  0800c554  0001c554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d8  200001e8  0800c740  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c0  0800c740  000215c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001807f  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c71  00000000  00000000  00038290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003bf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  0003d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc53  00000000  00000000  0003e998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6a3  00000000  00000000  0005b5eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f27  00000000  00000000  00077c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108bb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d50  00000000  00000000  00108c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c4c4 	.word	0x0800c4c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800c4c4 	.word	0x0800c4c4

0800014c <Buffer_Init>:

/* Private variables ---------------------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
BUF_HandleTypeDef Buffer_Init(size_t size)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	BUF_HandleTypeDef circular_buffer = malloc(sizeof(circular_buf));
 8000154:	2010      	movs	r0, #16
 8000156:	f00c f8e5 	bl	800c324 <malloc>
 800015a:	4603      	mov	r3, r0
 800015c:	60fb      	str	r3, [r7, #12]
	// If size is 1024, capacity will be 1025, and indices' range is [0..1024]
	circular_buffer->buffer = (uint8_t*)malloc(size + 1);
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	3301      	adds	r3, #1
 8000162:	4618      	mov	r0, r3
 8000164:	f00c f8de 	bl	800c324 <malloc>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	601a      	str	r2, [r3, #0]
	circular_buffer->capacity = size + 1;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1c5a      	adds	r2, r3, #1
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	60da      	str	r2, [r3, #12]
	Buffer_Clear(circular_buffer);
 8000178:	68f8      	ldr	r0, [r7, #12]
 800017a:	f000 f830 	bl	80001de <Buffer_Clear>
	return circular_buffer;
 800017e:	68fb      	ldr	r3, [r7, #12]
}
 8000180:	4618      	mov	r0, r3
 8000182:	3710      	adds	r7, #16
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}

08000188 <Buffer_Size>:

size_t Buffer_Size(BUF_HandleTypeDef buf)
{
 8000188:	b480      	push	{r7}
 800018a:	b085      	sub	sp, #20
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	size_t size = (buf->capacity + buf->write_index - buf->read_index) % buf->capacity;
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	68da      	ldr	r2, [r3, #12]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	685b      	ldr	r3, [r3, #4]
 8000198:	441a      	add	r2, r3
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	689b      	ldr	r3, [r3, #8]
 800019e:	1ad3      	subs	r3, r2, r3
 80001a0:	687a      	ldr	r2, [r7, #4]
 80001a2:	68d2      	ldr	r2, [r2, #12]
 80001a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80001a8:	fb01 f202 	mul.w	r2, r1, r2
 80001ac:	1a9b      	subs	r3, r3, r2
 80001ae:	60fb      	str	r3, [r7, #12]
	return size;
 80001b0:	68fb      	ldr	r3, [r7, #12]
}
 80001b2:	4618      	mov	r0, r3
 80001b4:	3714      	adds	r7, #20
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr

080001bc <Buffer_IsEmpty>:

int Buffer_IsEmpty(BUF_HandleTypeDef buf)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == 0;
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f7ff ffdf 	bl	8000188 <Buffer_Size>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	bf0c      	ite	eq
 80001d0:	2301      	moveq	r3, #1
 80001d2:	2300      	movne	r3, #0
 80001d4:	b2db      	uxtb	r3, r3
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}

080001de <Buffer_Clear>:

void Buffer_Clear(BUF_HandleTypeDef buf)
{
 80001de:	b480      	push	{r7}
 80001e0:	b083      	sub	sp, #12
 80001e2:	af00      	add	r7, sp, #0
 80001e4:	6078      	str	r0, [r7, #4]
	buf->write_index = 0;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2200      	movs	r2, #0
 80001ea:	605a      	str	r2, [r3, #4]
	buf->read_index = 0;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2200      	movs	r2, #0
 80001f0:	609a      	str	r2, [r3, #8]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr

080001fc <Buffer_IsFull>:

int Buffer_IsFull(BUF_HandleTypeDef buf)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == buf->capacity - 1;
 8000204:	6878      	ldr	r0, [r7, #4]
 8000206:	f7ff ffbf 	bl	8000188 <Buffer_Size>
 800020a:	4602      	mov	r2, r0
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	3b01      	subs	r3, #1
 8000212:	429a      	cmp	r2, r3
 8000214:	bf0c      	ite	eq
 8000216:	2301      	moveq	r3, #1
 8000218:	2300      	movne	r3, #0
 800021a:	b2db      	uxtb	r3, r3
}
 800021c:	4618      	mov	r0, r3
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}

08000224 <Buffer_Read>:

uint8_t Buffer_Read(BUF_HandleTypeDef buf)
 {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	73fb      	strb	r3, [r7, #15]
	if(!Buffer_IsEmpty(buf))
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f7ff ffc3 	bl	80001bc <Buffer_IsEmpty>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d116      	bne.n	800026a <Buffer_Read+0x46>
	{
		data = buf->buffer[buf->read_index];
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4413      	add	r3, r2
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	73fb      	strb	r3, [r7, #15]
		buf->read_index++;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	1c5a      	adds	r2, r3, #1
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
		buf->read_index %= buf->capacity;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	68d2      	ldr	r2, [r2, #12]
 800025c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000260:	fb01 f202 	mul.w	r2, r1, r2
 8000264:	1a9a      	subs	r2, r3, r2
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	609a      	str	r2, [r3, #8]
	}
	return data;
 800026a:	7bfb      	ldrb	r3, [r7, #15]
}
 800026c:	4618      	mov	r0, r3
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <Buffer_Write>:

void Buffer_Write(BUF_HandleTypeDef buf, uint8_t data)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
	if(Buffer_IsFull(buf))
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f7ff ffbb 	bl	80001fc <Buffer_IsFull>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <Buffer_Write+0x1e>
	{
	    Buffer_Read(buf);
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f7ff ffc9 	bl	8000224 <Buffer_Read>
	}
	buf->buffer[buf->write_index] = data;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	4413      	add	r3, r2
 800029c:	78fa      	ldrb	r2, [r7, #3]
 800029e:	701a      	strb	r2, [r3, #0]
	buf->write_index++;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	1c5a      	adds	r2, r3, #1
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	605a      	str	r2, [r3, #4]
	buf->write_index %= buf->capacity;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	68d2      	ldr	r2, [r2, #12]
 80002b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80002b6:	fb01 f202 	mul.w	r2, r1, r2
 80002ba:	1a9a      	subs	r2, r3, r2
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	605a      	str	r2, [r3, #4]
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <Command_Check>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int Command_Check()
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
	int command_count = COMMAND_FIRST_BYTE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
	int command_status = COMMAND_NOTRECEIVED;
 80002d2:	2301      	movs	r3, #1
 80002d4:	60bb      	str	r3, [r7, #8]
	while (! Buffer_IsEmpty(FIFO_buf) && command_status == COMMAND_NOTRECEIVED)
 80002d6:	e035      	b.n	8000344 <Command_Check+0x7c>
	{
		uint8_t data = Buffer_Read(FIFO_buf);
 80002d8:	4b22      	ldr	r3, [pc, #136]	; (8000364 <Command_Check+0x9c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ffa1 	bl	8000224 <Buffer_Read>
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
		switch (command_count)
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d020      	beq.n	800032e <Command_Check+0x66>
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	dc28      	bgt.n	8000344 <Command_Check+0x7c>
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d003      	beq.n	8000300 <Command_Check+0x38>
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d00c      	beq.n	8000318 <Command_Check+0x50>
 80002fe:	e021      	b.n	8000344 <Command_Check+0x7c>
		{
		case COMMAND_FIRST_BYTE:
			if (data == 0)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d102      	bne.n	800030c <Command_Check+0x44>
			{
				command_count = 1;
 8000306:	2301      	movs	r3, #1
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	e01b      	b.n	8000344 <Command_Check+0x7c>
			}
			else if(data == 255)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	2bff      	cmp	r3, #255	; 0xff
 8000310:	d118      	bne.n	8000344 <Command_Check+0x7c>
			{
				command_count = 2;
 8000312:	2302      	movs	r3, #2
 8000314:	60fb      	str	r3, [r7, #12]
			}
			break;
 8000316:	e015      	b.n	8000344 <Command_Check+0x7c>
		case COMMAND_SECOND_BYTE:
			command_status = (data == 7)? COMMAND_RECEIVED: COMMAND_NOTRECEIVED;
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	2b07      	cmp	r3, #7
 800031c:	bf14      	ite	ne
 800031e:	2301      	movne	r3, #1
 8000320:	2300      	moveq	r3, #0
 8000322:	b2db      	uxtb	r3, r3
 8000324:	60bb      	str	r3, [r7, #8]
			command = COMMAND_START;
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <Command_Check+0xa0>)
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
			break;
 800032c:	e00a      	b.n	8000344 <Command_Check+0x7c>
		case COMMAND_SWITCH:
			command_status = (data == 0)? COMMAND_RECEIVED: COMMAND_NOTRECEIVED;
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b00      	cmp	r3, #0
 8000332:	bf14      	ite	ne
 8000334:	2301      	movne	r3, #1
 8000336:	2300      	moveq	r3, #0
 8000338:	b2db      	uxtb	r3, r3
 800033a:	60bb      	str	r3, [r7, #8]
			command = COMMAND_STOP;
 800033c:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <Command_Check+0xa0>)
 800033e:	2201      	movs	r2, #1
 8000340:	701a      	strb	r2, [r3, #0]
			break;
 8000342:	bf00      	nop
	while (! Buffer_IsEmpty(FIFO_buf) && command_status == COMMAND_NOTRECEIVED)
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <Command_Check+0x9c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff37 	bl	80001bc <Buffer_IsEmpty>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d102      	bne.n	800035a <Command_Check+0x92>
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d0be      	beq.n	80002d8 <Command_Check+0x10>
		}
	}
	return command_status;
 800035a:	68bb      	ldr	r3, [r7, #8]
}
 800035c:	4618      	mov	r0, r3
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	200002f8 	.word	0x200002f8
 8000368:	20000000 	.word	0x20000000

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  FIFO_buf = Buffer_Init(128);
 8000372:	2080      	movs	r0, #128	; 0x80
 8000374:	f7ff feea 	bl	800014c <Buffer_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	4a56      	ldr	r2, [pc, #344]	; (80004d4 <main+0x168>)
 800037c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037e:	f000 fc3f 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000382:	f000 f8b9 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000386:	f000 f9b9 	bl	80006fc <MX_GPIO_Init>
  MX_I2C1_Init();
 800038a:	f000 f90f 	bl	80005ac <MX_I2C1_Init>
  MX_TIM2_Init();
 800038e:	f000 f969 	bl	8000664 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000392:	f00a f9f3 	bl	800a77c <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 8000396:	f000 f937 	bl	8000608 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  adc1_rdy = 0;
 800039a:	4b4f      	ldr	r3, [pc, #316]	; (80004d8 <main+0x16c>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
  adc2_rdy = 0;
 80003a0:	4b4e      	ldr	r3, [pc, #312]	; (80004dc <main+0x170>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
  uint32_t led1 = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
  uint32_t led2 = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60bb      	str	r3, [r7, #8]
  uint32_t led3 = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	607b      	str	r3, [r7, #4]
  command = COMMAND_NOTR;
 80003b2:	4b4b      	ldr	r3, [pc, #300]	; (80004e0 <main+0x174>)
 80003b4:	2202      	movs	r2, #2
 80003b6:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(Command_Check() == COMMAND_RECEIVED)
 80003b8:	f7ff ff86 	bl	80002c8 <Command_Check>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d102      	bne.n	80003c8 <main+0x5c>
		{
			SM_Case = ST_IDLE;
 80003c2:	4b48      	ldr	r3, [pc, #288]	; (80004e4 <main+0x178>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	701a      	strb	r2, [r3, #0]
		}
		switch(SM_Case)
 80003c8:	4b46      	ldr	r3, [pc, #280]	; (80004e4 <main+0x178>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b02      	cmp	r3, #2
 80003ce:	d077      	beq.n	80004c0 <main+0x154>
 80003d0:	2b02      	cmp	r3, #2
 80003d2:	dcf1      	bgt.n	80003b8 <main+0x4c>
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d002      	beq.n	80003de <main+0x72>
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d00f      	beq.n	80003fc <main+0x90>
 80003dc:	e079      	b.n	80004d2 <main+0x166>
		{
			case ST_IDLE:
				if (command == COMMAND_START)
 80003de:	4b40      	ldr	r3, [pc, #256]	; (80004e0 <main+0x174>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d102      	bne.n	80003ec <main+0x80>
				{
					SM_Case = ST_START;
 80003e6:	4b3f      	ldr	r3, [pc, #252]	; (80004e4 <main+0x178>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
				}
				if (command == COMMAND_STOP)
 80003ec:	4b3c      	ldr	r3, [pc, #240]	; (80004e0 <main+0x174>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d16b      	bne.n	80004cc <main+0x160>
				{
					SM_Case = ST_STOP;
 80003f4:	4b3b      	ldr	r3, [pc, #236]	; (80004e4 <main+0x178>)
 80003f6:	2202      	movs	r2, #2
 80003f8:	701a      	strb	r2, [r3, #0]
				}
				break;
 80003fa:	e067      	b.n	80004cc <main+0x160>
			case ST_START:
				if (setup == SETUP_NOTDONE)
 80003fc:	4b3a      	ldr	r3, [pc, #232]	; (80004e8 <main+0x17c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d11a      	bne.n	800043a <main+0xce>
				{
					initStatHRM();
 8000404:	f00a ff0e 	bl	800b224 <initStatHRM>
					AFE12_RST();
 8000408:	f000 fa1a 	bl	8000840 <AFE12_RST>
					cur_i2c = hi2c1;
 800040c:	4a37      	ldr	r2, [pc, #220]	; (80004ec <main+0x180>)
 800040e:	4b38      	ldr	r3, [pc, #224]	; (80004f0 <main+0x184>)
 8000410:	4610      	mov	r0, r2
 8000412:	4619      	mov	r1, r3
 8000414:	2354      	movs	r3, #84	; 0x54
 8000416:	461a      	mov	r2, r3
 8000418:	f00b ff8c 	bl	800c334 <memcpy>
					AFE_Setup();
 800041c:	f000 fa1e 	bl	800085c <AFE_Setup>
					cur_i2c = hi2c2;
 8000420:	4a32      	ldr	r2, [pc, #200]	; (80004ec <main+0x180>)
 8000422:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <main+0x188>)
 8000424:	4610      	mov	r0, r2
 8000426:	4619      	mov	r1, r3
 8000428:	2354      	movs	r3, #84	; 0x54
 800042a:	461a      	mov	r2, r3
 800042c:	f00b ff82 	bl	800c334 <memcpy>
					AFE_Setup();
 8000430:	f000 fa14 	bl	800085c <AFE_Setup>
					setup = SETUP_DONE;
 8000434:	4b2c      	ldr	r3, [pc, #176]	; (80004e8 <main+0x17c>)
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
				}
				if(adc1_rdy)
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <main+0x16c>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d01c      	beq.n	800047c <main+0x110>
				{
					cur_i2c = hi2c1;
 8000442:	4a2a      	ldr	r2, [pc, #168]	; (80004ec <main+0x180>)
 8000444:	4b2a      	ldr	r3, [pc, #168]	; (80004f0 <main+0x184>)
 8000446:	4610      	mov	r0, r2
 8000448:	4619      	mov	r1, r3
 800044a:	2354      	movs	r3, #84	; 0x54
 800044c:	461a      	mov	r2, r3
 800044e:	f00b ff71 	bl	800c334 <memcpy>
//					statHRMAlgo(hr3_get_led1_amb1_val());
					afe4404_Delay_ms(2);
 8000452:	2002      	movs	r0, #2
 8000454:	f00a fea4 	bl	800b1a0 <afe4404_Delay_ms>
					led2 = hr3_get_led2_val();
 8000458:	f00b fe4c 	bl	800c0f4 <hr3_get_led2_val>
 800045c:	60b8      	str	r0, [r7, #8]
					led3 = hr3_get_led3_val();
 800045e:	f00b fe71 	bl	800c144 <hr3_get_led3_val>
 8000462:	6078      	str	r0, [r7, #4]
					led1 = hr3_get_led1_val();
 8000464:	f00b fe1e 	bl	800c0a4 <hr3_get_led1_val>
 8000468:	60f8      	str	r0, [r7, #12]
					afe4404_send_results(1, led1, led2, led3);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	68ba      	ldr	r2, [r7, #8]
 800046e:	68f9      	ldr	r1, [r7, #12]
 8000470:	2001      	movs	r0, #1
 8000472:	f00a fea0 	bl	800b1b6 <afe4404_send_results>
					adc1_rdy = 0;
 8000476:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <main+0x16c>)
 8000478:	2200      	movs	r2, #0
 800047a:	701a      	strb	r2, [r3, #0]
				}
				if(adc2_rdy)
 800047c:	4b17      	ldr	r3, [pc, #92]	; (80004dc <main+0x170>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d025      	beq.n	80004d0 <main+0x164>
				{
					cur_i2c = hi2c2;
 8000484:	4a19      	ldr	r2, [pc, #100]	; (80004ec <main+0x180>)
 8000486:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <main+0x188>)
 8000488:	4610      	mov	r0, r2
 800048a:	4619      	mov	r1, r3
 800048c:	2354      	movs	r3, #84	; 0x54
 800048e:	461a      	mov	r2, r3
 8000490:	f00b ff50 	bl	800c334 <memcpy>
//					statHRMAlgo(hr3_get_led1_amb1_val());
					afe4404_Delay_ms(2);
 8000494:	2002      	movs	r0, #2
 8000496:	f00a fe83 	bl	800b1a0 <afe4404_Delay_ms>
					led2 = hr3_get_led2_val();
 800049a:	f00b fe2b 	bl	800c0f4 <hr3_get_led2_val>
 800049e:	60b8      	str	r0, [r7, #8]
					led3 = hr3_get_led3_val();
 80004a0:	f00b fe50 	bl	800c144 <hr3_get_led3_val>
 80004a4:	6078      	str	r0, [r7, #4]
					led1 = hr3_get_led1_val();
 80004a6:	f00b fdfd 	bl	800c0a4 <hr3_get_led1_val>
 80004aa:	60f8      	str	r0, [r7, #12]
					afe4404_send_results(2, led1, led2, led3);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	68f9      	ldr	r1, [r7, #12]
 80004b2:	2002      	movs	r0, #2
 80004b4:	f00a fe7f 	bl	800b1b6 <afe4404_send_results>
					adc2_rdy = 0;
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <main+0x170>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
				}
				break;
 80004be:	e007      	b.n	80004d0 <main+0x164>
			case ST_STOP:
				AFE12_RST();
 80004c0:	f000 f9be 	bl	8000840 <AFE12_RST>
				setup = SETUP_NOTDONE;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <main+0x17c>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
				break;
 80004ca:	e002      	b.n	80004d2 <main+0x166>
				break;
 80004cc:	bf00      	nop
 80004ce:	e773      	b.n	80003b8 <main+0x4c>
				break;
 80004d0:	bf00      	nop
		if(Command_Check() == COMMAND_RECEIVED)
 80004d2:	e771      	b.n	80003b8 <main+0x4c>
 80004d4:	200002f8 	.word	0x200002f8
 80004d8:	200002fc 	.word	0x200002fc
 80004dc:	200002fd 	.word	0x200002fd
 80004e0:	20000000 	.word	0x20000000
 80004e4:	200002f4 	.word	0x200002f4
 80004e8:	20000004 	.word	0x20000004
 80004ec:	20000300 	.word	0x20000300
 80004f0:	20000204 	.word	0x20000204
 80004f4:	20000258 	.word	0x20000258

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000502:	2228      	movs	r2, #40	; 0x28
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f00b ff22 	bl	800c350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000528:	2301      	movs	r3, #1
 800052a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000530:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	2301      	movs	r3, #1
 8000538:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000544:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000548:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054e:	4618      	mov	r0, r3
 8000550:	f005 f8b2 	bl	80056b8 <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800055a:	f000 f99e 	bl	800089a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	230f      	movs	r3, #15
 8000560:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	2302      	movs	r3, #2
 8000564:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800056a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2102      	movs	r1, #2
 800057a:	4618      	mov	r0, r3
 800057c:	f005 fb1e 	bl	8005bbc <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000586:	f000 f988 	bl	800089a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800058a:	2310      	movs	r3, #16
 800058c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	4618      	mov	r0, r3
 8000596:	f005 fc95 	bl	8005ec4 <HAL_RCCEx_PeriphCLKConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005a0:	f000 f97b 	bl	800089a <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3750      	adds	r7, #80	; 0x50
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <MX_I2C1_Init+0x50>)
 80005b2:	4a13      	ldr	r2, [pc, #76]	; (8000600 <MX_I2C1_Init+0x54>)
 80005b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_I2C1_Init+0x50>)
 80005b8:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MX_I2C1_Init+0x58>)
 80005ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_I2C1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_I2C1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MX_I2C1_Init+0x50>)
 80005ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <MX_I2C1_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_I2C1_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <MX_I2C1_Init+0x50>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_I2C1_Init+0x50>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e8:	4804      	ldr	r0, [pc, #16]	; (80005fc <MX_I2C1_Init+0x50>)
 80005ea:	f000 fedd 	bl	80013a8 <HAL_I2C_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005f4:	f000 f951 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000204 	.word	0x20000204
 8000600:	40005400 	.word	0x40005400
 8000604:	00061a80 	.word	0x00061a80

08000608 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_I2C2_Init+0x50>)
 800060e:	4a13      	ldr	r2, [pc, #76]	; (800065c <MX_I2C2_Init+0x54>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_I2C2_Init+0x50>)
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <MX_I2C2_Init+0x58>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_I2C2_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_I2C2_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_I2C2_Init+0x50>)
 8000626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_I2C2_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_I2C2_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_I2C2_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_I2C2_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_I2C2_Init+0x50>)
 8000646:	f000 feaf 	bl	80013a8 <HAL_I2C_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 f923 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000258 	.word	0x20000258
 800065c:	40005800 	.word	0x40005800
 8000660:	00061a80 	.word	0x00061a80

08000664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_TIM2_Init+0x94>)
 8000682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_TIM2_Init+0x94>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_TIM2_Init+0x94>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_TIM2_Init+0x94>)
 8000696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_TIM2_Init+0x94>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_TIM2_Init+0x94>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006a8:	4813      	ldr	r0, [pc, #76]	; (80006f8 <MX_TIM2_Init+0x94>)
 80006aa:	f005 fcc1 	bl	8006030 <HAL_TIM_Base_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006b4:	f000 f8f1 	bl	800089a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_TIM2_Init+0x94>)
 80006c6:	f005 fd02 	bl	80060ce <HAL_TIM_ConfigClockSource>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006d0:	f000 f8e3 	bl	800089a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_TIM2_Init+0x94>)
 80006e2:	f005 feb1 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006ec:	f000 f8d5 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200002ac 	.word	0x200002ac

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000710:	4b46      	ldr	r3, [pc, #280]	; (800082c <MX_GPIO_Init+0x130>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a45      	ldr	r2, [pc, #276]	; (800082c <MX_GPIO_Init+0x130>)
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b43      	ldr	r3, [pc, #268]	; (800082c <MX_GPIO_Init+0x130>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0310 	and.w	r3, r3, #16
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000728:	4b40      	ldr	r3, [pc, #256]	; (800082c <MX_GPIO_Init+0x130>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a3f      	ldr	r2, [pc, #252]	; (800082c <MX_GPIO_Init+0x130>)
 800072e:	f043 0320 	orr.w	r3, r3, #32
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b3d      	ldr	r3, [pc, #244]	; (800082c <MX_GPIO_Init+0x130>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0320 	and.w	r3, r3, #32
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000740:	4b3a      	ldr	r3, [pc, #232]	; (800082c <MX_GPIO_Init+0x130>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a39      	ldr	r2, [pc, #228]	; (800082c <MX_GPIO_Init+0x130>)
 8000746:	f043 0308 	orr.w	r3, r3, #8
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b37      	ldr	r3, [pc, #220]	; (800082c <MX_GPIO_Init+0x130>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0308 	and.w	r3, r3, #8
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b34      	ldr	r3, [pc, #208]	; (800082c <MX_GPIO_Init+0x130>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a33      	ldr	r2, [pc, #204]	; (800082c <MX_GPIO_Init+0x130>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b31      	ldr	r3, [pc, #196]	; (800082c <MX_GPIO_Init+0x130>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000776:	482e      	ldr	r0, [pc, #184]	; (8000830 <MX_GPIO_Init+0x134>)
 8000778:	f000 fddc 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000782:	482c      	ldr	r0, [pc, #176]	; (8000834 <MX_GPIO_Init+0x138>)
 8000784:	f000 fdd6 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2110      	movs	r1, #16
 800078c:	482a      	ldr	r0, [pc, #168]	; (8000838 <MX_GPIO_Init+0x13c>)
 800078e:	f000 fdd1 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	4821      	ldr	r0, [pc, #132]	; (8000830 <MX_GPIO_Init+0x134>)
 80007ac:	f000 fc3e 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2302      	movs	r3, #2
 80007c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	4619      	mov	r1, r3
 80007c8:	481a      	ldr	r0, [pc, #104]	; (8000834 <MX_GPIO_Init+0x138>)
 80007ca:	f000 fc2f 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80007ce:	2328      	movs	r3, #40	; 0x28
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_GPIO_Init+0x140>)
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	4619      	mov	r1, r3
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MX_GPIO_Init+0x13c>)
 80007e2:	f000 fc23 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007e6:	2310      	movs	r3, #16
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	4619      	mov	r1, r3
 80007fc:	480e      	ldr	r0, [pc, #56]	; (8000838 <MX_GPIO_Init+0x13c>)
 80007fe:	f000 fc15 	bl	800102c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2009      	movs	r0, #9
 8000808:	f000 fb57 	bl	8000eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800080c:	2009      	movs	r0, #9
 800080e:	f000 fb70 	bl	8000ef2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2017      	movs	r0, #23
 8000818:	f000 fb4f 	bl	8000eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800081c:	2017      	movs	r0, #23
 800081e:	f000 fb68 	bl	8000ef2 <HAL_NVIC_EnableIRQ>

}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	40011000 	.word	0x40011000
 8000834:	40010800 	.word	0x40010800
 8000838:	40010c00 	.word	0x40010c00
 800083c:	10110000 	.word	0x10110000

08000840 <AFE12_RST>:

/* USER CODE BEGIN 4 */
static void AFE12_RST(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	afe4404_RstReset();
 8000844:	f00a fc5e 	bl	800b104 <afe4404_RstReset>
	afe4404_Delay_ms(0.05);
 8000848:	2000      	movs	r0, #0
 800084a:	f00a fca9 	bl	800b1a0 <afe4404_Delay_ms>
	afe4404_RstSet();
 800084e:	f00a fc4d 	bl	800b0ec <afe4404_RstSet>
	afe4404_Delay_ms(2);
 8000852:	2002      	movs	r0, #2
 8000854:	f00a fca4 	bl	800b1a0 <afe4404_Delay_ms>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <AFE_Setup>:

static void AFE_Setup(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	dynamic_modes_t dynamic_modes;

	dynamic_modes.transmit = trans_dis;
 8000862:	2300      	movs	r3, #0
 8000864:	703b      	strb	r3, [r7, #0]
	dynamic_modes.curr_range = led_double;
 8000866:	2301      	movs	r3, #1
 8000868:	707b      	strb	r3, [r7, #1]
	dynamic_modes.adc_power = adc_on;
 800086a:	2301      	movs	r3, #1
 800086c:	70bb      	strb	r3, [r7, #2]
	dynamic_modes.clk_mode = osc_mode;
 800086e:	2301      	movs	r3, #1
 8000870:	70fb      	strb	r3, [r7, #3]
	dynamic_modes.tia_power = tia_off;
 8000872:	2301      	movs	r3, #1
 8000874:	713b      	strb	r3, [r7, #4]
	dynamic_modes.rest_of_adc = rest_of_adc_off;
 8000876:	2300      	movs	r3, #0
 8000878:	717b      	strb	r3, [r7, #5]
	dynamic_modes.afe_rx_mode = afe_rx_normal;
 800087a:	2300      	movs	r3, #0
 800087c:	71bb      	strb	r3, [r7, #6]
	dynamic_modes.afe_mode = afe_normal;
 800087e:	2300      	movs	r3, #0
 8000880:	71fb      	strb	r3, [r7, #7]

	hr3_init(afe4404_address, &dynamic_modes);
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	2058      	movs	r0, #88	; 0x58
 8000888:	f00a fdd3 	bl	800b432 <hr3_init>
	afe4404_Delay_ms(201);
 800088c:	20c9      	movs	r0, #201	; 0xc9
 800088e:	f00a fc87 	bl	800b1a0 <afe4404_Delay_ms>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089e:	b672      	cpsid	i
}
 80008a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_MspInit+0x5c>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4a14      	ldr	r2, [pc, #80]	; (8000900 <HAL_MspInit+0x5c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6193      	str	r3, [r2, #24]
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_MspInit+0x5c>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <HAL_MspInit+0x5c>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <HAL_MspInit+0x5c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <HAL_MspInit+0x5c>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_MspInit+0x60>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_MspInit+0x60>)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	40021000 	.word	0x40021000
 8000904:	40010000 	.word	0x40010000

08000908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0318 	add.w	r3, r7, #24
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a3b      	ldr	r2, [pc, #236]	; (8000a10 <HAL_I2C_MspInit+0x108>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d134      	bne.n	8000992 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <HAL_I2C_MspInit+0x10c>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a39      	ldr	r2, [pc, #228]	; (8000a14 <HAL_I2C_MspInit+0x10c>)
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <HAL_I2C_MspInit+0x10c>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000940:	23c0      	movs	r3, #192	; 0xc0
 8000942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000944:	2312      	movs	r3, #18
 8000946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	4619      	mov	r1, r3
 8000952:	4831      	ldr	r0, [pc, #196]	; (8000a18 <HAL_I2C_MspInit+0x110>)
 8000954:	f000 fb6a 	bl	800102c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000958:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <HAL_I2C_MspInit+0x10c>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <HAL_I2C_MspInit+0x10c>)
 800095e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000962:	61d3      	str	r3, [r2, #28]
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <HAL_I2C_MspInit+0x10c>)
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	201f      	movs	r0, #31
 8000976:	f000 faa0 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800097a:	201f      	movs	r0, #31
 800097c:	f000 fab9 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2020      	movs	r0, #32
 8000986:	f000 fa98 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800098a:	2020      	movs	r0, #32
 800098c:	f000 fab1 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000990:	e039      	b.n	8000a06 <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <HAL_I2C_MspInit+0x114>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d134      	bne.n	8000a06 <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <HAL_I2C_MspInit+0x10c>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <HAL_I2C_MspInit+0x10c>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <HAL_I2C_MspInit+0x10c>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ba:	2312      	movs	r3, #18
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	4619      	mov	r1, r3
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <HAL_I2C_MspInit+0x110>)
 80009ca:	f000 fb2f 	bl	800102c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_I2C_MspInit+0x10c>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_I2C_MspInit+0x10c>)
 80009d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_I2C_MspInit+0x10c>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2021      	movs	r0, #33	; 0x21
 80009ec:	f000 fa65 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80009f0:	2021      	movs	r0, #33	; 0x21
 80009f2:	f000 fa7e 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	2022      	movs	r0, #34	; 0x22
 80009fc:	f000 fa5d 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000a00:	2022      	movs	r0, #34	; 0x22
 8000a02:	f000 fa76 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40005400 	.word	0x40005400
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010c00 	.word	0x40010c00
 8000a1c:	40005800 	.word	0x40005800

08000a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a30:	d10b      	bne.n	8000a4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_TIM_Base_MspInit+0x34>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <HAL_TIM_Base_MspInit+0x34>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	61d3      	str	r3, [r2, #28]
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_TIM_Base_MspInit+0x34>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9e:	f000 f8f5 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  adc1_rdy = 1;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <EXTI3_IRQHandler+0x14>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000ab2:	2008      	movs	r0, #8
 8000ab4:	f000 fc56 	bl	8001364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200002fc 	.word	0x200002fc

08000ac0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ac6:	f003 fa64 	bl	8003f92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20001024 	.word	0x20001024

08000ad4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  adc2_rdy = 1;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <EXTI9_5_IRQHandler+0x14>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000ade:	2020      	movs	r0, #32
 8000ae0:	f000 fc40 	bl	8001364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200002fd 	.word	0x200002fd

08000aec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <I2C1_EV_IRQHandler+0x10>)
 8000af2:	f001 f903 	bl	8001cfc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000204 	.word	0x20000204

08000b00 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <I2C1_ER_IRQHandler+0x10>)
 8000b06:	f001 fa6a 	bl	8001fde <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000204 	.word	0x20000204

08000b14 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <I2C2_EV_IRQHandler+0x10>)
 8000b1a:	f001 f8ef 	bl	8001cfc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000258 	.word	0x20000258

08000b28 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <I2C2_ER_IRQHandler+0x10>)
 8000b2e:	f001 fa56 	bl	8001fde <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000258 	.word	0x20000258

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f00b fbb0 	bl	800c2d0 <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20005000 	.word	0x20005000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	20000354 	.word	0x20000354
 8000ba4:	200015c0 	.word	0x200015c0

08000ba8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bda:	f7ff ffe5 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f00b fb7d 	bl	800c2dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be2:	f7ff fbc3 	bl	800036c <main>
  bx lr
 8000be6:	4770      	bx	lr
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8000bf0:	0800c558 	.word	0x0800c558
  ldr r2, =_sbss
 8000bf4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000bf8:	200015c0 	.word	0x200015c0

08000bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_2_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_Init+0x28>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_Init+0x28>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f947 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f808 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fe42 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40022000 	.word	0x40022000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f95f 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f927 	bl	8000eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000010 	.word	0x20000010
 8000c88:	2000000c 	.word	0x2000000c

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x1c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_IncTick+0x20>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a03      	ldr	r2, [pc, #12]	; (8000cac <HAL_IncTick+0x20>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000010 	.word	0x20000010
 8000cac:	20000358 	.word	0x20000358

08000cb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <HAL_GetTick+0x10>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000358 	.word	0x20000358

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff fff0 	bl	8000cb0 <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cea:	bf00      	nop
 8000cec:	f7ff ffe0 	bl	8000cb0 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000010 	.word	0x20000010

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4906      	ldr	r1, [pc, #24]	; (8000da4 <__NVIC_EnableIRQ+0x34>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff90 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff2d 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff42 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff90 	bl	8000dfc <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5f 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff35 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffa2 	bl	8000e60 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d005      	beq.n	8000f4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2204      	movs	r2, #4
 8000f42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e051      	b.n	8000fee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 020e 	bic.w	r2, r2, #14
 8000f58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0201 	bic.w	r2, r2, #1
 8000f68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <HAL_DMA_Abort_IT+0xd0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d029      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0xa0>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a20      	ldr	r2, [pc, #128]	; (8000ffc <HAL_DMA_Abort_IT+0xd4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d022      	beq.n	8000fc4 <HAL_DMA_Abort_IT+0x9c>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <HAL_DMA_Abort_IT+0xd8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d01a      	beq.n	8000fbe <HAL_DMA_Abort_IT+0x96>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1d      	ldr	r2, [pc, #116]	; (8001004 <HAL_DMA_Abort_IT+0xdc>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d012      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0x90>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <HAL_DMA_Abort_IT+0xe0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d00a      	beq.n	8000fb2 <HAL_DMA_Abort_IT+0x8a>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	; (800100c <HAL_DMA_Abort_IT+0xe4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d102      	bne.n	8000fac <HAL_DMA_Abort_IT+0x84>
 8000fa6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000faa:	e00e      	b.n	8000fca <HAL_DMA_Abort_IT+0xa2>
 8000fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fb0:	e00b      	b.n	8000fca <HAL_DMA_Abort_IT+0xa2>
 8000fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb6:	e008      	b.n	8000fca <HAL_DMA_Abort_IT+0xa2>
 8000fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbc:	e005      	b.n	8000fca <HAL_DMA_Abort_IT+0xa2>
 8000fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc2:	e002      	b.n	8000fca <HAL_DMA_Abort_IT+0xa2>
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	e000      	b.n	8000fca <HAL_DMA_Abort_IT+0xa2>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	4a11      	ldr	r2, [pc, #68]	; (8001010 <HAL_DMA_Abort_IT+0xe8>)
 8000fcc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	4798      	blx	r3
    } 
  }
  return status;
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40020008 	.word	0x40020008
 8000ffc:	4002001c 	.word	0x4002001c
 8001000:	40020030 	.word	0x40020030
 8001004:	40020044 	.word	0x40020044
 8001008:	40020058 	.word	0x40020058
 800100c:	4002006c 	.word	0x4002006c
 8001010:	40020000 	.word	0x40020000

08001014 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b08b      	sub	sp, #44	; 0x2c
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103e:	e169      	b.n	8001314 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001040:	2201      	movs	r2, #1
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 8158 	bne.w	800130e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4a9a      	ldr	r2, [pc, #616]	; (80012cc <HAL_GPIO_Init+0x2a0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d05e      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001068:	4a98      	ldr	r2, [pc, #608]	; (80012cc <HAL_GPIO_Init+0x2a0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d875      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 800106e:	4a98      	ldr	r2, [pc, #608]	; (80012d0 <HAL_GPIO_Init+0x2a4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d058      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001074:	4a96      	ldr	r2, [pc, #600]	; (80012d0 <HAL_GPIO_Init+0x2a4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d86f      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 800107a:	4a96      	ldr	r2, [pc, #600]	; (80012d4 <HAL_GPIO_Init+0x2a8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d052      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001080:	4a94      	ldr	r2, [pc, #592]	; (80012d4 <HAL_GPIO_Init+0x2a8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d869      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 8001086:	4a94      	ldr	r2, [pc, #592]	; (80012d8 <HAL_GPIO_Init+0x2ac>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d04c      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 800108c:	4a92      	ldr	r2, [pc, #584]	; (80012d8 <HAL_GPIO_Init+0x2ac>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d863      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 8001092:	4a92      	ldr	r2, [pc, #584]	; (80012dc <HAL_GPIO_Init+0x2b0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d046      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001098:	4a90      	ldr	r2, [pc, #576]	; (80012dc <HAL_GPIO_Init+0x2b0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d85d      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d82a      	bhi.n	80010f8 <HAL_GPIO_Init+0xcc>
 80010a2:	2b12      	cmp	r3, #18
 80010a4:	d859      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <HAL_GPIO_Init+0x80>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	08001127 	.word	0x08001127
 80010b0:	08001101 	.word	0x08001101
 80010b4:	08001113 	.word	0x08001113
 80010b8:	08001155 	.word	0x08001155
 80010bc:	0800115b 	.word	0x0800115b
 80010c0:	0800115b 	.word	0x0800115b
 80010c4:	0800115b 	.word	0x0800115b
 80010c8:	0800115b 	.word	0x0800115b
 80010cc:	0800115b 	.word	0x0800115b
 80010d0:	0800115b 	.word	0x0800115b
 80010d4:	0800115b 	.word	0x0800115b
 80010d8:	0800115b 	.word	0x0800115b
 80010dc:	0800115b 	.word	0x0800115b
 80010e0:	0800115b 	.word	0x0800115b
 80010e4:	0800115b 	.word	0x0800115b
 80010e8:	0800115b 	.word	0x0800115b
 80010ec:	0800115b 	.word	0x0800115b
 80010f0:	08001109 	.word	0x08001109
 80010f4:	0800111d 	.word	0x0800111d
 80010f8:	4a79      	ldr	r2, [pc, #484]	; (80012e0 <HAL_GPIO_Init+0x2b4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010fe:	e02c      	b.n	800115a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	623b      	str	r3, [r7, #32]
          break;
 8001106:	e029      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	3304      	adds	r3, #4
 800110e:	623b      	str	r3, [r7, #32]
          break;
 8001110:	e024      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	3308      	adds	r3, #8
 8001118:	623b      	str	r3, [r7, #32]
          break;
 800111a:	e01f      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	330c      	adds	r3, #12
 8001122:	623b      	str	r3, [r7, #32]
          break;
 8001124:	e01a      	b.n	800115c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800112e:	2304      	movs	r3, #4
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e013      	b.n	800115c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d105      	bne.n	8001148 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800113c:	2308      	movs	r3, #8
 800113e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	611a      	str	r2, [r3, #16]
          break;
 8001146:	e009      	b.n	800115c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001148:	2308      	movs	r3, #8
 800114a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	615a      	str	r2, [r3, #20]
          break;
 8001152:	e003      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
          break;
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x130>
          break;
 800115a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2bff      	cmp	r3, #255	; 0xff
 8001160:	d801      	bhi.n	8001166 <HAL_GPIO_Init+0x13a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	e001      	b.n	800116a <HAL_GPIO_Init+0x13e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3304      	adds	r3, #4
 800116a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2bff      	cmp	r3, #255	; 0xff
 8001170:	d802      	bhi.n	8001178 <HAL_GPIO_Init+0x14c>
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x152>
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	3b08      	subs	r3, #8
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	210f      	movs	r1, #15
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	401a      	ands	r2, r3
 8001190:	6a39      	ldr	r1, [r7, #32]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	431a      	orrs	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80b1 	beq.w	800130e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011ac:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <HAL_GPIO_Init+0x2b8>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a4c      	ldr	r2, [pc, #304]	; (80012e4 <HAL_GPIO_Init+0x2b8>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b4a      	ldr	r3, [pc, #296]	; (80012e4 <HAL_GPIO_Init+0x2b8>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011c4:	4a48      	ldr	r2, [pc, #288]	; (80012e8 <HAL_GPIO_Init+0x2bc>)
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4013      	ands	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a40      	ldr	r2, [pc, #256]	; (80012ec <HAL_GPIO_Init+0x2c0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d013      	beq.n	8001218 <HAL_GPIO_Init+0x1ec>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a3f      	ldr	r2, [pc, #252]	; (80012f0 <HAL_GPIO_Init+0x2c4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d00d      	beq.n	8001214 <HAL_GPIO_Init+0x1e8>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a3e      	ldr	r2, [pc, #248]	; (80012f4 <HAL_GPIO_Init+0x2c8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d007      	beq.n	8001210 <HAL_GPIO_Init+0x1e4>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a3d      	ldr	r2, [pc, #244]	; (80012f8 <HAL_GPIO_Init+0x2cc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d101      	bne.n	800120c <HAL_GPIO_Init+0x1e0>
 8001208:	2303      	movs	r3, #3
 800120a:	e006      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 800120c:	2304      	movs	r3, #4
 800120e:	e004      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 8001210:	2302      	movs	r3, #2
 8001212:	e002      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 8001218:	2300      	movs	r3, #0
 800121a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800121c:	f002 0203 	and.w	r2, r2, #3
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	4093      	lsls	r3, r2
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800122a:	492f      	ldr	r1, [pc, #188]	; (80012e8 <HAL_GPIO_Init+0x2bc>)
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	492c      	ldr	r1, [pc, #176]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	600b      	str	r3, [r1, #0]
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	43db      	mvns	r3, r3
 800125a:	4928      	ldr	r1, [pc, #160]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 800125c:	4013      	ands	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	4922      	ldr	r1, [pc, #136]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	43db      	mvns	r3, r3
 8001282:	491e      	ldr	r1, [pc, #120]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 8001284:	4013      	ands	r3, r2
 8001286:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	4918      	ldr	r1, [pc, #96]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	608b      	str	r3, [r1, #8]
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4914      	ldr	r1, [pc, #80]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d021      	beq.n	8001300 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	490e      	ldr	r1, [pc, #56]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	60cb      	str	r3, [r1, #12]
 80012c8:	e021      	b.n	800130e <HAL_GPIO_Init+0x2e2>
 80012ca:	bf00      	nop
 80012cc:	10320000 	.word	0x10320000
 80012d0:	10310000 	.word	0x10310000
 80012d4:	10220000 	.word	0x10220000
 80012d8:	10210000 	.word	0x10210000
 80012dc:	10120000 	.word	0x10120000
 80012e0:	10110000 	.word	0x10110000
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	40010800 	.word	0x40010800
 80012f0:	40010c00 	.word	0x40010c00
 80012f4:	40011000 	.word	0x40011000
 80012f8:	40011400 	.word	0x40011400
 80012fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_GPIO_Init+0x304>)
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	43db      	mvns	r3, r3
 8001308:	4909      	ldr	r1, [pc, #36]	; (8001330 <HAL_GPIO_Init+0x304>)
 800130a:	4013      	ands	r3, r2
 800130c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	3301      	adds	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	fa22 f303 	lsr.w	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	f47f ae8e 	bne.w	8001040 <HAL_GPIO_Init+0x14>
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	372c      	adds	r7, #44	; 0x2c
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	40010400 	.word	0x40010400

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	611a      	str	r2, [r3, #16]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001370:	695a      	ldr	r2, [r3, #20]
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	4013      	ands	r3, r2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d006      	beq.n	8001388 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f806 	bl	8001394 <HAL_GPIO_EXTI_Callback>
  }
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40010400 	.word	0x40010400

08001394 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e12b      	b.n	8001612 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fa9a 	bl	8000908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2224      	movs	r2, #36	; 0x24
 80013d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800140a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800140c:	f004 fd28 	bl	8005e60 <HAL_RCC_GetPCLK1Freq>
 8001410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a81      	ldr	r2, [pc, #516]	; (800161c <HAL_I2C_Init+0x274>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d807      	bhi.n	800142c <HAL_I2C_Init+0x84>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4a80      	ldr	r2, [pc, #512]	; (8001620 <HAL_I2C_Init+0x278>)
 8001420:	4293      	cmp	r3, r2
 8001422:	bf94      	ite	ls
 8001424:	2301      	movls	r3, #1
 8001426:	2300      	movhi	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	e006      	b.n	800143a <HAL_I2C_Init+0x92>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4a7d      	ldr	r2, [pc, #500]	; (8001624 <HAL_I2C_Init+0x27c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	bf94      	ite	ls
 8001434:	2301      	movls	r3, #1
 8001436:	2300      	movhi	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e0e7      	b.n	8001612 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4a78      	ldr	r2, [pc, #480]	; (8001628 <HAL_I2C_Init+0x280>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9b      	lsrs	r3, r3, #18
 800144c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	430a      	orrs	r2, r1
 8001460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a6a      	ldr	r2, [pc, #424]	; (800161c <HAL_I2C_Init+0x274>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d802      	bhi.n	800147c <HAL_I2C_Init+0xd4>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3301      	adds	r3, #1
 800147a:	e009      	b.n	8001490 <HAL_I2C_Init+0xe8>
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	4a69      	ldr	r2, [pc, #420]	; (800162c <HAL_I2C_Init+0x284>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	099b      	lsrs	r3, r3, #6
 800148e:	3301      	adds	r3, #1
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	430b      	orrs	r3, r1
 8001496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	495c      	ldr	r1, [pc, #368]	; (800161c <HAL_I2C_Init+0x274>)
 80014ac:	428b      	cmp	r3, r1
 80014ae:	d819      	bhi.n	80014e4 <HAL_I2C_Init+0x13c>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e59      	subs	r1, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80014be:	1c59      	adds	r1, r3, #1
 80014c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014c4:	400b      	ands	r3, r1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00a      	beq.n	80014e0 <HAL_I2C_Init+0x138>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1e59      	subs	r1, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d8:	3301      	adds	r3, #1
 80014da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014de:	e051      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 80014e0:	2304      	movs	r3, #4
 80014e2:	e04f      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d111      	bne.n	8001510 <HAL_I2C_Init+0x168>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e58      	subs	r0, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	440b      	add	r3, r1
 80014fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	e012      	b.n	8001536 <HAL_I2C_Init+0x18e>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1e58      	subs	r0, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	0099      	lsls	r1, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	fbb0 f3f3 	udiv	r3, r0, r3
 8001526:	3301      	adds	r3, #1
 8001528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Init+0x196>
 800153a:	2301      	movs	r3, #1
 800153c:	e022      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10e      	bne.n	8001564 <HAL_I2C_Init+0x1bc>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1e58      	subs	r0, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6859      	ldr	r1, [r3, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	440b      	add	r3, r1
 8001554:	fbb0 f3f3 	udiv	r3, r0, r3
 8001558:	3301      	adds	r3, #1
 800155a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001562:	e00f      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	0099      	lsls	r1, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	fbb0 f3f3 	udiv	r3, r0, r3
 800157a:	3301      	adds	r3, #1
 800157c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	6809      	ldr	r1, [r1, #0]
 8001588:	4313      	orrs	r3, r2
 800158a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6911      	ldr	r1, [r2, #16]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68d2      	ldr	r2, [r2, #12]
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	000186a0 	.word	0x000186a0
 8001620:	001e847f 	.word	0x001e847f
 8001624:	003d08ff 	.word	0x003d08ff
 8001628:	431bde83 	.word	0x431bde83
 800162c:	10624dd3 	.word	0x10624dd3

08001630 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af02      	add	r7, sp, #8
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	461a      	mov	r2, r3
 800163c:	460b      	mov	r3, r1
 800163e:	817b      	strh	r3, [r7, #10]
 8001640:	4613      	mov	r3, r2
 8001642:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff fb34 	bl	8000cb0 <HAL_GetTick>
 8001648:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b20      	cmp	r3, #32
 8001654:	f040 80e0 	bne.w	8001818 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2319      	movs	r3, #25
 800165e:	2201      	movs	r2, #1
 8001660:	4970      	ldr	r1, [pc, #448]	; (8001824 <HAL_I2C_Master_Transmit+0x1f4>)
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f002 f93c 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800166e:	2302      	movs	r3, #2
 8001670:	e0d3      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_I2C_Master_Transmit+0x50>
 800167c:	2302      	movs	r3, #2
 800167e:	e0cc      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d007      	beq.n	80016a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2221      	movs	r2, #33	; 0x21
 80016ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2210      	movs	r2, #16
 80016c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	893a      	ldrh	r2, [r7, #8]
 80016d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4a50      	ldr	r2, [pc, #320]	; (8001828 <HAL_I2C_Master_Transmit+0x1f8>)
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016e8:	8979      	ldrh	r1, [r7, #10]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	6a3a      	ldr	r2, [r7, #32]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f001 fee4 	bl	80034bc <I2C_MasterRequestWrite>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e08d      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001714:	e066      	b.n	80017e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	6a39      	ldr	r1, [r7, #32]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f002 f9b6 	bl	8003a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00d      	beq.n	8001742 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	2b04      	cmp	r3, #4
 800172c:	d107      	bne.n	800173e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176a:	3b01      	subs	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b04      	cmp	r3, #4
 800177e:	d11b      	bne.n	80017b8 <HAL_I2C_Master_Transmit+0x188>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d017      	beq.n	80017b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	781a      	ldrb	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	6a39      	ldr	r1, [r7, #32]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f002 f9a6 	bl	8003b0e <I2C_WaitOnBTFFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00d      	beq.n	80017e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d107      	bne.n	80017e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01a      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d194      	bne.n	8001716 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001818:	2302      	movs	r3, #2
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	00100002 	.word	0x00100002
 8001828:	ffff0000 	.word	0xffff0000

0800182c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	; 0x30
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	4608      	mov	r0, r1
 8001836:	4611      	mov	r1, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4603      	mov	r3, r0
 800183c:	817b      	strh	r3, [r7, #10]
 800183e:	460b      	mov	r3, r1
 8001840:	813b      	strh	r3, [r7, #8]
 8001842:	4613      	mov	r3, r2
 8001844:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800184a:	f7ff fa31 	bl	8000cb0 <HAL_GetTick>
 800184e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b20      	cmp	r3, #32
 800185a:	f040 8244 	bne.w	8001ce6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2319      	movs	r3, #25
 8001864:	2201      	movs	r2, #1
 8001866:	4982      	ldr	r1, [pc, #520]	; (8001a70 <HAL_I2C_Mem_Read+0x244>)
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f002 f839 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001874:	2302      	movs	r3, #2
 8001876:	e237      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_I2C_Mem_Read+0x5a>
 8001882:	2302      	movs	r3, #2
 8001884:	e230      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x4bc>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d007      	beq.n	80018ac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2222      	movs	r2, #34	; 0x22
 80018c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2240      	movs	r2, #64	; 0x40
 80018c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a62      	ldr	r2, [pc, #392]	; (8001a74 <HAL_I2C_Mem_Read+0x248>)
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018ee:	88f8      	ldrh	r0, [r7, #6]
 80018f0:	893a      	ldrh	r2, [r7, #8]
 80018f2:	8979      	ldrh	r1, [r7, #10]
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	4603      	mov	r3, r0
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f001 fe5e 	bl	80035c0 <I2C_RequestMemoryRead>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e1ec      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001912:	2b00      	cmp	r3, #0
 8001914:	d113      	bne.n	800193e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	e1c0      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001942:	2b01      	cmp	r3, #1
 8001944:	d11e      	bne.n	8001984 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001954:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001956:	b672      	cpsid	i
}
 8001958:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800197e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001980:	b662      	cpsie	i
}
 8001982:	e035      	b.n	80019f0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001988:	2b02      	cmp	r3, #2
 800198a:	d11e      	bne.n	80019ca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800199a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019c6:	b662      	cpsie	i
}
 80019c8:	e012      	b.n	80019f0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019d8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80019f0:	e166      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	f200 811f 	bhi.w	8001c3a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d123      	bne.n	8001a4c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f002 f8f3 	bl	8003bf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e167      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a4a:	e139      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d152      	bne.n	8001afa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4906      	ldr	r1, [pc, #24]	; (8001a78 <HAL_I2C_Mem_Read+0x24c>)
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f001 ff3e 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e13c      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x4bc>
 8001a6e:	bf00      	nop
 8001a70:	00100002 	.word	0x00100002
 8001a74:	ffff0000 	.word	0xffff0000
 8001a78:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ac2:	b662      	cpsie	i
}
 8001ac4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001af8:	e0e2      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b00:	2200      	movs	r2, #0
 8001b02:	497b      	ldr	r1, [pc, #492]	; (8001cf0 <HAL_I2C_Mem_Read+0x4c4>)
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f001 feeb 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0e9      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001b5a:	4b66      	ldr	r3, [pc, #408]	; (8001cf4 <HAL_I2C_Mem_Read+0x4c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	08db      	lsrs	r3, r3, #3
 8001b60:	4a65      	ldr	r2, [pc, #404]	; (8001cf8 <HAL_I2C_Mem_Read+0x4cc>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0a1a      	lsrs	r2, r3, #8
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00da      	lsls	r2, r3, #3
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d118      	bne.n	8001bb2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f043 0220 	orr.w	r2, r3, #32
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001ba2:	b662      	cpsie	i
}
 8001ba4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e09a      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d1d9      	bne.n	8001b74 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c02:	b662      	cpsie	i
}
 8001c04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c38:	e042      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f001 ffd8 	bl	8003bf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e04c      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d118      	bne.n	8001cc0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f47f ae94 	bne.w	80019f2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
  }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	00010004 	.word	0x00010004
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	14f8b589 	.word	0x14f8b589

08001cfc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d1c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d24:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	2b10      	cmp	r3, #16
 8001d2a:	d003      	beq.n	8001d34 <HAL_I2C_EV_IRQHandler+0x38>
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b40      	cmp	r3, #64	; 0x40
 8001d30:	f040 80c1 	bne.w	8001eb6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10d      	bne.n	8001d6a <HAL_I2C_EV_IRQHandler+0x6e>
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001d54:	d003      	beq.n	8001d5e <HAL_I2C_EV_IRQHandler+0x62>
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d5c:	d101      	bne.n	8001d62 <HAL_I2C_EV_IRQHandler+0x66>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_I2C_EV_IRQHandler+0x68>
 8001d62:	2300      	movs	r3, #0
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	f000 8132 	beq.w	8001fce <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00c      	beq.n	8001d8e <HAL_I2C_EV_IRQHandler+0x92>
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	0a5b      	lsrs	r3, r3, #9
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f001 ffbb 	bl	8003cfc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fd77 	bl	800287a <I2C_Master_SB>
 8001d8c:	e092      	b.n	8001eb4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	08db      	lsrs	r3, r3, #3
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <HAL_I2C_EV_IRQHandler+0xb2>
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	0a5b      	lsrs	r3, r3, #9
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fdec 	bl	8002984 <I2C_Master_ADD10>
 8001dac:	e082      	b.n	8001eb4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_I2C_EV_IRQHandler+0xd2>
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	0a5b      	lsrs	r3, r3, #9
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fe05 	bl	80029d6 <I2C_Master_ADDR>
 8001dcc:	e072      	b.n	8001eb4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d03b      	beq.n	8001e52 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001de8:	f000 80f3 	beq.w	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	09db      	lsrs	r3, r3, #7
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00f      	beq.n	8001e18 <HAL_I2C_EV_IRQHandler+0x11c>
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	0a9b      	lsrs	r3, r3, #10
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d009      	beq.n	8001e18 <HAL_I2C_EV_IRQHandler+0x11c>
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f9f1 	bl	80021f8 <I2C_MasterTransmit_TXE>
 8001e16:	e04d      	b.n	8001eb4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80d6 	beq.w	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	0a5b      	lsrs	r3, r3, #9
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80cf 	beq.w	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001e34:	7bbb      	ldrb	r3, [r7, #14]
 8001e36:	2b21      	cmp	r3, #33	; 0x21
 8001e38:	d103      	bne.n	8001e42 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fa78 	bl	8002330 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e40:	e0c7      	b.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	2b40      	cmp	r3, #64	; 0x40
 8001e46:	f040 80c4 	bne.w	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fae6 	bl	800241c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e50:	e0bf      	b.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e60:	f000 80b7 	beq.w	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	099b      	lsrs	r3, r3, #6
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00f      	beq.n	8001e90 <HAL_I2C_EV_IRQHandler+0x194>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	0a9b      	lsrs	r3, r3, #10
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d009      	beq.n	8001e90 <HAL_I2C_EV_IRQHandler+0x194>
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d103      	bne.n	8001e90 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fb5b 	bl	8002544 <I2C_MasterReceive_RXNE>
 8001e8e:	e011      	b.n	8001eb4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 809a 	beq.w	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	0a5b      	lsrs	r3, r3, #9
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8093 	beq.w	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fbfa 	bl	80026a6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eb2:	e08e      	b.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001eb4:	e08d      	b.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d004      	beq.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e007      	b.n	8001ed8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	085b      	lsrs	r3, r3, #1
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d012      	beq.n	8001f0a <HAL_I2C_EV_IRQHandler+0x20e>
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	0a5b      	lsrs	r3, r3, #9
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00c      	beq.n	8001f0a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f00:	69b9      	ldr	r1, [r7, #24]
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 ffbe 	bl	8002e84 <I2C_Slave_ADDR>
 8001f08:	e066      	b.n	8001fd8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_I2C_EV_IRQHandler+0x22e>
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	0a5b      	lsrs	r3, r3, #9
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fff8 	bl	8002f18 <I2C_Slave_STOPF>
 8001f28:	e056      	b.n	8001fd8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f2a:	7bbb      	ldrb	r3, [r7, #14]
 8001f2c:	2b21      	cmp	r3, #33	; 0x21
 8001f2e:	d002      	beq.n	8001f36 <HAL_I2C_EV_IRQHandler+0x23a>
 8001f30:	7bbb      	ldrb	r3, [r7, #14]
 8001f32:	2b29      	cmp	r3, #41	; 0x29
 8001f34:	d125      	bne.n	8001f82 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	09db      	lsrs	r3, r3, #7
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00f      	beq.n	8001f62 <HAL_I2C_EV_IRQHandler+0x266>
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	0a9b      	lsrs	r3, r3, #10
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_I2C_EV_IRQHandler+0x266>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fed6 	bl	8002d0c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f60:	e039      	b.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d033      	beq.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x2da>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	0a5b      	lsrs	r3, r3, #9
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d02d      	beq.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 ff03 	bl	8002d86 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f80:	e029      	b.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00f      	beq.n	8001fae <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	0a9b      	lsrs	r3, r3, #10
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d103      	bne.n	8001fae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 ff0d 	bl	8002dc6 <I2C_SlaveReceive_RXNE>
 8001fac:	e014      	b.n	8001fd8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00e      	beq.n	8001fd8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	0a5b      	lsrs	r3, r3, #9
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 ff3b 	bl	8002e42 <I2C_SlaveReceive_BTF>
 8001fcc:	e004      	b.n	8001fd8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001fce:	bf00      	nop
 8001fd0:	e002      	b.n	8001fd8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fd2:	bf00      	nop
 8001fd4:	e000      	b.n	8001fd8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fd6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b08a      	sub	sp, #40	; 0x28
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002000:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d016      	beq.n	800203c <HAL_I2C_ER_IRQHandler+0x5e>
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d010      	beq.n	800203c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800202a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800203a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	0a5b      	lsrs	r3, r3, #9
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <HAL_I2C_ER_IRQHandler+0x88>
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002064:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	0a9b      	lsrs	r3, r3, #10
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d03f      	beq.n	80020f2 <HAL_I2C_ER_IRQHandler+0x114>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d039      	beq.n	80020f2 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800207e:	7efb      	ldrb	r3, [r7, #27]
 8002080:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002090:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002098:	7ebb      	ldrb	r3, [r7, #26]
 800209a:	2b20      	cmp	r3, #32
 800209c:	d112      	bne.n	80020c4 <HAL_I2C_ER_IRQHandler+0xe6>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10f      	bne.n	80020c4 <HAL_I2C_ER_IRQHandler+0xe6>
 80020a4:	7cfb      	ldrb	r3, [r7, #19]
 80020a6:	2b21      	cmp	r3, #33	; 0x21
 80020a8:	d008      	beq.n	80020bc <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	2b29      	cmp	r3, #41	; 0x29
 80020ae:	d005      	beq.n	80020bc <HAL_I2C_ER_IRQHandler+0xde>
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	2b28      	cmp	r3, #40	; 0x28
 80020b4:	d106      	bne.n	80020c4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b21      	cmp	r3, #33	; 0x21
 80020ba:	d103      	bne.n	80020c4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f001 f85b 	bl	8003178 <I2C_Slave_AF>
 80020c2:	e016      	b.n	80020f2 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020cc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020d6:	7efb      	ldrb	r3, [r7, #27]
 80020d8:	2b10      	cmp	r3, #16
 80020da:	d002      	beq.n	80020e2 <HAL_I2C_ER_IRQHandler+0x104>
 80020dc:	7efb      	ldrb	r3, [r7, #27]
 80020de:	2b40      	cmp	r3, #64	; 0x40
 80020e0:	d107      	bne.n	80020f2 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	0adb      	lsrs	r3, r3, #11
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00e      	beq.n	800211c <HAL_I2C_ER_IRQHandler+0x13e>
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	f043 0308 	orr.w	r3, r3, #8
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800211a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f001 f892 	bl	8003258 <I2C_ITError>
  }
}
 8002134:	bf00      	nop
 8002136:	3728      	adds	r7, #40	; 0x28
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
 8002190:	4613      	mov	r3, r2
 8002192:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002206:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800220e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221a:	2b00      	cmp	r3, #0
 800221c:	d150      	bne.n	80022c0 <I2C_MasterTransmit_TXE+0xc8>
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	2b21      	cmp	r3, #33	; 0x21
 8002222:	d14d      	bne.n	80022c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b08      	cmp	r3, #8
 8002228:	d01d      	beq.n	8002266 <I2C_MasterTransmit_TXE+0x6e>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b20      	cmp	r3, #32
 800222e:	d01a      	beq.n	8002266 <I2C_MasterTransmit_TXE+0x6e>
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002236:	d016      	beq.n	8002266 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002246:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2211      	movs	r2, #17
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2220      	movs	r2, #32
 800225a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ff6c 	bl	800213c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002264:	e060      	b.n	8002328 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002274:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002284:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d107      	bne.n	80022b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff81 	bl	80021b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022ae:	e03b      	b.n	8002328 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff3f 	bl	800213c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022be:	e033      	b.n	8002328 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	2b21      	cmp	r3, #33	; 0x21
 80022c4:	d005      	beq.n	80022d2 <I2C_MasterTransmit_TXE+0xda>
 80022c6:	7bbb      	ldrb	r3, [r7, #14]
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d12d      	bne.n	8002328 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	2b22      	cmp	r3, #34	; 0x22
 80022d0:	d12a      	bne.n	8002328 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d108      	bne.n	80022ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022ec:	e01c      	b.n	8002328 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b40      	cmp	r3, #64	; 0x40
 80022f8:	d103      	bne.n	8002302 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f88e 	bl	800241c <I2C_MemoryTransmit_TXE_BTF>
}
 8002300:	e012      	b.n	8002328 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002326:	e7ff      	b.n	8002328 <I2C_MasterTransmit_TXE+0x130>
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b21      	cmp	r3, #33	; 0x21
 8002348:	d164      	bne.n	8002414 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d012      	beq.n	800237a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002378:	e04c      	b.n	8002414 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d01d      	beq.n	80023bc <I2C_MasterTransmit_BTF+0x8c>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b20      	cmp	r3, #32
 8002384:	d01a      	beq.n	80023bc <I2C_MasterTransmit_BTF+0x8c>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800238c:	d016      	beq.n	80023bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800239c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2211      	movs	r2, #17
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff fec1 	bl	800213c <HAL_I2C_MasterTxCpltCallback>
}
 80023ba:	e02b      	b.n	8002414 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b40      	cmp	r3, #64	; 0x40
 80023f4:	d107      	bne.n	8002406 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fed6 	bl	80021b0 <HAL_I2C_MemTxCpltCallback>
}
 8002404:	e006      	b.n	8002414 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fe94 	bl	800213c <HAL_I2C_MasterTxCpltCallback>
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002430:	2b00      	cmp	r3, #0
 8002432:	d11d      	bne.n	8002470 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d10b      	bne.n	8002454 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002440:	b2da      	uxtb	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244c:	1c9a      	adds	r2, r3, #2
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002452:	e073      	b.n	800253c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002458:	b29b      	uxth	r3, r3
 800245a:	121b      	asrs	r3, r3, #8
 800245c:	b2da      	uxtb	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800246e:	e065      	b.n	800253c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10b      	bne.n	8002490 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247c:	b2da      	uxtb	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800248e:	e055      	b.n	800253c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002494:	2b02      	cmp	r3, #2
 8002496:	d151      	bne.n	800253c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b22      	cmp	r3, #34	; 0x22
 800249c:	d10d      	bne.n	80024ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80024b8:	e040      	b.n	800253c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b21      	cmp	r3, #33	; 0x21
 80024c8:	d112      	bne.n	80024f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	781a      	ldrb	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024ee:	e025      	b.n	800253c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d120      	bne.n	800253c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	2b21      	cmp	r3, #33	; 0x21
 80024fe:	d11d      	bne.n	800253c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800250e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fe3a 	bl	80021b0 <HAL_I2C_MemTxCpltCallback>
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b22      	cmp	r3, #34	; 0x22
 8002556:	f040 80a2 	bne.w	800269e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d921      	bls.n	80025ac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b03      	cmp	r3, #3
 8002596:	f040 8082 	bne.w	800269e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80025aa:	e078      	b.n	800269e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d074      	beq.n	800269e <I2C_MasterReceive_RXNE+0x15a>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d002      	beq.n	80025c0 <I2C_MasterReceive_RXNE+0x7c>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d16e      	bne.n	800269e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f001 fae5 	bl	8003b90 <I2C_WaitOnSTOPRequestThroughIT>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d142      	bne.n	8002652 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b40      	cmp	r3, #64	; 0x40
 8002624:	d10a      	bne.n	800263c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff fdc4 	bl	80021c2 <HAL_I2C_MemRxCpltCallback>
}
 800263a:	e030      	b.n	800269e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2212      	movs	r2, #18
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fd7f 	bl	800214e <HAL_I2C_MasterRxCpltCallback>
}
 8002650:	e025      	b.n	800269e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002660:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff fd9b 	bl	80021d4 <HAL_I2C_ErrorCallback>
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d11b      	bne.n	80026f6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026cc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80026f4:	e0bd      	b.n	8002872 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d129      	bne.n	8002754 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800270e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d00a      	beq.n	800272c <I2C_MasterReceive_BTF+0x86>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d007      	beq.n	800272c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002752:	e08e      	b.n	8002872 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d176      	bne.n	800284c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d002      	beq.n	800276a <I2C_MasterReceive_BTF+0xc4>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b10      	cmp	r3, #16
 8002768:	d108      	bne.n	800277c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e019      	b.n	80027b0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b04      	cmp	r3, #4
 8002780:	d002      	beq.n	8002788 <I2C_MasterReceive_BTF+0xe2>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d108      	bne.n	800279a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e00a      	b.n	80027b0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b10      	cmp	r3, #16
 800279e:	d007      	beq.n	80027b0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800280a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d10a      	bne.n	8002836 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff fcc7 	bl	80021c2 <HAL_I2C_MemRxCpltCallback>
}
 8002834:	e01d      	b.n	8002872 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2212      	movs	r2, #18
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff fc82 	bl	800214e <HAL_I2C_MasterRxCpltCallback>
}
 800284a:	e012      	b.n	8002872 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d117      	bne.n	80028be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80028a8:	e067      	b.n	800297a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	611a      	str	r2, [r3, #16]
}
 80028bc:	e05d      	b.n	800297a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028c6:	d133      	bne.n	8002930 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b21      	cmp	r3, #33	; 0x21
 80028d2:	d109      	bne.n	80028e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	e008      	b.n	80028fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <I2C_Master_SB+0x92>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	d108      	bne.n	800291e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	2b00      	cmp	r3, #0
 8002912:	d032      	beq.n	800297a <I2C_Master_SB+0x100>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	2b00      	cmp	r3, #0
 800291c:	d02d      	beq.n	800297a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800292c:	605a      	str	r2, [r3, #4]
}
 800292e:	e024      	b.n	800297a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10e      	bne.n	8002956 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	b29b      	uxth	r3, r3
 800293e:	11db      	asrs	r3, r3, #7
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f003 0306 	and.w	r3, r3, #6
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f063 030f 	orn	r3, r3, #15
 800294c:	b2da      	uxtb	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	611a      	str	r2, [r3, #16]
}
 8002954:	e011      	b.n	800297a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295a:	2b01      	cmp	r3, #1
 800295c:	d10d      	bne.n	800297a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	b29b      	uxth	r3, r3
 8002964:	11db      	asrs	r3, r3, #7
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f003 0306 	and.w	r3, r3, #6
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f063 030e 	orn	r3, r3, #14
 8002972:	b2da      	uxtb	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	611a      	str	r2, [r3, #16]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <I2C_Master_ADD10+0x26>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d108      	bne.n	80029bc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <I2C_Master_ADD10+0x48>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ca:	605a      	str	r2, [r3, #4]
  }
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b091      	sub	sp, #68	; 0x44
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b22      	cmp	r3, #34	; 0x22
 80029fe:	f040 8174 	bne.w	8002cea <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <I2C_Master_ADDR+0x54>
 8002a0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a0e:	2b40      	cmp	r3, #64	; 0x40
 8002a10:	d10b      	bne.n	8002a2a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a12:	2300      	movs	r3, #0
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	e16b      	b.n	8002d02 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11d      	bne.n	8002a6e <I2C_Master_ADDR+0x98>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a3a:	d118      	bne.n	8002a6e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a60:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	651a      	str	r2, [r3, #80]	; 0x50
 8002a6c:	e149      	b.n	8002d02 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d113      	bne.n	8002aa0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e120      	b.n	8002ce2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	f040 808a 	bne.w	8002bc0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ab2:	d137      	bne.n	8002b24 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad2:	d113      	bne.n	8002afc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	e0f2      	b.n	8002ce2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afc:	2300      	movs	r3, #0
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	623b      	str	r3, [r7, #32]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e0de      	b.n	8002ce2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d02e      	beq.n	8002b88 <I2C_Master_ADDR+0x1b2>
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d02b      	beq.n	8002b88 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b32:	2b12      	cmp	r3, #18
 8002b34:	d102      	bne.n	8002b3c <I2C_Master_ADDR+0x166>
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d125      	bne.n	8002b88 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d00e      	beq.n	8002b60 <I2C_Master_ADDR+0x18a>
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d00b      	beq.n	8002b60 <I2C_Master_ADDR+0x18a>
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d008      	beq.n	8002b60 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e007      	b.n	8002b70 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b6e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	e0ac      	b.n	8002ce2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b96:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e090      	b.n	8002ce2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d158      	bne.n	8002c7c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d021      	beq.n	8002c14 <I2C_Master_ADDR+0x23e>
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d01e      	beq.n	8002c14 <I2C_Master_ADDR+0x23e>
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d01b      	beq.n	8002c14 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e012      	b.n	8002c3a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c22:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c48:	d14b      	bne.n	8002ce2 <I2C_Master_ADDR+0x30c>
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c50:	d00b      	beq.n	8002c6a <I2C_Master_ADDR+0x294>
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d008      	beq.n	8002c6a <I2C_Master_ADDR+0x294>
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d005      	beq.n	8002c6a <I2C_Master_ADDR+0x294>
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d002      	beq.n	8002c6a <I2C_Master_ADDR+0x294>
 8002c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d13b      	bne.n	8002ce2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	e032      	b.n	8002ce2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c8a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9a:	d117      	bne.n	8002ccc <I2C_Master_ADDR+0x2f6>
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ca2:	d00b      	beq.n	8002cbc <I2C_Master_ADDR+0x2e6>
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d008      	beq.n	8002cbc <I2C_Master_ADDR+0x2e6>
 8002caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d005      	beq.n	8002cbc <I2C_Master_ADDR+0x2e6>
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d002      	beq.n	8002cbc <I2C_Master_ADDR+0x2e6>
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d107      	bne.n	8002ccc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002ce8:	e00b      	b.n	8002d02 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
}
 8002d00:	e7ff      	b.n	8002d02 <I2C_Master_ADDR+0x32c>
 8002d02:	bf00      	nop
 8002d04:	3744      	adds	r7, #68	; 0x44
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d02b      	beq.n	8002d7e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d114      	bne.n	8002d7e <I2C_SlaveTransmit_TXE+0x72>
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b29      	cmp	r3, #41	; 0x29
 8002d58:	d111      	bne.n	8002d7e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d68:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2221      	movs	r2, #33	; 0x21
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2228      	movs	r2, #40	; 0x28
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff f9f1 	bl	8002160 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d011      	beq.n	8002dbc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	781a      	ldrb	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02c      	beq.n	8002e3a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d114      	bne.n	8002e3a <I2C_SlaveReceive_RXNE+0x74>
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b2a      	cmp	r3, #42	; 0x2a
 8002e14:	d111      	bne.n	8002e3a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e24:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2222      	movs	r2, #34	; 0x22
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2228      	movs	r2, #40	; 0x28
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff f99c 	bl	8002172 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d012      	beq.n	8002e7a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e9e:	2b28      	cmp	r3, #40	; 0x28
 8002ea0:	d127      	bne.n	8002ef2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	09db      	lsrs	r3, r3, #7
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	81bb      	strh	r3, [r7, #12]
 8002ed4:	e002      	b.n	8002edc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002ee4:	89ba      	ldrh	r2, [r7, #12]
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff f94a 	bl	8002184 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ef0:	e00e      	b.n	8002f10 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f36:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f64:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f74:	d172      	bne.n	800305c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	2b22      	cmp	r3, #34	; 0x22
 8002f7a:	d002      	beq.n	8002f82 <I2C_Slave_STOPF+0x6a>
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f80:	d135      	bne.n	8002fee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f043 0204 	orr.w	r2, r3, #4
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe f82a 	bl	8001014 <HAL_DMA_GetState>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d049      	beq.n	800305a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	4a69      	ldr	r2, [pc, #420]	; (8003170 <I2C_Slave_STOPF+0x258>)
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd ffa8 	bl	8000f28 <HAL_DMA_Abort_IT>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d03d      	beq.n	800305a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fec:	e035      	b.n	800305a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f043 0204 	orr.w	r2, r3, #4
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003020:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fff4 	bl	8001014 <HAL_DMA_GetState>
 800302c:	4603      	mov	r3, r0
 800302e:	2b01      	cmp	r3, #1
 8003030:	d014      	beq.n	800305c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	4a4e      	ldr	r2, [pc, #312]	; (8003170 <I2C_Slave_STOPF+0x258>)
 8003038:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd ff72 	bl	8000f28 <HAL_DMA_Abort_IT>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003054:	4610      	mov	r0, r2
 8003056:	4798      	blx	r3
 8003058:	e000      	b.n	800305c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800305a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d03e      	beq.n	80030e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b04      	cmp	r3, #4
 8003072:	d112      	bne.n	800309a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	2b40      	cmp	r3, #64	; 0x40
 80030a6:	d112      	bne.n	80030ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	f043 0204 	orr.w	r2, r3, #4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8b3 	bl	8003258 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80030f2:	e039      	b.n	8003168 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	2b2a      	cmp	r3, #42	; 0x2a
 80030f8:	d109      	bne.n	800310e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2228      	movs	r2, #40	; 0x28
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff f832 	bl	8002172 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b28      	cmp	r3, #40	; 0x28
 8003118:	d111      	bne.n	800313e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a15      	ldr	r2, [pc, #84]	; (8003174 <I2C_Slave_STOPF+0x25c>)
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff f831 	bl	800219e <HAL_I2C_ListenCpltCallback>
}
 800313c:	e014      	b.n	8003168 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	2b22      	cmp	r3, #34	; 0x22
 8003144:	d002      	beq.n	800314c <I2C_Slave_STOPF+0x234>
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b22      	cmp	r3, #34	; 0x22
 800314a:	d10d      	bne.n	8003168 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff f805 	bl	8002172 <HAL_I2C_SlaveRxCpltCallback>
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	08003791 	.word	0x08003791
 8003174:	ffff0000 	.word	0xffff0000

08003178 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003186:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d002      	beq.n	800319a <I2C_Slave_AF+0x22>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b20      	cmp	r3, #32
 8003198:	d129      	bne.n	80031ee <I2C_Slave_AF+0x76>
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b28      	cmp	r3, #40	; 0x28
 800319e:	d126      	bne.n	80031ee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <I2C_Slave_AF+0xdc>)
 80031a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031b4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031be:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe ffd9 	bl	800219e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80031ec:	e02e      	b.n	800324c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	2b21      	cmp	r3, #33	; 0x21
 80031f2:	d126      	bne.n	8003242 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a17      	ldr	r2, [pc, #92]	; (8003254 <I2C_Slave_AF+0xdc>)
 80031f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2221      	movs	r2, #33	; 0x21
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800321e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003228:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003238:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fe ff90 	bl	8002160 <HAL_I2C_SlaveTxCpltCallback>
}
 8003240:	e004      	b.n	800324c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800324a:	615a      	str	r2, [r3, #20]
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	ffff0000 	.word	0xffff0000

08003258 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003266:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003270:	7bbb      	ldrb	r3, [r7, #14]
 8003272:	2b10      	cmp	r3, #16
 8003274:	d002      	beq.n	800327c <I2C_ITError+0x24>
 8003276:	7bbb      	ldrb	r3, [r7, #14]
 8003278:	2b40      	cmp	r3, #64	; 0x40
 800327a:	d10a      	bne.n	8003292 <I2C_ITError+0x3a>
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	2b22      	cmp	r3, #34	; 0x22
 8003280:	d107      	bne.n	8003292 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003290:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003298:	2b28      	cmp	r3, #40	; 0x28
 800329a:	d107      	bne.n	80032ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2228      	movs	r2, #40	; 0x28
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032aa:	e015      	b.n	80032d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ba:	d00a      	beq.n	80032d2 <I2C_ITError+0x7a>
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	2b60      	cmp	r3, #96	; 0x60
 80032c0:	d007      	beq.n	80032d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e6:	d161      	bne.n	80033ac <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003300:	2b01      	cmp	r3, #1
 8003302:	d020      	beq.n	8003346 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003308:	4a6a      	ldr	r2, [pc, #424]	; (80034b4 <I2C_ITError+0x25c>)
 800330a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd fe09 	bl	8000f28 <HAL_DMA_Abort_IT>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8089 	beq.w	8003430 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003340:	4610      	mov	r0, r2
 8003342:	4798      	blx	r3
 8003344:	e074      	b.n	8003430 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	4a5a      	ldr	r2, [pc, #360]	; (80034b4 <I2C_ITError+0x25c>)
 800334c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd fde8 	bl	8000f28 <HAL_DMA_Abort_IT>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d068      	beq.n	8003430 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d10b      	bne.n	8003384 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0201 	bic.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033a6:	4610      	mov	r0, r2
 80033a8:	4798      	blx	r3
 80033aa:	e041      	b.n	8003430 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b60      	cmp	r3, #96	; 0x60
 80033b6:	d125      	bne.n	8003404 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d10b      	bne.n	80033ec <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7fe fef2 	bl	80021e6 <HAL_I2C_AbortCpltCallback>
 8003402:	e015      	b.n	8003430 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d10b      	bne.n	800342a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe fed2 	bl	80021d4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10e      	bne.n	800345e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003450:	2b00      	cmp	r3, #0
 8003452:	d104      	bne.n	800345e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800346c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003474:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b04      	cmp	r3, #4
 8003480:	d113      	bne.n	80034aa <I2C_ITError+0x252>
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b28      	cmp	r3, #40	; 0x28
 8003486:	d110      	bne.n	80034aa <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <I2C_ITError+0x260>)
 800348c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7fe fe7a 	bl	800219e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	08003791 	.word	0x08003791
 80034b8:	ffff0000 	.word	0xffff0000

080034bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	460b      	mov	r3, r1
 80034ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d006      	beq.n	80034e6 <I2C_MasterRequestWrite+0x2a>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d003      	beq.n	80034e6 <I2C_MasterRequestWrite+0x2a>
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e4:	d108      	bne.n	80034f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e00b      	b.n	8003510 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	2b12      	cmp	r3, #18
 80034fe:	d107      	bne.n	8003510 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800350e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f9df 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00d      	beq.n	8003544 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003536:	d103      	bne.n	8003540 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e035      	b.n	80035b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800354c:	d108      	bne.n	8003560 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800354e:	897b      	ldrh	r3, [r7, #10]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800355c:	611a      	str	r2, [r3, #16]
 800355e:	e01b      	b.n	8003598 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003560:	897b      	ldrh	r3, [r7, #10]
 8003562:	11db      	asrs	r3, r3, #7
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 0306 	and.w	r3, r3, #6
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f063 030f 	orn	r3, r3, #15
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	490e      	ldr	r1, [pc, #56]	; (80035b8 <I2C_MasterRequestWrite+0xfc>)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fa05 	bl	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e010      	b.n	80035b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800358e:	897b      	ldrh	r3, [r7, #10]
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4907      	ldr	r1, [pc, #28]	; (80035bc <I2C_MasterRequestWrite+0x100>)
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f9f5 	bl	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	00010008 	.word	0x00010008
 80035bc:	00010002 	.word	0x00010002

080035c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	4608      	mov	r0, r1
 80035ca:	4611      	mov	r1, r2
 80035cc:	461a      	mov	r2, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	817b      	strh	r3, [r7, #10]
 80035d2:	460b      	mov	r3, r1
 80035d4:	813b      	strh	r3, [r7, #8]
 80035d6:	4613      	mov	r3, r2
 80035d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	2200      	movs	r2, #0
 8003602:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f96a 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003620:	d103      	bne.n	800362a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0aa      	b.n	8003784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800363c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	6a3a      	ldr	r2, [r7, #32]
 8003642:	4952      	ldr	r1, [pc, #328]	; (800378c <I2C_RequestMemoryRead+0x1cc>)
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f9a2 	bl	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e097      	b.n	8003784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800366a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366c:	6a39      	ldr	r1, [r7, #32]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fa0c 	bl	8003a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	2b04      	cmp	r3, #4
 8003680:	d107      	bne.n	8003692 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003690:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e076      	b.n	8003784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d105      	bne.n	80036a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800369c:	893b      	ldrh	r3, [r7, #8]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	611a      	str	r2, [r3, #16]
 80036a6:	e021      	b.n	80036ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036a8:	893b      	ldrh	r3, [r7, #8]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b8:	6a39      	ldr	r1, [r7, #32]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f9e6 	bl	8003a8c <I2C_WaitOnTXEFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d107      	bne.n	80036de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e050      	b.n	8003784 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036e2:	893b      	ldrh	r3, [r7, #8]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ee:	6a39      	ldr	r1, [r7, #32]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f9cb 	bl	8003a8c <I2C_WaitOnTXEFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	2b04      	cmp	r3, #4
 8003702:	d107      	bne.n	8003714 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003712:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e035      	b.n	8003784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003726:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	2200      	movs	r2, #0
 8003730:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f8d3 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00d      	beq.n	800375c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374e:	d103      	bne.n	8003758 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e013      	b.n	8003784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800375c:	897b      	ldrh	r3, [r7, #10]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	6a3a      	ldr	r2, [r7, #32]
 8003770:	4906      	ldr	r1, [pc, #24]	; (800378c <I2C_RequestMemoryRead+0x1cc>)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f90b 	bl	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	00010002 	.word	0x00010002

08003790 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80037aa:	4b4b      	ldr	r3, [pc, #300]	; (80038d8 <I2C_DMAAbort+0x148>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	08db      	lsrs	r3, r3, #3
 80037b0:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <I2C_DMAAbort+0x14c>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	0a1a      	lsrs	r2, r3, #8
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	00da      	lsls	r2, r3, #3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80037d6:	e00a      	b.n	80037ee <I2C_DMAAbort+0x5e>
    }
    count--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3b01      	subs	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ec:	d0ea      	beq.n	80037c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fa:	2200      	movs	r2, #0
 80037fc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	2200      	movs	r2, #0
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2200      	movs	r2, #0
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003830:	2200      	movs	r2, #0
 8003832:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	2200      	movs	r2, #0
 8003842:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b60      	cmp	r3, #96	; 0x60
 800385e:	d10e      	bne.n	800387e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003876:	6978      	ldr	r0, [r7, #20]
 8003878:	f7fe fcb5 	bl	80021e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800387c:	e027      	b.n	80038ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800387e:	7cfb      	ldrb	r3, [r7, #19]
 8003880:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003884:	2b28      	cmp	r3, #40	; 0x28
 8003886:	d117      	bne.n	80038b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2228      	movs	r2, #40	; 0x28
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038b6:	e007      	b.n	80038c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80038c8:	6978      	ldr	r0, [r7, #20]
 80038ca:	f7fe fc83 	bl	80021d4 <HAL_I2C_ErrorCallback>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000008 	.word	0x20000008
 80038dc:	14f8b589 	.word	0x14f8b589

080038e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f0:	e025      	b.n	800393e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d021      	beq.n	800393e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fd f9d9 	bl	8000cb0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d116      	bne.n	800393e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e023      	b.n	8003986 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d10d      	bne.n	8003964 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	43da      	mvns	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4013      	ands	r3, r2
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	e00c      	b.n	800397e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	43da      	mvns	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4013      	ands	r3, r2
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	bf0c      	ite	eq
 8003976:	2301      	moveq	r3, #1
 8003978:	2300      	movne	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	429a      	cmp	r2, r3
 8003982:	d0b6      	beq.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800399c:	e051      	b.n	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ac:	d123      	bne.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f043 0204 	orr.w	r2, r3, #4
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e046      	b.n	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fc:	d021      	beq.n	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fe:	f7fd f957 	bl	8000cb0 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d302      	bcc.n	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d116      	bne.n	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f043 0220 	orr.w	r2, r3, #32
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e020      	b.n	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d10c      	bne.n	8003a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	43da      	mvns	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4013      	ands	r3, r2
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	bf14      	ite	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	2300      	moveq	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	e00b      	b.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	43da      	mvns	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4013      	ands	r3, r2
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf14      	ite	ne
 8003a78:	2301      	movne	r3, #1
 8003a7a:	2300      	moveq	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d18d      	bne.n	800399e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a98:	e02d      	b.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f900 	bl	8003ca0 <I2C_IsAcknowledgeFailed>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e02d      	b.n	8003b06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d021      	beq.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab2:	f7fd f8fd 	bl	8000cb0 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d302      	bcc.n	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d116      	bne.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f043 0220 	orr.w	r2, r3, #32
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e007      	b.n	8003b06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	2b80      	cmp	r3, #128	; 0x80
 8003b02:	d1ca      	bne.n	8003a9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b1a:	e02d      	b.n	8003b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f8bf 	bl	8003ca0 <I2C_IsAcknowledgeFailed>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e02d      	b.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d021      	beq.n	8003b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b34:	f7fd f8bc 	bl	8000cb0 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d302      	bcc.n	8003b4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d116      	bne.n	8003b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e007      	b.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d1ca      	bne.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b9c:	4b13      	ldr	r3, [pc, #76]	; (8003bec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	08db      	lsrs	r3, r3, #3
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	0a1a      	lsrs	r2, r3, #8
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d107      	bne.n	8003bce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f043 0220 	orr.w	r2, r3, #32
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e008      	b.n	8003be0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bdc:	d0e9      	beq.n	8003bb2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000008 	.word	0x20000008
 8003bf0:	14f8b589 	.word	0x14f8b589

08003bf4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c00:	e042      	b.n	8003c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d119      	bne.n	8003c44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0210 	mvn.w	r2, #16
 8003c18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e029      	b.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c44:	f7fd f834 	bl	8000cb0 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d302      	bcc.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d116      	bne.n	8003c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e007      	b.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	d1b5      	bne.n	8003c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb6:	d11b      	bne.n	8003cf0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	f043 0204 	orr.w	r2, r3, #4
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d0c:	d103      	bne.n	8003d16 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d14:	e007      	b.n	8003d26 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d1e:	d102      	bne.n	8003d26 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2208      	movs	r2, #8
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d32:	b08b      	sub	sp, #44	; 0x2c
 8003d34:	af06      	add	r7, sp, #24
 8003d36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e0fd      	b.n	8003f3e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f006 ff1e 	bl	800ab98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2203      	movs	r2, #3
 8003d60:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 fbf1 	bl	8006550 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	687e      	ldr	r6, [r7, #4]
 8003d76:	466d      	mov	r5, sp
 8003d78:	f106 0410 	add.w	r4, r6, #16
 8003d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	602b      	str	r3, [r5, #0]
 8003d84:	1d33      	adds	r3, r6, #4
 8003d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d88:	6838      	ldr	r0, [r7, #0]
 8003d8a:	f002 fbbb 	bl	8006504 <USB_CoreInit>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0ce      	b.n	8003f3e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f002 fbec 	bl	8006584 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dac:	2300      	movs	r3, #0
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	e04c      	b.n	8003e4c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	440b      	add	r3, r1
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	440b      	add	r3, r1
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	b298      	uxth	r0, r3
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	440b      	add	r3, r1
 8003dee:	3336      	adds	r3, #54	; 0x36
 8003df0:	4602      	mov	r2, r0
 8003df2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	440b      	add	r3, r1
 8003e04:	3303      	adds	r3, #3
 8003e06:	2200      	movs	r2, #0
 8003e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	440b      	add	r3, r1
 8003e18:	3338      	adds	r3, #56	; 0x38
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e1e:	7bfa      	ldrb	r2, [r7, #15]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	440b      	add	r3, r1
 8003e2c:	333c      	adds	r3, #60	; 0x3c
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e32:	7bfa      	ldrb	r2, [r7, #15]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	440b      	add	r3, r1
 8003e40:	3340      	adds	r3, #64	; 0x40
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d3ad      	bcc.n	8003db2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	73fb      	strb	r3, [r7, #15]
 8003e5a:	e044      	b.n	8003ee6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	440b      	add	r3, r1
 8003e6a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003e6e:	2200      	movs	r2, #0
 8003e70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e72:	7bfa      	ldrb	r2, [r7, #15]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	440b      	add	r3, r1
 8003e80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e88:	7bfa      	ldrb	r2, [r7, #15]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	440b      	add	r3, r1
 8003e96:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	440b      	add	r3, r1
 8003eac:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eb4:	7bfa      	ldrb	r2, [r7, #15]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	440b      	add	r3, r1
 8003ec2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d3b5      	bcc.n	8003e5c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	687e      	ldr	r6, [r7, #4]
 8003ef8:	466d      	mov	r5, sp
 8003efa:	f106 0410 	add.w	r4, r6, #16
 8003efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	602b      	str	r3, [r5, #0]
 8003f06:	1d33      	adds	r3, r6, #4
 8003f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f0a:	6838      	ldr	r0, [r7, #0]
 8003f0c:	f002 fb46 	bl	800659c <USB_DevInit>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e00d      	b.n	8003f3e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f004 fff8 	bl	8008f2c <USB_DevDisconnect>

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_PCD_Start+0x16>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e016      	b.n	8003f8a <HAL_PCD_Start+0x44>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f002 fadb 	bl	8006524 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003f6e:	2101      	movs	r1, #1
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f007 f884 	bl	800b07e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f004 ffcc 	bl	8008f18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b088      	sub	sp, #32
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f004 ffce 	bl	8008f40 <USB_ReadInterrupts>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fae:	d102      	bne.n	8003fb6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fb5f 	bl	8004674 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 ffc0 	bl	8008f40 <USB_ReadInterrupts>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d112      	bne.n	8003ff2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fde:	b292      	uxth	r2, r2
 8003fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f006 fe52 	bl	800ac8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003fea:	2100      	movs	r1, #0
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f923 	bl	8004238 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f004 ffa2 	bl	8008f40 <USB_ReadInterrupts>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004002:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004006:	d10b      	bne.n	8004020 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004010:	b29a      	uxth	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800401a:	b292      	uxth	r2, r2
 800401c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f004 ff8b 	bl	8008f40 <USB_ReadInterrupts>
 800402a:	4603      	mov	r3, r0
 800402c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004034:	d10b      	bne.n	800404e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004048:	b292      	uxth	r2, r2
 800404a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f004 ff74 	bl	8008f40 <USB_ReadInterrupts>
 8004058:	4603      	mov	r3, r0
 800405a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004062:	d126      	bne.n	80040b2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800406c:	b29a      	uxth	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0204 	bic.w	r2, r2, #4
 8004076:	b292      	uxth	r2, r2
 8004078:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0208 	bic.w	r2, r2, #8
 800408e:	b292      	uxth	r2, r2
 8004090:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f006 fe33 	bl	800ad00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ac:	b292      	uxth	r2, r2
 80040ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f004 ff42 	bl	8008f40 <USB_ReadInterrupts>
 80040bc:	4603      	mov	r3, r0
 80040be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c6:	f040 8082 	bne.w	80041ce <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80040ca:	2300      	movs	r3, #0
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e010      	b.n	80040f2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	7ffb      	ldrb	r3, [r7, #31]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	7ffb      	ldrb	r3, [r7, #31]
 80040de:	8812      	ldrh	r2, [r2, #0]
 80040e0:	b292      	uxth	r2, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	3320      	adds	r3, #32
 80040e6:	443b      	add	r3, r7
 80040e8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80040ec:	7ffb      	ldrb	r3, [r7, #31]
 80040ee:	3301      	adds	r3, #1
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	7ffb      	ldrb	r3, [r7, #31]
 80040f4:	2b07      	cmp	r3, #7
 80040f6:	d9eb      	bls.n	80040d0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004100:	b29a      	uxth	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	b292      	uxth	r2, r2
 800410c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004118:	b29a      	uxth	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	b292      	uxth	r2, r2
 8004124:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004128:	bf00      	nop
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004132:	b29b      	uxth	r3, r3
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f6      	beq.n	800412a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004144:	b29a      	uxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414e:	b292      	uxth	r2, r2
 8004150:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004154:	2300      	movs	r3, #0
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e00f      	b.n	800417a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800415a:	7ffb      	ldrb	r3, [r7, #31]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	4611      	mov	r1, r2
 8004162:	7ffa      	ldrb	r2, [r7, #31]
 8004164:	0092      	lsls	r2, r2, #2
 8004166:	440a      	add	r2, r1
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	3320      	adds	r3, #32
 800416c:	443b      	add	r3, r7
 800416e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004172:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004174:	7ffb      	ldrb	r3, [r7, #31]
 8004176:	3301      	adds	r3, #1
 8004178:	77fb      	strb	r3, [r7, #31]
 800417a:	7ffb      	ldrb	r3, [r7, #31]
 800417c:	2b07      	cmp	r3, #7
 800417e:	d9ec      	bls.n	800415a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004188:	b29a      	uxth	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0208 	orr.w	r2, r2, #8
 8004192:	b292      	uxth	r2, r2
 8004194:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041aa:	b292      	uxth	r2, r2
 80041ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0204 	orr.w	r2, r2, #4
 80041c2:	b292      	uxth	r2, r2
 80041c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f006 fd7f 	bl	800accc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f004 feb4 	bl	8008f40 <USB_ReadInterrupts>
 80041d8:	4603      	mov	r3, r0
 80041da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e2:	d10e      	bne.n	8004202 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041f6:	b292      	uxth	r2, r2
 80041f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f006 fd38 	bl	800ac72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f004 fe9a 	bl	8008f40 <USB_ReadInterrupts>
 800420c:	4603      	mov	r3, r0
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004216:	d10b      	bne.n	8004230 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004220:	b29a      	uxth	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800422a:	b292      	uxth	r2, r2
 800422c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004230:	bf00      	nop
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_PCD_SetAddress+0x1a>
 800424e:	2302      	movs	r3, #2
 8004250:	e013      	b.n	800427a <HAL_PCD_SetAddress+0x42>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	78fa      	ldrb	r2, [r7, #3]
 8004268:	4611      	mov	r1, r2
 800426a:	4618      	mov	r0, r3
 800426c:	f004 fe41 	bl	8008ef2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	4608      	mov	r0, r1
 800428c:	4611      	mov	r1, r2
 800428e:	461a      	mov	r2, r3
 8004290:	4603      	mov	r3, r0
 8004292:	70fb      	strb	r3, [r7, #3]
 8004294:	460b      	mov	r3, r1
 8004296:	803b      	strh	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	da0e      	bge.n	80042c6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	4413      	add	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	705a      	strb	r2, [r3, #1]
 80042c4:	e00e      	b.n	80042e4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	f003 0207 	and.w	r2, r3, #7
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	4413      	add	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042f0:	883a      	ldrh	r2, [r7, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	78ba      	ldrb	r2, [r7, #2]
 80042fa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d004      	beq.n	800430e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800430e:	78bb      	ldrb	r3, [r7, #2]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d102      	bne.n	800431a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_PCD_EP_Open+0xa6>
 8004324:	2302      	movs	r3, #2
 8004326:	e00e      	b.n	8004346 <HAL_PCD_EP_Open+0xc4>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68f9      	ldr	r1, [r7, #12]
 8004336:	4618      	mov	r0, r3
 8004338:	f002 f950 	bl	80065dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004344:	7afb      	ldrb	r3, [r7, #11]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	460b      	mov	r3, r1
 8004358:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800435a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800435e:	2b00      	cmp	r3, #0
 8004360:	da0e      	bge.n	8004380 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	4413      	add	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	705a      	strb	r2, [r3, #1]
 800437e:	e00e      	b.n	800439e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 0207 	and.w	r2, r3, #7
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4413      	add	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_PCD_EP_Close+0x6a>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e00e      	b.n	80043d6 <HAL_PCD_EP_Close+0x88>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68f9      	ldr	r1, [r7, #12]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f002 fc72 	bl	8006cb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	460b      	mov	r3, r1
 80043ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ee:	7afb      	ldrb	r3, [r7, #11]
 80043f0:	f003 0207 	and.w	r2, r3, #7
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2200      	movs	r2, #0
 8004416:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2200      	movs	r2, #0
 800441c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800441e:	7afb      	ldrb	r3, [r7, #11]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	b2da      	uxtb	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800442a:	7afb      	ldrb	r3, [r7, #11]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6979      	ldr	r1, [r7, #20]
 800443a:	4618      	mov	r0, r3
 800443c:	f002 fe24 	bl	8007088 <USB_EPStartXfer>
 8004440:	e005      	b.n	800444e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6979      	ldr	r1, [r7, #20]
 8004448:	4618      	mov	r0, r3
 800444a:	f002 fe1d 	bl	8007088 <USB_EPStartXfer>
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	f003 0207 	and.w	r2, r3, #7
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	440b      	add	r3, r1
 8004476:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
 8004492:	460b      	mov	r3, r1
 8004494:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004496:	7afb      	ldrb	r3, [r7, #11]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2200      	movs	r2, #0
 80044ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2201      	movs	r2, #1
 80044d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d2:	7afb      	ldrb	r3, [r7, #11]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044de:	7afb      	ldrb	r3, [r7, #11]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d106      	bne.n	80044f6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6979      	ldr	r1, [r7, #20]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f002 fdca 	bl	8007088 <USB_EPStartXfer>
 80044f4:	e005      	b.n	8004502 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6979      	ldr	r1, [r7, #20]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f002 fdc3 	bl	8007088 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	f003 0207 	and.w	r2, r3, #7
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d901      	bls.n	800452a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e04c      	b.n	80045c4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800452a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800452e:	2b00      	cmp	r3, #0
 8004530:	da0e      	bge.n	8004550 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	705a      	strb	r2, [r3, #1]
 800454e:	e00c      	b.n	800456a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004550:	78fa      	ldrb	r2, [r7, #3]
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	b2da      	uxtb	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_PCD_EP_SetStall+0x7e>
 8004586:	2302      	movs	r3, #2
 8004588:	e01c      	b.n	80045c4 <HAL_PCD_EP_SetStall+0xb8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	4618      	mov	r0, r3
 800459a:	f004 fbad 	bl	8008cf8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d108      	bne.n	80045ba <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f004 fcd2 	bl	8008f5e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	f003 020f 	and.w	r2, r3, #15
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d901      	bls.n	80045ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e040      	b.n	800466c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	da0e      	bge.n	8004610 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4413      	add	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	705a      	strb	r2, [r3, #1]
 800460e:	e00e      	b.n	800462e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	f003 0207 	and.w	r2, r3, #7
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	b2da      	uxtb	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_PCD_EP_ClrStall+0x82>
 800464a:	2302      	movs	r3, #2
 800464c:	e00e      	b.n	800466c <HAL_PCD_EP_ClrStall+0xa0>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	4618      	mov	r0, r3
 800465e:	f004 fb9b 	bl	8008d98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08e      	sub	sp, #56	; 0x38
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800467c:	e2ec      	b.n	8004c58 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004686:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004688:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004694:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004698:	2b00      	cmp	r3, #0
 800469a:	f040 8161 	bne.w	8004960 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800469e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d152      	bne.n	800474e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80046b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b8:	81fb      	strh	r3, [r7, #14]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	89fb      	ldrh	r3, [r7, #14]
 80046c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3328      	adds	r3, #40	; 0x28
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046da:	b29b      	uxth	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	3302      	adds	r3, #2
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	441a      	add	r2, r3
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800470c:	2100      	movs	r1, #0
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f006 fa95 	bl	800ac3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 829b 	beq.w	8004c58 <PCD_EP_ISR_Handler+0x5e4>
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f040 8296 	bne.w	8004c58 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004738:	b2da      	uxtb	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	b292      	uxth	r2, r2
 8004740:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800474c:	e284      	b.n	8004c58 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800475e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004764:	2b00      	cmp	r3, #0
 8004766:	d034      	beq.n	80047d2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004770:	b29b      	uxth	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4413      	add	r3, r2
 800477c:	3306      	adds	r3, #6
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f004 fc29 	bl	8008ffe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80047b8:	4013      	ands	r3, r2
 80047ba:	823b      	strh	r3, [r7, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	8a3a      	ldrh	r2, [r7, #16]
 80047c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047c6:	b292      	uxth	r2, r2
 80047c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f006 fa0a 	bl	800abe4 <HAL_PCD_SetupStageCallback>
 80047d0:	e242      	b.n	8004c58 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80047d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f280 823e 	bge.w	8004c58 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80047e8:	4013      	ands	r3, r2
 80047ea:	83bb      	strh	r3, [r7, #28]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	8bba      	ldrh	r2, [r7, #28]
 80047f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047f6:	b292      	uxth	r2, r2
 80047f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004802:	b29b      	uxth	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4413      	add	r3, r2
 800480e:	3306      	adds	r3, #6
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d019      	beq.n	8004862 <PCD_EP_ISR_Handler+0x1ee>
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d015      	beq.n	8004862 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	6959      	ldr	r1, [r3, #20]
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004846:	b29b      	uxth	r3, r3
 8004848:	f004 fbd9 	bl	8008ffe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	441a      	add	r2, r3
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800485a:	2100      	movs	r1, #0
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f006 f9d3 	bl	800ac08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800486e:	2b00      	cmp	r3, #0
 8004870:	f040 81f2 	bne.w	8004c58 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	4413      	add	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d112      	bne.n	80048c2 <PCD_EP_ISR_Handler+0x24e>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	e02f      	b.n	8004922 <PCD_EP_ISR_Handler+0x2ae>
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b3e      	cmp	r3, #62	; 0x3e
 80048c8:	d813      	bhi.n	80048f2 <PCD_EP_ISR_Handler+0x27e>
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	633b      	str	r3, [r7, #48]	; 0x30
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <PCD_EP_ISR_Handler+0x270>
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	3301      	adds	r3, #1
 80048e2:	633b      	str	r3, [r7, #48]	; 0x30
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	029b      	lsls	r3, r3, #10
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	801a      	strh	r2, [r3, #0]
 80048f0:	e017      	b.n	8004922 <PCD_EP_ISR_Handler+0x2ae>
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	633b      	str	r3, [r7, #48]	; 0x30
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2b00      	cmp	r3, #0
 8004904:	d102      	bne.n	800490c <PCD_EP_ISR_Handler+0x298>
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	3b01      	subs	r3, #1
 800490a:	633b      	str	r3, [r7, #48]	; 0x30
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	b29b      	uxth	r3, r3
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	b29b      	uxth	r3, r3
 8004914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800491c:	b29a      	uxth	r2, r3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	827b      	strh	r3, [r7, #18]
 8004934:	8a7b      	ldrh	r3, [r7, #18]
 8004936:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800493a:	827b      	strh	r3, [r7, #18]
 800493c:	8a7b      	ldrh	r3, [r7, #18]
 800493e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004942:	827b      	strh	r3, [r7, #18]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	8a7b      	ldrh	r3, [r7, #18]
 800494a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800494e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495a:	b29b      	uxth	r3, r3
 800495c:	8013      	strh	r3, [r2, #0]
 800495e:	e17b      	b.n	8004c58 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004972:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004976:	2b00      	cmp	r3, #0
 8004978:	f280 80ea 	bge.w	8004b50 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29a      	uxth	r2, r3
 800498e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004992:	4013      	ands	r3, r2
 8004994:	853b      	strh	r3, [r7, #40]	; 0x28
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049aa:	b292      	uxth	r2, r2
 80049ac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80049ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	4413      	add	r3, r2
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	7b1b      	ldrb	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d122      	bne.n	8004a12 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	4413      	add	r3, r2
 80049e0:	3306      	adds	r3, #6
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80049f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8087 	beq.w	8004b0c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	6959      	ldr	r1, [r3, #20]
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	88da      	ldrh	r2, [r3, #6]
 8004a0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a0c:	f004 faf7 	bl	8008ffe <USB_ReadPMA>
 8004a10:	e07c      	b.n	8004b0c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	78db      	ldrb	r3, [r3, #3]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d108      	bne.n	8004a2c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004a1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f927 	bl	8004c74 <HAL_PCD_EP_DB_Receive>
 8004a26:	4603      	mov	r3, r0
 8004a28:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004a2a:	e06f      	b.n	8004b0c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	441a      	add	r2, r3
 8004a56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d021      	beq.n	8004aca <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4413      	add	r3, r2
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aae:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004ab0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02a      	beq.n	8004b0c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	6959      	ldr	r1, [r3, #20]
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	891a      	ldrh	r2, [r3, #8]
 8004ac2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ac4:	f004 fa9b 	bl	8008ffe <USB_ReadPMA>
 8004ac8:	e020      	b.n	8004b0c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4413      	add	r3, r2
 8004ade:	3306      	adds	r3, #6
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004af4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d008      	beq.n	8004b0c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	6959      	ldr	r1, [r3, #20]
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	895a      	ldrh	r2, [r3, #10]
 8004b06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b08:	f004 fa79 	bl	8008ffe <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b12:	441a      	add	r2, r3
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b1e:	441a      	add	r2, r3
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <PCD_EP_ISR_Handler+0x4c2>
 8004b2c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d206      	bcs.n	8004b44 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f006 f863 	bl	800ac08 <HAL_PCD_DataOutStageCallback>
 8004b42:	e005      	b.n	8004b50 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f002 fa9c 	bl	8007088 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004b50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d07e      	beq.n	8004c58 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004b5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b88:	843b      	strh	r3, [r7, #32]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	441a      	add	r2, r3
 8004b98:	8c3b      	ldrh	r3, [r7, #32]
 8004b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	78db      	ldrb	r3, [r3, #3]
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d00c      	beq.n	8004bc8 <PCD_EP_ISR_Handler+0x554>
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	78db      	ldrb	r3, [r3, #3]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d146      	bne.n	8004c4c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004bbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d141      	bne.n	8004c4c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	4413      	add	r3, r2
 8004bdc:	3302      	adds	r3, #2
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	8bfb      	ldrh	r3, [r7, #30]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d906      	bls.n	8004c0a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	8bfb      	ldrh	r3, [r7, #30]
 8004c02:	1ad2      	subs	r2, r2, r3
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	619a      	str	r2, [r3, #24]
 8004c08:	e002      	b.n	8004c10 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f006 f80d 	bl	800ac3e <HAL_PCD_DataInStageCallback>
 8004c24:	e018      	b.n	8004c58 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	695a      	ldr	r2, [r3, #20]
 8004c2a:	8bfb      	ldrh	r3, [r7, #30]
 8004c2c:	441a      	add	r2, r3
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	69da      	ldr	r2, [r3, #28]
 8004c36:	8bfb      	ldrh	r3, [r7, #30]
 8004c38:	441a      	add	r2, r3
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c44:	4618      	mov	r0, r3
 8004c46:	f002 fa1f 	bl	8007088 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004c4a:	e005      	b.n	8004c58 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004c4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f91b 	bl	8004e8e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	b21b      	sxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f6ff ad0a 	blt.w	800467e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3738      	adds	r7, #56	; 0x38
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d07e      	beq.n	8004d8a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cb4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	8b7b      	ldrh	r3, [r7, #26]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d306      	bcc.n	8004cce <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	699a      	ldr	r2, [r3, #24]
 8004cc4:	8b7b      	ldrh	r3, [r7, #26]
 8004cc6:	1ad2      	subs	r2, r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	619a      	str	r2, [r3, #24]
 8004ccc:	e002      	b.n	8004cd4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d123      	bne.n	8004d24 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	833b      	strh	r3, [r7, #24]
 8004cf8:	8b3b      	ldrh	r3, [r7, #24]
 8004cfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cfe:	833b      	strh	r3, [r7, #24]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	8b3b      	ldrh	r3, [r7, #24]
 8004d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01f      	beq.n	8004d6e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d48:	82fb      	strh	r3, [r7, #22]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	441a      	add	r2, r3
 8004d58:	8afb      	ldrh	r3, [r7, #22]
 8004d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d6e:	8b7b      	ldrh	r3, [r7, #26]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 8087 	beq.w	8004e84 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6959      	ldr	r1, [r3, #20]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	891a      	ldrh	r2, [r3, #8]
 8004d82:	8b7b      	ldrh	r3, [r7, #26]
 8004d84:	f004 f93b 	bl	8008ffe <USB_ReadPMA>
 8004d88:	e07c      	b.n	8004e84 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3306      	adds	r3, #6
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004db2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	8b7b      	ldrh	r3, [r7, #26]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d306      	bcc.n	8004dcc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	8b7b      	ldrh	r3, [r7, #26]
 8004dc4:	1ad2      	subs	r2, r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	619a      	str	r2, [r3, #24]
 8004dca:	e002      	b.n	8004dd2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d123      	bne.n	8004e22 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df4:	83fb      	strh	r3, [r7, #30]
 8004df6:	8bfb      	ldrh	r3, [r7, #30]
 8004df8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dfc:	83fb      	strh	r3, [r7, #30]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	441a      	add	r2, r3
 8004e0c:	8bfb      	ldrh	r3, [r7, #30]
 8004e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d11f      	bne.n	8004e6c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e46:	83bb      	strh	r3, [r7, #28]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	8bbb      	ldrh	r3, [r7, #28]
 8004e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e6c:	8b7b      	ldrh	r3, [r7, #26]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	6959      	ldr	r1, [r3, #20]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	895a      	ldrh	r2, [r3, #10]
 8004e7e:	8b7b      	ldrh	r3, [r7, #26]
 8004e80:	f004 f8bd 	bl	8008ffe <USB_ReadPMA>
    }
  }

  return count;
 8004e84:	8b7b      	ldrh	r3, [r7, #26]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3720      	adds	r7, #32
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b0a2      	sub	sp, #136	; 0x88
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 81c7 	beq.w	8005236 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4413      	add	r3, r2
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ed0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	699a      	ldr	r2, [r3, #24]
 8004ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d907      	bls.n	8004ef0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ee8:	1ad2      	subs	r2, r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	619a      	str	r2, [r3, #24]
 8004eee:	e002      	b.n	8004ef6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f040 80b9 	bne.w	8005072 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d126      	bne.n	8004f56 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	4413      	add	r3, r2
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	011a      	lsls	r2, r3, #4
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	4413      	add	r3, r2
 8004f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	801a      	strh	r2, [r3, #0]
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	e01a      	b.n	8004f8c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d116      	bne.n	8004f8c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	633b      	str	r3, [r7, #48]	; 0x30
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	4413      	add	r3, r2
 8004f74:	633b      	str	r3, [r7, #48]	; 0x30
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	011a      	lsls	r2, r3, #4
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	4413      	add	r3, r2
 8004f80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	2200      	movs	r2, #0
 8004f8a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	785b      	ldrb	r3, [r3, #1]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d126      	bne.n	8004fe8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	4413      	add	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	011a      	lsls	r2, r3, #4
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	801a      	strh	r2, [r3, #0]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	801a      	strh	r2, [r3, #0]
 8004fe6:	e017      	b.n	8005018 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	785b      	ldrb	r3, [r3, #1]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d113      	bne.n	8005018 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	4413      	add	r3, r2
 8005000:	623b      	str	r3, [r7, #32]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	011a      	lsls	r2, r3, #4
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	4413      	add	r3, r2
 800500c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2200      	movs	r2, #0
 8005016:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	4619      	mov	r1, r3
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f005 fe0d 	bl	800ac3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 82d4 	beq.w	80055d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	827b      	strh	r3, [r7, #18]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	8a7b      	ldrh	r3, [r7, #18]
 800505c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506c:	b29b      	uxth	r3, r3
 800506e:	8013      	strh	r3, [r2, #0]
 8005070:	e2b2      	b.n	80055d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d021      	beq.n	80050c0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	441a      	add	r2, r3
 80050a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050bc:	b29b      	uxth	r3, r3
 80050be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	f040 8286 	bne.w	80055d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	695a      	ldr	r2, [r3, #20]
 80050d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050d4:	441a      	add	r2, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	69da      	ldr	r2, [r3, #28]
 80050de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050e2:	441a      	add	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	6a1a      	ldr	r2, [r3, #32]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d309      	bcc.n	8005108 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	6a1a      	ldr	r2, [r3, #32]
 80050fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005100:	1ad2      	subs	r2, r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	621a      	str	r2, [r3, #32]
 8005106:	e015      	b.n	8005134 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005110:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005114:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800511e:	e009      	b.n	8005134 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2200      	movs	r2, #0
 8005132:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d155      	bne.n	80051e8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	63bb      	str	r3, [r7, #56]	; 0x38
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514a:	b29b      	uxth	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	4413      	add	r3, r2
 8005152:	63bb      	str	r3, [r7, #56]	; 0x38
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	011a      	lsls	r2, r3, #4
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	4413      	add	r3, r2
 800515e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
 8005164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005166:	2b00      	cmp	r3, #0
 8005168:	d112      	bne.n	8005190 <HAL_PCD_EP_DB_Transmit+0x302>
 800516a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005174:	b29a      	uxth	r2, r3
 8005176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005188:	b29a      	uxth	r2, r3
 800518a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518c:	801a      	strh	r2, [r3, #0]
 800518e:	e047      	b.n	8005220 <HAL_PCD_EP_DB_Transmit+0x392>
 8005190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005192:	2b3e      	cmp	r3, #62	; 0x3e
 8005194:	d811      	bhi.n	80051ba <HAL_PCD_EP_DB_Transmit+0x32c>
 8005196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	64bb      	str	r3, [r7, #72]	; 0x48
 800519c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_PCD_EP_DB_Transmit+0x31e>
 80051a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a8:	3301      	adds	r3, #1
 80051aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80051ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	029b      	lsls	r3, r3, #10
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	e032      	b.n	8005220 <HAL_PCD_EP_DB_Transmit+0x392>
 80051ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	64bb      	str	r3, [r7, #72]	; 0x48
 80051c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c2:	f003 031f 	and.w	r3, r3, #31
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d102      	bne.n	80051d0 <HAL_PCD_EP_DB_Transmit+0x342>
 80051ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051cc:	3b01      	subs	r3, #1
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	029b      	lsls	r3, r3, #10
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	e01b      	b.n	8005220 <HAL_PCD_EP_DB_Transmit+0x392>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d117      	bne.n	8005220 <HAL_PCD_EP_DB_Transmit+0x392>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	643b      	str	r3, [r7, #64]	; 0x40
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051fe:	b29b      	uxth	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005204:	4413      	add	r3, r2
 8005206:	643b      	str	r3, [r7, #64]	; 0x40
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	011a      	lsls	r2, r3, #4
 800520e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005210:	4413      	add	r3, r2
 8005212:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800521a:	b29a      	uxth	r2, r3
 800521c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800521e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	6959      	ldr	r1, [r3, #20]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	891a      	ldrh	r2, [r3, #8]
 800522c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522e:	b29b      	uxth	r3, r3
 8005230:	f003 fea0 	bl	8008f74 <USB_WritePMA>
 8005234:	e1d0      	b.n	80055d8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523e:	b29b      	uxth	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	4413      	add	r3, r2
 800524a:	3306      	adds	r3, #6
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800525e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800526a:	429a      	cmp	r2, r3
 800526c:	d307      	bcc.n	800527e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	619a      	str	r2, [r3, #24]
 800527c:	e002      	b.n	8005284 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2200      	movs	r2, #0
 8005282:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	f040 80c4 	bne.w	8005416 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d126      	bne.n	80052e4 <HAL_PCD_EP_DB_Transmit+0x456>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052aa:	4413      	add	r3, r2
 80052ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	011a      	lsls	r2, r3, #4
 80052b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b6:	4413      	add	r3, r2
 80052b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80052be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052cc:	801a      	strh	r2, [r3, #0]
 80052ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052dc:	b29a      	uxth	r2, r3
 80052de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	e01a      	b.n	800531a <HAL_PCD_EP_DB_Transmit+0x48c>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d116      	bne.n	800531a <HAL_PCD_EP_DB_Transmit+0x48c>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	677b      	str	r3, [r7, #116]	; 0x74
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005300:	4413      	add	r3, r2
 8005302:	677b      	str	r3, [r7, #116]	; 0x74
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	011a      	lsls	r2, r3, #4
 800530a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800530c:	4413      	add	r3, r2
 800530e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005312:	673b      	str	r3, [r7, #112]	; 0x70
 8005314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005316:	2200      	movs	r2, #0
 8005318:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d12f      	bne.n	8005388 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005338:	b29b      	uxth	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005340:	4413      	add	r3, r2
 8005342:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	011a      	lsls	r2, r3, #4
 800534c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005350:	4413      	add	r3, r2
 8005352:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005356:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800535a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005366:	b29a      	uxth	r2, r3
 8005368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800537e:	b29a      	uxth	r2, r3
 8005380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	e017      	b.n	80053b8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d113      	bne.n	80053b8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005398:	b29b      	uxth	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800539e:	4413      	add	r3, r2
 80053a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	011a      	lsls	r2, r3, #4
 80053a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053aa:	4413      	add	r3, r2
 80053ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053b4:	2200      	movs	r2, #0
 80053b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	4619      	mov	r1, r3
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f005 fc3d 	bl	800ac3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f040 8104 	bne.w	80055d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	441a      	add	r2, r3
 80053fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800540c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005410:	b29b      	uxth	r3, r3
 8005412:	8013      	strh	r3, [r2, #0]
 8005414:	e0e0      	b.n	80055d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d121      	bne.n	8005464 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005458:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800545c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005460:	b29b      	uxth	r3, r3
 8005462:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800546a:	2b01      	cmp	r3, #1
 800546c:	f040 80b4 	bne.w	80055d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005478:	441a      	add	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005486:	441a      	add	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	6a1a      	ldr	r2, [r3, #32]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	429a      	cmp	r2, r3
 8005496:	d309      	bcc.n	80054ac <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	6a1a      	ldr	r2, [r3, #32]
 80054a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a4:	1ad2      	subs	r2, r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	621a      	str	r2, [r3, #32]
 80054aa:	e015      	b.n	80054d8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d107      	bne.n	80054c4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80054b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054c2:	e009      	b.n	80054d8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2200      	movs	r2, #0
 80054ce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	667b      	str	r3, [r7, #100]	; 0x64
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d155      	bne.n	8005592 <HAL_PCD_EP_DB_Transmit+0x704>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054fa:	4413      	add	r3, r2
 80054fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	011a      	lsls	r2, r3, #4
 8005504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005506:	4413      	add	r3, r2
 8005508:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800550c:	65bb      	str	r3, [r7, #88]	; 0x58
 800550e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005510:	2b00      	cmp	r3, #0
 8005512:	d112      	bne.n	800553a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800551e:	b29a      	uxth	r2, r3
 8005520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005532:	b29a      	uxth	r2, r3
 8005534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	e044      	b.n	80055c4 <HAL_PCD_EP_DB_Transmit+0x736>
 800553a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553c:	2b3e      	cmp	r3, #62	; 0x3e
 800553e:	d811      	bhi.n	8005564 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	657b      	str	r3, [r7, #84]	; 0x54
 8005546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005552:	3301      	adds	r3, #1
 8005554:	657b      	str	r3, [r7, #84]	; 0x54
 8005556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005558:	b29b      	uxth	r3, r3
 800555a:	029b      	lsls	r3, r3, #10
 800555c:	b29a      	uxth	r2, r3
 800555e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	e02f      	b.n	80055c4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	657b      	str	r3, [r7, #84]	; 0x54
 800556a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005576:	3b01      	subs	r3, #1
 8005578:	657b      	str	r3, [r7, #84]	; 0x54
 800557a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557c:	b29b      	uxth	r3, r3
 800557e:	029b      	lsls	r3, r3, #10
 8005580:	b29b      	uxth	r3, r3
 8005582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558a:	b29a      	uxth	r2, r3
 800558c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	e018      	b.n	80055c4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	785b      	ldrb	r3, [r3, #1]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d114      	bne.n	80055c4 <HAL_PCD_EP_DB_Transmit+0x736>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a8:	4413      	add	r3, r2
 80055aa:	667b      	str	r3, [r7, #100]	; 0x64
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	011a      	lsls	r2, r3, #4
 80055b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b4:	4413      	add	r3, r2
 80055b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ba:	663b      	str	r3, [r7, #96]	; 0x60
 80055bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055c2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	6959      	ldr	r1, [r3, #20]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	895a      	ldrh	r2, [r3, #10]
 80055d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f003 fcce 	bl	8008f74 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f2:	823b      	strh	r3, [r7, #16]
 80055f4:	8a3b      	ldrh	r3, [r7, #16]
 80055f6:	f083 0310 	eor.w	r3, r3, #16
 80055fa:	823b      	strh	r3, [r7, #16]
 80055fc:	8a3b      	ldrh	r3, [r7, #16]
 80055fe:	f083 0320 	eor.w	r3, r3, #32
 8005602:	823b      	strh	r3, [r7, #16]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	441a      	add	r2, r3
 8005612:	8a3b      	ldrh	r3, [r7, #16]
 8005614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005624:	b29b      	uxth	r3, r3
 8005626:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3788      	adds	r7, #136	; 0x88
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005632:	b480      	push	{r7}
 8005634:	b087      	sub	sp, #28
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	607b      	str	r3, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	817b      	strh	r3, [r7, #10]
 8005640:	4613      	mov	r3, r2
 8005642:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005644:	897b      	ldrh	r3, [r7, #10]
 8005646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00b      	beq.n	8005668 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005650:	897b      	ldrh	r3, [r7, #10]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e009      	b.n	800567c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005668:	897a      	ldrh	r2, [r7, #10]
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800567c:	893b      	ldrh	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d107      	bne.n	8005692 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2200      	movs	r2, #0
 8005686:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	b29a      	uxth	r2, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	80da      	strh	r2, [r3, #6]
 8005690:	e00b      	b.n	80056aa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2201      	movs	r2, #1
 8005696:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	b29a      	uxth	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	0c1b      	lsrs	r3, r3, #16
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
	...

080056b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e272      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 8087 	beq.w	80057e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056d8:	4b92      	ldr	r3, [pc, #584]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 030c 	and.w	r3, r3, #12
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d00c      	beq.n	80056fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056e4:	4b8f      	ldr	r3, [pc, #572]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 030c 	and.w	r3, r3, #12
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d112      	bne.n	8005716 <HAL_RCC_OscConfig+0x5e>
 80056f0:	4b8c      	ldr	r3, [pc, #560]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	d10b      	bne.n	8005716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fe:	4b89      	ldr	r3, [pc, #548]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d06c      	beq.n	80057e4 <HAL_RCC_OscConfig+0x12c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d168      	bne.n	80057e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e24c      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571e:	d106      	bne.n	800572e <HAL_RCC_OscConfig+0x76>
 8005720:	4b80      	ldr	r3, [pc, #512]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a7f      	ldr	r2, [pc, #508]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	e02e      	b.n	800578c <HAL_RCC_OscConfig+0xd4>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10c      	bne.n	8005750 <HAL_RCC_OscConfig+0x98>
 8005736:	4b7b      	ldr	r3, [pc, #492]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a7a      	ldr	r2, [pc, #488]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800573c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	4b78      	ldr	r3, [pc, #480]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a77      	ldr	r2, [pc, #476]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	e01d      	b.n	800578c <HAL_RCC_OscConfig+0xd4>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005758:	d10c      	bne.n	8005774 <HAL_RCC_OscConfig+0xbc>
 800575a:	4b72      	ldr	r3, [pc, #456]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a71      	ldr	r2, [pc, #452]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	4b6f      	ldr	r3, [pc, #444]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a6e      	ldr	r2, [pc, #440]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800576c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	e00b      	b.n	800578c <HAL_RCC_OscConfig+0xd4>
 8005774:	4b6b      	ldr	r3, [pc, #428]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a6a      	ldr	r2, [pc, #424]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800577a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	4b68      	ldr	r3, [pc, #416]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a67      	ldr	r2, [pc, #412]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800578a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d013      	beq.n	80057bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005794:	f7fb fa8c 	bl	8000cb0 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800579c:	f7fb fa88 	bl	8000cb0 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b64      	cmp	r3, #100	; 0x64
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e200      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ae:	4b5d      	ldr	r3, [pc, #372]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f0      	beq.n	800579c <HAL_RCC_OscConfig+0xe4>
 80057ba:	e014      	b.n	80057e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057bc:	f7fb fa78 	bl	8000cb0 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c4:	f7fb fa74 	bl	8000cb0 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b64      	cmp	r3, #100	; 0x64
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e1ec      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d6:	4b53      	ldr	r3, [pc, #332]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x10c>
 80057e2:	e000      	b.n	80057e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d063      	beq.n	80058ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057f2:	4b4c      	ldr	r3, [pc, #304]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f003 030c 	and.w	r3, r3, #12
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057fe:	4b49      	ldr	r3, [pc, #292]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	2b08      	cmp	r3, #8
 8005808:	d11c      	bne.n	8005844 <HAL_RCC_OscConfig+0x18c>
 800580a:	4b46      	ldr	r3, [pc, #280]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d116      	bne.n	8005844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005816:	4b43      	ldr	r3, [pc, #268]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_RCC_OscConfig+0x176>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d001      	beq.n	800582e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e1c0      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800582e:	4b3d      	ldr	r3, [pc, #244]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	4939      	ldr	r1, [pc, #228]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005842:	e03a      	b.n	80058ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d020      	beq.n	800588e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800584c:	4b36      	ldr	r3, [pc, #216]	; (8005928 <HAL_RCC_OscConfig+0x270>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005852:	f7fb fa2d 	bl	8000cb0 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800585a:	f7fb fa29 	bl	8000cb0 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e1a1      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800586c:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005878:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	4927      	ldr	r1, [pc, #156]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005888:	4313      	orrs	r3, r2
 800588a:	600b      	str	r3, [r1, #0]
 800588c:	e015      	b.n	80058ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800588e:	4b26      	ldr	r3, [pc, #152]	; (8005928 <HAL_RCC_OscConfig+0x270>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005894:	f7fb fa0c 	bl	8000cb0 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800589c:	f7fb fa08 	bl	8000cb0 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e180      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ae:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f0      	bne.n	800589c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d03a      	beq.n	800593c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d019      	beq.n	8005902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ce:	4b17      	ldr	r3, [pc, #92]	; (800592c <HAL_RCC_OscConfig+0x274>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d4:	f7fb f9ec 	bl	8000cb0 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058dc:	f7fb f9e8 	bl	8000cb0 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e160      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ee:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058fa:	2001      	movs	r0, #1
 80058fc:	f000 fac4 	bl	8005e88 <RCC_Delay>
 8005900:	e01c      	b.n	800593c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <HAL_RCC_OscConfig+0x274>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005908:	f7fb f9d2 	bl	8000cb0 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800590e:	e00f      	b.n	8005930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005910:	f7fb f9ce 	bl	8000cb0 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d908      	bls.n	8005930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e146      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
 8005922:	bf00      	nop
 8005924:	40021000 	.word	0x40021000
 8005928:	42420000 	.word	0x42420000
 800592c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005930:	4b92      	ldr	r3, [pc, #584]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e9      	bne.n	8005910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 80a6 	beq.w	8005a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800594a:	2300      	movs	r3, #0
 800594c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800594e:	4b8b      	ldr	r3, [pc, #556]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800595a:	4b88      	ldr	r3, [pc, #544]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	4a87      	ldr	r2, [pc, #540]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005964:	61d3      	str	r3, [r2, #28]
 8005966:	4b85      	ldr	r3, [pc, #532]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005976:	4b82      	ldr	r3, [pc, #520]	; (8005b80 <HAL_RCC_OscConfig+0x4c8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d118      	bne.n	80059b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005982:	4b7f      	ldr	r3, [pc, #508]	; (8005b80 <HAL_RCC_OscConfig+0x4c8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a7e      	ldr	r2, [pc, #504]	; (8005b80 <HAL_RCC_OscConfig+0x4c8>)
 8005988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800598e:	f7fb f98f 	bl	8000cb0 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005996:	f7fb f98b 	bl	8000cb0 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b64      	cmp	r3, #100	; 0x64
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e103      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a8:	4b75      	ldr	r3, [pc, #468]	; (8005b80 <HAL_RCC_OscConfig+0x4c8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f0      	beq.n	8005996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d106      	bne.n	80059ca <HAL_RCC_OscConfig+0x312>
 80059bc:	4b6f      	ldr	r3, [pc, #444]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	4a6e      	ldr	r2, [pc, #440]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	6213      	str	r3, [r2, #32]
 80059c8:	e02d      	b.n	8005a26 <HAL_RCC_OscConfig+0x36e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10c      	bne.n	80059ec <HAL_RCC_OscConfig+0x334>
 80059d2:	4b6a      	ldr	r3, [pc, #424]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	4a69      	ldr	r2, [pc, #420]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	6213      	str	r3, [r2, #32]
 80059de:	4b67      	ldr	r3, [pc, #412]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	4a66      	ldr	r2, [pc, #408]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 80059e4:	f023 0304 	bic.w	r3, r3, #4
 80059e8:	6213      	str	r3, [r2, #32]
 80059ea:	e01c      	b.n	8005a26 <HAL_RCC_OscConfig+0x36e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b05      	cmp	r3, #5
 80059f2:	d10c      	bne.n	8005a0e <HAL_RCC_OscConfig+0x356>
 80059f4:	4b61      	ldr	r3, [pc, #388]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	4a60      	ldr	r2, [pc, #384]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 80059fa:	f043 0304 	orr.w	r3, r3, #4
 80059fe:	6213      	str	r3, [r2, #32]
 8005a00:	4b5e      	ldr	r3, [pc, #376]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	4a5d      	ldr	r2, [pc, #372]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	6213      	str	r3, [r2, #32]
 8005a0c:	e00b      	b.n	8005a26 <HAL_RCC_OscConfig+0x36e>
 8005a0e:	4b5b      	ldr	r3, [pc, #364]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	4a5a      	ldr	r2, [pc, #360]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	6213      	str	r3, [r2, #32]
 8005a1a:	4b58      	ldr	r3, [pc, #352]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	4a57      	ldr	r2, [pc, #348]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005a20:	f023 0304 	bic.w	r3, r3, #4
 8005a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d015      	beq.n	8005a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a2e:	f7fb f93f 	bl	8000cb0 <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a34:	e00a      	b.n	8005a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a36:	f7fb f93b 	bl	8000cb0 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e0b1      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4c:	4b4b      	ldr	r3, [pc, #300]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0ee      	beq.n	8005a36 <HAL_RCC_OscConfig+0x37e>
 8005a58:	e014      	b.n	8005a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5a:	f7fb f929 	bl	8000cb0 <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a60:	e00a      	b.n	8005a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a62:	f7fb f925 	bl	8000cb0 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e09b      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a78:	4b40      	ldr	r3, [pc, #256]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1ee      	bne.n	8005a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d105      	bne.n	8005a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a8a:	4b3c      	ldr	r3, [pc, #240]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	4a3b      	ldr	r2, [pc, #236]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 8087 	beq.w	8005bae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aa0:	4b36      	ldr	r3, [pc, #216]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 030c 	and.w	r3, r3, #12
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d061      	beq.n	8005b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d146      	bne.n	8005b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab4:	4b33      	ldr	r3, [pc, #204]	; (8005b84 <HAL_RCC_OscConfig+0x4cc>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aba:	f7fb f8f9 	bl	8000cb0 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac2:	f7fb f8f5 	bl	8000cb0 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e06d      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ad4:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f0      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae8:	d108      	bne.n	8005afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005aea:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	4921      	ldr	r1, [pc, #132]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005afc:	4b1f      	ldr	r3, [pc, #124]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a19      	ldr	r1, [r3, #32]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	430b      	orrs	r3, r1
 8005b0e:	491b      	ldr	r1, [pc, #108]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b14:	4b1b      	ldr	r3, [pc, #108]	; (8005b84 <HAL_RCC_OscConfig+0x4cc>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1a:	f7fb f8c9 	bl	8000cb0 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b22:	f7fb f8c5 	bl	8000cb0 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e03d      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b34:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x46a>
 8005b40:	e035      	b.n	8005bae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b42:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <HAL_RCC_OscConfig+0x4cc>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b48:	f7fb f8b2 	bl	8000cb0 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b50:	f7fb f8ae 	bl	8000cb0 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e026      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b62:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <HAL_RCC_OscConfig+0x4c4>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x498>
 8005b6e:	e01e      	b.n	8005bae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d107      	bne.n	8005b88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e019      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	40007000 	.word	0x40007000
 8005b84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCC_OscConfig+0x500>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d106      	bne.n	8005baa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d001      	beq.n	8005bae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40021000 	.word	0x40021000

08005bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e0d0      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bd0:	4b6a      	ldr	r3, [pc, #424]	; (8005d7c <HAL_RCC_ClockConfig+0x1c0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d910      	bls.n	8005c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bde:	4b67      	ldr	r3, [pc, #412]	; (8005d7c <HAL_RCC_ClockConfig+0x1c0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f023 0207 	bic.w	r2, r3, #7
 8005be6:	4965      	ldr	r1, [pc, #404]	; (8005d7c <HAL_RCC_ClockConfig+0x1c0>)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bee:	4b63      	ldr	r3, [pc, #396]	; (8005d7c <HAL_RCC_ClockConfig+0x1c0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e0b8      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d020      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c18:	4b59      	ldr	r3, [pc, #356]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4a58      	ldr	r2, [pc, #352]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005c1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c30:	4b53      	ldr	r3, [pc, #332]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	4a52      	ldr	r2, [pc, #328]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005c36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c3c:	4b50      	ldr	r3, [pc, #320]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	494d      	ldr	r1, [pc, #308]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d040      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d107      	bne.n	8005c72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c62:	4b47      	ldr	r3, [pc, #284]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d115      	bne.n	8005c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e07f      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d107      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c7a:	4b41      	ldr	r3, [pc, #260]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e073      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c8a:	4b3d      	ldr	r3, [pc, #244]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e06b      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c9a:	4b39      	ldr	r3, [pc, #228]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f023 0203 	bic.w	r2, r3, #3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4936      	ldr	r1, [pc, #216]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cac:	f7fb f800 	bl	8000cb0 <HAL_GetTick>
 8005cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb2:	e00a      	b.n	8005cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb4:	f7fa fffc 	bl	8000cb0 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e053      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cca:	4b2d      	ldr	r3, [pc, #180]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f003 020c 	and.w	r2, r3, #12
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d1eb      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cdc:	4b27      	ldr	r3, [pc, #156]	; (8005d7c <HAL_RCC_ClockConfig+0x1c0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d210      	bcs.n	8005d0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cea:	4b24      	ldr	r3, [pc, #144]	; (8005d7c <HAL_RCC_ClockConfig+0x1c0>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f023 0207 	bic.w	r2, r3, #7
 8005cf2:	4922      	ldr	r1, [pc, #136]	; (8005d7c <HAL_RCC_ClockConfig+0x1c0>)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfa:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <HAL_RCC_ClockConfig+0x1c0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d001      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e032      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d008      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d18:	4b19      	ldr	r3, [pc, #100]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4916      	ldr	r1, [pc, #88]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d009      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d36:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	490e      	ldr	r1, [pc, #56]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d4a:	f000 f821 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <HAL_RCC_ClockConfig+0x1c4>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	490a      	ldr	r1, [pc, #40]	; (8005d84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d5c:	5ccb      	ldrb	r3, [r1, r3]
 8005d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d62:	4a09      	ldr	r2, [pc, #36]	; (8005d88 <HAL_RCC_ClockConfig+0x1cc>)
 8005d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d66:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <HAL_RCC_ClockConfig+0x1d0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fa ff5e 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40022000 	.word	0x40022000
 8005d80:	40021000 	.word	0x40021000
 8005d84:	0800c538 	.word	0x0800c538
 8005d88:	20000008 	.word	0x20000008
 8005d8c:	2000000c 	.word	0x2000000c

08005d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d90:	b490      	push	{r4, r7}
 8005d92:	b08a      	sub	sp, #40	; 0x28
 8005d94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d96:	4b29      	ldr	r3, [pc, #164]	; (8005e3c <HAL_RCC_GetSysClockFreq+0xac>)
 8005d98:	1d3c      	adds	r4, r7, #4
 8005d9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005da0:	f240 2301 	movw	r3, #513	; 0x201
 8005da4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	2300      	movs	r3, #0
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	2300      	movs	r3, #0
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005dba:	4b21      	ldr	r3, [pc, #132]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d002      	beq.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d003      	beq.n	8005dd6 <HAL_RCC_GetSysClockFreq+0x46>
 8005dce:	e02b      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dd0:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005dd2:	623b      	str	r3, [r7, #32]
      break;
 8005dd4:	e02b      	b.n	8005e2e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	0c9b      	lsrs	r3, r3, #18
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	3328      	adds	r3, #40	; 0x28
 8005de0:	443b      	add	r3, r7
 8005de2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005de6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d012      	beq.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005df2:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	0c5b      	lsrs	r3, r3, #17
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	3328      	adds	r3, #40	; 0x28
 8005dfe:	443b      	add	r3, r7
 8005e00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4a0e      	ldr	r2, [pc, #56]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e0a:	fb03 f202 	mul.w	r2, r3, r2
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
 8005e16:	e004      	b.n	8005e22 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	4a0b      	ldr	r2, [pc, #44]	; (8005e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e1c:	fb02 f303 	mul.w	r3, r2, r3
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	623b      	str	r3, [r7, #32]
      break;
 8005e26:	e002      	b.n	8005e2e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e2a:	623b      	str	r3, [r7, #32]
      break;
 8005e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3728      	adds	r7, #40	; 0x28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc90      	pop	{r4, r7}
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	0800c4dc 	.word	0x0800c4dc
 8005e40:	40021000 	.word	0x40021000
 8005e44:	007a1200 	.word	0x007a1200
 8005e48:	003d0900 	.word	0x003d0900

08005e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <HAL_RCC_GetHCLKFreq+0x10>)
 8005e52:	681b      	ldr	r3, [r3, #0]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr
 8005e5c:	20000008 	.word	0x20000008

08005e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e64:	f7ff fff2 	bl	8005e4c <HAL_RCC_GetHCLKFreq>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	4903      	ldr	r1, [pc, #12]	; (8005e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e76:	5ccb      	ldrb	r3, [r1, r3]
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40021000 	.word	0x40021000
 8005e84:	0800c548 	.word	0x0800c548

08005e88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <RCC_Delay+0x34>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <RCC_Delay+0x38>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	0a5b      	lsrs	r3, r3, #9
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ea4:	bf00      	nop
  }
  while (Delay --);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1e5a      	subs	r2, r3, #1
 8005eaa:	60fa      	str	r2, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f9      	bne.n	8005ea4 <RCC_Delay+0x1c>
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr
 8005ebc:	20000008 	.word	0x20000008
 8005ec0:	10624dd3 	.word	0x10624dd3

08005ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d07d      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ee4:	4b4f      	ldr	r3, [pc, #316]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10d      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef0:	4b4c      	ldr	r3, [pc, #304]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	4a4b      	ldr	r2, [pc, #300]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efa:	61d3      	str	r3, [r2, #28]
 8005efc:	4b49      	ldr	r3, [pc, #292]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f0c:	4b46      	ldr	r3, [pc, #280]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d118      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f18:	4b43      	ldr	r3, [pc, #268]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a42      	ldr	r2, [pc, #264]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f24:	f7fa fec4 	bl	8000cb0 <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2a:	e008      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f2c:	f7fa fec0 	bl	8000cb0 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b64      	cmp	r3, #100	; 0x64
 8005f38:	d901      	bls.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e06d      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3e:	4b3a      	ldr	r3, [pc, #232]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0f0      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f4a:	4b36      	ldr	r3, [pc, #216]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d02e      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d027      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f68:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f72:	4b2e      	ldr	r3, [pc, #184]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f78:	4b2c      	ldr	r3, [pc, #176]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f7e:	4a29      	ldr	r2, [pc, #164]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d014      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8e:	f7fa fe8f 	bl	8000cb0 <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f94:	e00a      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f96:	f7fa fe8b 	bl	8000cb0 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e036      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fac:	4b1d      	ldr	r3, [pc, #116]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0ee      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4917      	ldr	r1, [pc, #92]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d105      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd0:	4b14      	ldr	r3, [pc, #80]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	4a13      	ldr	r2, [pc, #76]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	490b      	ldr	r1, [pc, #44]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b00      	cmp	r3, #0
 8006004:	d008      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006006:	4b07      	ldr	r3, [pc, #28]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	4904      	ldr	r1, [pc, #16]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006014:	4313      	orrs	r3, r2
 8006016:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40021000 	.word	0x40021000
 8006028:	40007000 	.word	0x40007000
 800602c:	42420440 	.word	0x42420440

08006030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e041      	b.n	80060c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fa fce2 	bl	8000a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f000 f8f2 	bl	8006258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_ConfigClockSource+0x18>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e0b3      	b.n	800624e <HAL_TIM_ConfigClockSource+0x180>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006104:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800610c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800611e:	d03e      	beq.n	800619e <HAL_TIM_ConfigClockSource+0xd0>
 8006120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006124:	f200 8087 	bhi.w	8006236 <HAL_TIM_ConfigClockSource+0x168>
 8006128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612c:	f000 8085 	beq.w	800623a <HAL_TIM_ConfigClockSource+0x16c>
 8006130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006134:	d87f      	bhi.n	8006236 <HAL_TIM_ConfigClockSource+0x168>
 8006136:	2b70      	cmp	r3, #112	; 0x70
 8006138:	d01a      	beq.n	8006170 <HAL_TIM_ConfigClockSource+0xa2>
 800613a:	2b70      	cmp	r3, #112	; 0x70
 800613c:	d87b      	bhi.n	8006236 <HAL_TIM_ConfigClockSource+0x168>
 800613e:	2b60      	cmp	r3, #96	; 0x60
 8006140:	d050      	beq.n	80061e4 <HAL_TIM_ConfigClockSource+0x116>
 8006142:	2b60      	cmp	r3, #96	; 0x60
 8006144:	d877      	bhi.n	8006236 <HAL_TIM_ConfigClockSource+0x168>
 8006146:	2b50      	cmp	r3, #80	; 0x50
 8006148:	d03c      	beq.n	80061c4 <HAL_TIM_ConfigClockSource+0xf6>
 800614a:	2b50      	cmp	r3, #80	; 0x50
 800614c:	d873      	bhi.n	8006236 <HAL_TIM_ConfigClockSource+0x168>
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d058      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0x136>
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	d86f      	bhi.n	8006236 <HAL_TIM_ConfigClockSource+0x168>
 8006156:	2b30      	cmp	r3, #48	; 0x30
 8006158:	d064      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0x156>
 800615a:	2b30      	cmp	r3, #48	; 0x30
 800615c:	d86b      	bhi.n	8006236 <HAL_TIM_ConfigClockSource+0x168>
 800615e:	2b20      	cmp	r3, #32
 8006160:	d060      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0x156>
 8006162:	2b20      	cmp	r3, #32
 8006164:	d867      	bhi.n	8006236 <HAL_TIM_ConfigClockSource+0x168>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d05c      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0x156>
 800616a:	2b10      	cmp	r3, #16
 800616c:	d05a      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800616e:	e062      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	6899      	ldr	r1, [r3, #8]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f000 f943 	bl	800640a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006192:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	609a      	str	r2, [r3, #8]
      break;
 800619c:	e04e      	b.n	800623c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6899      	ldr	r1, [r3, #8]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f000 f92c 	bl	800640a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061c0:	609a      	str	r2, [r3, #8]
      break;
 80061c2:	e03b      	b.n	800623c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	6859      	ldr	r1, [r3, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	461a      	mov	r2, r3
 80061d2:	f000 f8a3 	bl	800631c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2150      	movs	r1, #80	; 0x50
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 f8fa 	bl	80063d6 <TIM_ITRx_SetConfig>
      break;
 80061e2:	e02b      	b.n	800623c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6859      	ldr	r1, [r3, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	461a      	mov	r2, r3
 80061f2:	f000 f8c1 	bl	8006378 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2160      	movs	r1, #96	; 0x60
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 f8ea 	bl	80063d6 <TIM_ITRx_SetConfig>
      break;
 8006202:	e01b      	b.n	800623c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	6859      	ldr	r1, [r3, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	461a      	mov	r2, r3
 8006212:	f000 f883 	bl	800631c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2140      	movs	r1, #64	; 0x40
 800621c:	4618      	mov	r0, r3
 800621e:	f000 f8da 	bl	80063d6 <TIM_ITRx_SetConfig>
      break;
 8006222:	e00b      	b.n	800623c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f000 f8d1 	bl	80063d6 <TIM_ITRx_SetConfig>
        break;
 8006234:	e002      	b.n	800623c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006236:	bf00      	nop
 8006238:	e000      	b.n	800623c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800623a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a29      	ldr	r2, [pc, #164]	; (8006310 <TIM_Base_SetConfig+0xb8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d00b      	beq.n	8006288 <TIM_Base_SetConfig+0x30>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006276:	d007      	beq.n	8006288 <TIM_Base_SetConfig+0x30>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a26      	ldr	r2, [pc, #152]	; (8006314 <TIM_Base_SetConfig+0xbc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d003      	beq.n	8006288 <TIM_Base_SetConfig+0x30>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a25      	ldr	r2, [pc, #148]	; (8006318 <TIM_Base_SetConfig+0xc0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d108      	bne.n	800629a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a1c      	ldr	r2, [pc, #112]	; (8006310 <TIM_Base_SetConfig+0xb8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00b      	beq.n	80062ba <TIM_Base_SetConfig+0x62>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a8:	d007      	beq.n	80062ba <TIM_Base_SetConfig+0x62>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a19      	ldr	r2, [pc, #100]	; (8006314 <TIM_Base_SetConfig+0xbc>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d003      	beq.n	80062ba <TIM_Base_SetConfig+0x62>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a18      	ldr	r2, [pc, #96]	; (8006318 <TIM_Base_SetConfig+0xc0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d108      	bne.n	80062cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a07      	ldr	r2, [pc, #28]	; (8006310 <TIM_Base_SetConfig+0xb8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d103      	bne.n	8006300 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	615a      	str	r2, [r3, #20]
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr
 8006310:	40012c00 	.word	0x40012c00
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800

0800631c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f023 0201 	bic.w	r2, r3, #1
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f023 030a 	bic.w	r3, r3, #10
 8006358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f023 0210 	bic.w	r2, r3, #16
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	031b      	lsls	r3, r3, #12
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	621a      	str	r2, [r3, #32]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f043 0307 	orr.w	r3, r3, #7
 80063f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	609a      	str	r2, [r3, #8]
}
 8006400:	bf00      	nop
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800640a:	b480      	push	{r7}
 800640c:	b087      	sub	sp, #28
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
 8006416:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006424:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	021a      	lsls	r2, r3, #8
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	431a      	orrs	r2, r3
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4313      	orrs	r3, r2
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	609a      	str	r2, [r3, #8]
}
 800643e:	bf00      	nop
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr

08006448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800645c:	2302      	movs	r3, #2
 800645e:	e046      	b.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a16      	ldr	r2, [pc, #88]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00e      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ac:	d009      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a12      	ldr	r2, [pc, #72]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a10      	ldr	r2, [pc, #64]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d10c      	bne.n	80064dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800

08006504 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006504:	b084      	sub	sp, #16
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	f107 0014 	add.w	r0, r7, #20
 8006512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	b004      	add	sp, #16
 8006522:	4770      	bx	lr

08006524 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006534:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006538:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	bc80      	pop	{r7}
 800654e:	4770      	bx	lr

08006550 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006558:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800655c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	b29b      	uxth	r3, r3
 800656a:	43db      	mvns	r3, r3
 800656c:	b29b      	uxth	r3, r3
 800656e:	4013      	ands	r3, r2
 8006570:	b29a      	uxth	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	bc80      	pop	{r7}
 8006582:	4770      	bx	lr

08006584 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800659c:	b084      	sub	sp, #16
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	f107 0014 	add.w	r0, r7, #20
 80065aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	b004      	add	sp, #16
 80065da:	4770      	bx	lr

080065dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065dc:	b480      	push	{r7}
 80065de:	b09b      	sub	sp, #108	; 0x6c
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80065fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006602:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	78db      	ldrb	r3, [r3, #3]
 800660a:	2b03      	cmp	r3, #3
 800660c:	d81f      	bhi.n	800664e <USB_ActivateEndpoint+0x72>
 800660e:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <USB_ActivateEndpoint+0x38>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006625 	.word	0x08006625
 8006618:	08006641 	.word	0x08006641
 800661c:	08006657 	.word	0x08006657
 8006620:	08006633 	.word	0x08006633
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006624:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800662c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006630:	e012      	b.n	8006658 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006632:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006636:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800663a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800663e:	e00b      	b.n	8006658 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006640:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006644:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006648:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800664c:	e004      	b.n	8006658 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006654:	e000      	b.n	8006658 <USB_ActivateEndpoint+0x7c>
      break;
 8006656:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800666a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800666e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006676:	b29b      	uxth	r3, r3
 8006678:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006690:	b29a      	uxth	r2, r3
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	4313      	orrs	r3, r2
 800669a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	441a      	add	r2, r3
 80066a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80066ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066bc:	b29b      	uxth	r3, r3
 80066be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	7b1b      	ldrb	r3, [r3, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f040 8149 	bne.w	800695c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8084 	beq.w	80067dc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066de:	b29b      	uxth	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4413      	add	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	011a      	lsls	r2, r3, #4
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	88db      	ldrh	r3, [r3, #6]
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	b29b      	uxth	r3, r3
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	81fb      	strh	r3, [r7, #14]
 8006716:	89fb      	ldrh	r3, [r7, #14]
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01b      	beq.n	8006758 <USB_ActivateEndpoint+0x17c>
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	b29b      	uxth	r3, r3
 800672e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006736:	81bb      	strh	r3, [r7, #12]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	441a      	add	r2, r3
 8006742:	89bb      	ldrh	r3, [r7, #12]
 8006744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006750:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006754:	b29b      	uxth	r3, r3
 8006756:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	78db      	ldrb	r3, [r3, #3]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d020      	beq.n	80067a2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006776:	813b      	strh	r3, [r7, #8]
 8006778:	893b      	ldrh	r3, [r7, #8]
 800677a:	f083 0320 	eor.w	r3, r3, #32
 800677e:	813b      	strh	r3, [r7, #8]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	441a      	add	r2, r3
 800678a:	893b      	ldrh	r3, [r7, #8]
 800678c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679c:	b29b      	uxth	r3, r3
 800679e:	8013      	strh	r3, [r2, #0]
 80067a0:	e27f      	b.n	8006ca2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b8:	817b      	strh	r3, [r7, #10]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	897b      	ldrh	r3, [r7, #10]
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]
 80067da:	e262      	b.n	8006ca2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	4413      	add	r3, r2
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	011a      	lsls	r2, r3, #4
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	88db      	ldrh	r3, [r3, #6]
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	b29b      	uxth	r3, r3
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681a:	b29b      	uxth	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	4413      	add	r3, r2
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	011a      	lsls	r2, r3, #4
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	4413      	add	r3, r2
 800682e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006832:	623b      	str	r3, [r7, #32]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d112      	bne.n	8006862 <USB_ActivateEndpoint+0x286>
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006846:	b29a      	uxth	r2, r3
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685a:	b29a      	uxth	r2, r3
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	e02f      	b.n	80068c2 <USB_ActivateEndpoint+0x2e6>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b3e      	cmp	r3, #62	; 0x3e
 8006868:	d813      	bhi.n	8006892 <USB_ActivateEndpoint+0x2b6>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	085b      	lsrs	r3, r3, #1
 8006870:	663b      	str	r3, [r7, #96]	; 0x60
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <USB_ActivateEndpoint+0x2a8>
 800687e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006880:	3301      	adds	r3, #1
 8006882:	663b      	str	r3, [r7, #96]	; 0x60
 8006884:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006886:	b29b      	uxth	r3, r3
 8006888:	029b      	lsls	r3, r3, #10
 800688a:	b29a      	uxth	r2, r3
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	801a      	strh	r2, [r3, #0]
 8006890:	e017      	b.n	80068c2 <USB_ActivateEndpoint+0x2e6>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	095b      	lsrs	r3, r3, #5
 8006898:	663b      	str	r3, [r7, #96]	; 0x60
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <USB_ActivateEndpoint+0x2d0>
 80068a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068a8:	3b01      	subs	r3, #1
 80068aa:	663b      	str	r3, [r7, #96]	; 0x60
 80068ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	029b      	lsls	r3, r3, #10
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068bc:	b29a      	uxth	r2, r3
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	83fb      	strh	r3, [r7, #30]
 80068d0:	8bfb      	ldrh	r3, [r7, #30]
 80068d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01b      	beq.n	8006912 <USB_ActivateEndpoint+0x336>
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f0:	83bb      	strh	r3, [r7, #28]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	441a      	add	r2, r3
 80068fc:	8bbb      	ldrh	r3, [r7, #28]
 80068fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800690a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690e:	b29b      	uxth	r3, r3
 8006910:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006928:	837b      	strh	r3, [r7, #26]
 800692a:	8b7b      	ldrh	r3, [r7, #26]
 800692c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006930:	837b      	strh	r3, [r7, #26]
 8006932:	8b7b      	ldrh	r3, [r7, #26]
 8006934:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006938:	837b      	strh	r3, [r7, #26]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	441a      	add	r2, r3
 8006944:	8b7b      	ldrh	r3, [r7, #26]
 8006946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006956:	b29b      	uxth	r3, r3
 8006958:	8013      	strh	r3, [r2, #0]
 800695a:	e1a2      	b.n	8006ca2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	441a      	add	r2, r3
 8006980:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006994:	b29b      	uxth	r3, r3
 8006996:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	65bb      	str	r3, [r7, #88]	; 0x58
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069a8:	4413      	add	r3, r2
 80069aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	011a      	lsls	r2, r3, #4
 80069b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ba:	657b      	str	r3, [r7, #84]	; 0x54
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	891b      	ldrh	r3, [r3, #8]
 80069c0:	085b      	lsrs	r3, r3, #1
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	653b      	str	r3, [r7, #80]	; 0x50
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	461a      	mov	r2, r3
 80069da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069dc:	4413      	add	r3, r2
 80069de:	653b      	str	r3, [r7, #80]	; 0x50
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	011a      	lsls	r2, r3, #4
 80069e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80069ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	895b      	ldrh	r3, [r3, #10]
 80069f4:	085b      	lsrs	r3, r3, #1
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f040 8091 	bne.w	8006b2c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006a18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d01b      	beq.n	8006a5a <USB_ActivateEndpoint+0x47e>
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a38:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	441a      	add	r2, r3
 8006a44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	873b      	strh	r3, [r7, #56]	; 0x38
 8006a68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01b      	beq.n	8006aaa <USB_ActivateEndpoint+0x4ce>
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a88:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006ac2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ac4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ac8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006aca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006acc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ad0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	441a      	add	r2, r3
 8006adc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b08:	867b      	strh	r3, [r7, #50]	; 0x32
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8013      	strh	r3, [r2, #0]
 8006b2a:	e0ba      	b.n	8006ca2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006b3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01d      	beq.n	8006b84 <USB_ActivateEndpoint+0x5a8>
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	441a      	add	r2, r3
 8006b6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006b94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01d      	beq.n	8006bdc <USB_ActivateEndpoint+0x600>
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	441a      	add	r2, r3
 8006bc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	78db      	ldrb	r3, [r3, #3]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d024      	beq.n	8006c2e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006bfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c02:	f083 0320 	eor.w	r3, r3, #32
 8006c06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	441a      	add	r2, r3
 8006c14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8013      	strh	r3, [r2, #0]
 8006c2c:	e01d      	b.n	8006c6a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	441a      	add	r2, r3
 8006c52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c80:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	441a      	add	r2, r3
 8006c8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006ca2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	376c      	adds	r7, #108	; 0x6c
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b08d      	sub	sp, #52	; 0x34
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	7b1b      	ldrb	r3, [r3, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 808e 	bne.w	8006de0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	785b      	ldrb	r3, [r3, #1]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d044      	beq.n	8006d56 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	81bb      	strh	r3, [r7, #12]
 8006cda:	89bb      	ldrh	r3, [r7, #12]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01b      	beq.n	8006d1c <USB_DeactivateEndpoint+0x6c>
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfa:	817b      	strh	r3, [r7, #10]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	441a      	add	r2, r3
 8006d06:	897b      	ldrh	r3, [r7, #10]
 8006d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d32:	813b      	strh	r3, [r7, #8]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	893b      	ldrh	r3, [r7, #8]
 8006d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	8013      	strh	r3, [r2, #0]
 8006d54:	e192      	b.n	800707c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	827b      	strh	r3, [r7, #18]
 8006d64:	8a7b      	ldrh	r3, [r7, #18]
 8006d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01b      	beq.n	8006da6 <USB_DeactivateEndpoint+0xf6>
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d84:	823b      	strh	r3, [r7, #16]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	441a      	add	r2, r3
 8006d90:	8a3b      	ldrh	r3, [r7, #16]
 8006d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbc:	81fb      	strh	r3, [r7, #14]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	441a      	add	r2, r3
 8006dc8:	89fb      	ldrh	r3, [r7, #14]
 8006dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	8013      	strh	r3, [r2, #0]
 8006dde:	e14d      	b.n	800707c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f040 80a5 	bne.w	8006f34 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	843b      	strh	r3, [r7, #32]
 8006df8:	8c3b      	ldrh	r3, [r7, #32]
 8006dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01b      	beq.n	8006e3a <USB_DeactivateEndpoint+0x18a>
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e18:	83fb      	strh	r3, [r7, #30]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	8bfb      	ldrh	r3, [r7, #30]
 8006e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	83bb      	strh	r3, [r7, #28]
 8006e48:	8bbb      	ldrh	r3, [r7, #28]
 8006e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01b      	beq.n	8006e8a <USB_DeactivateEndpoint+0x1da>
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e68:	837b      	strh	r3, [r7, #26]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	441a      	add	r2, r3
 8006e74:	8b7b      	ldrh	r3, [r7, #26]
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea0:	833b      	strh	r3, [r7, #24]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	441a      	add	r2, r3
 8006eac:	8b3b      	ldrh	r3, [r7, #24]
 8006eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed8:	82fb      	strh	r3, [r7, #22]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	8afb      	ldrh	r3, [r7, #22]
 8006ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f10:	82bb      	strh	r3, [r7, #20]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	441a      	add	r2, r3
 8006f1c:	8abb      	ldrh	r3, [r7, #20]
 8006f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	8013      	strh	r3, [r2, #0]
 8006f32:	e0a3      	b.n	800707c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006f42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01b      	beq.n	8006f84 <USB_DeactivateEndpoint+0x2d4>
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006f92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d01b      	beq.n	8006fd4 <USB_DeactivateEndpoint+0x324>
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007008:	b29b      	uxth	r3, r3
 800700a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	b29b      	uxth	r3, r3
 800701a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007022:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	441a      	add	r2, r3
 800702e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800703c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007040:	b29b      	uxth	r3, r3
 8007042:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705a:	847b      	strh	r3, [r7, #34]	; 0x22
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007078:	b29b      	uxth	r3, r3
 800707a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3734      	adds	r7, #52	; 0x34
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b0cc      	sub	sp, #304	; 0x130
 800708c:	af00      	add	r7, sp, #0
 800708e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007092:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007096:	6018      	str	r0, [r3, #0]
 8007098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	785b      	ldrb	r3, [r3, #1]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	f041 817d 	bne.w	80083ae <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80070b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	699a      	ldr	r2, [r3, #24]
 80070c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d908      	bls.n	80070e2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80070d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80070e0:	e007      	b.n	80070f2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80070e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80070f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	7b1b      	ldrb	r3, [r3, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d152      	bne.n	80071a8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6959      	ldr	r1, [r3, #20]
 800710e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	88da      	ldrh	r2, [r3, #6]
 800711a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711e:	b29b      	uxth	r3, r3
 8007120:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007124:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007128:	6800      	ldr	r0, [r0, #0]
 800712a:	f001 ff23 	bl	8008f74 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800712e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007132:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007136:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800713a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800713e:	6812      	ldr	r2, [r2, #0]
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007146:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007150:	b29b      	uxth	r3, r3
 8007152:	4619      	mov	r1, r3
 8007154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007158:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800715c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007160:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	440a      	add	r2, r1
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	011a      	lsls	r2, r3, #4
 8007178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4413      	add	r3, r2
 8007184:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007196:	b29a      	uxth	r2, r3
 8007198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	801a      	strh	r2, [r3, #0]
 80071a4:	f001 b8b5 	b.w	8008312 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80071a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	78db      	ldrb	r3, [r3, #3]
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	f040 84c6 	bne.w	8007b46 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6a1a      	ldr	r2, [r3, #32]
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	f240 8443 	bls.w	8007a5e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80071d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007206:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	441a      	add	r2, r3
 800721c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007228:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800722c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007230:	b29b      	uxth	r3, r3
 8007232:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6a1a      	ldr	r2, [r3, #32]
 8007240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007244:	1ad2      	subs	r2, r2, r3
 8007246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29b      	uxth	r3, r3
 8007270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 823e 	beq.w	80076f6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800727a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007282:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007286:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800728a:	6812      	ldr	r2, [r2, #0]
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	2b00      	cmp	r3, #0
 800729c:	f040 809a 	bne.w	80073d4 <USB_EPStartXfer+0x34c>
 80072a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072ac:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80072b0:	6812      	ldr	r2, [r2, #0]
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	4619      	mov	r1, r3
 80072c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072d2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	440a      	add	r2, r1
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	011a      	lsls	r2, r3, #4
 80072ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4413      	add	r3, r2
 80072f6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80072fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d122      	bne.n	8007352 <USB_EPStartXfer+0x2ca>
 800730c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007310:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800731e:	b29a      	uxth	r2, r3
 8007320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007324:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	801a      	strh	r2, [r3, #0]
 800732c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007330:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007342:	b29a      	uxth	r2, r3
 8007344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007348:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	e079      	b.n	8007446 <USB_EPStartXfer+0x3be>
 8007352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007356:	2b3e      	cmp	r3, #62	; 0x3e
 8007358:	d81b      	bhi.n	8007392 <USB_EPStartXfer+0x30a>
 800735a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <USB_EPStartXfer+0x2f2>
 8007370:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007374:	3301      	adds	r3, #1
 8007376:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800737a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800737e:	b29b      	uxth	r3, r3
 8007380:	029b      	lsls	r3, r3, #10
 8007382:	b29a      	uxth	r2, r3
 8007384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007388:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	801a      	strh	r2, [r3, #0]
 8007390:	e059      	b.n	8007446 <USB_EPStartXfer+0x3be>
 8007392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007396:	095b      	lsrs	r3, r3, #5
 8007398:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800739c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <USB_EPStartXfer+0x32a>
 80073a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073ac:	3b01      	subs	r3, #1
 80073ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80073b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	029b      	lsls	r3, r3, #10
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	801a      	strh	r2, [r3, #0]
 80073d2:	e038      	b.n	8007446 <USB_EPStartXfer+0x3be>
 80073d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	785b      	ldrb	r3, [r3, #1]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d130      	bne.n	8007446 <USB_EPStartXfer+0x3be>
 80073e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	4619      	mov	r1, r3
 80073f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80073fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007402:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	440a      	add	r2, r1
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	011a      	lsls	r2, r3, #4
 800741a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4413      	add	r3, r2
 8007426:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800742a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007438:	b29a      	uxth	r2, r3
 800743a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	895b      	ldrh	r3, [r3, #10]
 8007452:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6959      	ldr	r1, [r3, #20]
 8007462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007466:	b29b      	uxth	r3, r3
 8007468:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800746c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007470:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007474:	6800      	ldr	r0, [r0, #0]
 8007476:	f001 fd7d 	bl	8008f74 <USB_WritePMA>
            ep->xfer_buff += len;
 800747a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695a      	ldr	r2, [r3, #20]
 8007486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748a:	441a      	add	r2, r3
 800748c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6a1a      	ldr	r2, [r3, #32]
 80074a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d90f      	bls.n	80074d4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80074b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6a1a      	ldr	r2, [r3, #32]
 80074c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c4:	1ad2      	subs	r2, r2, r3
 80074c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	621a      	str	r2, [r3, #32]
 80074d2:	e00e      	b.n	80074f2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80074d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80074e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2200      	movs	r2, #0
 80074f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	785b      	ldrb	r3, [r3, #1]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f040 809a 	bne.w	8007638 <USB_EPStartXfer+0x5b0>
 8007504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007508:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800750c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007510:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007514:	6812      	ldr	r2, [r2, #0]
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007526:	b29b      	uxth	r3, r3
 8007528:	4619      	mov	r1, r3
 800752a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007532:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007536:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	440a      	add	r2, r1
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007544:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	011a      	lsls	r2, r3, #4
 800754e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007552:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4413      	add	r3, r2
 800755a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800755e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007562:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800756c:	2b00      	cmp	r3, #0
 800756e:	d122      	bne.n	80075b6 <USB_EPStartXfer+0x52e>
 8007570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007574:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007582:	b29a      	uxth	r2, r3
 8007584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007588:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	801a      	strh	r2, [r3, #0]
 8007590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007594:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	801a      	strh	r2, [r3, #0]
 80075b4:	e083      	b.n	80076be <USB_EPStartXfer+0x636>
 80075b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ba:	2b3e      	cmp	r3, #62	; 0x3e
 80075bc:	d81b      	bhi.n	80075f6 <USB_EPStartXfer+0x56e>
 80075be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c2:	085b      	lsrs	r3, r3, #1
 80075c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80075c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d004      	beq.n	80075de <USB_EPStartXfer+0x556>
 80075d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075d8:	3301      	adds	r3, #1
 80075da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80075de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	029b      	lsls	r3, r3, #10
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	801a      	strh	r2, [r3, #0]
 80075f4:	e063      	b.n	80076be <USB_EPStartXfer+0x636>
 80075f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007604:	f003 031f 	and.w	r3, r3, #31
 8007608:	2b00      	cmp	r3, #0
 800760a:	d104      	bne.n	8007616 <USB_EPStartXfer+0x58e>
 800760c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007610:	3b01      	subs	r3, #1
 8007612:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007616:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800761a:	b29b      	uxth	r3, r3
 800761c:	029b      	lsls	r3, r3, #10
 800761e:	b29b      	uxth	r3, r3
 8007620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007628:	b29a      	uxth	r2, r3
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	e042      	b.n	80076be <USB_EPStartXfer+0x636>
 8007638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d13a      	bne.n	80076be <USB_EPStartXfer+0x636>
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007650:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007654:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766a:	b29b      	uxth	r3, r3
 800766c:	4619      	mov	r1, r3
 800766e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007672:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007676:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800767a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800767e:	6812      	ldr	r2, [r2, #0]
 8007680:	440a      	add	r2, r1
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	011a      	lsls	r2, r3, #4
 8007692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007696:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4413      	add	r3, r2
 800769e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80076a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	891b      	ldrh	r3, [r3, #8]
 80076ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6959      	ldr	r1, [r3, #20]
 80076da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076de:	b29b      	uxth	r3, r3
 80076e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076ec:	6800      	ldr	r0, [r0, #0]
 80076ee:	f001 fc41 	bl	8008f74 <USB_WritePMA>
 80076f2:	f000 be0e 	b.w	8008312 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d16d      	bne.n	80077e2 <USB_EPStartXfer+0x75a>
 8007706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	64bb      	str	r3, [r7, #72]	; 0x48
 8007712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007716:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007720:	b29b      	uxth	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007726:	4413      	add	r3, r2
 8007728:	64bb      	str	r3, [r7, #72]	; 0x48
 800772a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	011a      	lsls	r2, r3, #4
 8007738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773a:	4413      	add	r3, r2
 800773c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007740:	647b      	str	r3, [r7, #68]	; 0x44
 8007742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007746:	2b00      	cmp	r3, #0
 8007748:	d112      	bne.n	8007770 <USB_EPStartXfer+0x6e8>
 800774a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	b29b      	uxth	r3, r3
 8007750:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007754:	b29a      	uxth	r2, r3
 8007756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007758:	801a      	strh	r2, [r3, #0]
 800775a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007768:	b29a      	uxth	r2, r3
 800776a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	e063      	b.n	8007838 <USB_EPStartXfer+0x7b0>
 8007770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007774:	2b3e      	cmp	r3, #62	; 0x3e
 8007776:	d817      	bhi.n	80077a8 <USB_EPStartXfer+0x720>
 8007778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777c:	085b      	lsrs	r3, r3, #1
 800777e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d004      	beq.n	8007798 <USB_EPStartXfer+0x710>
 800778e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007792:	3301      	adds	r3, #1
 8007794:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007798:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800779c:	b29b      	uxth	r3, r3
 800779e:	029b      	lsls	r3, r3, #10
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077a4:	801a      	strh	r2, [r3, #0]
 80077a6:	e047      	b.n	8007838 <USB_EPStartXfer+0x7b0>
 80077a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ac:	095b      	lsrs	r3, r3, #5
 80077ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80077b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d104      	bne.n	80077c8 <USB_EPStartXfer+0x740>
 80077be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077c2:	3b01      	subs	r3, #1
 80077c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80077c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	029b      	lsls	r3, r3, #10
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077da:	b29a      	uxth	r2, r3
 80077dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077de:	801a      	strh	r2, [r3, #0]
 80077e0:	e02a      	b.n	8007838 <USB_EPStartXfer+0x7b0>
 80077e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d122      	bne.n	8007838 <USB_EPStartXfer+0x7b0>
 80077f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	653b      	str	r3, [r7, #80]	; 0x50
 80077fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007802:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800780c:	b29b      	uxth	r3, r3
 800780e:	461a      	mov	r2, r3
 8007810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007812:	4413      	add	r3, r2
 8007814:	653b      	str	r3, [r7, #80]	; 0x50
 8007816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	011a      	lsls	r2, r3, #4
 8007824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007826:	4413      	add	r3, r2
 8007828:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800782c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800782e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007832:	b29a      	uxth	r2, r3
 8007834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007836:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	891b      	ldrh	r3, [r3, #8]
 8007844:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6959      	ldr	r1, [r3, #20]
 8007854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007858:	b29b      	uxth	r3, r3
 800785a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800785e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007862:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007866:	6800      	ldr	r0, [r0, #0]
 8007868:	f001 fb84 	bl	8008f74 <USB_WritePMA>
            ep->xfer_buff += len;
 800786c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	695a      	ldr	r2, [r3, #20]
 8007878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787c:	441a      	add	r2, r3
 800787e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800788a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6a1a      	ldr	r2, [r3, #32]
 8007896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d90f      	bls.n	80078c6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80078a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6a1a      	ldr	r2, [r3, #32]
 80078b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b6:	1ad2      	subs	r2, r2, r3
 80078b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	621a      	str	r2, [r3, #32]
 80078c4:	e00e      	b.n	80078e4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80078c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80078d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2200      	movs	r2, #0
 80078e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	643b      	str	r3, [r7, #64]	; 0x40
 80078f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	785b      	ldrb	r3, [r3, #1]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d16d      	bne.n	80079dc <USB_EPStartXfer+0x954>
 8007900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007904:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	63bb      	str	r3, [r7, #56]	; 0x38
 800790c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007910:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791a:	b29b      	uxth	r3, r3
 800791c:	461a      	mov	r2, r3
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	4413      	add	r3, r2
 8007922:	63bb      	str	r3, [r7, #56]	; 0x38
 8007924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	011a      	lsls	r2, r3, #4
 8007932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007934:	4413      	add	r3, r2
 8007936:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800793a:	637b      	str	r3, [r7, #52]	; 0x34
 800793c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007940:	2b00      	cmp	r3, #0
 8007942:	d112      	bne.n	800796a <USB_EPStartXfer+0x8e2>
 8007944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	b29b      	uxth	r3, r3
 800794a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800794e:	b29a      	uxth	r2, r3
 8007950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007952:	801a      	strh	r2, [r3, #0]
 8007954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b29b      	uxth	r3, r3
 800795a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800795e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007962:	b29a      	uxth	r2, r3
 8007964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	e05d      	b.n	8007a26 <USB_EPStartXfer+0x99e>
 800796a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796e:	2b3e      	cmp	r3, #62	; 0x3e
 8007970:	d817      	bhi.n	80079a2 <USB_EPStartXfer+0x91a>
 8007972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800797c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <USB_EPStartXfer+0x90a>
 8007988:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800798c:	3301      	adds	r3, #1
 800798e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007992:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007996:	b29b      	uxth	r3, r3
 8007998:	029b      	lsls	r3, r3, #10
 800799a:	b29a      	uxth	r2, r3
 800799c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799e:	801a      	strh	r2, [r3, #0]
 80079a0:	e041      	b.n	8007a26 <USB_EPStartXfer+0x99e>
 80079a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a6:	095b      	lsrs	r3, r3, #5
 80079a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80079ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b0:	f003 031f 	and.w	r3, r3, #31
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d104      	bne.n	80079c2 <USB_EPStartXfer+0x93a>
 80079b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80079bc:	3b01      	subs	r3, #1
 80079be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80079c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	029b      	lsls	r3, r3, #10
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e024      	b.n	8007a26 <USB_EPStartXfer+0x99e>
 80079dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	785b      	ldrb	r3, [r3, #1]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d11c      	bne.n	8007a26 <USB_EPStartXfer+0x99e>
 80079ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a00:	4413      	add	r3, r2
 8007a02:	643b      	str	r3, [r7, #64]	; 0x40
 8007a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	011a      	lsls	r2, r3, #4
 8007a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a14:	4413      	add	r3, r2
 8007a16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	895b      	ldrh	r3, [r3, #10]
 8007a32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6959      	ldr	r1, [r3, #20]
 8007a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a4c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a50:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a54:	6800      	ldr	r0, [r0, #0]
 8007a56:	f001 fa8d 	bl	8008f74 <USB_WritePMA>
 8007a5a:	f000 bc5a 	b.w	8008312 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a94:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	441a      	add	r2, r3
 8007ab2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ace:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ada:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aea:	4413      	add	r3, r2
 8007aec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	011a      	lsls	r2, r3, #4
 8007afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007afe:	4413      	add	r3, r2
 8007b00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b04:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	891b      	ldrh	r3, [r3, #8]
 8007b1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6959      	ldr	r1, [r3, #20]
 8007b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b36:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b3a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b3e:	6800      	ldr	r0, [r0, #0]
 8007b40:	f001 fa18 	bl	8008f74 <USB_WritePMA>
 8007b44:	e3e5      	b.n	8008312 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6a1a      	ldr	r2, [r3, #32]
 8007bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb2:	1ad2      	subs	r2, r2, r3
 8007bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 81bc 	beq.w	8007f60 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d16d      	bne.n	8007ce2 <USB_EPStartXfer+0xc5a>
 8007c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c26:	4413      	add	r3, r2
 8007c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	011a      	lsls	r2, r3, #4
 8007c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c40:	677b      	str	r3, [r7, #116]	; 0x74
 8007c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d112      	bne.n	8007c70 <USB_EPStartXfer+0xbe8>
 8007c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c58:	801a      	strh	r2, [r3, #0]
 8007c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c6c:	801a      	strh	r2, [r3, #0]
 8007c6e:	e060      	b.n	8007d32 <USB_EPStartXfer+0xcaa>
 8007c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c74:	2b3e      	cmp	r3, #62	; 0x3e
 8007c76:	d817      	bhi.n	8007ca8 <USB_EPStartXfer+0xc20>
 8007c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c7c:	085b      	lsrs	r3, r3, #1
 8007c7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d004      	beq.n	8007c98 <USB_EPStartXfer+0xc10>
 8007c8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c92:	3301      	adds	r3, #1
 8007c94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	029b      	lsls	r3, r3, #10
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	e044      	b.n	8007d32 <USB_EPStartXfer+0xcaa>
 8007ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb6:	f003 031f 	and.w	r3, r3, #31
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d104      	bne.n	8007cc8 <USB_EPStartXfer+0xc40>
 8007cbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007cc8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	029b      	lsls	r3, r3, #10
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cde:	801a      	strh	r2, [r3, #0]
 8007ce0:	e027      	b.n	8007d32 <USB_EPStartXfer+0xcaa>
 8007ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	785b      	ldrb	r3, [r3, #1]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d11f      	bne.n	8007d32 <USB_EPStartXfer+0xcaa>
 8007cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	461a      	mov	r2, r3
 8007d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d08:	4413      	add	r3, r2
 8007d0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	011a      	lsls	r2, r3, #4
 8007d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d20:	4413      	add	r3, r2
 8007d22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	895b      	ldrh	r3, [r3, #10]
 8007d3e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6959      	ldr	r1, [r3, #20]
 8007d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d58:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d5c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d60:	6800      	ldr	r0, [r0, #0]
 8007d62:	f001 f907 	bl	8008f74 <USB_WritePMA>
          ep->xfer_buff += len;
 8007d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695a      	ldr	r2, [r3, #20]
 8007d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d76:	441a      	add	r2, r3
 8007d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6a1a      	ldr	r2, [r3, #32]
 8007d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d90f      	bls.n	8007dc0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6a1a      	ldr	r2, [r3, #32]
 8007dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db0:	1ad2      	subs	r2, r2, r3
 8007db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	621a      	str	r2, [r3, #32]
 8007dbe:	e00e      	b.n	8007dde <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 8295 	beq.w	8008312 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	785b      	ldrb	r3, [r3, #1]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d16d      	bne.n	8007ed4 <USB_EPStartXfer+0xe4c>
 8007df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e18:	4413      	add	r3, r2
 8007e1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	011a      	lsls	r2, r3, #4
 8007e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e32:	667b      	str	r3, [r7, #100]	; 0x64
 8007e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d112      	bne.n	8007e62 <USB_EPStartXfer+0xdda>
 8007e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e4a:	801a      	strh	r2, [r3, #0]
 8007e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e5e:	801a      	strh	r2, [r3, #0]
 8007e60:	e063      	b.n	8007f2a <USB_EPStartXfer+0xea2>
 8007e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e66:	2b3e      	cmp	r3, #62	; 0x3e
 8007e68:	d817      	bhi.n	8007e9a <USB_EPStartXfer+0xe12>
 8007e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6e:	085b      	lsrs	r3, r3, #1
 8007e70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d004      	beq.n	8007e8a <USB_EPStartXfer+0xe02>
 8007e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e84:	3301      	adds	r3, #1
 8007e86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	029b      	lsls	r3, r3, #10
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e96:	801a      	strh	r2, [r3, #0]
 8007e98:	e047      	b.n	8007f2a <USB_EPStartXfer+0xea2>
 8007e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9e:	095b      	lsrs	r3, r3, #5
 8007ea0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea8:	f003 031f 	and.w	r3, r3, #31
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d104      	bne.n	8007eba <USB_EPStartXfer+0xe32>
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	029b      	lsls	r3, r3, #10
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ed0:	801a      	strh	r2, [r3, #0]
 8007ed2:	e02a      	b.n	8007f2a <USB_EPStartXfer+0xea2>
 8007ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	785b      	ldrb	r3, [r3, #1]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d122      	bne.n	8007f2a <USB_EPStartXfer+0xea2>
 8007ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	673b      	str	r3, [r7, #112]	; 0x70
 8007ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	461a      	mov	r2, r3
 8007f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f04:	4413      	add	r3, r2
 8007f06:	673b      	str	r3, [r7, #112]	; 0x70
 8007f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	011a      	lsls	r2, r3, #4
 8007f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f18:	4413      	add	r3, r2
 8007f1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	891b      	ldrh	r3, [r3, #8]
 8007f36:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6959      	ldr	r1, [r3, #20]
 8007f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f50:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f54:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f58:	6800      	ldr	r0, [r0, #0]
 8007f5a:	f001 f80b 	bl	8008f74 <USB_WritePMA>
 8007f5e:	e1d8      	b.n	8008312 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d178      	bne.n	8008062 <USB_EPStartXfer+0xfda>
 8007f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f94:	4413      	add	r3, r2
 8007f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	011a      	lsls	r2, r3, #4
 8007fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fac:	4413      	add	r3, r2
 8007fae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d116      	bne.n	8007fec <USB_EPStartXfer+0xf64>
 8007fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fd0:	801a      	strh	r2, [r3, #0]
 8007fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fe8:	801a      	strh	r2, [r3, #0]
 8007fea:	e06b      	b.n	80080c4 <USB_EPStartXfer+0x103c>
 8007fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8007ff2:	d818      	bhi.n	8008026 <USB_EPStartXfer+0xf9e>
 8007ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff8:	085b      	lsrs	r3, r3, #1
 8007ffa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d004      	beq.n	8008014 <USB_EPStartXfer+0xf8c>
 800800a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800800e:	3301      	adds	r3, #1
 8008010:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008014:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008018:	b29b      	uxth	r3, r3
 800801a:	029b      	lsls	r3, r3, #10
 800801c:	b29a      	uxth	r2, r3
 800801e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008022:	801a      	strh	r2, [r3, #0]
 8008024:	e04e      	b.n	80080c4 <USB_EPStartXfer+0x103c>
 8008026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008034:	f003 031f 	and.w	r3, r3, #31
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <USB_EPStartXfer+0xfbe>
 800803c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008040:	3b01      	subs	r3, #1
 8008042:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008046:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800804a:	b29b      	uxth	r3, r3
 800804c:	029b      	lsls	r3, r3, #10
 800804e:	b29b      	uxth	r3, r3
 8008050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008058:	b29a      	uxth	r2, r3
 800805a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800805e:	801a      	strh	r2, [r3, #0]
 8008060:	e030      	b.n	80080c4 <USB_EPStartXfer+0x103c>
 8008062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	785b      	ldrb	r3, [r3, #1]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d128      	bne.n	80080c4 <USB_EPStartXfer+0x103c>
 8008072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008084:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800808e:	b29b      	uxth	r3, r3
 8008090:	461a      	mov	r2, r3
 8008092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008096:	4413      	add	r3, r2
 8008098:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800809c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	011a      	lsls	r2, r3, #4
 80080aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80080ae:	4413      	add	r3, r2
 80080b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080bc:	b29a      	uxth	r2, r3
 80080be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	891b      	ldrh	r3, [r3, #8]
 80080d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6959      	ldr	r1, [r3, #20]
 80080e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80080ea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80080ee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80080f2:	6800      	ldr	r0, [r0, #0]
 80080f4:	f000 ff3e 	bl	8008f74 <USB_WritePMA>
          ep->xfer_buff += len;
 80080f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	695a      	ldr	r2, [r3, #20]
 8008104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008108:	441a      	add	r2, r3
 800810a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6a1a      	ldr	r2, [r3, #32]
 8008122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	429a      	cmp	r2, r3
 8008130:	d90f      	bls.n	8008152 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8008132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6a1a      	ldr	r2, [r3, #32]
 800813e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008142:	1ad2      	subs	r2, r2, r3
 8008144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	621a      	str	r2, [r3, #32]
 8008150:	e00e      	b.n	8008170 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8008152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008166:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2200      	movs	r2, #0
 800816e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 80cc 	beq.w	8008312 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800817a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	785b      	ldrb	r3, [r3, #1]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d178      	bne.n	800828a <USB_EPStartXfer+0x1202>
 8008198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800819c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	461a      	mov	r2, r3
 80081b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081bc:	4413      	add	r3, r2
 80081be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	011a      	lsls	r2, r3, #4
 80081d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081d4:	4413      	add	r3, r2
 80081d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d116      	bne.n	8008214 <USB_EPStartXfer+0x118c>
 80081e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	b29b      	uxth	r3, r3
 8008202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820a:	b29a      	uxth	r2, r3
 800820c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	e064      	b.n	80082de <USB_EPStartXfer+0x1256>
 8008214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008218:	2b3e      	cmp	r3, #62	; 0x3e
 800821a:	d818      	bhi.n	800824e <USB_EPStartXfer+0x11c6>
 800821c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008220:	085b      	lsrs	r3, r3, #1
 8008222:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d004      	beq.n	800823c <USB_EPStartXfer+0x11b4>
 8008232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008236:	3301      	adds	r3, #1
 8008238:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800823c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008240:	b29b      	uxth	r3, r3
 8008242:	029b      	lsls	r3, r3, #10
 8008244:	b29a      	uxth	r2, r3
 8008246:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800824a:	801a      	strh	r2, [r3, #0]
 800824c:	e047      	b.n	80082de <USB_EPStartXfer+0x1256>
 800824e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008252:	095b      	lsrs	r3, r3, #5
 8008254:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800825c:	f003 031f 	and.w	r3, r3, #31
 8008260:	2b00      	cmp	r3, #0
 8008262:	d104      	bne.n	800826e <USB_EPStartXfer+0x11e6>
 8008264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008268:	3b01      	subs	r3, #1
 800826a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800826e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008272:	b29b      	uxth	r3, r3
 8008274:	029b      	lsls	r3, r3, #10
 8008276:	b29b      	uxth	r3, r3
 8008278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800827c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008280:	b29a      	uxth	r2, r3
 8008282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008286:	801a      	strh	r2, [r3, #0]
 8008288:	e029      	b.n	80082de <USB_EPStartXfer+0x1256>
 800828a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800828e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d121      	bne.n	80082de <USB_EPStartXfer+0x1256>
 800829a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	461a      	mov	r2, r3
 80082ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082b0:	4413      	add	r3, r2
 80082b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	011a      	lsls	r2, r3, #4
 80082c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082c8:	4413      	add	r3, r2
 80082ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80082d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80082de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	895b      	ldrh	r3, [r3, #10]
 80082ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6959      	ldr	r1, [r3, #20]
 80082fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fe:	b29b      	uxth	r3, r3
 8008300:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008304:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008308:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800830c:	6800      	ldr	r0, [r0, #0]
 800830e:	f000 fe31 	bl	8008f74 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008334:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800833c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008340:	8013      	strh	r3, [r2, #0]
 8008342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008346:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800834a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800834e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008352:	8812      	ldrh	r2, [r2, #0]
 8008354:	f082 0210 	eor.w	r2, r2, #16
 8008358:	801a      	strh	r2, [r3, #0]
 800835a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800835e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008362:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008366:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800836a:	8812      	ldrh	r2, [r2, #0]
 800836c:	f082 0220 	eor.w	r2, r2, #32
 8008370:	801a      	strh	r2, [r3, #0]
 8008372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008376:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	441a      	add	r2, r3
 800838c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008390:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800839a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	8013      	strh	r3, [r2, #0]
 80083aa:	f000 bc9f 	b.w	8008cec <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80083ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	7b1b      	ldrb	r3, [r3, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 80ae 	bne.w	800851c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80083c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	699a      	ldr	r2, [r3, #24]
 80083cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d917      	bls.n	800840c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80083dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80083ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	699a      	ldr	r2, [r3, #24]
 80083f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fc:	1ad2      	subs	r2, r2, r3
 80083fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	619a      	str	r2, [r3, #24]
 800840a:	e00e      	b.n	800842a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800840c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800841c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2200      	movs	r2, #0
 8008428:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800842a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008446:	b29b      	uxth	r3, r3
 8008448:	461a      	mov	r2, r3
 800844a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800844e:	4413      	add	r3, r2
 8008450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	011a      	lsls	r2, r3, #4
 8008462:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008466:	4413      	add	r3, r2
 8008468:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800846c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008474:	2b00      	cmp	r3, #0
 8008476:	d116      	bne.n	80084a6 <USB_EPStartXfer+0x141e>
 8008478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008484:	b29a      	uxth	r2, r3
 8008486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800848a:	801a      	strh	r2, [r3, #0]
 800848c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	b29b      	uxth	r3, r3
 8008494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800849c:	b29a      	uxth	r2, r3
 800849e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	e3e8      	b.n	8008c78 <USB_EPStartXfer+0x1bf0>
 80084a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084aa:	2b3e      	cmp	r3, #62	; 0x3e
 80084ac:	d818      	bhi.n	80084e0 <USB_EPStartXfer+0x1458>
 80084ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d004      	beq.n	80084ce <USB_EPStartXfer+0x1446>
 80084c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084c8:	3301      	adds	r3, #1
 80084ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	029b      	lsls	r3, r3, #10
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	e3cb      	b.n	8008c78 <USB_EPStartXfer+0x1bf0>
 80084e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e4:	095b      	lsrs	r3, r3, #5
 80084e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ee:	f003 031f 	and.w	r3, r3, #31
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d104      	bne.n	8008500 <USB_EPStartXfer+0x1478>
 80084f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084fa:	3b01      	subs	r3, #1
 80084fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008500:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008504:	b29b      	uxth	r3, r3
 8008506:	029b      	lsls	r3, r3, #10
 8008508:	b29b      	uxth	r3, r3
 800850a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008512:	b29a      	uxth	r2, r3
 8008514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008518:	801a      	strh	r2, [r3, #0]
 800851a:	e3ad      	b.n	8008c78 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800851c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	78db      	ldrb	r3, [r3, #3]
 8008528:	2b02      	cmp	r3, #2
 800852a:	f040 8200 	bne.w	800892e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800852e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	785b      	ldrb	r3, [r3, #1]
 800853a:	2b00      	cmp	r3, #0
 800853c:	f040 8091 	bne.w	8008662 <USB_EPStartXfer+0x15da>
 8008540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800854e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008552:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800855c:	b29b      	uxth	r3, r3
 800855e:	461a      	mov	r2, r3
 8008560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008564:	4413      	add	r3, r2
 8008566:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800856a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800856e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	011a      	lsls	r2, r3, #4
 8008578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800857c:	4413      	add	r3, r2
 800857e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008582:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800858a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d116      	bne.n	80085c4 <USB_EPStartXfer+0x153c>
 8008596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	b29b      	uxth	r3, r3
 800859e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085c0:	801a      	strh	r2, [r3, #0]
 80085c2:	e083      	b.n	80086cc <USB_EPStartXfer+0x1644>
 80085c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	2b3e      	cmp	r3, #62	; 0x3e
 80085d2:	d820      	bhi.n	8008616 <USB_EPStartXfer+0x158e>
 80085d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	085b      	lsrs	r3, r3, #1
 80085e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d004      	beq.n	8008604 <USB_EPStartXfer+0x157c>
 80085fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085fe:	3301      	adds	r3, #1
 8008600:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008608:	b29b      	uxth	r3, r3
 800860a:	029b      	lsls	r3, r3, #10
 800860c:	b29a      	uxth	r2, r3
 800860e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008612:	801a      	strh	r2, [r3, #0]
 8008614:	e05a      	b.n	80086cc <USB_EPStartXfer+0x1644>
 8008616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	095b      	lsrs	r3, r3, #5
 8008624:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	f003 031f 	and.w	r3, r3, #31
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <USB_EPStartXfer+0x15be>
 800863c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008640:	3b01      	subs	r3, #1
 8008642:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864a:	b29b      	uxth	r3, r3
 800864c:	029b      	lsls	r3, r3, #10
 800864e:	b29b      	uxth	r3, r3
 8008650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008658:	b29a      	uxth	r2, r3
 800865a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800865e:	801a      	strh	r2, [r3, #0]
 8008660:	e034      	b.n	80086cc <USB_EPStartXfer+0x1644>
 8008662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	785b      	ldrb	r3, [r3, #1]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d12c      	bne.n	80086cc <USB_EPStartXfer+0x1644>
 8008672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800868e:	b29b      	uxth	r3, r3
 8008690:	461a      	mov	r2, r3
 8008692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008696:	4413      	add	r3, r2
 8008698:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800869c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	011a      	lsls	r2, r3, #4
 80086aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086ae:	4413      	add	r3, r2
 80086b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80086ca:	801a      	strh	r2, [r3, #0]
 80086cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f040 8091 	bne.w	800880e <USB_EPStartXfer+0x1786>
 80086ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80086fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008708:	b29b      	uxth	r3, r3
 800870a:	461a      	mov	r2, r3
 800870c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008710:	4413      	add	r3, r2
 8008712:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	011a      	lsls	r2, r3, #4
 8008724:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008728:	4413      	add	r3, r2
 800872a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800872e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d116      	bne.n	8008770 <USB_EPStartXfer+0x16e8>
 8008742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	b29b      	uxth	r3, r3
 800874a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800874e:	b29a      	uxth	r2, r3
 8008750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008754:	801a      	strh	r2, [r3, #0]
 8008756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	b29b      	uxth	r3, r3
 800875e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008766:	b29a      	uxth	r2, r3
 8008768:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800876c:	801a      	strh	r2, [r3, #0]
 800876e:	e07c      	b.n	800886a <USB_EPStartXfer+0x17e2>
 8008770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	2b3e      	cmp	r3, #62	; 0x3e
 800877e:	d820      	bhi.n	80087c2 <USB_EPStartXfer+0x173a>
 8008780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d004      	beq.n	80087b0 <USB_EPStartXfer+0x1728>
 80087a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087aa:	3301      	adds	r3, #1
 80087ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	029b      	lsls	r3, r3, #10
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087be:	801a      	strh	r2, [r3, #0]
 80087c0:	e053      	b.n	800886a <USB_EPStartXfer+0x17e2>
 80087c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	095b      	lsrs	r3, r3, #5
 80087d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	f003 031f 	and.w	r3, r3, #31
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d104      	bne.n	80087f2 <USB_EPStartXfer+0x176a>
 80087e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087ec:	3b01      	subs	r3, #1
 80087ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	029b      	lsls	r3, r3, #10
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008804:	b29a      	uxth	r2, r3
 8008806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800880a:	801a      	strh	r2, [r3, #0]
 800880c:	e02d      	b.n	800886a <USB_EPStartXfer+0x17e2>
 800880e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d125      	bne.n	800886a <USB_EPStartXfer+0x17e2>
 800881e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008822:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800882c:	b29b      	uxth	r3, r3
 800882e:	461a      	mov	r2, r3
 8008830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008834:	4413      	add	r3, r2
 8008836:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800883a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800883e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	011a      	lsls	r2, r3, #4
 8008848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800884c:	4413      	add	r3, r2
 800884e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008852:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	b29a      	uxth	r2, r3
 8008864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008868:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800886a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800886e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 81fe 	beq.w	8008c78 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800887c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008880:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800889c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <USB_EPStartXfer+0x182c>
 80088a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10d      	bne.n	80088d0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f040 81db 	bne.w	8008c78 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088c2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f040 81d4 	bne.w	8008c78 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80088d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80088fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	441a      	add	r2, r3
 8008914:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800891c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008924:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008928:	b29b      	uxth	r3, r3
 800892a:	8013      	strh	r3, [r2, #0]
 800892c:	e1a4      	b.n	8008c78 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800892e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	78db      	ldrb	r3, [r3, #3]
 800893a:	2b01      	cmp	r3, #1
 800893c:	f040 819a 	bne.w	8008c74 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	699a      	ldr	r2, [r3, #24]
 800894c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	429a      	cmp	r2, r3
 800895a:	d917      	bls.n	800898c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800895c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800896c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	699a      	ldr	r2, [r3, #24]
 8008978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800897c:	1ad2      	subs	r2, r2, r3
 800897e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	619a      	str	r2, [r3, #24]
 800898a:	e00e      	b.n	80089aa <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800898c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800899c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2200      	movs	r2, #0
 80089a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80089aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	785b      	ldrb	r3, [r3, #1]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d178      	bne.n	8008aac <USB_EPStartXfer+0x1a24>
 80089ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	461a      	mov	r2, r3
 80089da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089de:	4413      	add	r3, r2
 80089e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	011a      	lsls	r2, r3, #4
 80089f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089f6:	4413      	add	r3, r2
 80089f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d116      	bne.n	8008a36 <USB_EPStartXfer+0x19ae>
 8008a08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a1a:	801a      	strh	r2, [r3, #0]
 8008a1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a32:	801a      	strh	r2, [r3, #0]
 8008a34:	e06b      	b.n	8008b0e <USB_EPStartXfer+0x1a86>
 8008a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a3a:	2b3e      	cmp	r3, #62	; 0x3e
 8008a3c:	d818      	bhi.n	8008a70 <USB_EPStartXfer+0x19e8>
 8008a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a42:	085b      	lsrs	r3, r3, #1
 8008a44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d004      	beq.n	8008a5e <USB_EPStartXfer+0x19d6>
 8008a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a58:	3301      	adds	r3, #1
 8008a5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	029b      	lsls	r3, r3, #10
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a6c:	801a      	strh	r2, [r3, #0]
 8008a6e:	e04e      	b.n	8008b0e <USB_EPStartXfer+0x1a86>
 8008a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a74:	095b      	lsrs	r3, r3, #5
 8008a76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a7e:	f003 031f 	and.w	r3, r3, #31
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d104      	bne.n	8008a90 <USB_EPStartXfer+0x1a08>
 8008a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	029b      	lsls	r3, r3, #10
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aa8:	801a      	strh	r2, [r3, #0]
 8008aaa:	e030      	b.n	8008b0e <USB_EPStartXfer+0x1a86>
 8008aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	785b      	ldrb	r3, [r3, #1]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d128      	bne.n	8008b0e <USB_EPStartXfer+0x1a86>
 8008abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ace:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	461a      	mov	r2, r3
 8008adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	011a      	lsls	r2, r3, #4
 8008af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af8:	4413      	add	r3, r2
 8008afa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008afe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b0c:	801a      	strh	r2, [r3, #0]
 8008b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	785b      	ldrb	r3, [r3, #1]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d178      	bne.n	8008c1e <USB_EPStartXfer+0x1b96>
 8008b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b50:	4413      	add	r3, r2
 8008b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	011a      	lsls	r2, r3, #4
 8008b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b68:	4413      	add	r3, r2
 8008b6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d116      	bne.n	8008ba8 <USB_EPStartXfer+0x1b20>
 8008b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b8c:	801a      	strh	r2, [r3, #0]
 8008b8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ba4:	801a      	strh	r2, [r3, #0]
 8008ba6:	e067      	b.n	8008c78 <USB_EPStartXfer+0x1bf0>
 8008ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bac:	2b3e      	cmp	r3, #62	; 0x3e
 8008bae:	d818      	bhi.n	8008be2 <USB_EPStartXfer+0x1b5a>
 8008bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <USB_EPStartXfer+0x1b48>
 8008bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008bca:	3301      	adds	r3, #1
 8008bcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008bd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	029b      	lsls	r3, r3, #10
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bde:	801a      	strh	r2, [r3, #0]
 8008be0:	e04a      	b.n	8008c78 <USB_EPStartXfer+0x1bf0>
 8008be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008be6:	095b      	lsrs	r3, r3, #5
 8008be8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bf0:	f003 031f 	and.w	r3, r3, #31
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d104      	bne.n	8008c02 <USB_EPStartXfer+0x1b7a>
 8008bf8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	029b      	lsls	r3, r3, #10
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c1a:	801a      	strh	r2, [r3, #0]
 8008c1c:	e02c      	b.n	8008c78 <USB_EPStartXfer+0x1bf0>
 8008c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d124      	bne.n	8008c78 <USB_EPStartXfer+0x1bf0>
 8008c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c44:	4413      	add	r3, r2
 8008c46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	011a      	lsls	r2, r3, #4
 8008c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c70:	801a      	strh	r2, [r3, #0]
 8008c72:	e001      	b.n	8008c78 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e03a      	b.n	8008cee <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4413      	add	r3, r2
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ca2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ca6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008caa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008cae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008cb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cb6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	441a      	add	r2, r3
 8008cd4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	785b      	ldrb	r3, [r3, #1]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d020      	beq.n	8008d4c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d20:	81bb      	strh	r3, [r7, #12]
 8008d22:	89bb      	ldrh	r3, [r7, #12]
 8008d24:	f083 0310 	eor.w	r3, r3, #16
 8008d28:	81bb      	strh	r3, [r7, #12]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	441a      	add	r2, r3
 8008d34:	89bb      	ldrh	r3, [r7, #12]
 8008d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	8013      	strh	r3, [r2, #0]
 8008d4a:	e01f      	b.n	8008d8c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d62:	81fb      	strh	r3, [r7, #14]
 8008d64:	89fb      	ldrh	r3, [r7, #14]
 8008d66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d6a:	81fb      	strh	r3, [r7, #14]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	441a      	add	r2, r3
 8008d76:	89fb      	ldrh	r3, [r7, #14]
 8008d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bc80      	pop	{r7}
 8008d96:	4770      	bx	lr

08008d98 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	7b1b      	ldrb	r3, [r3, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f040 809d 	bne.w	8008ee6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	785b      	ldrb	r3, [r3, #1]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d04c      	beq.n	8008e4e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	823b      	strh	r3, [r7, #16]
 8008dc2:	8a3b      	ldrh	r3, [r7, #16]
 8008dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d01b      	beq.n	8008e04 <USB_EPClearStall+0x6c>
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de2:	81fb      	strh	r3, [r7, #14]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	441a      	add	r2, r3
 8008dee:	89fb      	ldrh	r3, [r7, #14]
 8008df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	78db      	ldrb	r3, [r3, #3]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d06c      	beq.n	8008ee6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e22:	81bb      	strh	r3, [r7, #12]
 8008e24:	89bb      	ldrh	r3, [r7, #12]
 8008e26:	f083 0320 	eor.w	r3, r3, #32
 8008e2a:	81bb      	strh	r3, [r7, #12]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	441a      	add	r2, r3
 8008e36:	89bb      	ldrh	r3, [r7, #12]
 8008e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	8013      	strh	r3, [r2, #0]
 8008e4c:	e04b      	b.n	8008ee6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	82fb      	strh	r3, [r7, #22]
 8008e5c:	8afb      	ldrh	r3, [r7, #22]
 8008e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d01b      	beq.n	8008e9e <USB_EPClearStall+0x106>
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e7c:	82bb      	strh	r3, [r7, #20]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	441a      	add	r2, r3
 8008e88:	8abb      	ldrh	r3, [r7, #20]
 8008e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb4:	827b      	strh	r3, [r7, #18]
 8008eb6:	8a7b      	ldrh	r3, [r7, #18]
 8008eb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ebc:	827b      	strh	r3, [r7, #18]
 8008ebe:	8a7b      	ldrh	r3, [r7, #18]
 8008ec0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ec4:	827b      	strh	r3, [r7, #18]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	441a      	add	r2, r3
 8008ed0:	8a7b      	ldrh	r3, [r7, #18]
 8008ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	371c      	adds	r7, #28
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bc80      	pop	{r7}
 8008ef0:	4770      	bx	lr

08008ef2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	460b      	mov	r3, r1
 8008efc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008efe:	78fb      	ldrb	r3, [r7, #3]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d103      	bne.n	8008f0c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2280      	movs	r2, #128	; 0x80
 8008f08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bc80      	pop	{r7}
 8008f16:	4770      	bx	lr

08008f18 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bc80      	pop	{r7}
 8008f2a:	4770      	bx	lr

08008f2c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bc80      	pop	{r7}
 8008f3e:	4770      	bx	lr

08008f40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f52:	68fb      	ldr	r3, [r7, #12]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bc80      	pop	{r7}
 8008f5c:	4770      	bx	lr

08008f5e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bc80      	pop	{r7}
 8008f72:	4770      	bx	lr

08008f74 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b08d      	sub	sp, #52	; 0x34
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	4611      	mov	r1, r2
 8008f80:	461a      	mov	r2, r3
 8008f82:	460b      	mov	r3, r1
 8008f84:	80fb      	strh	r3, [r7, #6]
 8008f86:	4613      	mov	r3, r2
 8008f88:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f8a:	88bb      	ldrh	r3, [r7, #4]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	085b      	lsrs	r3, r3, #1
 8008f90:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f9a:	88fb      	ldrh	r3, [r7, #6]
 8008f9c:	005a      	lsls	r2, r3, #1
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fa6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fac:	e01e      	b.n	8008fec <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	021b      	lsls	r3, r3, #8
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd6:	3302      	adds	r3, #2
 8008fd8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fdc:	3302      	adds	r3, #2
 8008fde:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1dd      	bne.n	8008fae <USB_WritePMA+0x3a>
  }
}
 8008ff2:	bf00      	nop
 8008ff4:	bf00      	nop
 8008ff6:	3734      	adds	r7, #52	; 0x34
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bc80      	pop	{r7}
 8008ffc:	4770      	bx	lr

08008ffe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b08b      	sub	sp, #44	; 0x2c
 8009002:	af00      	add	r7, sp, #0
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	4611      	mov	r1, r2
 800900a:	461a      	mov	r2, r3
 800900c:	460b      	mov	r3, r1
 800900e:	80fb      	strh	r3, [r7, #6]
 8009010:	4613      	mov	r3, r2
 8009012:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009014:	88bb      	ldrh	r3, [r7, #4]
 8009016:	085b      	lsrs	r3, r3, #1
 8009018:	b29b      	uxth	r3, r3
 800901a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009024:	88fb      	ldrh	r3, [r7, #6]
 8009026:	005a      	lsls	r2, r3, #1
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009030:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	627b      	str	r3, [r7, #36]	; 0x24
 8009036:	e01b      	b.n	8009070 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	b29b      	uxth	r3, r3
 800903e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	3302      	adds	r3, #2
 8009044:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	b2da      	uxtb	r2, r3
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	3301      	adds	r3, #1
 8009052:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	0a1b      	lsrs	r3, r3, #8
 8009058:	b2da      	uxtb	r2, r3
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	3301      	adds	r3, #1
 8009062:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	3302      	adds	r3, #2
 8009068:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	3b01      	subs	r3, #1
 800906e:	627b      	str	r3, [r7, #36]	; 0x24
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e0      	bne.n	8009038 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009076:	88bb      	ldrh	r3, [r7, #4]
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	b29b      	uxth	r3, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d007      	beq.n	8009092 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	b29b      	uxth	r3, r3
 8009088:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	b2da      	uxtb	r2, r3
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	701a      	strb	r2, [r3, #0]
  }
}
 8009092:	bf00      	nop
 8009094:	372c      	adds	r7, #44	; 0x2c
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr

0800909c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	7c1b      	ldrb	r3, [r3, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d115      	bne.n	80090e0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090b8:	2202      	movs	r2, #2
 80090ba:	2181      	movs	r1, #129	; 0x81
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f001 fea2 	bl	800ae06 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090cc:	2202      	movs	r2, #2
 80090ce:	2101      	movs	r1, #1
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 fe98 	bl	800ae06 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80090de:	e012      	b.n	8009106 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090e0:	2340      	movs	r3, #64	; 0x40
 80090e2:	2202      	movs	r2, #2
 80090e4:	2181      	movs	r1, #129	; 0x81
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 fe8d 	bl	800ae06 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090f2:	2340      	movs	r3, #64	; 0x40
 80090f4:	2202      	movs	r2, #2
 80090f6:	2101      	movs	r1, #1
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f001 fe84 	bl	800ae06 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009106:	2308      	movs	r3, #8
 8009108:	2203      	movs	r2, #3
 800910a:	2182      	movs	r1, #130	; 0x82
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 fe7a 	bl	800ae06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009118:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800911c:	f001 ff9a 	bl	800b054 <USBD_static_malloc>
 8009120:	4602      	mov	r2, r0
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009132:	2301      	movs	r3, #1
 8009134:	73fb      	strb	r3, [r7, #15]
 8009136:	e026      	b.n	8009186 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800913e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2200      	movs	r2, #0
 800914e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2200      	movs	r2, #0
 8009156:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	7c1b      	ldrb	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d109      	bne.n	8009176 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800916c:	2101      	movs	r1, #1
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f001 ff3a 	bl	800afe8 <USBD_LL_PrepareReceive>
 8009174:	e007      	b.n	8009186 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800917c:	2340      	movs	r3, #64	; 0x40
 800917e:	2101      	movs	r1, #1
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 ff31 	bl	800afe8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009186:	7bfb      	ldrb	r3, [r7, #15]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	460b      	mov	r3, r1
 800919a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80091a0:	2181      	movs	r1, #129	; 0x81
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f001 fe55 	bl	800ae52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80091ae:	2101      	movs	r1, #1
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f001 fe4e 	bl	800ae52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80091be:	2182      	movs	r1, #130	; 0x82
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f001 fe46 	bl	800ae52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00e      	beq.n	80091f4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 ff40 	bl	800b06c <USBD_static_free>
    pdev->pClassData = NULL;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b086      	sub	sp, #24
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009224:	2b00      	cmp	r3, #0
 8009226:	d039      	beq.n	800929c <USBD_CDC_Setup+0x9e>
 8009228:	2b20      	cmp	r3, #32
 800922a:	d17f      	bne.n	800932c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	88db      	ldrh	r3, [r3, #6]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d029      	beq.n	8009288 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	b25b      	sxtb	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	da11      	bge.n	8009262 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800924a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	88d2      	ldrh	r2, [r2, #6]
 8009250:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009252:	6939      	ldr	r1, [r7, #16]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	88db      	ldrh	r3, [r3, #6]
 8009258:	461a      	mov	r2, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f001 fa09 	bl	800a672 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009260:	e06b      	b.n	800933a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	785a      	ldrb	r2, [r3, #1]
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	88db      	ldrh	r3, [r3, #6]
 8009270:	b2da      	uxtb	r2, r3
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009278:	6939      	ldr	r1, [r7, #16]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	88db      	ldrh	r3, [r3, #6]
 800927e:	461a      	mov	r2, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f001 fa24 	bl	800a6ce <USBD_CtlPrepareRx>
      break;
 8009286:	e058      	b.n	800933a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	7850      	ldrb	r0, [r2, #1]
 8009294:	2200      	movs	r2, #0
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	4798      	blx	r3
      break;
 800929a:	e04e      	b.n	800933a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	785b      	ldrb	r3, [r3, #1]
 80092a0:	2b0b      	cmp	r3, #11
 80092a2:	d02e      	beq.n	8009302 <USBD_CDC_Setup+0x104>
 80092a4:	2b0b      	cmp	r3, #11
 80092a6:	dc38      	bgt.n	800931a <USBD_CDC_Setup+0x11c>
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <USBD_CDC_Setup+0xb4>
 80092ac:	2b0a      	cmp	r3, #10
 80092ae:	d014      	beq.n	80092da <USBD_CDC_Setup+0xdc>
 80092b0:	e033      	b.n	800931a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d107      	bne.n	80092cc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80092bc:	f107 030c 	add.w	r3, r7, #12
 80092c0:	2202      	movs	r2, #2
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f001 f9d4 	bl	800a672 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092ca:	e02e      	b.n	800932a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f001 f965 	bl	800a59e <USBD_CtlError>
            ret = USBD_FAIL;
 80092d4:	2302      	movs	r3, #2
 80092d6:	75fb      	strb	r3, [r7, #23]
          break;
 80092d8:	e027      	b.n	800932a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d107      	bne.n	80092f4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80092e4:	f107 030f 	add.w	r3, r7, #15
 80092e8:	2201      	movs	r2, #1
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f001 f9c0 	bl	800a672 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092f2:	e01a      	b.n	800932a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 f951 	bl	800a59e <USBD_CtlError>
            ret = USBD_FAIL;
 80092fc:	2302      	movs	r3, #2
 80092fe:	75fb      	strb	r3, [r7, #23]
          break;
 8009300:	e013      	b.n	800932a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009308:	2b03      	cmp	r3, #3
 800930a:	d00d      	beq.n	8009328 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 f945 	bl	800a59e <USBD_CtlError>
            ret = USBD_FAIL;
 8009314:	2302      	movs	r3, #2
 8009316:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009318:	e006      	b.n	8009328 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f001 f93e 	bl	800a59e <USBD_CtlError>
          ret = USBD_FAIL;
 8009322:	2302      	movs	r3, #2
 8009324:	75fb      	strb	r3, [r7, #23]
          break;
 8009326:	e000      	b.n	800932a <USBD_CDC_Setup+0x12c>
          break;
 8009328:	bf00      	nop
      }
      break;
 800932a:	e006      	b.n	800933a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f001 f935 	bl	800a59e <USBD_CtlError>
      ret = USBD_FAIL;
 8009334:	2302      	movs	r3, #2
 8009336:	75fb      	strb	r3, [r7, #23]
      break;
 8009338:	bf00      	nop
  }

  return ret;
 800933a:	7dfb      	ldrb	r3, [r7, #23]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009356:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800935e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009366:	2b00      	cmp	r3, #0
 8009368:	d03a      	beq.n	80093e0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800936a:	78fa      	ldrb	r2, [r7, #3]
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	440b      	add	r3, r1
 8009378:	331c      	adds	r3, #28
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d029      	beq.n	80093d4 <USBD_CDC_DataIn+0x90>
 8009380:	78fa      	ldrb	r2, [r7, #3]
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	4613      	mov	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	440b      	add	r3, r1
 800938e:	331c      	adds	r3, #28
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	78f9      	ldrb	r1, [r7, #3]
 8009394:	68b8      	ldr	r0, [r7, #8]
 8009396:	460b      	mov	r3, r1
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	440b      	add	r3, r1
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	4403      	add	r3, r0
 80093a0:	3338      	adds	r3, #56	; 0x38
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80093a8:	fb01 f303 	mul.w	r3, r1, r3
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d110      	bne.n	80093d4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80093b2:	78fa      	ldrb	r2, [r7, #3]
 80093b4:	6879      	ldr	r1, [r7, #4]
 80093b6:	4613      	mov	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	440b      	add	r3, r1
 80093c0:	331c      	adds	r3, #28
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80093c6:	78f9      	ldrb	r1, [r7, #3]
 80093c8:	2300      	movs	r3, #0
 80093ca:	2200      	movs	r2, #0
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 fde8 	bl	800afa2 <USBD_LL_Transmit>
 80093d2:	e003      	b.n	80093dc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	e000      	b.n	80093e2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80093e0:	2302      	movs	r3, #2
  }
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	460b      	mov	r3, r1
 80093f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80093fe:	78fb      	ldrb	r3, [r7, #3]
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f001 fe13 	bl	800b02e <USBD_LL_GetRxDataSize>
 8009408:	4602      	mov	r2, r0
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00d      	beq.n	8009436 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800942e:	4611      	mov	r1, r2
 8009430:	4798      	blx	r3

    return USBD_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	e000      	b.n	8009438 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009436:	2302      	movs	r3, #2
  }
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800944e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009456:	2b00      	cmp	r3, #0
 8009458:	d015      	beq.n	8009486 <USBD_CDC_EP0_RxReady+0x46>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009460:	2bff      	cmp	r3, #255	; 0xff
 8009462:	d010      	beq.n	8009486 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009472:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800947a:	b292      	uxth	r2, r2
 800947c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	22ff      	movs	r2, #255	; 0xff
 8009482:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2243      	movs	r2, #67	; 0x43
 800949c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800949e:	4b03      	ldr	r3, [pc, #12]	; (80094ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bc80      	pop	{r7}
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	2000009c 	.word	0x2000009c

080094b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2243      	movs	r2, #67	; 0x43
 80094bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80094be:	4b03      	ldr	r3, [pc, #12]	; (80094cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bc80      	pop	{r7}
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	20000058 	.word	0x20000058

080094d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2243      	movs	r2, #67	; 0x43
 80094dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80094de:	4b03      	ldr	r3, [pc, #12]	; (80094ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bc80      	pop	{r7}
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	200000e0 	.word	0x200000e0

080094f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	220a      	movs	r2, #10
 80094fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80094fe:	4b03      	ldr	r3, [pc, #12]	; (800950c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20000014 	.word	0x20000014

08009510 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800951a:	2302      	movs	r3, #2
 800951c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d005      	beq.n	8009530 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr

0800953c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009550:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800955a:	88fa      	ldrh	r2, [r7, #6]
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	371c      	adds	r7, #28
 8009568:	46bd      	mov	sp, r7
 800956a:	bc80      	pop	{r7}
 800956c:	4770      	bx	lr

0800956e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800956e:	b480      	push	{r7}
 8009570:	b085      	sub	sp, #20
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800957e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	bc80      	pop	{r7}
 8009592:	4770      	bx	lr

08009594 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d01c      	beq.n	80095e8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d115      	bne.n	80095e4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	2181      	movs	r1, #129	; 0x81
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f001 fce1 	bl	800afa2 <USBD_LL_Transmit>

      return USBD_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	e002      	b.n	80095ea <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e000      	b.n	80095ea <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80095e8:	2302      	movs	r3, #2
  }
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009600:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009608:	2b00      	cmp	r3, #0
 800960a:	d017      	beq.n	800963c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	7c1b      	ldrb	r3, [r3, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d109      	bne.n	8009628 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800961a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800961e:	2101      	movs	r1, #1
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f001 fce1 	bl	800afe8 <USBD_LL_PrepareReceive>
 8009626:	e007      	b.n	8009638 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800962e:	2340      	movs	r3, #64	; 0x40
 8009630:	2101      	movs	r1, #1
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 fcd8 	bl	800afe8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	e000      	b.n	800963e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800963c:	2302      	movs	r3, #2
  }
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	60f8      	str	r0, [r7, #12]
 800964e:	60b9      	str	r1, [r7, #8]
 8009650:	4613      	mov	r3, r2
 8009652:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d101      	bne.n	800965e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800965a:	2302      	movs	r3, #2
 800965c:	e01a      	b.n	8009694 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d003      	beq.n	8009670 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	79fa      	ldrb	r2, [r7, #7]
 800968a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f001 fb45 	bl	800ad1c <USBD_LL_Init>

  return USBD_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d006      	beq.n	80096be <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73fb      	strb	r3, [r7, #15]
 80096bc:	e001      	b.n	80096c2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80096be:	2302      	movs	r3, #2
 80096c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bc80      	pop	{r7}
 80096cc:	4770      	bx	lr

080096ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f001 fb7a 	bl	800add0 <USBD_LL_Start>

  return USBD_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bc80      	pop	{r7}
 80096f8:	4770      	bx	lr

080096fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	460b      	mov	r3, r1
 8009704:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009706:	2302      	movs	r3, #2
 8009708:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00c      	beq.n	800972e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	78fa      	ldrb	r2, [r7, #3]
 800971e:	4611      	mov	r1, r2
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	4798      	blx	r3
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800972e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	78fa      	ldrb	r2, [r7, #3]
 800974e:	4611      	mov	r1, r2
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	4798      	blx	r3

  return USBD_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b082      	sub	sp, #8
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	4618      	mov	r0, r3
 8009772:	f000 fed8 	bl	800a526 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2201      	movs	r2, #1
 800977a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009784:	461a      	mov	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009792:	f003 031f 	and.w	r3, r3, #31
 8009796:	2b02      	cmp	r3, #2
 8009798:	d016      	beq.n	80097c8 <USBD_LL_SetupStage+0x6a>
 800979a:	2b02      	cmp	r3, #2
 800979c:	d81c      	bhi.n	80097d8 <USBD_LL_SetupStage+0x7a>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <USBD_LL_SetupStage+0x4a>
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d008      	beq.n	80097b8 <USBD_LL_SetupStage+0x5a>
 80097a6:	e017      	b.n	80097d8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f9cb 	bl	8009b4c <USBD_StdDevReq>
      break;
 80097b6:	e01a      	b.n	80097ee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fa2d 	bl	8009c20 <USBD_StdItfReq>
      break;
 80097c6:	e012      	b.n	80097ee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fa6d 	bl	8009cb0 <USBD_StdEPReq>
      break;
 80097d6:	e00a      	b.n	80097ee <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80097de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f001 fb52 	bl	800ae90 <USBD_LL_StallEP>
      break;
 80097ec:	bf00      	nop
  }

  return USBD_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	460b      	mov	r3, r1
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009806:	7afb      	ldrb	r3, [r7, #11]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d14b      	bne.n	80098a4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009812:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800981a:	2b03      	cmp	r3, #3
 800981c:	d134      	bne.n	8009888 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	429a      	cmp	r2, r3
 8009828:	d919      	bls.n	800985e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	68da      	ldr	r2, [r3, #12]
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	1ad2      	subs	r2, r2, r3
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009840:	429a      	cmp	r2, r3
 8009842:	d203      	bcs.n	800984c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009848:	b29b      	uxth	r3, r3
 800984a:	e002      	b.n	8009852 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009850:	b29b      	uxth	r3, r3
 8009852:	461a      	mov	r2, r3
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 ff57 	bl	800a70a <USBD_CtlContinueRx>
 800985c:	e038      	b.n	80098d0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009870:	2b03      	cmp	r3, #3
 8009872:	d105      	bne.n	8009880 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f000 ff54 	bl	800a72e <USBD_CtlSendStatus>
 8009886:	e023      	b.n	80098d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800988e:	2b05      	cmp	r3, #5
 8009890:	d11e      	bne.n	80098d0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800989a:	2100      	movs	r1, #0
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f001 faf7 	bl	800ae90 <USBD_LL_StallEP>
 80098a2:	e015      	b.n	80098d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00d      	beq.n	80098cc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d108      	bne.n	80098cc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	7afa      	ldrb	r2, [r7, #11]
 80098c4:	4611      	mov	r1, r2
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	4798      	blx	r3
 80098ca:	e001      	b.n	80098d0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80098cc:	2302      	movs	r3, #2
 80098ce:	e000      	b.n	80098d2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b086      	sub	sp, #24
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	460b      	mov	r3, r1
 80098e4:	607a      	str	r2, [r7, #4]
 80098e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80098e8:	7afb      	ldrb	r3, [r7, #11]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d17f      	bne.n	80099ee <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3314      	adds	r3, #20
 80098f2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d15c      	bne.n	80099b8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	68da      	ldr	r2, [r3, #12]
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	429a      	cmp	r2, r3
 8009908:	d915      	bls.n	8009936 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	68da      	ldr	r2, [r3, #12]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	1ad2      	subs	r2, r2, r3
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	b29b      	uxth	r3, r3
 800991e:	461a      	mov	r2, r3
 8009920:	6879      	ldr	r1, [r7, #4]
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 fec1 	bl	800a6aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009928:	2300      	movs	r3, #0
 800992a:	2200      	movs	r2, #0
 800992c:	2100      	movs	r1, #0
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f001 fb5a 	bl	800afe8 <USBD_LL_PrepareReceive>
 8009934:	e04e      	b.n	80099d4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	6912      	ldr	r2, [r2, #16]
 800993e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009942:	fb01 f202 	mul.w	r2, r1, r2
 8009946:	1a9b      	subs	r3, r3, r2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d11c      	bne.n	8009986 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	689a      	ldr	r2, [r3, #8]
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009954:	429a      	cmp	r2, r3
 8009956:	d316      	bcc.n	8009986 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	689a      	ldr	r2, [r3, #8]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009962:	429a      	cmp	r2, r3
 8009964:	d20f      	bcs.n	8009986 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009966:	2200      	movs	r2, #0
 8009968:	2100      	movs	r1, #0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fe9d 	bl	800a6aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009978:	2300      	movs	r3, #0
 800997a:	2200      	movs	r2, #0
 800997c:	2100      	movs	r1, #0
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f001 fb32 	bl	800afe8 <USBD_LL_PrepareReceive>
 8009984:	e026      	b.n	80099d4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00a      	beq.n	80099a8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009998:	2b03      	cmp	r3, #3
 800999a:	d105      	bne.n	80099a8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80099a8:	2180      	movs	r1, #128	; 0x80
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f001 fa70 	bl	800ae90 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 fecf 	bl	800a754 <USBD_CtlReceiveStatus>
 80099b6:	e00d      	b.n	80099d4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099be:	2b04      	cmp	r3, #4
 80099c0:	d004      	beq.n	80099cc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d103      	bne.n	80099d4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80099cc:	2180      	movs	r1, #128	; 0x80
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f001 fa5e 	bl	800ae90 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d11d      	bne.n	8009a1a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f7ff fe81 	bl	80096e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80099ec:	e015      	b.n	8009a1a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00d      	beq.n	8009a16 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d108      	bne.n	8009a16 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	7afa      	ldrb	r2, [r7, #11]
 8009a0e:	4611      	mov	r1, r2
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	4798      	blx	r3
 8009a14:	e001      	b.n	8009a1a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009a16:	2302      	movs	r3, #2
 8009a18:	e000      	b.n	8009a1c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a2c:	2340      	movs	r3, #64	; 0x40
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2100      	movs	r1, #0
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f001 f9e7 	bl	800ae06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2240      	movs	r2, #64	; 0x40
 8009a44:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a48:	2340      	movs	r3, #64	; 0x40
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	2180      	movs	r1, #128	; 0x80
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f001 f9d9 	bl	800ae06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2240      	movs	r2, #64	; 0x40
 8009a5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d009      	beq.n	8009a9c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	6852      	ldr	r2, [r2, #4]
 8009a94:	b2d2      	uxtb	r2, r2
 8009a96:	4611      	mov	r1, r2
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	4798      	blx	r3
  }

  return USBD_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b083      	sub	sp, #12
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	78fa      	ldrb	r2, [r7, #3]
 8009ab6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bc80      	pop	{r7}
 8009ac2:	4770      	bx	lr

08009ac4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2204      	movs	r2, #4
 8009adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bc80      	pop	{r7}
 8009aea:	4770      	bx	lr

08009aec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d105      	bne.n	8009b0a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bc80      	pop	{r7}
 8009b14:	4770      	bx	lr

08009b16 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b082      	sub	sp, #8
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d10b      	bne.n	8009b40 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
	...

08009b4c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b62:	2b40      	cmp	r3, #64	; 0x40
 8009b64:	d005      	beq.n	8009b72 <USBD_StdDevReq+0x26>
 8009b66:	2b40      	cmp	r3, #64	; 0x40
 8009b68:	d84f      	bhi.n	8009c0a <USBD_StdDevReq+0xbe>
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d009      	beq.n	8009b82 <USBD_StdDevReq+0x36>
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	d14b      	bne.n	8009c0a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	4798      	blx	r3
      break;
 8009b80:	e048      	b.n	8009c14 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	785b      	ldrb	r3, [r3, #1]
 8009b86:	2b09      	cmp	r3, #9
 8009b88:	d839      	bhi.n	8009bfe <USBD_StdDevReq+0xb2>
 8009b8a:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <USBD_StdDevReq+0x44>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009be1 	.word	0x08009be1
 8009b94:	08009bf5 	.word	0x08009bf5
 8009b98:	08009bff 	.word	0x08009bff
 8009b9c:	08009beb 	.word	0x08009beb
 8009ba0:	08009bff 	.word	0x08009bff
 8009ba4:	08009bc3 	.word	0x08009bc3
 8009ba8:	08009bb9 	.word	0x08009bb9
 8009bac:	08009bff 	.word	0x08009bff
 8009bb0:	08009bd7 	.word	0x08009bd7
 8009bb4:	08009bcd 	.word	0x08009bcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f9dc 	bl	8009f78 <USBD_GetDescriptor>
          break;
 8009bc0:	e022      	b.n	8009c08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fb3f 	bl	800a248 <USBD_SetAddress>
          break;
 8009bca:	e01d      	b.n	8009c08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fb7e 	bl	800a2d0 <USBD_SetConfig>
          break;
 8009bd4:	e018      	b.n	8009c08 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fc07 	bl	800a3ec <USBD_GetConfig>
          break;
 8009bde:	e013      	b.n	8009c08 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fc37 	bl	800a456 <USBD_GetStatus>
          break;
 8009be8:	e00e      	b.n	8009c08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fc65 	bl	800a4bc <USBD_SetFeature>
          break;
 8009bf2:	e009      	b.n	8009c08 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fc74 	bl	800a4e4 <USBD_ClrFeature>
          break;
 8009bfc:	e004      	b.n	8009c08 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fccc 	bl	800a59e <USBD_CtlError>
          break;
 8009c06:	bf00      	nop
      }
      break;
 8009c08:	e004      	b.n	8009c14 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fcc6 	bl	800a59e <USBD_CtlError>
      break;
 8009c12:	bf00      	nop
  }

  return ret;
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop

08009c20 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c36:	2b40      	cmp	r3, #64	; 0x40
 8009c38:	d005      	beq.n	8009c46 <USBD_StdItfReq+0x26>
 8009c3a:	2b40      	cmp	r3, #64	; 0x40
 8009c3c:	d82e      	bhi.n	8009c9c <USBD_StdItfReq+0x7c>
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <USBD_StdItfReq+0x26>
 8009c42:	2b20      	cmp	r3, #32
 8009c44:	d12a      	bne.n	8009c9c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d81d      	bhi.n	8009c8e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	889b      	ldrh	r3, [r3, #4]
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d813      	bhi.n	8009c84 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	4798      	blx	r3
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	88db      	ldrh	r3, [r3, #6]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d110      	bne.n	8009c98 <USBD_StdItfReq+0x78>
 8009c76:	7bfb      	ldrb	r3, [r7, #15]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10d      	bne.n	8009c98 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fd56 	bl	800a72e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c82:	e009      	b.n	8009c98 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fc89 	bl	800a59e <USBD_CtlError>
          break;
 8009c8c:	e004      	b.n	8009c98 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fc84 	bl	800a59e <USBD_CtlError>
          break;
 8009c96:	e000      	b.n	8009c9a <USBD_StdItfReq+0x7a>
          break;
 8009c98:	bf00      	nop
      }
      break;
 8009c9a:	e004      	b.n	8009ca6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fc7d 	bl	800a59e <USBD_CtlError>
      break;
 8009ca4:	bf00      	nop
  }

  return USBD_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	889b      	ldrh	r3, [r3, #4]
 8009cc2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ccc:	2b40      	cmp	r3, #64	; 0x40
 8009cce:	d007      	beq.n	8009ce0 <USBD_StdEPReq+0x30>
 8009cd0:	2b40      	cmp	r3, #64	; 0x40
 8009cd2:	f200 8146 	bhi.w	8009f62 <USBD_StdEPReq+0x2b2>
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00a      	beq.n	8009cf0 <USBD_StdEPReq+0x40>
 8009cda:	2b20      	cmp	r3, #32
 8009cdc:	f040 8141 	bne.w	8009f62 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	4798      	blx	r3
      break;
 8009cee:	e13d      	b.n	8009f6c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cf8:	2b20      	cmp	r3, #32
 8009cfa:	d10a      	bne.n	8009d12 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	4798      	blx	r3
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
 8009d10:	e12d      	b.n	8009f6e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	785b      	ldrb	r3, [r3, #1]
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d007      	beq.n	8009d2a <USBD_StdEPReq+0x7a>
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	f300 811b 	bgt.w	8009f56 <USBD_StdEPReq+0x2a6>
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d072      	beq.n	8009e0a <USBD_StdEPReq+0x15a>
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d03a      	beq.n	8009d9e <USBD_StdEPReq+0xee>
 8009d28:	e115      	b.n	8009f56 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d002      	beq.n	8009d3a <USBD_StdEPReq+0x8a>
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d015      	beq.n	8009d64 <USBD_StdEPReq+0xb4>
 8009d38:	e02b      	b.n	8009d92 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d3a:	7bbb      	ldrb	r3, [r7, #14]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00c      	beq.n	8009d5a <USBD_StdEPReq+0xaa>
 8009d40:	7bbb      	ldrb	r3, [r7, #14]
 8009d42:	2b80      	cmp	r3, #128	; 0x80
 8009d44:	d009      	beq.n	8009d5a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d46:	7bbb      	ldrb	r3, [r7, #14]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f001 f8a0 	bl	800ae90 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d50:	2180      	movs	r1, #128	; 0x80
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f001 f89c 	bl	800ae90 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d58:	e020      	b.n	8009d9c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fc1e 	bl	800a59e <USBD_CtlError>
              break;
 8009d62:	e01b      	b.n	8009d9c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	885b      	ldrh	r3, [r3, #2]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10e      	bne.n	8009d8a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00b      	beq.n	8009d8a <USBD_StdEPReq+0xda>
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	2b80      	cmp	r3, #128	; 0x80
 8009d76:	d008      	beq.n	8009d8a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	88db      	ldrh	r3, [r3, #6]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d104      	bne.n	8009d8a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 f883 	bl	800ae90 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fccf 	bl	800a72e <USBD_CtlSendStatus>

              break;
 8009d90:	e004      	b.n	8009d9c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fc02 	bl	800a59e <USBD_CtlError>
              break;
 8009d9a:	bf00      	nop
          }
          break;
 8009d9c:	e0e0      	b.n	8009f60 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d002      	beq.n	8009dae <USBD_StdEPReq+0xfe>
 8009da8:	2b03      	cmp	r3, #3
 8009daa:	d015      	beq.n	8009dd8 <USBD_StdEPReq+0x128>
 8009dac:	e026      	b.n	8009dfc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00c      	beq.n	8009dce <USBD_StdEPReq+0x11e>
 8009db4:	7bbb      	ldrb	r3, [r7, #14]
 8009db6:	2b80      	cmp	r3, #128	; 0x80
 8009db8:	d009      	beq.n	8009dce <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f001 f866 	bl	800ae90 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009dc4:	2180      	movs	r1, #128	; 0x80
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f001 f862 	bl	800ae90 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009dcc:	e01c      	b.n	8009e08 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fbe4 	bl	800a59e <USBD_CtlError>
              break;
 8009dd6:	e017      	b.n	8009e08 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	885b      	ldrh	r3, [r3, #2]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d112      	bne.n	8009e06 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009de0:	7bbb      	ldrb	r3, [r7, #14]
 8009de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d004      	beq.n	8009df4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f001 f86d 	bl	800aece <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fc9a 	bl	800a72e <USBD_CtlSendStatus>
              }
              break;
 8009dfa:	e004      	b.n	8009e06 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fbcd 	bl	800a59e <USBD_CtlError>
              break;
 8009e04:	e000      	b.n	8009e08 <USBD_StdEPReq+0x158>
              break;
 8009e06:	bf00      	nop
          }
          break;
 8009e08:	e0aa      	b.n	8009f60 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d002      	beq.n	8009e1a <USBD_StdEPReq+0x16a>
 8009e14:	2b03      	cmp	r3, #3
 8009e16:	d032      	beq.n	8009e7e <USBD_StdEPReq+0x1ce>
 8009e18:	e097      	b.n	8009f4a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e1a:	7bbb      	ldrb	r3, [r7, #14]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d007      	beq.n	8009e30 <USBD_StdEPReq+0x180>
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
 8009e22:	2b80      	cmp	r3, #128	; 0x80
 8009e24:	d004      	beq.n	8009e30 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fbb8 	bl	800a59e <USBD_CtlError>
                break;
 8009e2e:	e091      	b.n	8009f54 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	da0b      	bge.n	8009e50 <USBD_StdEPReq+0x1a0>
 8009e38:	7bbb      	ldrb	r3, [r7, #14]
 8009e3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e3e:	4613      	mov	r3, r2
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	4413      	add	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	3310      	adds	r3, #16
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	e00b      	b.n	8009e68 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
 8009e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	4413      	add	r3, r2
 8009e66:	3304      	adds	r3, #4
 8009e68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	2202      	movs	r2, #2
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fbfb 	bl	800a672 <USBD_CtlSendData>
              break;
 8009e7c:	e06a      	b.n	8009f54 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	da11      	bge.n	8009eaa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	f003 020f 	and.w	r2, r3, #15
 8009e8c:	6879      	ldr	r1, [r7, #4]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	440b      	add	r3, r1
 8009e98:	3318      	adds	r3, #24
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d117      	bne.n	8009ed0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fb7b 	bl	800a59e <USBD_CtlError>
                  break;
 8009ea8:	e054      	b.n	8009f54 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	f003 020f 	and.w	r2, r3, #15
 8009eb0:	6879      	ldr	r1, [r7, #4]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	440b      	add	r3, r1
 8009ebc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d104      	bne.n	8009ed0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fb68 	bl	800a59e <USBD_CtlError>
                  break;
 8009ece:	e041      	b.n	8009f54 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	da0b      	bge.n	8009ef0 <USBD_StdEPReq+0x240>
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
 8009eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ede:	4613      	mov	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	3310      	adds	r3, #16
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	4413      	add	r3, r2
 8009eec:	3304      	adds	r3, #4
 8009eee:	e00b      	b.n	8009f08 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
 8009ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	4413      	add	r3, r2
 8009f06:	3304      	adds	r3, #4
 8009f08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <USBD_StdEPReq+0x266>
 8009f10:	7bbb      	ldrb	r3, [r7, #14]
 8009f12:	2b80      	cmp	r3, #128	; 0x80
 8009f14:	d103      	bne.n	8009f1e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	e00e      	b.n	8009f3c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fff2 	bl	800af0c <USBD_LL_IsStallEP>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	2201      	movs	r2, #1
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	e002      	b.n	8009f3c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fb95 	bl	800a672 <USBD_CtlSendData>
              break;
 8009f48:	e004      	b.n	8009f54 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fb26 	bl	800a59e <USBD_CtlError>
              break;
 8009f52:	bf00      	nop
          }
          break;
 8009f54:	e004      	b.n	8009f60 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fb20 	bl	800a59e <USBD_CtlError>
          break;
 8009f5e:	bf00      	nop
      }
      break;
 8009f60:	e004      	b.n	8009f6c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fb1a 	bl	800a59e <USBD_CtlError>
      break;
 8009f6a:	bf00      	nop
  }

  return ret;
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f86:	2300      	movs	r3, #0
 8009f88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	885b      	ldrh	r3, [r3, #2]
 8009f92:	0a1b      	lsrs	r3, r3, #8
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	3b01      	subs	r3, #1
 8009f98:	2b06      	cmp	r3, #6
 8009f9a:	f200 8128 	bhi.w	800a1ee <USBD_GetDescriptor+0x276>
 8009f9e:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <USBD_GetDescriptor+0x2c>)
 8009fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa4:	08009fc1 	.word	0x08009fc1
 8009fa8:	08009fd9 	.word	0x08009fd9
 8009fac:	0800a019 	.word	0x0800a019
 8009fb0:	0800a1ef 	.word	0x0800a1ef
 8009fb4:	0800a1ef 	.word	0x0800a1ef
 8009fb8:	0800a18f 	.word	0x0800a18f
 8009fbc:	0800a1bb 	.word	0x0800a1bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	7c12      	ldrb	r2, [r2, #16]
 8009fcc:	f107 0108 	add.w	r1, r7, #8
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	4798      	blx	r3
 8009fd4:	60f8      	str	r0, [r7, #12]
      break;
 8009fd6:	e112      	b.n	800a1fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	7c1b      	ldrb	r3, [r3, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10d      	bne.n	8009ffc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe8:	f107 0208 	add.w	r2, r7, #8
 8009fec:	4610      	mov	r0, r2
 8009fee:	4798      	blx	r3
 8009ff0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ffa:	e100      	b.n	800a1fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a004:	f107 0208 	add.w	r2, r7, #8
 800a008:	4610      	mov	r0, r2
 800a00a:	4798      	blx	r3
 800a00c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3301      	adds	r3, #1
 800a012:	2202      	movs	r2, #2
 800a014:	701a      	strb	r2, [r3, #0]
      break;
 800a016:	e0f2      	b.n	800a1fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	885b      	ldrh	r3, [r3, #2]
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	2b05      	cmp	r3, #5
 800a020:	f200 80ac 	bhi.w	800a17c <USBD_GetDescriptor+0x204>
 800a024:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <USBD_GetDescriptor+0xb4>)
 800a026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02a:	bf00      	nop
 800a02c:	0800a045 	.word	0x0800a045
 800a030:	0800a079 	.word	0x0800a079
 800a034:	0800a0ad 	.word	0x0800a0ad
 800a038:	0800a0e1 	.word	0x0800a0e1
 800a03c:	0800a115 	.word	0x0800a115
 800a040:	0800a149 	.word	0x0800a149
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00b      	beq.n	800a068 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	7c12      	ldrb	r2, [r2, #16]
 800a05c:	f107 0108 	add.w	r1, r7, #8
 800a060:	4610      	mov	r0, r2
 800a062:	4798      	blx	r3
 800a064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a066:	e091      	b.n	800a18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fa97 	bl	800a59e <USBD_CtlError>
            err++;
 800a070:	7afb      	ldrb	r3, [r7, #11]
 800a072:	3301      	adds	r3, #1
 800a074:	72fb      	strb	r3, [r7, #11]
          break;
 800a076:	e089      	b.n	800a18c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00b      	beq.n	800a09c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	7c12      	ldrb	r2, [r2, #16]
 800a090:	f107 0108 	add.w	r1, r7, #8
 800a094:	4610      	mov	r0, r2
 800a096:	4798      	blx	r3
 800a098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a09a:	e077      	b.n	800a18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fa7d 	bl	800a59e <USBD_CtlError>
            err++;
 800a0a4:	7afb      	ldrb	r3, [r7, #11]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0aa:	e06f      	b.n	800a18c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00b      	beq.n	800a0d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	7c12      	ldrb	r2, [r2, #16]
 800a0c4:	f107 0108 	add.w	r1, r7, #8
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	4798      	blx	r3
 800a0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ce:	e05d      	b.n	800a18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fa63 	bl	800a59e <USBD_CtlError>
            err++;
 800a0d8:	7afb      	ldrb	r3, [r7, #11]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0de:	e055      	b.n	800a18c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00b      	beq.n	800a104 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	7c12      	ldrb	r2, [r2, #16]
 800a0f8:	f107 0108 	add.w	r1, r7, #8
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	4798      	blx	r3
 800a100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a102:	e043      	b.n	800a18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fa49 	bl	800a59e <USBD_CtlError>
            err++;
 800a10c:	7afb      	ldrb	r3, [r7, #11]
 800a10e:	3301      	adds	r3, #1
 800a110:	72fb      	strb	r3, [r7, #11]
          break;
 800a112:	e03b      	b.n	800a18c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a11a:	695b      	ldr	r3, [r3, #20]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00b      	beq.n	800a138 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	7c12      	ldrb	r2, [r2, #16]
 800a12c:	f107 0108 	add.w	r1, r7, #8
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
 800a134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a136:	e029      	b.n	800a18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fa2f 	bl	800a59e <USBD_CtlError>
            err++;
 800a140:	7afb      	ldrb	r3, [r7, #11]
 800a142:	3301      	adds	r3, #1
 800a144:	72fb      	strb	r3, [r7, #11]
          break;
 800a146:	e021      	b.n	800a18c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00b      	beq.n	800a16c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	7c12      	ldrb	r2, [r2, #16]
 800a160:	f107 0108 	add.w	r1, r7, #8
 800a164:	4610      	mov	r0, r2
 800a166:	4798      	blx	r3
 800a168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a16a:	e00f      	b.n	800a18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fa15 	bl	800a59e <USBD_CtlError>
            err++;
 800a174:	7afb      	ldrb	r3, [r7, #11]
 800a176:	3301      	adds	r3, #1
 800a178:	72fb      	strb	r3, [r7, #11]
          break;
 800a17a:	e007      	b.n	800a18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fa0d 	bl	800a59e <USBD_CtlError>
          err++;
 800a184:	7afb      	ldrb	r3, [r7, #11]
 800a186:	3301      	adds	r3, #1
 800a188:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a18a:	e038      	b.n	800a1fe <USBD_GetDescriptor+0x286>
 800a18c:	e037      	b.n	800a1fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	7c1b      	ldrb	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d109      	bne.n	800a1aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19e:	f107 0208 	add.w	r2, r7, #8
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	4798      	blx	r3
 800a1a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1a8:	e029      	b.n	800a1fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f9f6 	bl	800a59e <USBD_CtlError>
        err++;
 800a1b2:	7afb      	ldrb	r3, [r7, #11]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	72fb      	strb	r3, [r7, #11]
      break;
 800a1b8:	e021      	b.n	800a1fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	7c1b      	ldrb	r3, [r3, #16]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10d      	bne.n	800a1de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ca:	f107 0208 	add.w	r2, r7, #8
 800a1ce:	4610      	mov	r0, r2
 800a1d0:	4798      	blx	r3
 800a1d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	2207      	movs	r2, #7
 800a1da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1dc:	e00f      	b.n	800a1fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f9dc 	bl	800a59e <USBD_CtlError>
        err++;
 800a1e6:	7afb      	ldrb	r3, [r7, #11]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	72fb      	strb	r3, [r7, #11]
      break;
 800a1ec:	e007      	b.n	800a1fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f9d4 	bl	800a59e <USBD_CtlError>
      err++;
 800a1f6:	7afb      	ldrb	r3, [r7, #11]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	72fb      	strb	r3, [r7, #11]
      break;
 800a1fc:	bf00      	nop
  }

  if (err != 0U)
 800a1fe:	7afb      	ldrb	r3, [r7, #11]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d11c      	bne.n	800a23e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a204:	893b      	ldrh	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d011      	beq.n	800a22e <USBD_GetDescriptor+0x2b6>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	88db      	ldrh	r3, [r3, #6]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00d      	beq.n	800a22e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	88da      	ldrh	r2, [r3, #6]
 800a216:	893b      	ldrh	r3, [r7, #8]
 800a218:	4293      	cmp	r3, r2
 800a21a:	bf28      	it	cs
 800a21c:	4613      	movcs	r3, r2
 800a21e:	b29b      	uxth	r3, r3
 800a220:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a222:	893b      	ldrh	r3, [r7, #8]
 800a224:	461a      	mov	r2, r3
 800a226:	68f9      	ldr	r1, [r7, #12]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fa22 	bl	800a672 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	88db      	ldrh	r3, [r3, #6]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d104      	bne.n	800a240 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 fa79 	bl	800a72e <USBD_CtlSendStatus>
 800a23c:	e000      	b.n	800a240 <USBD_GetDescriptor+0x2c8>
    return;
 800a23e:	bf00      	nop
    }
  }
}
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop

0800a248 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	889b      	ldrh	r3, [r3, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d130      	bne.n	800a2bc <USBD_SetAddress+0x74>
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	88db      	ldrh	r3, [r3, #6]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d12c      	bne.n	800a2bc <USBD_SetAddress+0x74>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	885b      	ldrh	r3, [r3, #2]
 800a266:	2b7f      	cmp	r3, #127	; 0x7f
 800a268:	d828      	bhi.n	800a2bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	885b      	ldrh	r3, [r3, #2]
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a274:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a27c:	2b03      	cmp	r3, #3
 800a27e:	d104      	bne.n	800a28a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f98b 	bl	800a59e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a288:	e01d      	b.n	800a2c6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	7bfa      	ldrb	r2, [r7, #15]
 800a28e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fe64 	bl	800af64 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 fa46 	bl	800a72e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d004      	beq.n	800a2b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b0:	e009      	b.n	800a2c6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ba:	e004      	b.n	800a2c6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f96d 	bl	800a59e <USBD_CtlError>
  }
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	885b      	ldrh	r3, [r3, #2]
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	4b41      	ldr	r3, [pc, #260]	; (800a3e8 <USBD_SetConfig+0x118>)
 800a2e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2e4:	4b40      	ldr	r3, [pc, #256]	; (800a3e8 <USBD_SetConfig+0x118>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d904      	bls.n	800a2f6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f955 	bl	800a59e <USBD_CtlError>
 800a2f4:	e075      	b.n	800a3e2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d002      	beq.n	800a306 <USBD_SetConfig+0x36>
 800a300:	2b03      	cmp	r3, #3
 800a302:	d023      	beq.n	800a34c <USBD_SetConfig+0x7c>
 800a304:	e062      	b.n	800a3cc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a306:	4b38      	ldr	r3, [pc, #224]	; (800a3e8 <USBD_SetConfig+0x118>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d01a      	beq.n	800a344 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a30e:	4b36      	ldr	r3, [pc, #216]	; (800a3e8 <USBD_SetConfig+0x118>)
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2203      	movs	r2, #3
 800a31c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a320:	4b31      	ldr	r3, [pc, #196]	; (800a3e8 <USBD_SetConfig+0x118>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7ff f9e7 	bl	80096fa <USBD_SetClassConfig>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d104      	bne.n	800a33c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f932 	bl	800a59e <USBD_CtlError>
            return;
 800a33a:	e052      	b.n	800a3e2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f9f6 	bl	800a72e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a342:	e04e      	b.n	800a3e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f9f2 	bl	800a72e <USBD_CtlSendStatus>
        break;
 800a34a:	e04a      	b.n	800a3e2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a34c:	4b26      	ldr	r3, [pc, #152]	; (800a3e8 <USBD_SetConfig+0x118>)
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d112      	bne.n	800a37a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a35c:	4b22      	ldr	r3, [pc, #136]	; (800a3e8 <USBD_SetConfig+0x118>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	461a      	mov	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a366:	4b20      	ldr	r3, [pc, #128]	; (800a3e8 <USBD_SetConfig+0x118>)
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff f9e3 	bl	8009738 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f9db 	bl	800a72e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a378:	e033      	b.n	800a3e2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a37a:	4b1b      	ldr	r3, [pc, #108]	; (800a3e8 <USBD_SetConfig+0x118>)
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	461a      	mov	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	429a      	cmp	r2, r3
 800a386:	d01d      	beq.n	800a3c4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	4619      	mov	r1, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f7ff f9d1 	bl	8009738 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a396:	4b14      	ldr	r3, [pc, #80]	; (800a3e8 <USBD_SetConfig+0x118>)
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	461a      	mov	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a3a0:	4b11      	ldr	r3, [pc, #68]	; (800a3e8 <USBD_SetConfig+0x118>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f7ff f9a7 	bl	80096fa <USBD_SetClassConfig>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d104      	bne.n	800a3bc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f8f2 	bl	800a59e <USBD_CtlError>
            return;
 800a3ba:	e012      	b.n	800a3e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f9b6 	bl	800a72e <USBD_CtlSendStatus>
        break;
 800a3c2:	e00e      	b.n	800a3e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f9b2 	bl	800a72e <USBD_CtlSendStatus>
        break;
 800a3ca:	e00a      	b.n	800a3e2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f8e5 	bl	800a59e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a3d4:	4b04      	ldr	r3, [pc, #16]	; (800a3e8 <USBD_SetConfig+0x118>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f7ff f9ac 	bl	8009738 <USBD_ClrClassConfig>
        break;
 800a3e0:	bf00      	nop
    }
  }
}
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	2000035c 	.word	0x2000035c

0800a3ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	88db      	ldrh	r3, [r3, #6]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d004      	beq.n	800a408 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f8cc 	bl	800a59e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a406:	e022      	b.n	800a44e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a40e:	2b02      	cmp	r3, #2
 800a410:	dc02      	bgt.n	800a418 <USBD_GetConfig+0x2c>
 800a412:	2b00      	cmp	r3, #0
 800a414:	dc03      	bgt.n	800a41e <USBD_GetConfig+0x32>
 800a416:	e015      	b.n	800a444 <USBD_GetConfig+0x58>
 800a418:	2b03      	cmp	r3, #3
 800a41a:	d00b      	beq.n	800a434 <USBD_GetConfig+0x48>
 800a41c:	e012      	b.n	800a444 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	3308      	adds	r3, #8
 800a428:	2201      	movs	r2, #1
 800a42a:	4619      	mov	r1, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f920 	bl	800a672 <USBD_CtlSendData>
        break;
 800a432:	e00c      	b.n	800a44e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3304      	adds	r3, #4
 800a438:	2201      	movs	r2, #1
 800a43a:	4619      	mov	r1, r3
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f918 	bl	800a672 <USBD_CtlSendData>
        break;
 800a442:	e004      	b.n	800a44e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a444:	6839      	ldr	r1, [r7, #0]
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f8a9 	bl	800a59e <USBD_CtlError>
        break;
 800a44c:	bf00      	nop
}
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b082      	sub	sp, #8
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a466:	3b01      	subs	r3, #1
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d81e      	bhi.n	800a4aa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	88db      	ldrh	r3, [r3, #6]
 800a470:	2b02      	cmp	r3, #2
 800a472:	d004      	beq.n	800a47e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f891 	bl	800a59e <USBD_CtlError>
        break;
 800a47c:	e01a      	b.n	800a4b4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d005      	beq.n	800a49a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f043 0202 	orr.w	r2, r3, #2
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	330c      	adds	r3, #12
 800a49e:	2202      	movs	r2, #2
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f8e5 	bl	800a672 <USBD_CtlSendData>
      break;
 800a4a8:	e004      	b.n	800a4b4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f876 	bl	800a59e <USBD_CtlError>
      break;
 800a4b2:	bf00      	nop
  }
}
 800a4b4:	bf00      	nop
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	885b      	ldrh	r3, [r3, #2]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d106      	bne.n	800a4dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f929 	bl	800a72e <USBD_CtlSendStatus>
  }
}
 800a4dc:	bf00      	nop
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d80b      	bhi.n	800a512 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	885b      	ldrh	r3, [r3, #2]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d10c      	bne.n	800a51c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f90f 	bl	800a72e <USBD_CtlSendStatus>
      }
      break;
 800a510:	e004      	b.n	800a51c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f842 	bl	800a59e <USBD_CtlError>
      break;
 800a51a:	e000      	b.n	800a51e <USBD_ClrFeature+0x3a>
      break;
 800a51c:	bf00      	nop
  }
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a526:	b480      	push	{r7}
 800a528:	b083      	sub	sp, #12
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	781a      	ldrb	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	785a      	ldrb	r2, [r3, #1]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	3302      	adds	r3, #2
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	b29a      	uxth	r2, r3
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	3303      	adds	r3, #3
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	021b      	lsls	r3, r3, #8
 800a552:	b29b      	uxth	r3, r3
 800a554:	4413      	add	r3, r2
 800a556:	b29a      	uxth	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	3304      	adds	r3, #4
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	b29a      	uxth	r2, r3
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	3305      	adds	r3, #5
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	021b      	lsls	r3, r3, #8
 800a56e:	b29b      	uxth	r3, r3
 800a570:	4413      	add	r3, r2
 800a572:	b29a      	uxth	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	3306      	adds	r3, #6
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	b29a      	uxth	r2, r3
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	3307      	adds	r3, #7
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	b29b      	uxth	r3, r3
 800a588:	021b      	lsls	r3, r3, #8
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	4413      	add	r3, r2
 800a58e:	b29a      	uxth	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	80da      	strh	r2, [r3, #6]

}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	bc80      	pop	{r7}
 800a59c:	4770      	bx	lr

0800a59e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b082      	sub	sp, #8
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a5a8:	2180      	movs	r1, #128	; 0x80
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fc70 	bl	800ae90 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fc6c 	bl	800ae90 <USBD_LL_StallEP>
}
 800a5b8:	bf00      	nop
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d032      	beq.n	800a63c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 f834 	bl	800a644 <USBD_GetLen>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	3301      	adds	r3, #1
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
 800a5ec:	1c5a      	adds	r2, r3, #1
 800a5ee:	75fa      	strb	r2, [r7, #23]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	7812      	ldrb	r2, [r2, #0]
 800a5fa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a5fc:	7dfb      	ldrb	r3, [r7, #23]
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	75fa      	strb	r2, [r7, #23]
 800a602:	461a      	mov	r2, r3
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	4413      	add	r3, r2
 800a608:	2203      	movs	r2, #3
 800a60a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a60c:	e012      	b.n	800a634 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	60fa      	str	r2, [r7, #12]
 800a614:	7dfa      	ldrb	r2, [r7, #23]
 800a616:	1c51      	adds	r1, r2, #1
 800a618:	75f9      	strb	r1, [r7, #23]
 800a61a:	4611      	mov	r1, r2
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	440a      	add	r2, r1
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a624:	7dfb      	ldrb	r3, [r7, #23]
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	75fa      	strb	r2, [r7, #23]
 800a62a:	461a      	mov	r2, r3
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	4413      	add	r3, r2
 800a630:	2200      	movs	r2, #0
 800a632:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1e8      	bne.n	800a60e <USBD_GetString+0x4e>
    }
  }
}
 800a63c:	bf00      	nop
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a64c:	2300      	movs	r3, #0
 800a64e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a650:	e005      	b.n	800a65e <USBD_GetLen+0x1a>
  {
    len++;
 800a652:	7bfb      	ldrb	r3, [r7, #15]
 800a654:	3301      	adds	r3, #1
 800a656:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3301      	adds	r3, #1
 800a65c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1f5      	bne.n	800a652 <USBD_GetLen+0xe>
  }

  return len;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bc80      	pop	{r7}
 800a670:	4770      	bx	lr

0800a672 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	60b9      	str	r1, [r7, #8]
 800a67c:	4613      	mov	r3, r2
 800a67e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2202      	movs	r2, #2
 800a684:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a688:	88fa      	ldrh	r2, [r7, #6]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a68e:	88fa      	ldrh	r2, [r7, #6]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a694:	88fb      	ldrh	r3, [r7, #6]
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	2100      	movs	r1, #0
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 fc81 	bl	800afa2 <USBD_LL_Transmit>

  return USBD_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	60f8      	str	r0, [r7, #12]
 800a6b2:	60b9      	str	r1, [r7, #8]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6b8:	88fb      	ldrh	r3, [r7, #6]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	2100      	movs	r1, #0
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f000 fc6f 	bl	800afa2 <USBD_LL_Transmit>

  return USBD_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	60f8      	str	r0, [r7, #12]
 800a6d6:	60b9      	str	r1, [r7, #8]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2203      	movs	r2, #3
 800a6e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a6e4:	88fa      	ldrh	r2, [r7, #6]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a6ec:	88fa      	ldrh	r2, [r7, #6]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6f4:	88fb      	ldrh	r3, [r7, #6]
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 fc74 	bl	800afe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	60b9      	str	r1, [r7, #8]
 800a714:	4613      	mov	r3, r2
 800a716:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a718:	88fb      	ldrh	r3, [r7, #6]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	2100      	movs	r1, #0
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f000 fc62 	bl	800afe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b082      	sub	sp, #8
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2204      	movs	r2, #4
 800a73a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a73e:	2300      	movs	r3, #0
 800a740:	2200      	movs	r2, #0
 800a742:	2100      	movs	r1, #0
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fc2c 	bl	800afa2 <USBD_LL_Transmit>

  return USBD_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2205      	movs	r2, #5
 800a760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a764:	2300      	movs	r3, #0
 800a766:	2200      	movs	r2, #0
 800a768:	2100      	movs	r1, #0
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 fc3c 	bl	800afe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a780:	2200      	movs	r2, #0
 800a782:	4912      	ldr	r1, [pc, #72]	; (800a7cc <MX_USB_DEVICE_Init+0x50>)
 800a784:	4812      	ldr	r0, [pc, #72]	; (800a7d0 <MX_USB_DEVICE_Init+0x54>)
 800a786:	f7fe ff5e 	bl	8009646 <USBD_Init>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a790:	f7f6 f883 	bl	800089a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a794:	490f      	ldr	r1, [pc, #60]	; (800a7d4 <MX_USB_DEVICE_Init+0x58>)
 800a796:	480e      	ldr	r0, [pc, #56]	; (800a7d0 <MX_USB_DEVICE_Init+0x54>)
 800a798:	f7fe ff80 	bl	800969c <USBD_RegisterClass>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a7a2:	f7f6 f87a 	bl	800089a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a7a6:	490c      	ldr	r1, [pc, #48]	; (800a7d8 <MX_USB_DEVICE_Init+0x5c>)
 800a7a8:	4809      	ldr	r0, [pc, #36]	; (800a7d0 <MX_USB_DEVICE_Init+0x54>)
 800a7aa:	f7fe feb1 	bl	8009510 <USBD_CDC_RegisterInterface>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a7b4:	f7f6 f871 	bl	800089a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a7b8:	4805      	ldr	r0, [pc, #20]	; (800a7d0 <MX_USB_DEVICE_Init+0x54>)
 800a7ba:	f7fe ff88 	bl	80096ce <USBD_Start>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7c4:	f7f6 f869 	bl	800089a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7c8:	bf00      	nop
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20000134 	.word	0x20000134
 800a7d0:	20000360 	.word	0x20000360
 800a7d4:	20000020 	.word	0x20000020
 800a7d8:	20000124 	.word	0x20000124

0800a7dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	4905      	ldr	r1, [pc, #20]	; (800a7f8 <CDC_Init_FS+0x1c>)
 800a7e4:	4805      	ldr	r0, [pc, #20]	; (800a7fc <CDC_Init_FS+0x20>)
 800a7e6:	f7fe fea9 	bl	800953c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7ea:	4905      	ldr	r1, [pc, #20]	; (800a800 <CDC_Init_FS+0x24>)
 800a7ec:	4803      	ldr	r0, [pc, #12]	; (800a7fc <CDC_Init_FS+0x20>)
 800a7ee:	f7fe febe 	bl	800956e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	20000a24 	.word	0x20000a24
 800a7fc:	20000360 	.word	0x20000360
 800a800:	20000624 	.word	0x20000624

0800a804 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a804:	b480      	push	{r7}
 800a806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a808:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bc80      	pop	{r7}
 800a810:	4770      	bx	lr
	...

0800a814 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	4603      	mov	r3, r0
 800a81c:	6039      	str	r1, [r7, #0]
 800a81e:	71fb      	strb	r3, [r7, #7]
 800a820:	4613      	mov	r3, r2
 800a822:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a824:	79fb      	ldrb	r3, [r7, #7]
 800a826:	2b23      	cmp	r3, #35	; 0x23
 800a828:	d84a      	bhi.n	800a8c0 <CDC_Control_FS+0xac>
 800a82a:	a201      	add	r2, pc, #4	; (adr r2, 800a830 <CDC_Control_FS+0x1c>)
 800a82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a830:	0800a8c1 	.word	0x0800a8c1
 800a834:	0800a8c1 	.word	0x0800a8c1
 800a838:	0800a8c1 	.word	0x0800a8c1
 800a83c:	0800a8c1 	.word	0x0800a8c1
 800a840:	0800a8c1 	.word	0x0800a8c1
 800a844:	0800a8c1 	.word	0x0800a8c1
 800a848:	0800a8c1 	.word	0x0800a8c1
 800a84c:	0800a8c1 	.word	0x0800a8c1
 800a850:	0800a8c1 	.word	0x0800a8c1
 800a854:	0800a8c1 	.word	0x0800a8c1
 800a858:	0800a8c1 	.word	0x0800a8c1
 800a85c:	0800a8c1 	.word	0x0800a8c1
 800a860:	0800a8c1 	.word	0x0800a8c1
 800a864:	0800a8c1 	.word	0x0800a8c1
 800a868:	0800a8c1 	.word	0x0800a8c1
 800a86c:	0800a8c1 	.word	0x0800a8c1
 800a870:	0800a8c1 	.word	0x0800a8c1
 800a874:	0800a8c1 	.word	0x0800a8c1
 800a878:	0800a8c1 	.word	0x0800a8c1
 800a87c:	0800a8c1 	.word	0x0800a8c1
 800a880:	0800a8c1 	.word	0x0800a8c1
 800a884:	0800a8c1 	.word	0x0800a8c1
 800a888:	0800a8c1 	.word	0x0800a8c1
 800a88c:	0800a8c1 	.word	0x0800a8c1
 800a890:	0800a8c1 	.word	0x0800a8c1
 800a894:	0800a8c1 	.word	0x0800a8c1
 800a898:	0800a8c1 	.word	0x0800a8c1
 800a89c:	0800a8c1 	.word	0x0800a8c1
 800a8a0:	0800a8c1 	.word	0x0800a8c1
 800a8a4:	0800a8c1 	.word	0x0800a8c1
 800a8a8:	0800a8c1 	.word	0x0800a8c1
 800a8ac:	0800a8c1 	.word	0x0800a8c1
 800a8b0:	0800a8c1 	.word	0x0800a8c1
 800a8b4:	0800a8c1 	.word	0x0800a8c1
 800a8b8:	0800a8c1 	.word	0x0800a8c1
 800a8bc:	0800a8c1 	.word	0x0800a8c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a8c0:	bf00      	nop
  }

  return (USBD_OK);
 800a8c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bc80      	pop	{r7}
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop

0800a8d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; ++i)
 800a8da:	2300      	movs	r3, #0
 800a8dc:	60fb      	str	r3, [r7, #12]
 800a8de:	e00b      	b.n	800a8f8 <CDC_Receive_FS+0x28>
  {
	  Buffer_Write(FIFO_buf, Buf[i]);
 800a8e0:	4b11      	ldr	r3, [pc, #68]	; (800a928 <CDC_Receive_FS+0x58>)
 800a8e2:	6818      	ldr	r0, [r3, #0]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	f7f5 fcc1 	bl	8000274 <Buffer_Write>
  for (int i = 0; i < *Len; ++i)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d8ee      	bhi.n	800a8e0 <CDC_Receive_FS+0x10>
  }
  memset(Buf, 0, *Len);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	461a      	mov	r2, r3
 800a908:	2100      	movs	r1, #0
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f001 fd20 	bl	800c350 <memset>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a910:	6879      	ldr	r1, [r7, #4]
 800a912:	4806      	ldr	r0, [pc, #24]	; (800a92c <CDC_Receive_FS+0x5c>)
 800a914:	f7fe fe2b 	bl	800956e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a918:	4804      	ldr	r0, [pc, #16]	; (800a92c <CDC_Receive_FS+0x5c>)
 800a91a:	f7fe fe6a 	bl	80095f2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a91e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	200002f8 	.word	0x200002f8
 800a92c:	20000360 	.word	0x20000360

0800a930 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	460b      	mov	r3, r1
 800a93a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a940:	4b0d      	ldr	r3, [pc, #52]	; (800a978 <CDC_Transmit_FS+0x48>)
 800a942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a946:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a952:	2301      	movs	r3, #1
 800a954:	e00b      	b.n	800a96e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a956:	887b      	ldrh	r3, [r7, #2]
 800a958:	461a      	mov	r2, r3
 800a95a:	6879      	ldr	r1, [r7, #4]
 800a95c:	4806      	ldr	r0, [pc, #24]	; (800a978 <CDC_Transmit_FS+0x48>)
 800a95e:	f7fe fded 	bl	800953c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a962:	4805      	ldr	r0, [pc, #20]	; (800a978 <CDC_Transmit_FS+0x48>)
 800a964:	f7fe fe16 	bl	8009594 <USBD_CDC_TransmitPacket>
 800a968:	4603      	mov	r3, r0
 800a96a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20000360 	.word	0x20000360

0800a97c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	6039      	str	r1, [r7, #0]
 800a986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	2212      	movs	r2, #18
 800a98c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a98e:	4b03      	ldr	r3, [pc, #12]	; (800a99c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a990:	4618      	mov	r0, r3
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	bc80      	pop	{r7}
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	20000150 	.word	0x20000150

0800a9a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	6039      	str	r1, [r7, #0]
 800a9aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2204      	movs	r2, #4
 800a9b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a9b2:	4b03      	ldr	r3, [pc, #12]	; (800a9c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bc80      	pop	{r7}
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	20000164 	.word	0x20000164

0800a9c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	6039      	str	r1, [r7, #0]
 800a9ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9d0:	79fb      	ldrb	r3, [r7, #7]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d105      	bne.n	800a9e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	4907      	ldr	r1, [pc, #28]	; (800a9f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a9da:	4808      	ldr	r0, [pc, #32]	; (800a9fc <USBD_FS_ProductStrDescriptor+0x38>)
 800a9dc:	f7ff fdf0 	bl	800a5c0 <USBD_GetString>
 800a9e0:	e004      	b.n	800a9ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	4904      	ldr	r1, [pc, #16]	; (800a9f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a9e6:	4805      	ldr	r0, [pc, #20]	; (800a9fc <USBD_FS_ProductStrDescriptor+0x38>)
 800a9e8:	f7ff fdea 	bl	800a5c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9ec:	4b02      	ldr	r3, [pc, #8]	; (800a9f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	20000e24 	.word	0x20000e24
 800a9fc:	0800c4ec 	.word	0x0800c4ec

0800aa00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	4603      	mov	r3, r0
 800aa08:	6039      	str	r1, [r7, #0]
 800aa0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	4904      	ldr	r1, [pc, #16]	; (800aa20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa10:	4804      	ldr	r0, [pc, #16]	; (800aa24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa12:	f7ff fdd5 	bl	800a5c0 <USBD_GetString>
  return USBD_StrDesc;
 800aa16:	4b02      	ldr	r3, [pc, #8]	; (800aa20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	20000e24 	.word	0x20000e24
 800aa24:	0800c504 	.word	0x0800c504

0800aa28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	4603      	mov	r3, r0
 800aa30:	6039      	str	r1, [r7, #0]
 800aa32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	221a      	movs	r2, #26
 800aa38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa3a:	f000 f843 	bl	800aac4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa3e:	4b02      	ldr	r3, [pc, #8]	; (800aa48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	20000168 	.word	0x20000168

0800aa4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	6039      	str	r1, [r7, #0]
 800aa56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa58:	79fb      	ldrb	r3, [r7, #7]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d105      	bne.n	800aa6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	4907      	ldr	r1, [pc, #28]	; (800aa80 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa62:	4808      	ldr	r0, [pc, #32]	; (800aa84 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa64:	f7ff fdac 	bl	800a5c0 <USBD_GetString>
 800aa68:	e004      	b.n	800aa74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	4904      	ldr	r1, [pc, #16]	; (800aa80 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa6e:	4805      	ldr	r0, [pc, #20]	; (800aa84 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa70:	f7ff fda6 	bl	800a5c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa74:	4b02      	ldr	r3, [pc, #8]	; (800aa80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	20000e24 	.word	0x20000e24
 800aa84:	0800c518 	.word	0x0800c518

0800aa88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	4603      	mov	r3, r0
 800aa90:	6039      	str	r1, [r7, #0]
 800aa92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa94:	79fb      	ldrb	r3, [r7, #7]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d105      	bne.n	800aaa6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	4907      	ldr	r1, [pc, #28]	; (800aabc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa9e:	4808      	ldr	r0, [pc, #32]	; (800aac0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaa0:	f7ff fd8e 	bl	800a5c0 <USBD_GetString>
 800aaa4:	e004      	b.n	800aab0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	4904      	ldr	r1, [pc, #16]	; (800aabc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaaa:	4805      	ldr	r0, [pc, #20]	; (800aac0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaac:	f7ff fd88 	bl	800a5c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aab0:	4b02      	ldr	r3, [pc, #8]	; (800aabc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	20000e24 	.word	0x20000e24
 800aac0:	0800c524 	.word	0x0800c524

0800aac4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aaca:	4b0f      	ldr	r3, [pc, #60]	; (800ab08 <Get_SerialNum+0x44>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aad0:	4b0e      	ldr	r3, [pc, #56]	; (800ab0c <Get_SerialNum+0x48>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aad6:	4b0e      	ldr	r3, [pc, #56]	; (800ab10 <Get_SerialNum+0x4c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4413      	add	r3, r2
 800aae2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d009      	beq.n	800aafe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aaea:	2208      	movs	r2, #8
 800aaec:	4909      	ldr	r1, [pc, #36]	; (800ab14 <Get_SerialNum+0x50>)
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f000 f814 	bl	800ab1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aaf4:	2204      	movs	r2, #4
 800aaf6:	4908      	ldr	r1, [pc, #32]	; (800ab18 <Get_SerialNum+0x54>)
 800aaf8:	68b8      	ldr	r0, [r7, #8]
 800aafa:	f000 f80f 	bl	800ab1c <IntToUnicode>
  }
}
 800aafe:	bf00      	nop
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	1ffff7e8 	.word	0x1ffff7e8
 800ab0c:	1ffff7ec 	.word	0x1ffff7ec
 800ab10:	1ffff7f0 	.word	0x1ffff7f0
 800ab14:	2000016a 	.word	0x2000016a
 800ab18:	2000017a 	.word	0x2000017a

0800ab1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	4613      	mov	r3, r2
 800ab28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab2e:	2300      	movs	r3, #0
 800ab30:	75fb      	strb	r3, [r7, #23]
 800ab32:	e027      	b.n	800ab84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	0f1b      	lsrs	r3, r3, #28
 800ab38:	2b09      	cmp	r3, #9
 800ab3a:	d80b      	bhi.n	800ab54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	0f1b      	lsrs	r3, r3, #28
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
 800ab44:	005b      	lsls	r3, r3, #1
 800ab46:	4619      	mov	r1, r3
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	440b      	add	r3, r1
 800ab4c:	3230      	adds	r2, #48	; 0x30
 800ab4e:	b2d2      	uxtb	r2, r2
 800ab50:	701a      	strb	r2, [r3, #0]
 800ab52:	e00a      	b.n	800ab6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	0f1b      	lsrs	r3, r3, #28
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	7dfb      	ldrb	r3, [r7, #23]
 800ab5c:	005b      	lsls	r3, r3, #1
 800ab5e:	4619      	mov	r1, r3
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	440b      	add	r3, r1
 800ab64:	3237      	adds	r2, #55	; 0x37
 800ab66:	b2d2      	uxtb	r2, r2
 800ab68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	011b      	lsls	r3, r3, #4
 800ab6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
 800ab72:	005b      	lsls	r3, r3, #1
 800ab74:	3301      	adds	r3, #1
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	4413      	add	r3, r2
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab7e:	7dfb      	ldrb	r3, [r7, #23]
 800ab80:	3301      	adds	r3, #1
 800ab82:	75fb      	strb	r3, [r7, #23]
 800ab84:	7dfa      	ldrb	r2, [r7, #23]
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d3d3      	bcc.n	800ab34 <IntToUnicode+0x18>
  }
}
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	371c      	adds	r7, #28
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bc80      	pop	{r7}
 800ab96:	4770      	bx	lr

0800ab98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a0d      	ldr	r2, [pc, #52]	; (800abdc <HAL_PCD_MspInit+0x44>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d113      	bne.n	800abd2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800abaa:	4b0d      	ldr	r3, [pc, #52]	; (800abe0 <HAL_PCD_MspInit+0x48>)
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	4a0c      	ldr	r2, [pc, #48]	; (800abe0 <HAL_PCD_MspInit+0x48>)
 800abb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800abb4:	61d3      	str	r3, [r2, #28]
 800abb6:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <HAL_PCD_MspInit+0x48>)
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800abc2:	2200      	movs	r2, #0
 800abc4:	2100      	movs	r1, #0
 800abc6:	2014      	movs	r0, #20
 800abc8:	f7f6 f977 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800abcc:	2014      	movs	r0, #20
 800abce:	f7f6 f990 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800abd2:	bf00      	nop
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	40005c00 	.word	0x40005c00
 800abe0:	40021000 	.word	0x40021000

0800abe4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800abf8:	4619      	mov	r1, r3
 800abfa:	4610      	mov	r0, r2
 800abfc:	f7fe fdaf 	bl	800975e <USBD_LL_SetupStage>
}
 800ac00:	bf00      	nop
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ac1a:	78fa      	ldrb	r2, [r7, #3]
 800ac1c:	6879      	ldr	r1, [r7, #4]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	00db      	lsls	r3, r3, #3
 800ac26:	440b      	add	r3, r1
 800ac28:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	78fb      	ldrb	r3, [r7, #3]
 800ac30:	4619      	mov	r1, r3
 800ac32:	f7fe fde1 	bl	80097f8 <USBD_LL_DataOutStage>
}
 800ac36:	bf00      	nop
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b082      	sub	sp, #8
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	460b      	mov	r3, r1
 800ac48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ac50:	78fa      	ldrb	r2, [r7, #3]
 800ac52:	6879      	ldr	r1, [r7, #4]
 800ac54:	4613      	mov	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	440b      	add	r3, r1
 800ac5e:	333c      	adds	r3, #60	; 0x3c
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	78fb      	ldrb	r3, [r7, #3]
 800ac64:	4619      	mov	r1, r3
 800ac66:	f7fe fe38 	bl	80098da <USBD_LL_DataInStage>
}
 800ac6a:	bf00      	nop
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fe ff48 	bl	8009b16 <USBD_LL_SOF>
}
 800ac86:	bf00      	nop
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac96:	2301      	movs	r3, #1
 800ac98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d001      	beq.n	800aca6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aca2:	f7f5 fdfa 	bl	800089a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800acac:	7bfa      	ldrb	r2, [r7, #15]
 800acae:	4611      	mov	r1, r2
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fe fef8 	bl	8009aa6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fe feb1 	bl	8009a24 <USBD_LL_Reset>
}
 800acc2:	bf00      	nop
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fe fef2 	bl	8009ac4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d005      	beq.n	800acf4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ace8:	4b04      	ldr	r3, [pc, #16]	; (800acfc <HAL_PCD_SuspendCallback+0x30>)
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	4a03      	ldr	r2, [pc, #12]	; (800acfc <HAL_PCD_SuspendCallback+0x30>)
 800acee:	f043 0306 	orr.w	r3, r3, #6
 800acf2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800acf4:	bf00      	nop
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	e000ed00 	.word	0xe000ed00

0800ad00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fe feec 	bl	8009aec <USBD_LL_Resume>
}
 800ad14:	bf00      	nop
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ad24:	4a28      	ldr	r2, [pc, #160]	; (800adc8 <USBD_LL_Init+0xac>)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a26      	ldr	r2, [pc, #152]	; (800adc8 <USBD_LL_Init+0xac>)
 800ad30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ad34:	4b24      	ldr	r3, [pc, #144]	; (800adc8 <USBD_LL_Init+0xac>)
 800ad36:	4a25      	ldr	r2, [pc, #148]	; (800adcc <USBD_LL_Init+0xb0>)
 800ad38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ad3a:	4b23      	ldr	r3, [pc, #140]	; (800adc8 <USBD_LL_Init+0xac>)
 800ad3c:	2208      	movs	r2, #8
 800ad3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ad40:	4b21      	ldr	r3, [pc, #132]	; (800adc8 <USBD_LL_Init+0xac>)
 800ad42:	2202      	movs	r2, #2
 800ad44:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ad46:	4b20      	ldr	r3, [pc, #128]	; (800adc8 <USBD_LL_Init+0xac>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ad4c:	4b1e      	ldr	r3, [pc, #120]	; (800adc8 <USBD_LL_Init+0xac>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ad52:	4b1d      	ldr	r3, [pc, #116]	; (800adc8 <USBD_LL_Init+0xac>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ad58:	481b      	ldr	r0, [pc, #108]	; (800adc8 <USBD_LL_Init+0xac>)
 800ad5a:	f7f8 ffe9 	bl	8003d30 <HAL_PCD_Init>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ad64:	f7f5 fd99 	bl	800089a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad6e:	2318      	movs	r3, #24
 800ad70:	2200      	movs	r2, #0
 800ad72:	2100      	movs	r1, #0
 800ad74:	f7fa fc5d 	bl	8005632 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad7e:	2358      	movs	r3, #88	; 0x58
 800ad80:	2200      	movs	r2, #0
 800ad82:	2180      	movs	r1, #128	; 0x80
 800ad84:	f7fa fc55 	bl	8005632 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad8e:	23c0      	movs	r3, #192	; 0xc0
 800ad90:	2200      	movs	r2, #0
 800ad92:	2181      	movs	r1, #129	; 0x81
 800ad94:	f7fa fc4d 	bl	8005632 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad9e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ada2:	2200      	movs	r2, #0
 800ada4:	2101      	movs	r1, #1
 800ada6:	f7fa fc44 	bl	8005632 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adb4:	2200      	movs	r2, #0
 800adb6:	2182      	movs	r1, #130	; 0x82
 800adb8:	f7fa fc3b 	bl	8005632 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20001024 	.word	0x20001024
 800adcc:	40005c00 	.word	0x40005c00

0800add0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7f9 f8ad 	bl	8003f46 <HAL_PCD_Start>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 f94e 	bl	800b094 <USBD_Get_USB_Status>
 800adf8:	4603      	mov	r3, r0
 800adfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b084      	sub	sp, #16
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	4608      	mov	r0, r1
 800ae10:	4611      	mov	r1, r2
 800ae12:	461a      	mov	r2, r3
 800ae14:	4603      	mov	r3, r0
 800ae16:	70fb      	strb	r3, [r7, #3]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70bb      	strb	r3, [r7, #2]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae2e:	78bb      	ldrb	r3, [r7, #2]
 800ae30:	883a      	ldrh	r2, [r7, #0]
 800ae32:	78f9      	ldrb	r1, [r7, #3]
 800ae34:	f7f9 fa25 	bl	8004282 <HAL_PCD_EP_Open>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 f928 	bl	800b094 <USBD_Get_USB_Status>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b084      	sub	sp, #16
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae6c:	78fa      	ldrb	r2, [r7, #3]
 800ae6e:	4611      	mov	r1, r2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7f9 fa6c 	bl	800434e <HAL_PCD_EP_Close>
 800ae76:	4603      	mov	r3, r0
 800ae78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 f909 	bl	800b094 <USBD_Get_USB_Status>
 800ae82:	4603      	mov	r3, r0
 800ae84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aeaa:	78fa      	ldrb	r2, [r7, #3]
 800aeac:	4611      	mov	r1, r2
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7f9 fb2c 	bl	800450c <HAL_PCD_EP_SetStall>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f000 f8ea 	bl	800b094 <USBD_Get_USB_Status>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aec4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	460b      	mov	r3, r1
 800aed8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aee8:	78fa      	ldrb	r2, [r7, #3]
 800aeea:	4611      	mov	r1, r2
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7f9 fb6d 	bl	80045cc <HAL_PCD_EP_ClrStall>
 800aef2:	4603      	mov	r3, r0
 800aef4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aef6:	7bfb      	ldrb	r3, [r7, #15]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f000 f8cb 	bl	800b094 <USBD_Get_USB_Status>
 800aefe:	4603      	mov	r3, r0
 800af00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af02:	7bbb      	ldrb	r3, [r7, #14]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af24:	2b00      	cmp	r3, #0
 800af26:	da0c      	bge.n	800af42 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af28:	78fb      	ldrb	r3, [r7, #3]
 800af2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af2e:	68f9      	ldr	r1, [r7, #12]
 800af30:	1c5a      	adds	r2, r3, #1
 800af32:	4613      	mov	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4413      	add	r3, r2
 800af38:	00db      	lsls	r3, r3, #3
 800af3a:	440b      	add	r3, r1
 800af3c:	3302      	adds	r3, #2
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	e00b      	b.n	800af5a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af42:	78fb      	ldrb	r3, [r7, #3]
 800af44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af48:	68f9      	ldr	r1, [r7, #12]
 800af4a:	4613      	mov	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	00db      	lsls	r3, r3, #3
 800af52:	440b      	add	r3, r1
 800af54:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800af58:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	bc80      	pop	{r7}
 800af62:	4770      	bx	lr

0800af64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	460b      	mov	r3, r1
 800af6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af7e:	78fa      	ldrb	r2, [r7, #3]
 800af80:	4611      	mov	r1, r2
 800af82:	4618      	mov	r0, r3
 800af84:	f7f9 f958 	bl	8004238 <HAL_PCD_SetAddress>
 800af88:	4603      	mov	r3, r0
 800af8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 f880 	bl	800b094 <USBD_Get_USB_Status>
 800af94:	4603      	mov	r3, r0
 800af96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af98:	7bbb      	ldrb	r3, [r7, #14]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b086      	sub	sp, #24
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	461a      	mov	r2, r3
 800afae:	460b      	mov	r3, r1
 800afb0:	72fb      	strb	r3, [r7, #11]
 800afb2:	4613      	mov	r3, r2
 800afb4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afc4:	893b      	ldrh	r3, [r7, #8]
 800afc6:	7af9      	ldrb	r1, [r7, #11]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	f7f9 fa5c 	bl	8004486 <HAL_PCD_EP_Transmit>
 800afce:	4603      	mov	r3, r0
 800afd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 f85d 	bl	800b094 <USBD_Get_USB_Status>
 800afda:	4603      	mov	r3, r0
 800afdc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afde:	7dbb      	ldrb	r3, [r7, #22]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3718      	adds	r7, #24
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	607a      	str	r2, [r7, #4]
 800aff2:	461a      	mov	r2, r3
 800aff4:	460b      	mov	r3, r1
 800aff6:	72fb      	strb	r3, [r7, #11]
 800aff8:	4613      	mov	r3, r2
 800affa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b00a:	893b      	ldrh	r3, [r7, #8]
 800b00c:	7af9      	ldrb	r1, [r7, #11]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	f7f9 f9e5 	bl	80043de <HAL_PCD_EP_Receive>
 800b014:	4603      	mov	r3, r0
 800b016:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b018:	7dfb      	ldrb	r3, [r7, #23]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 f83a 	bl	800b094 <USBD_Get_USB_Status>
 800b020:	4603      	mov	r3, r0
 800b022:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b024:	7dbb      	ldrb	r3, [r7, #22]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3718      	adds	r7, #24
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b082      	sub	sp, #8
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	460b      	mov	r3, r1
 800b038:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b040:	78fa      	ldrb	r2, [r7, #3]
 800b042:	4611      	mov	r1, r2
 800b044:	4618      	mov	r0, r3
 800b046:	f7f9 fa07 	bl	8004458 <HAL_PCD_EP_GetRxCount>
 800b04a:	4603      	mov	r3, r0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b05c:	4b02      	ldr	r3, [pc, #8]	; (800b068 <USBD_static_malloc+0x14>)
}
 800b05e:	4618      	mov	r0, r3
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	bc80      	pop	{r7}
 800b066:	4770      	bx	lr
 800b068:	20001310 	.word	0x20001310

0800b06c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]

}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	bc80      	pop	{r7}
 800b07c:	4770      	bx	lr

0800b07e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b07e:	b480      	push	{r7}
 800b080:	b083      	sub	sp, #12
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	460b      	mov	r3, r1
 800b088:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b08a:	bf00      	nop
 800b08c:	370c      	adds	r7, #12
 800b08e:	46bd      	mov	sp, r7
 800b090:	bc80      	pop	{r7}
 800b092:	4770      	bx	lr

0800b094 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	4603      	mov	r3, r0
 800b09c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0a2:	79fb      	ldrb	r3, [r7, #7]
 800b0a4:	2b03      	cmp	r3, #3
 800b0a6:	d817      	bhi.n	800b0d8 <USBD_Get_USB_Status+0x44>
 800b0a8:	a201      	add	r2, pc, #4	; (adr r2, 800b0b0 <USBD_Get_USB_Status+0x1c>)
 800b0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ae:	bf00      	nop
 800b0b0:	0800b0c1 	.word	0x0800b0c1
 800b0b4:	0800b0c7 	.word	0x0800b0c7
 800b0b8:	0800b0cd 	.word	0x0800b0cd
 800b0bc:	0800b0d3 	.word	0x0800b0d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0c4:	e00b      	b.n	800b0de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ca:	e008      	b.n	800b0de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d0:	e005      	b.n	800b0de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d6:	e002      	b.n	800b0de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b0d8:	2302      	movs	r3, #2
 800b0da:	73fb      	strb	r3, [r7, #15]
    break;
 800b0dc:	bf00      	nop
  }
  return usb_status;
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bc80      	pop	{r7}
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop

0800b0ec <afe4404_RstSet>:
extern uint8_t transmit_cplt;
extern I2C_HandleTypeDef cur_i2c;
extern int setup;
/* Private user code ---------------------------------------------------------*/
void afe4404_RstSet(void)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(afe4404_RST_GPIO_PORT, afe4404_RST_PIN, SET);
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	2110      	movs	r1, #16
 800b0f4:	4802      	ldr	r0, [pc, #8]	; (800b100 <afe4404_RstSet+0x14>)
 800b0f6:	f7f6 f91d 	bl	8001334 <HAL_GPIO_WritePin>
}
 800b0fa:	bf00      	nop
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	40010c00 	.word	0x40010c00

0800b104 <afe4404_RstReset>:


void afe4404_RstReset(void)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(afe4404_RST_GPIO_PORT, afe4404_RST_PIN, RESET);
 800b108:	2200      	movs	r2, #0
 800b10a:	2110      	movs	r1, #16
 800b10c:	4802      	ldr	r0, [pc, #8]	; (800b118 <afe4404_RstReset+0x14>)
 800b10e:	f7f6 f911 	bl	8001334 <HAL_GPIO_WritePin>
}
 800b112:	bf00      	nop
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	40010c00 	.word	0x40010c00

0800b11c <afe4404_I2C_Write>:

void afe4404_I2C_Write(uint8_t * data, uint8_t count)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af02      	add	r7, sp, #8
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
	while(HAL_I2C_Master_Transmit(&cur_i2c, afe4404_address<< 1, data, count, 10));
 800b128:	bf00      	nop
 800b12a:	78fb      	ldrb	r3, [r7, #3]
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	220a      	movs	r2, #10
 800b130:	9200      	str	r2, [sp, #0]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	21b0      	movs	r1, #176	; 0xb0
 800b136:	4805      	ldr	r0, [pc, #20]	; (800b14c <afe4404_I2C_Write+0x30>)
 800b138:	f7f6 fa7a 	bl	8001630 <HAL_I2C_Master_Transmit>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1f3      	bne.n	800b12a <afe4404_I2C_Write+0xe>
}
 800b142:	bf00      	nop
 800b144:	bf00      	nop
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	20000300 	.word	0x20000300

0800b150 <afe4404_I2C_Read>:

void afe4404_I2C_Read(uint8_t * reg, uint8_t * buffer, uint8_t cmd_size, uint8_t count)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b088      	sub	sp, #32
 800b154:	af04      	add	r7, sp, #16
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	4611      	mov	r1, r2
 800b15c:	461a      	mov	r2, r3
 800b15e:	460b      	mov	r3, r1
 800b160:	71fb      	strb	r3, [r7, #7]
 800b162:	4613      	mov	r3, r2
 800b164:	71bb      	strb	r3, [r7, #6]
	while(HAL_I2C_Mem_Read(&cur_i2c, afe4404_address<< 1, *reg, cmd_size, buffer, count, 10));
 800b166:	bf00      	nop
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	79fb      	ldrb	r3, [r7, #7]
 800b170:	b299      	uxth	r1, r3
 800b172:	79bb      	ldrb	r3, [r7, #6]
 800b174:	b29b      	uxth	r3, r3
 800b176:	200a      	movs	r0, #10
 800b178:	9002      	str	r0, [sp, #8]
 800b17a:	9301      	str	r3, [sp, #4]
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	460b      	mov	r3, r1
 800b182:	21b0      	movs	r1, #176	; 0xb0
 800b184:	4805      	ldr	r0, [pc, #20]	; (800b19c <afe4404_I2C_Read+0x4c>)
 800b186:	f7f6 fb51 	bl	800182c <HAL_I2C_Mem_Read>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1eb      	bne.n	800b168 <afe4404_I2C_Read+0x18>
}
 800b190:	bf00      	nop
 800b192:	bf00      	nop
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	20000300 	.word	0x20000300

0800b1a0 <afe4404_Delay_ms>:

void afe4404_Delay_ms(uint32_t ms)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f7f5 fd8b 	bl	8000cc4 <HAL_Delay>
}
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <afe4404_send_results>:

void afe4404_send_results(uint8_t num, uint32_t led1, uint32_t led2, uint32_t led3)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]
 800b1c0:	603b      	str	r3, [r7, #0]
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	73fb      	strb	r3, [r7, #15]
//	if(led1 == 0)
//	{
//		setup = SETUP_NOTDONE;
//		return;
//	}
	afe4404_send_preambula();
 800b1c6:	f000 f819 	bl	800b1fc <afe4404_send_preambula>
	afe4404_Delay_ms(5);
 800b1ca:	2005      	movs	r0, #5
 800b1cc:	f7ff ffe8 	bl	800b1a0 <afe4404_Delay_ms>

	CDC_Transmit_FS((unsigned char*) &num, 1);
 800b1d0:	f107 030f 	add.w	r3, r7, #15
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7ff fbaa 	bl	800a930 <CDC_Transmit_FS>

	afe4404_Delay_ms(5);
 800b1dc:	2005      	movs	r0, #5
 800b1de:	f7ff ffdf 	bl	800b1a0 <afe4404_Delay_ms>
	CDC_Transmit_FS((unsigned char*) &led1, 4);
 800b1e2:	f107 0308 	add.w	r3, r7, #8
 800b1e6:	2104      	movs	r1, #4
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7ff fba1 	bl	800a930 <CDC_Transmit_FS>
	afe4404_Delay_ms(5);
 800b1ee:	2005      	movs	r0, #5
 800b1f0:	f7ff ffd6 	bl	800b1a0 <afe4404_Delay_ms>
//	CDC_Transmit_FS((unsigned char*) &led3, 4);

//	char send[128];
//	sprintf(send, "%d, %ld, %ld, %ld\r\n", num, led1, led2, led3);
//	CDC_Transmit_FS((unsigned char*) send, strlen(send));
}
 800b1f4:	bf00      	nop
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <afe4404_send_preambula>:

void afe4404_send_preambula()
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
	char preambula[4];
	preambula[0] = 0xAA;
 800b202:	23aa      	movs	r3, #170	; 0xaa
 800b204:	713b      	strb	r3, [r7, #4]
	preambula[1] = 0x55;
 800b206:	2355      	movs	r3, #85	; 0x55
 800b208:	717b      	strb	r3, [r7, #5]
	preambula[2] = 0xAA;
 800b20a:	23aa      	movs	r3, #170	; 0xaa
 800b20c:	71bb      	strb	r3, [r7, #6]
	preambula[3] = 0x55;
 800b20e:	2355      	movs	r3, #85	; 0x55
 800b210:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((unsigned char*) &preambula, 4);
 800b212:	1d3b      	adds	r3, r7, #4
 800b214:	2104      	movs	r1, #4
 800b216:	4618      	mov	r0, r3
 800b218:	f7ff fb8a 	bl	800a930 <CDC_Transmit_FS>
}
 800b21c:	bf00      	nop
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <initStatHRM>:
        return temp;
}

//TI HRM Library Functions
void initStatHRM (void)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
  unsigned char i;

  // Init HR variables
  lastPeak=0;
 800b22a:	4b2a      	ldr	r3, [pc, #168]	; (800b2d4 <initStatHRM+0xb0>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	601a      	str	r2, [r3, #0]
  lastOnset=0;
 800b230:	4b29      	ldr	r3, [pc, #164]	; (800b2d8 <initStatHRM+0xb4>)
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
  movingWindowHP=0;
 800b236:	4b29      	ldr	r3, [pc, #164]	; (800b2dc <initStatHRM+0xb8>)
 800b238:	2200      	movs	r2, #0
 800b23a:	601a      	str	r2, [r3, #0]
  movingWindowCount=0;
 800b23c:	4b28      	ldr	r3, [pc, #160]	; (800b2e0 <initStatHRM+0xbc>)
 800b23e:	2200      	movs	r2, #0
 800b240:	701a      	strb	r2, [r3, #0]

  for (i=20; i>=1; i--)
 800b242:	2314      	movs	r3, #20
 800b244:	71fb      	strb	r3, [r7, #7]
 800b246:	e00a      	b.n	800b25e <initStatHRM+0x3a>
    peakWindowHP[(unsigned char)(i-1)]=0;
 800b248:	79fb      	ldrb	r3, [r7, #7]
 800b24a:	3b01      	subs	r3, #1
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	4619      	mov	r1, r3
 800b250:	4b24      	ldr	r3, [pc, #144]	; (800b2e4 <initStatHRM+0xc0>)
 800b252:	2200      	movs	r2, #0
 800b254:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
  for (i=20; i>=1; i--)
 800b258:	79fb      	ldrb	r3, [r7, #7]
 800b25a:	3b01      	subs	r3, #1
 800b25c:	71fb      	strb	r3, [r7, #7]
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1f1      	bne.n	800b248 <initStatHRM+0x24>

  for (i=12; i>=1; i--)
 800b264:	230c      	movs	r3, #12
 800b266:	71fb      	strb	r3, [r7, #7]
 800b268:	e009      	b.n	800b27e <initStatHRM+0x5a>
    HR[(unsigned char)(i-1)]=0;
 800b26a:	79fb      	ldrb	r3, [r7, #7]
 800b26c:	3b01      	subs	r3, #1
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	461a      	mov	r2, r3
 800b272:	4b1d      	ldr	r3, [pc, #116]	; (800b2e8 <initStatHRM+0xc4>)
 800b274:	2100      	movs	r1, #0
 800b276:	5499      	strb	r1, [r3, r2]
  for (i=12; i>=1; i--)
 800b278:	79fb      	ldrb	r3, [r7, #7]
 800b27a:	3b01      	subs	r3, #1
 800b27c:	71fb      	strb	r3, [r7, #7]
 800b27e:	79fb      	ldrb	r3, [r7, #7]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1f2      	bne.n	800b26a <initStatHRM+0x46>

  // Sampling frequency
  frequency = 100;
 800b284:	4b19      	ldr	r3, [pc, #100]	; (800b2ec <initStatHRM+0xc8>)
 800b286:	2264      	movs	r2, #100	; 0x64
 800b288:	601a      	str	r2, [r3, #0]
  // Moving average window size (removes high frequency noise)
  movingWindowSize = frequency/50;
 800b28a:	4b18      	ldr	r3, [pc, #96]	; (800b2ec <initStatHRM+0xc8>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a18      	ldr	r2, [pc, #96]	; (800b2f0 <initStatHRM+0xcc>)
 800b290:	fba2 2303 	umull	r2, r3, r2, r3
 800b294:	091b      	lsrs	r3, r3, #4
 800b296:	b2da      	uxtb	r2, r3
 800b298:	4b16      	ldr	r3, [pc, #88]	; (800b2f4 <initStatHRM+0xd0>)
 800b29a:	701a      	strb	r2, [r3, #0]
  // Length of the shortest pulse possible
  smallest = frequency*60/220;
 800b29c:	4b13      	ldr	r3, [pc, #76]	; (800b2ec <initStatHRM+0xc8>)
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	011b      	lsls	r3, r3, #4
 800b2a4:	1a9b      	subs	r3, r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	089b      	lsrs	r3, r3, #2
 800b2aa:	4a13      	ldr	r2, [pc, #76]	; (800b2f8 <initStatHRM+0xd4>)
 800b2ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b0:	085b      	lsrs	r3, r3, #1
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	4b11      	ldr	r3, [pc, #68]	; (800b2fc <initStatHRM+0xd8>)
 800b2b6:	701a      	strb	r2, [r3, #0]
  foundPeak=0;
 800b2b8:	4b11      	ldr	r3, [pc, #68]	; (800b300 <initStatHRM+0xdc>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	701a      	strb	r2, [r3, #0]
  totalFoundPeak=0;
 800b2be:	4b11      	ldr	r3, [pc, #68]	; (800b304 <initStatHRM+0xe0>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	701a      	strb	r2, [r3, #0]
  HeartRate=0;
 800b2c4:	4b10      	ldr	r3, [pc, #64]	; (800b308 <initStatHRM+0xe4>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	701a      	strb	r2, [r3, #0]
}
 800b2ca:	bf00      	nop
 800b2cc:	370c      	adds	r7, #12
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bc80      	pop	{r7}
 800b2d2:	4770      	bx	lr
 800b2d4:	20001594 	.word	0x20001594
 800b2d8:	20001598 	.word	0x20001598
 800b2dc:	2000159c 	.word	0x2000159c
 800b2e0:	200015a0 	.word	0x200015a0
 800b2e4:	20001530 	.word	0x20001530
 800b2e8:	20001584 	.word	0x20001584
 800b2ec:	200015a8 	.word	0x200015a8
 800b2f0:	51eb851f 	.word	0x51eb851f
 800b2f4:	200015a1 	.word	0x200015a1
 800b2f8:	094f2095 	.word	0x094f2095
 800b2fc:	200015a2 	.word	0x200015a2
 800b300:	200015a3 	.word	0x200015a3
 800b304:	200015a4 	.word	0x200015a4
 800b308:	20001590 	.word	0x20001590

0800b30c <hr3_hal_init>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void hr3_hal_init( uint8_t address_id )
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	71fb      	strb	r3, [r7, #7]

#if defined( __MIKROC_PRO_FOR_ARM__ )   ||  \
    defined( __MIKROC_PRO_FOR_FT90x__ )
    _i2c_hw_address             = address_id;
#else
    _i2c_hw_address             = ( address_id << 1 );
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	005b      	lsls	r3, r3, #1
 800b31a:	b2da      	uxtb	r2, r3
 800b31c:	4b03      	ldr	r3, [pc, #12]	; (800b32c <hr3_hal_init+0x20>)
 800b31e:	701a      	strb	r2, [r3, #0]
#endif
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	bc80      	pop	{r7}
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	200015ac 	.word	0x200015ac

0800b330 <hr3_hal_write>:

void hr3_hal_write( uint8_t *command,
                          uint8_t *buffer,
                          uint16_t count )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b0c8      	sub	sp, #288	; 0x120
 800b334:	af00      	add	r7, sp, #0
 800b336:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b33a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b33e:	6018      	str	r0, [r3, #0]
 800b340:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b344:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b348:	6019      	str	r1, [r3, #0]
 800b34a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b34e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800b352:	801a      	strh	r2, [r3, #0]
    uint8_t temp[ BUFF_SIZE ];

    uint8_t cmd_size    = 1;
 800b354:	2301      	movs	r3, #1
 800b356:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    uint16_t i          = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
    uint8_t *temp_ptr   = temp;
 800b360:	f107 0310 	add.w	r3, r7, #16
 800b364:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    uint8_t *buff_ptr   = buffer;
 800b368:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b36c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    uint8_t *cmd_ptr    = command;
 800b376:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b37a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    /* Fill the temp buffer with data*/
    while( cmd_size-- )
 800b384:	e00f      	b.n	800b3a6 <hr3_hal_write+0x76>
        temp[ i++ ] = *( cmd_ptr++ );
 800b386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800b390:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 800b394:	1c51      	adds	r1, r2, #1
 800b396:	f8a7 111c 	strh.w	r1, [r7, #284]	; 0x11c
 800b39a:	7819      	ldrb	r1, [r3, #0]
 800b39c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b3a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b3a4:	5499      	strb	r1, [r3, r2]
    while( cmd_size-- )
 800b3a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b3aa:	1e5a      	subs	r2, r3, #1
 800b3ac:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1e8      	bne.n	800b386 <hr3_hal_write+0x56>

    while ( count-- )
 800b3b4:	e00f      	b.n	800b3d6 <hr3_hal_write+0xa6>
        temp[ i++ ] = *( buff_ptr++ );
 800b3b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b3ba:	1c5a      	adds	r2, r3, #1
 800b3bc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800b3c0:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 800b3c4:	1c51      	adds	r1, r2, #1
 800b3c6:	f8a7 111c 	strh.w	r1, [r7, #284]	; 0x11c
 800b3ca:	7819      	ldrb	r1, [r3, #0]
 800b3cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b3d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b3d4:	5499      	strb	r1, [r3, r2]
    while ( count-- )
 800b3d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b3da:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800b3de:	881b      	ldrh	r3, [r3, #0]
 800b3e0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800b3e4:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 800b3e8:	1e59      	subs	r1, r3, #1
 800b3ea:	8011      	strh	r1, [r2, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1e2      	bne.n	800b3b6 <hr3_hal_write+0x86>


#if defined(HAL_STM32F103)
    afe4404_I2C_Write(temp_ptr, i);
 800b3f0:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800b3fc:	f7ff fe8e 	bl	800b11c <afe4404_I2C_Write>
    while( i-- )
        write_i2c_p( *( temp_ptr++ ) );

    stop_i2c_p();
#endif
}
 800b400:	bf00      	nop
 800b402:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <hr3_hal_read>:

void hr3_hal_read( uint8_t *command,
                         uint8_t *buffer,
                         uint16_t count )
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b086      	sub	sp, #24
 800b40e:	af00      	add	r7, sp, #0
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	60b9      	str	r1, [r7, #8]
 800b414:	4613      	mov	r3, r2
 800b416:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd_size    =  1;
 800b418:	2301      	movs	r3, #1
 800b41a:	75fb      	strb	r3, [r7, #23]

#if defined(HAL_STM32F103)
    afe4404_I2C_Read(command, buffer, cmd_size, count);
 800b41c:	88fb      	ldrh	r3, [r7, #6]
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	7dfa      	ldrb	r2, [r7, #23]
 800b422:	68b9      	ldr	r1, [r7, #8]
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f7ff fe93 	bl	800b150 <afe4404_I2C_Read>

    *buffer = read_i2c_p( PIC_NACK_BIT );

    stop_i2c_p();
#endif
}
 800b42a:	bf00      	nop
 800b42c:	3718      	adds	r7, #24
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <hr3_init>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

uint8_t hr3_init( uint8_t address, dynamic_modes_t* dyn_modes )
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b082      	sub	sp, #8
 800b436:	af00      	add	r7, sp, #0
 800b438:	4603      	mov	r3, r0
 800b43a:	6039      	str	r1, [r7, #0]
 800b43c:	71fb      	strb	r3, [r7, #7]
	hr3_hal_init( address );
 800b43e:	79fb      	ldrb	r3, [r7, #7]
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff ff63 	bl	800b30c <hr3_hal_init>
	hr3_set_settings( sw_reset_en,diag_mode_dis,susp_count_dis,reg_read_dis );
 800b446:	2300      	movs	r3, #0
 800b448:	2200      	movs	r2, #0
 800b44a:	2100      	movs	r1, #0
 800b44c:	2001      	movs	r0, #1
 800b44e:	f000 f885 	bl	800b55c <hr3_set_settings>
	hr3_set_led2_start_end( 0, 399 );
 800b452:	f240 118f 	movw	r1, #399	; 0x18f
 800b456:	2000      	movs	r0, #0
 800b458:	f000 f9be 	bl	800b7d8 <hr3_set_led2_start_end>
	hr3_set_led2_sample_start_end( 80, 399 );
 800b45c:	f240 118f 	movw	r1, #399	; 0x18f
 800b460:	2050      	movs	r0, #80	; 0x50
 800b462:	f000 f8c1 	bl	800b5e8 <hr3_set_led2_sample_start_end>
	hr3_set_adc_reset0_start_end( 401, 407 );
 800b466:	f240 1197 	movw	r1, #407	; 0x197
 800b46a:	f240 1091 	movw	r0, #401	; 0x191
 800b46e:	f000 fb27 	bl	800bac0 <hr3_set_adc_reset0_start_end>
	hr3_set_led2_convert_start_end( 408, 1467 );
 800b472:	f240 51bb 	movw	r1, #1467	; 0x5bb
 800b476:	f44f 70cc 	mov.w	r0, #408	; 0x198
 800b47a:	f000 fa29 	bl	800b8d0 <hr3_set_led2_convert_start_end>
	hr3_set_led3_start_stop( 400, 799 );
 800b47e:	f240 311f 	movw	r1, #799	; 0x31f
 800b482:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b486:	f000 fec3 	bl	800c210 <hr3_set_led3_start_stop>
	hr3_set_led3_sample_start_end( 480, 799 );
 800b48a:	f240 311f 	movw	r1, #799	; 0x31f
 800b48e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800b492:	f000 f925 	bl	800b6e0 <hr3_set_led3_sample_start_end>
	hr3_set_adc_reset1_start_end( 1469, 1475 );
 800b496:	f240 51c3 	movw	r1, #1475	; 0x5c3
 800b49a:	f240 50bd 	movw	r0, #1469	; 0x5bd
 800b49e:	f000 fb4d 	bl	800bb3c <hr3_set_adc_reset1_start_end>
	hr3_set_led3_convert_start_end( 1476, 2535 );
 800b4a2:	f640 11e7 	movw	r1, #2535	; 0x9e7
 800b4a6:	f240 50c4 	movw	r0, #1476	; 0x5c4
 800b4aa:	f000 fa4f 	bl	800b94c <hr3_set_led3_convert_start_end>
	hr3_set_led1_start_end( 800, 1199 );
 800b4ae:	f240 41af 	movw	r1, #1199	; 0x4af
 800b4b2:	f44f 7048 	mov.w	r0, #800	; 0x320
 800b4b6:	f000 f8d5 	bl	800b664 <hr3_set_led1_start_end>
	hr3_set_led1_sample_start_end( 880, 1199 );
 800b4ba:	f240 41af 	movw	r1, #1199	; 0x4af
 800b4be:	f44f 705c 	mov.w	r0, #880	; 0x370
 800b4c2:	f000 f94b 	bl	800b75c <hr3_set_led1_sample_start_end>
	hr3_set_adc_reset2_start_end( 2537, 2543 );
 800b4c6:	f640 11ef 	movw	r1, #2543	; 0x9ef
 800b4ca:	f640 10e9 	movw	r0, #2537	; 0x9e9
 800b4ce:	f000 fb73 	bl	800bbb8 <hr3_set_adc_reset2_start_end>
	hr3_set_led1_convert_start_end( 2544, 3603 );
 800b4d2:	f640 6113 	movw	r1, #3603	; 0xe13
 800b4d6:	f44f 601f 	mov.w	r0, #2544	; 0x9f0
 800b4da:	f000 fa75 	bl	800b9c8 <hr3_set_led1_convert_start_end>
	hr3_set_amb1_sample_start_end( 1279, 1598 );
 800b4de:	f240 613e 	movw	r1, #1598	; 0x63e
 800b4e2:	f240 40ff 	movw	r0, #1279	; 0x4ff
 800b4e6:	f000 f9b5 	bl	800b854 <hr3_set_amb1_sample_start_end>
	hr3_set_adc_reset3_start_end( 3605, 3611 );
 800b4ea:	f640 611b 	movw	r1, #3611	; 0xe1b
 800b4ee:	f640 6015 	movw	r0, #3605	; 0xe15
 800b4f2:	f000 fb9f 	bl	800bc34 <hr3_set_adc_reset3_start_end>
	hr3_set_amb1_convert_start_end( 3612, 4671 );
 800b4f6:	f241 213f 	movw	r1, #4671	; 0x123f
 800b4fa:	f640 601c 	movw	r0, #3612	; 0xe1c
 800b4fe:	f000 faa1 	bl	800ba44 <hr3_set_amb1_convert_start_end>
	hr3_set_pdn_cycle_start_end( 5471, 39199 );
 800b502:	f649 111f 	movw	r1, #39199	; 0x991f
 800b506:	f241 505f 	movw	r0, #5471	; 0x155f
 800b50a:	f000 fe43 	bl	800c194 <hr3_set_pdn_cycle_start_end>
	hr3_set_prpct_count( 39999 );                              //Clock timing for CLKDIV_PRF  = 1
 800b50e:	f649 403f 	movw	r0, #39999	; 0x9c3f
 800b512:	f000 fbcd 	bl	800bcb0 <hr3_set_prpct_count>
	hr3_set_adc_reset3_start_end( 721, 722 );
	hr3_set_amb1_convert_start_end( 722, 934 );
	hr3_set_pdn_cycle_start_end( 1094, 7839 );
	hr3_set_prpct_count( 7999 );        */

	hr3_set_timer_and_average_num( true, 3 );
 800b516:	2103      	movs	r1, #3
 800b518:	2001      	movs	r0, #1
 800b51a:	f000 fbed 	bl	800bcf8 <hr3_set_timer_and_average_num>
	hr3_set_seperate_tia_gain( true, 0, 4 );
 800b51e:	2204      	movs	r2, #4
 800b520:	2100      	movs	r1, #0
 800b522:	2001      	movs	r0, #1
 800b524:	f000 fc26 	bl	800bd74 <hr3_set_seperate_tia_gain>
	hr3_set_tia_gain( false, 0, 3 );
 800b528:	2203      	movs	r2, #3
 800b52a:	2100      	movs	r1, #0
 800b52c:	2000      	movs	r0, #0
 800b52e:	f000 fc73 	bl	800be18 <hr3_set_tia_gain>
	hr3_set_led_currents( 15, 3, 3 );
 800b532:	2203      	movs	r2, #3
 800b534:	2103      	movs	r1, #3
 800b536:	200f      	movs	r0, #15
 800b538:	f000 fcc2 	bl	800bec0 <hr3_set_led_currents>
	hr3_set_dynamic_settings( dyn_modes );
 800b53c:	6838      	ldr	r0, [r7, #0]
 800b53e:	f000 fd0f 	bl	800bf60 <hr3_set_dynamic_settings>
	hr3_set_clkout_div( false, 2 );
 800b542:	2102      	movs	r1, #2
 800b544:	2000      	movs	r0, #0
 800b546:	f000 fd73 	bl	800c030 <hr3_set_clkout_div>
	hr3_set_int_clk_div( 1 );
 800b54a:	2001      	movs	r0, #1
 800b54c:	f000 fe9e 	bl	800c28c <hr3_set_int_clk_div>

	return 0;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
	...

0800b55c <hr3_set_settings>:

uint8_t hr3_set_settings( sw_reset_t sw_reset, diag_mode_t diag_mode,
                          susp_count_t susp_counter, reg_read_t reg_read )
{
 800b55c:	b590      	push	{r4, r7, lr}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	4604      	mov	r4, r0
 800b564:	4608      	mov	r0, r1
 800b566:	4611      	mov	r1, r2
 800b568:	461a      	mov	r2, r3
 800b56a:	4623      	mov	r3, r4
 800b56c:	71fb      	strb	r3, [r7, #7]
 800b56e:	4603      	mov	r3, r0
 800b570:	71bb      	strb	r3, [r7, #6]
 800b572:	460b      	mov	r3, r1
 800b574:	717b      	strb	r3, [r7, #5]
 800b576:	4613      	mov	r3, r2
 800b578:	713b      	strb	r3, [r7, #4]
    uint8_t reg = DIAGNOSIS;
 800b57a:	2300      	movs	r3, #0
 800b57c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800b57e:	4b19      	ldr	r3, [pc, #100]	; (800b5e4 <hr3_set_settings+0x88>)
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	81bb      	strh	r3, [r7, #12]
 800b584:	2300      	movs	r3, #0
 800b586:	73bb      	strb	r3, [r7, #14]

    temp[2] |= ( sw_reset << DIAG_SW_RST );
 800b588:	7bbb      	ldrb	r3, [r7, #14]
 800b58a:	b25a      	sxtb	r2, r3
 800b58c:	79fb      	ldrb	r3, [r7, #7]
 800b58e:	00db      	lsls	r3, r3, #3
 800b590:	b25b      	sxtb	r3, r3
 800b592:	4313      	orrs	r3, r2
 800b594:	b25b      	sxtb	r3, r3
 800b596:	b2db      	uxtb	r3, r3
 800b598:	73bb      	strb	r3, [r7, #14]
    temp[2] |= ( diag_mode << DIAG_EN );
 800b59a:	7bbb      	ldrb	r3, [r7, #14]
 800b59c:	b25a      	sxtb	r2, r3
 800b59e:	79bb      	ldrb	r3, [r7, #6]
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	b25b      	sxtb	r3, r3
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	b25b      	sxtb	r3, r3
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	73bb      	strb	r3, [r7, #14]
    temp[2] |= ( susp_counter << DIAG_TM_CNT_RST );
 800b5ac:	7bbb      	ldrb	r3, [r7, #14]
 800b5ae:	b25a      	sxtb	r2, r3
 800b5b0:	797b      	ldrb	r3, [r7, #5]
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	b25b      	sxtb	r3, r3
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	b25b      	sxtb	r3, r3
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	73bb      	strb	r3, [r7, #14]
    temp[2] |= ( reg_read << DIAG_REG_READ );
 800b5be:	7bba      	ldrb	r2, [r7, #14]
 800b5c0:	793b      	ldrb	r3, [r7, #4]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg, temp, 3 );
 800b5c8:	f107 010c 	add.w	r1, r7, #12
 800b5cc:	f107 030f 	add.w	r3, r7, #15
 800b5d0:	2203      	movs	r2, #3
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7ff feac 	bl	800b330 <hr3_hal_write>
    
    return 0;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd90      	pop	{r4, r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	0800c534 	.word	0x0800c534

0800b5e8 <hr3_set_led2_sample_start_end>:

uint8_t hr3_set_led2_sample_start_end( uint16_t start, uint16_t end )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	460a      	mov	r2, r1
 800b5f2:	80fb      	strh	r3, [r7, #6]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = SMPL_LED2_ST;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = SMPL_LED2_END;
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800b600:	4b17      	ldr	r3, [pc, #92]	; (800b660 <hr3_set_led2_sample_start_end+0x78>)
 800b602:	881b      	ldrh	r3, [r3, #0]
 800b604:	823b      	strh	r3, [r7, #16]
 800b606:	2300      	movs	r3, #0
 800b608:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800b60a:	4b15      	ldr	r3, [pc, #84]	; (800b660 <hr3_set_led2_sample_start_end+0x78>)
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	81bb      	strh	r3, [r7, #12]
 800b610:	2300      	movs	r3, #0
 800b612:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800b614:	88fb      	ldrh	r3, [r7, #6]
 800b616:	0a1b      	lsrs	r3, r3, #8
 800b618:	b29b      	uxth	r3, r3
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800b61e:	88fb      	ldrh	r3, [r7, #6]
 800b620:	b2db      	uxtb	r3, r3
 800b622:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800b624:	f107 0110 	add.w	r1, r7, #16
 800b628:	f107 0317 	add.w	r3, r7, #23
 800b62c:	2203      	movs	r2, #3
 800b62e:	4618      	mov	r0, r3
 800b630:	f7ff fe7e 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800b634:	88bb      	ldrh	r3, [r7, #4]
 800b636:	0a1b      	lsrs	r3, r3, #8
 800b638:	b29b      	uxth	r3, r3
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800b63e:	88bb      	ldrh	r3, [r7, #4]
 800b640:	b2db      	uxtb	r3, r3
 800b642:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800b644:	f107 010c 	add.w	r1, r7, #12
 800b648:	f107 0316 	add.w	r3, r7, #22
 800b64c:	2203      	movs	r2, #3
 800b64e:	4618      	mov	r0, r3
 800b650:	f7ff fe6e 	bl	800b330 <hr3_hal_write>

    return 0;
 800b654:	2300      	movs	r3, #0

}
 800b656:	4618      	mov	r0, r3
 800b658:	3718      	adds	r7, #24
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	0800c534 	.word	0x0800c534

0800b664 <hr3_set_led1_start_end>:

uint8_t hr3_set_led1_start_end( uint16_t start, uint16_t end )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	460a      	mov	r2, r1
 800b66e:	80fb      	strh	r3, [r7, #6]
 800b670:	4613      	mov	r3, r2
 800b672:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED1_ST;
 800b674:	2303      	movs	r3, #3
 800b676:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED1_END;
 800b678:	2304      	movs	r3, #4
 800b67a:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800b67c:	4b17      	ldr	r3, [pc, #92]	; (800b6dc <hr3_set_led1_start_end+0x78>)
 800b67e:	881b      	ldrh	r3, [r3, #0]
 800b680:	823b      	strh	r3, [r7, #16]
 800b682:	2300      	movs	r3, #0
 800b684:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800b686:	4b15      	ldr	r3, [pc, #84]	; (800b6dc <hr3_set_led1_start_end+0x78>)
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	81bb      	strh	r3, [r7, #12]
 800b68c:	2300      	movs	r3, #0
 800b68e:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800b690:	88fb      	ldrh	r3, [r7, #6]
 800b692:	0a1b      	lsrs	r3, r3, #8
 800b694:	b29b      	uxth	r3, r3
 800b696:	b2db      	uxtb	r3, r3
 800b698:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800b69a:	88fb      	ldrh	r3, [r7, #6]
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800b6a0:	f107 0110 	add.w	r1, r7, #16
 800b6a4:	f107 0317 	add.w	r3, r7, #23
 800b6a8:	2203      	movs	r2, #3
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff fe40 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800b6b0:	88bb      	ldrh	r3, [r7, #4]
 800b6b2:	0a1b      	lsrs	r3, r3, #8
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800b6ba:	88bb      	ldrh	r3, [r7, #4]
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800b6c0:	f107 010c 	add.w	r1, r7, #12
 800b6c4:	f107 0316 	add.w	r3, r7, #22
 800b6c8:	2203      	movs	r2, #3
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7ff fe30 	bl	800b330 <hr3_hal_write>

    return 0;
 800b6d0:	2300      	movs	r3, #0

}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	0800c534 	.word	0x0800c534

0800b6e0 <hr3_set_led3_sample_start_end>:

uint8_t hr3_set_led3_sample_start_end( uint16_t start, uint16_t end )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b086      	sub	sp, #24
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	460a      	mov	r2, r1
 800b6ea:	80fb      	strh	r3, [r7, #6]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = SMPL_LED3_ST;
 800b6f0:	2305      	movs	r3, #5
 800b6f2:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = SMPL_LED3_END;
 800b6f4:	2306      	movs	r3, #6
 800b6f6:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800b6f8:	4b17      	ldr	r3, [pc, #92]	; (800b758 <hr3_set_led3_sample_start_end+0x78>)
 800b6fa:	881b      	ldrh	r3, [r3, #0]
 800b6fc:	823b      	strh	r3, [r7, #16]
 800b6fe:	2300      	movs	r3, #0
 800b700:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800b702:	4b15      	ldr	r3, [pc, #84]	; (800b758 <hr3_set_led3_sample_start_end+0x78>)
 800b704:	881b      	ldrh	r3, [r3, #0]
 800b706:	81bb      	strh	r3, [r7, #12]
 800b708:	2300      	movs	r3, #0
 800b70a:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800b70c:	88fb      	ldrh	r3, [r7, #6]
 800b70e:	0a1b      	lsrs	r3, r3, #8
 800b710:	b29b      	uxth	r3, r3
 800b712:	b2db      	uxtb	r3, r3
 800b714:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800b716:	88fb      	ldrh	r3, [r7, #6]
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800b71c:	f107 0110 	add.w	r1, r7, #16
 800b720:	f107 0317 	add.w	r3, r7, #23
 800b724:	2203      	movs	r2, #3
 800b726:	4618      	mov	r0, r3
 800b728:	f7ff fe02 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800b72c:	88bb      	ldrh	r3, [r7, #4]
 800b72e:	0a1b      	lsrs	r3, r3, #8
 800b730:	b29b      	uxth	r3, r3
 800b732:	b2db      	uxtb	r3, r3
 800b734:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800b736:	88bb      	ldrh	r3, [r7, #4]
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800b73c:	f107 010c 	add.w	r1, r7, #12
 800b740:	f107 0316 	add.w	r3, r7, #22
 800b744:	2203      	movs	r2, #3
 800b746:	4618      	mov	r0, r3
 800b748:	f7ff fdf2 	bl	800b330 <hr3_hal_write>

    return 0;
 800b74c:	2300      	movs	r3, #0

}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	0800c534 	.word	0x0800c534

0800b75c <hr3_set_led1_sample_start_end>:

uint8_t hr3_set_led1_sample_start_end( uint16_t start, uint16_t end )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af00      	add	r7, sp, #0
 800b762:	4603      	mov	r3, r0
 800b764:	460a      	mov	r2, r1
 800b766:	80fb      	strh	r3, [r7, #6]
 800b768:	4613      	mov	r3, r2
 800b76a:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = SMPL_LED1_ST;
 800b76c:	2307      	movs	r3, #7
 800b76e:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = SMPL_LED1_END;
 800b770:	2308      	movs	r3, #8
 800b772:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800b774:	4b17      	ldr	r3, [pc, #92]	; (800b7d4 <hr3_set_led1_sample_start_end+0x78>)
 800b776:	881b      	ldrh	r3, [r3, #0]
 800b778:	823b      	strh	r3, [r7, #16]
 800b77a:	2300      	movs	r3, #0
 800b77c:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800b77e:	4b15      	ldr	r3, [pc, #84]	; (800b7d4 <hr3_set_led1_sample_start_end+0x78>)
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	81bb      	strh	r3, [r7, #12]
 800b784:	2300      	movs	r3, #0
 800b786:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800b788:	88fb      	ldrh	r3, [r7, #6]
 800b78a:	0a1b      	lsrs	r3, r3, #8
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800b792:	88fb      	ldrh	r3, [r7, #6]
 800b794:	b2db      	uxtb	r3, r3
 800b796:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800b798:	f107 0110 	add.w	r1, r7, #16
 800b79c:	f107 0317 	add.w	r3, r7, #23
 800b7a0:	2203      	movs	r2, #3
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7ff fdc4 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800b7a8:	88bb      	ldrh	r3, [r7, #4]
 800b7aa:	0a1b      	lsrs	r3, r3, #8
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800b7b2:	88bb      	ldrh	r3, [r7, #4]
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800b7b8:	f107 010c 	add.w	r1, r7, #12
 800b7bc:	f107 0316 	add.w	r3, r7, #22
 800b7c0:	2203      	movs	r2, #3
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7ff fdb4 	bl	800b330 <hr3_hal_write>

    return 0;
 800b7c8:	2300      	movs	r3, #0

}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3718      	adds	r7, #24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	0800c534 	.word	0x0800c534

0800b7d8 <hr3_set_led2_start_end>:

uint8_t hr3_set_led2_start_end( uint16_t start, uint16_t end )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	4603      	mov	r3, r0
 800b7e0:	460a      	mov	r2, r1
 800b7e2:	80fb      	strh	r3, [r7, #6]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED2_ST;
 800b7e8:	2309      	movs	r3, #9
 800b7ea:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED2_END;
 800b7ec:	230a      	movs	r3, #10
 800b7ee:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800b7f0:	4b17      	ldr	r3, [pc, #92]	; (800b850 <hr3_set_led2_start_end+0x78>)
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	823b      	strh	r3, [r7, #16]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800b7fa:	4b15      	ldr	r3, [pc, #84]	; (800b850 <hr3_set_led2_start_end+0x78>)
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	81bb      	strh	r3, [r7, #12]
 800b800:	2300      	movs	r3, #0
 800b802:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800b804:	88fb      	ldrh	r3, [r7, #6]
 800b806:	0a1b      	lsrs	r3, r3, #8
 800b808:	b29b      	uxth	r3, r3
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800b80e:	88fb      	ldrh	r3, [r7, #6]
 800b810:	b2db      	uxtb	r3, r3
 800b812:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800b814:	f107 0110 	add.w	r1, r7, #16
 800b818:	f107 0317 	add.w	r3, r7, #23
 800b81c:	2203      	movs	r2, #3
 800b81e:	4618      	mov	r0, r3
 800b820:	f7ff fd86 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800b824:	88bb      	ldrh	r3, [r7, #4]
 800b826:	0a1b      	lsrs	r3, r3, #8
 800b828:	b29b      	uxth	r3, r3
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800b82e:	88bb      	ldrh	r3, [r7, #4]
 800b830:	b2db      	uxtb	r3, r3
 800b832:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800b834:	f107 010c 	add.w	r1, r7, #12
 800b838:	f107 0316 	add.w	r3, r7, #22
 800b83c:	2203      	movs	r2, #3
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff fd76 	bl	800b330 <hr3_hal_write>

    return 0;
 800b844:	2300      	movs	r3, #0

}
 800b846:	4618      	mov	r0, r3
 800b848:	3718      	adds	r7, #24
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	0800c534 	.word	0x0800c534

0800b854 <hr3_set_amb1_sample_start_end>:

uint8_t hr3_set_amb1_sample_start_end( uint16_t start, uint16_t end )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	4603      	mov	r3, r0
 800b85c:	460a      	mov	r2, r1
 800b85e:	80fb      	strh	r3, [r7, #6]
 800b860:	4613      	mov	r3, r2
 800b862:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = SMPL_AMB1_ST;
 800b864:	230b      	movs	r3, #11
 800b866:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = SMPL_AMB1_END;
 800b868:	230c      	movs	r3, #12
 800b86a:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800b86c:	4b17      	ldr	r3, [pc, #92]	; (800b8cc <hr3_set_amb1_sample_start_end+0x78>)
 800b86e:	881b      	ldrh	r3, [r3, #0]
 800b870:	823b      	strh	r3, [r7, #16]
 800b872:	2300      	movs	r3, #0
 800b874:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800b876:	4b15      	ldr	r3, [pc, #84]	; (800b8cc <hr3_set_amb1_sample_start_end+0x78>)
 800b878:	881b      	ldrh	r3, [r3, #0]
 800b87a:	81bb      	strh	r3, [r7, #12]
 800b87c:	2300      	movs	r3, #0
 800b87e:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800b880:	88fb      	ldrh	r3, [r7, #6]
 800b882:	0a1b      	lsrs	r3, r3, #8
 800b884:	b29b      	uxth	r3, r3
 800b886:	b2db      	uxtb	r3, r3
 800b888:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800b88a:	88fb      	ldrh	r3, [r7, #6]
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800b890:	f107 0110 	add.w	r1, r7, #16
 800b894:	f107 0317 	add.w	r3, r7, #23
 800b898:	2203      	movs	r2, #3
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7ff fd48 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800b8a0:	88bb      	ldrh	r3, [r7, #4]
 800b8a2:	0a1b      	lsrs	r3, r3, #8
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800b8aa:	88bb      	ldrh	r3, [r7, #4]
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800b8b0:	f107 010c 	add.w	r1, r7, #12
 800b8b4:	f107 0316 	add.w	r3, r7, #22
 800b8b8:	2203      	movs	r2, #3
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff fd38 	bl	800b330 <hr3_hal_write>

    return 0;
 800b8c0:	2300      	movs	r3, #0

}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3718      	adds	r7, #24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	0800c534 	.word	0x0800c534

0800b8d0 <hr3_set_led2_convert_start_end>:

uint8_t hr3_set_led2_convert_start_end( uint16_t start, uint16_t end )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	460a      	mov	r2, r1
 800b8da:	80fb      	strh	r3, [r7, #6]
 800b8dc:	4613      	mov	r3, r2
 800b8de:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED2_CONV_ST;
 800b8e0:	230d      	movs	r3, #13
 800b8e2:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED2_CONV_END;
 800b8e4:	230e      	movs	r3, #14
 800b8e6:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800b8e8:	4b17      	ldr	r3, [pc, #92]	; (800b948 <hr3_set_led2_convert_start_end+0x78>)
 800b8ea:	881b      	ldrh	r3, [r3, #0]
 800b8ec:	823b      	strh	r3, [r7, #16]
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800b8f2:	4b15      	ldr	r3, [pc, #84]	; (800b948 <hr3_set_led2_convert_start_end+0x78>)
 800b8f4:	881b      	ldrh	r3, [r3, #0]
 800b8f6:	81bb      	strh	r3, [r7, #12]
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800b8fc:	88fb      	ldrh	r3, [r7, #6]
 800b8fe:	0a1b      	lsrs	r3, r3, #8
 800b900:	b29b      	uxth	r3, r3
 800b902:	b2db      	uxtb	r3, r3
 800b904:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800b906:	88fb      	ldrh	r3, [r7, #6]
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800b90c:	f107 0110 	add.w	r1, r7, #16
 800b910:	f107 0317 	add.w	r3, r7, #23
 800b914:	2203      	movs	r2, #3
 800b916:	4618      	mov	r0, r3
 800b918:	f7ff fd0a 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800b91c:	88bb      	ldrh	r3, [r7, #4]
 800b91e:	0a1b      	lsrs	r3, r3, #8
 800b920:	b29b      	uxth	r3, r3
 800b922:	b2db      	uxtb	r3, r3
 800b924:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800b926:	88bb      	ldrh	r3, [r7, #4]
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800b92c:	f107 010c 	add.w	r1, r7, #12
 800b930:	f107 0316 	add.w	r3, r7, #22
 800b934:	2203      	movs	r2, #3
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff fcfa 	bl	800b330 <hr3_hal_write>

    return 0;
 800b93c:	2300      	movs	r3, #0

}
 800b93e:	4618      	mov	r0, r3
 800b940:	3718      	adds	r7, #24
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	0800c534 	.word	0x0800c534

0800b94c <hr3_set_led3_convert_start_end>:

uint8_t hr3_set_led3_convert_start_end( uint16_t start, uint16_t end )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	4603      	mov	r3, r0
 800b954:	460a      	mov	r2, r1
 800b956:	80fb      	strh	r3, [r7, #6]
 800b958:	4613      	mov	r3, r2
 800b95a:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED3_CONV_ST;
 800b95c:	230f      	movs	r3, #15
 800b95e:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED3_CONV_END;
 800b960:	2310      	movs	r3, #16
 800b962:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800b964:	4b17      	ldr	r3, [pc, #92]	; (800b9c4 <hr3_set_led3_convert_start_end+0x78>)
 800b966:	881b      	ldrh	r3, [r3, #0]
 800b968:	823b      	strh	r3, [r7, #16]
 800b96a:	2300      	movs	r3, #0
 800b96c:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800b96e:	4b15      	ldr	r3, [pc, #84]	; (800b9c4 <hr3_set_led3_convert_start_end+0x78>)
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	81bb      	strh	r3, [r7, #12]
 800b974:	2300      	movs	r3, #0
 800b976:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800b978:	88fb      	ldrh	r3, [r7, #6]
 800b97a:	0a1b      	lsrs	r3, r3, #8
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800b982:	88fb      	ldrh	r3, [r7, #6]
 800b984:	b2db      	uxtb	r3, r3
 800b986:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800b988:	f107 0110 	add.w	r1, r7, #16
 800b98c:	f107 0317 	add.w	r3, r7, #23
 800b990:	2203      	movs	r2, #3
 800b992:	4618      	mov	r0, r3
 800b994:	f7ff fccc 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800b998:	88bb      	ldrh	r3, [r7, #4]
 800b99a:	0a1b      	lsrs	r3, r3, #8
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800b9a2:	88bb      	ldrh	r3, [r7, #4]
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800b9a8:	f107 010c 	add.w	r1, r7, #12
 800b9ac:	f107 0316 	add.w	r3, r7, #22
 800b9b0:	2203      	movs	r2, #3
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7ff fcbc 	bl	800b330 <hr3_hal_write>

    return 0;
 800b9b8:	2300      	movs	r3, #0

}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	0800c534 	.word	0x0800c534

0800b9c8 <hr3_set_led1_convert_start_end>:

uint8_t hr3_set_led1_convert_start_end( uint16_t start, uint16_t end )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	460a      	mov	r2, r1
 800b9d2:	80fb      	strh	r3, [r7, #6]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED1_CONV_ST;
 800b9d8:	2311      	movs	r3, #17
 800b9da:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED1_CONV_END;
 800b9dc:	2312      	movs	r3, #18
 800b9de:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800b9e0:	4b17      	ldr	r3, [pc, #92]	; (800ba40 <hr3_set_led1_convert_start_end+0x78>)
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	823b      	strh	r3, [r7, #16]
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800b9ea:	4b15      	ldr	r3, [pc, #84]	; (800ba40 <hr3_set_led1_convert_start_end+0x78>)
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	81bb      	strh	r3, [r7, #12]
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800b9f4:	88fb      	ldrh	r3, [r7, #6]
 800b9f6:	0a1b      	lsrs	r3, r3, #8
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800b9fe:	88fb      	ldrh	r3, [r7, #6]
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800ba04:	f107 0110 	add.w	r1, r7, #16
 800ba08:	f107 0317 	add.w	r3, r7, #23
 800ba0c:	2203      	movs	r2, #3
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7ff fc8e 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800ba14:	88bb      	ldrh	r3, [r7, #4]
 800ba16:	0a1b      	lsrs	r3, r3, #8
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800ba1e:	88bb      	ldrh	r3, [r7, #4]
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800ba24:	f107 010c 	add.w	r1, r7, #12
 800ba28:	f107 0316 	add.w	r3, r7, #22
 800ba2c:	2203      	movs	r2, #3
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff fc7e 	bl	800b330 <hr3_hal_write>

    return 0;
 800ba34:	2300      	movs	r3, #0

}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	0800c534 	.word	0x0800c534

0800ba44 <hr3_set_amb1_convert_start_end>:

uint8_t hr3_set_amb1_convert_start_end( uint16_t start, uint16_t end )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	460a      	mov	r2, r1
 800ba4e:	80fb      	strh	r3, [r7, #6]
 800ba50:	4613      	mov	r3, r2
 800ba52:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = AMB1_CONV_ST;
 800ba54:	2313      	movs	r3, #19
 800ba56:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = AMB1_CONV_END;
 800ba58:	2314      	movs	r3, #20
 800ba5a:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800ba5c:	4b17      	ldr	r3, [pc, #92]	; (800babc <hr3_set_amb1_convert_start_end+0x78>)
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	823b      	strh	r3, [r7, #16]
 800ba62:	2300      	movs	r3, #0
 800ba64:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800ba66:	4b15      	ldr	r3, [pc, #84]	; (800babc <hr3_set_amb1_convert_start_end+0x78>)
 800ba68:	881b      	ldrh	r3, [r3, #0]
 800ba6a:	81bb      	strh	r3, [r7, #12]
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800ba70:	88fb      	ldrh	r3, [r7, #6]
 800ba72:	0a1b      	lsrs	r3, r3, #8
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800ba7a:	88fb      	ldrh	r3, [r7, #6]
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800ba80:	f107 0110 	add.w	r1, r7, #16
 800ba84:	f107 0317 	add.w	r3, r7, #23
 800ba88:	2203      	movs	r2, #3
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7ff fc50 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800ba90:	88bb      	ldrh	r3, [r7, #4]
 800ba92:	0a1b      	lsrs	r3, r3, #8
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800ba9a:	88bb      	ldrh	r3, [r7, #4]
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800baa0:	f107 010c 	add.w	r1, r7, #12
 800baa4:	f107 0316 	add.w	r3, r7, #22
 800baa8:	2203      	movs	r2, #3
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fc40 	bl	800b330 <hr3_hal_write>

    return 0;
 800bab0:	2300      	movs	r3, #0

}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3718      	adds	r7, #24
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	0800c534 	.word	0x0800c534

0800bac0 <hr3_set_adc_reset0_start_end>:

uint8_t hr3_set_adc_reset0_start_end( uint16_t start, uint16_t end )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4603      	mov	r3, r0
 800bac8:	460a      	mov	r2, r1
 800baca:	80fb      	strh	r3, [r7, #6]
 800bacc:	4613      	mov	r3, r2
 800bace:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = ADC_RST_P0_ST;
 800bad0:	2315      	movs	r3, #21
 800bad2:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = ADC_RST_P0_END;
 800bad4:	2316      	movs	r3, #22
 800bad6:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bad8:	4b17      	ldr	r3, [pc, #92]	; (800bb38 <hr3_set_adc_reset0_start_end+0x78>)
 800bada:	881b      	ldrh	r3, [r3, #0]
 800badc:	823b      	strh	r3, [r7, #16]
 800bade:	2300      	movs	r3, #0
 800bae0:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bae2:	4b15      	ldr	r3, [pc, #84]	; (800bb38 <hr3_set_adc_reset0_start_end+0x78>)
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	81bb      	strh	r3, [r7, #12]
 800bae8:	2300      	movs	r3, #0
 800baea:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800baec:	88fb      	ldrh	r3, [r7, #6]
 800baee:	0a1b      	lsrs	r3, r3, #8
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800baf6:	88fb      	ldrh	r3, [r7, #6]
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bafc:	f107 0110 	add.w	r1, r7, #16
 800bb00:	f107 0317 	add.w	r3, r7, #23
 800bb04:	2203      	movs	r2, #3
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7ff fc12 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bb0c:	88bb      	ldrh	r3, [r7, #4]
 800bb0e:	0a1b      	lsrs	r3, r3, #8
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bb16:	88bb      	ldrh	r3, [r7, #4]
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bb1c:	f107 010c 	add.w	r1, r7, #12
 800bb20:	f107 0316 	add.w	r3, r7, #22
 800bb24:	2203      	movs	r2, #3
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7ff fc02 	bl	800b330 <hr3_hal_write>

    return 0;
 800bb2c:	2300      	movs	r3, #0

}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3718      	adds	r7, #24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	0800c534 	.word	0x0800c534

0800bb3c <hr3_set_adc_reset1_start_end>:

uint8_t hr3_set_adc_reset1_start_end( uint16_t start, uint16_t end )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	460a      	mov	r2, r1
 800bb46:	80fb      	strh	r3, [r7, #6]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = ADC_RST_P1_ST;
 800bb4c:	2317      	movs	r3, #23
 800bb4e:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = ADC_RST_P1_END;
 800bb50:	2318      	movs	r3, #24
 800bb52:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bb54:	4b17      	ldr	r3, [pc, #92]	; (800bbb4 <hr3_set_adc_reset1_start_end+0x78>)
 800bb56:	881b      	ldrh	r3, [r3, #0]
 800bb58:	823b      	strh	r3, [r7, #16]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bb5e:	4b15      	ldr	r3, [pc, #84]	; (800bbb4 <hr3_set_adc_reset1_start_end+0x78>)
 800bb60:	881b      	ldrh	r3, [r3, #0]
 800bb62:	81bb      	strh	r3, [r7, #12]
 800bb64:	2300      	movs	r3, #0
 800bb66:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bb68:	88fb      	ldrh	r3, [r7, #6]
 800bb6a:	0a1b      	lsrs	r3, r3, #8
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bb72:	88fb      	ldrh	r3, [r7, #6]
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bb78:	f107 0110 	add.w	r1, r7, #16
 800bb7c:	f107 0317 	add.w	r3, r7, #23
 800bb80:	2203      	movs	r2, #3
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff fbd4 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bb88:	88bb      	ldrh	r3, [r7, #4]
 800bb8a:	0a1b      	lsrs	r3, r3, #8
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bb92:	88bb      	ldrh	r3, [r7, #4]
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bb98:	f107 010c 	add.w	r1, r7, #12
 800bb9c:	f107 0316 	add.w	r3, r7, #22
 800bba0:	2203      	movs	r2, #3
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff fbc4 	bl	800b330 <hr3_hal_write>

    return 0;
 800bba8:	2300      	movs	r3, #0

}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3718      	adds	r7, #24
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	0800c534 	.word	0x0800c534

0800bbb8 <hr3_set_adc_reset2_start_end>:

uint8_t hr3_set_adc_reset2_start_end( uint16_t start, uint16_t end )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	460a      	mov	r2, r1
 800bbc2:	80fb      	strh	r3, [r7, #6]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = ADC_RST_P2_ST;
 800bbc8:	2319      	movs	r3, #25
 800bbca:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = ADC_RST_P2_END;
 800bbcc:	231a      	movs	r3, #26
 800bbce:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bbd0:	4b17      	ldr	r3, [pc, #92]	; (800bc30 <hr3_set_adc_reset2_start_end+0x78>)
 800bbd2:	881b      	ldrh	r3, [r3, #0]
 800bbd4:	823b      	strh	r3, [r7, #16]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bbda:	4b15      	ldr	r3, [pc, #84]	; (800bc30 <hr3_set_adc_reset2_start_end+0x78>)
 800bbdc:	881b      	ldrh	r3, [r3, #0]
 800bbde:	81bb      	strh	r3, [r7, #12]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535  )
        return -1;

    temp_st[1] = start >> 8;
 800bbe4:	88fb      	ldrh	r3, [r7, #6]
 800bbe6:	0a1b      	lsrs	r3, r3, #8
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bbf4:	f107 0110 	add.w	r1, r7, #16
 800bbf8:	f107 0317 	add.w	r3, r7, #23
 800bbfc:	2203      	movs	r2, #3
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7ff fb96 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bc04:	88bb      	ldrh	r3, [r7, #4]
 800bc06:	0a1b      	lsrs	r3, r3, #8
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bc0e:	88bb      	ldrh	r3, [r7, #4]
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bc14:	f107 010c 	add.w	r1, r7, #12
 800bc18:	f107 0316 	add.w	r3, r7, #22
 800bc1c:	2203      	movs	r2, #3
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff fb86 	bl	800b330 <hr3_hal_write>

    return 0;
 800bc24:	2300      	movs	r3, #0

}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3718      	adds	r7, #24
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	0800c534 	.word	0x0800c534

0800bc34 <hr3_set_adc_reset3_start_end>:

uint8_t hr3_set_adc_reset3_start_end( uint16_t start, uint16_t end )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	460a      	mov	r2, r1
 800bc3e:	80fb      	strh	r3, [r7, #6]
 800bc40:	4613      	mov	r3, r2
 800bc42:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = ADC_RST_P3_ST;
 800bc44:	231b      	movs	r3, #27
 800bc46:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = ADC_RST_P3_END;
 800bc48:	231c      	movs	r3, #28
 800bc4a:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bc4c:	4b17      	ldr	r3, [pc, #92]	; (800bcac <hr3_set_adc_reset3_start_end+0x78>)
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	823b      	strh	r3, [r7, #16]
 800bc52:	2300      	movs	r3, #0
 800bc54:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bc56:	4b15      	ldr	r3, [pc, #84]	; (800bcac <hr3_set_adc_reset3_start_end+0x78>)
 800bc58:	881b      	ldrh	r3, [r3, #0]
 800bc5a:	81bb      	strh	r3, [r7, #12]
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bc60:	88fb      	ldrh	r3, [r7, #6]
 800bc62:	0a1b      	lsrs	r3, r3, #8
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bc6a:	88fb      	ldrh	r3, [r7, #6]
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bc70:	f107 0110 	add.w	r1, r7, #16
 800bc74:	f107 0317 	add.w	r3, r7, #23
 800bc78:	2203      	movs	r2, #3
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7ff fb58 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bc80:	88bb      	ldrh	r3, [r7, #4]
 800bc82:	0a1b      	lsrs	r3, r3, #8
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bc8a:	88bb      	ldrh	r3, [r7, #4]
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bc90:	f107 010c 	add.w	r1, r7, #12
 800bc94:	f107 0316 	add.w	r3, r7, #22
 800bc98:	2203      	movs	r2, #3
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7ff fb48 	bl	800b330 <hr3_hal_write>

    return 0;
 800bca0:	2300      	movs	r3, #0

}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3718      	adds	r7, #24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	0800c534 	.word	0x0800c534

0800bcb0 <hr3_set_prpct_count>:

uint8_t hr3_set_prpct_count( uint16_t count )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	80fb      	strh	r3, [r7, #6]
    uint8_t reg = PRPCT;
 800bcba:	231d      	movs	r3, #29
 800bcbc:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800bcbe:	4b0d      	ldr	r3, [pc, #52]	; (800bcf4 <hr3_set_prpct_count+0x44>)
 800bcc0:	881b      	ldrh	r3, [r3, #0]
 800bcc2:	81bb      	strh	r3, [r7, #12]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	73bb      	strb	r3, [r7, #14]

    if( count > 65535 )
        return -1;

    temp[1] = count >> 8;
 800bcc8:	88fb      	ldrh	r3, [r7, #6]
 800bcca:	0a1b      	lsrs	r3, r3, #8
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	737b      	strb	r3, [r7, #13]
    temp[2] = (uint8_t)count;
 800bcd2:	88fb      	ldrh	r3, [r7, #6]
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg, temp, 3 );
 800bcd8:	f107 010c 	add.w	r1, r7, #12
 800bcdc:	f107 030f 	add.w	r3, r7, #15
 800bce0:	2203      	movs	r2, #3
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7ff fb24 	bl	800b330 <hr3_hal_write>

    return 0;
 800bce8:	2300      	movs	r3, #0

}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	0800c534 	.word	0x0800c534

0800bcf8 <hr3_set_timer_and_average_num>:

uint8_t hr3_set_timer_and_average_num( bool enable, uint8_t av_num )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	460a      	mov	r2, r1
 800bd02:	71fb      	strb	r3, [r7, #7]
 800bd04:	4613      	mov	r3, r2
 800bd06:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = TIM_NUMAV;
 800bd08:	231e      	movs	r3, #30
 800bd0a:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800bd0c:	4b18      	ldr	r3, [pc, #96]	; (800bd70 <hr3_set_timer_and_average_num+0x78>)
 800bd0e:	881b      	ldrh	r3, [r3, #0]
 800bd10:	81bb      	strh	r3, [r7, #12]
 800bd12:	2300      	movs	r3, #0
 800bd14:	73bb      	strb	r3, [r7, #14]

    if( av_num > 15 || av_num < 0 )
 800bd16:	79bb      	ldrb	r3, [r7, #6]
 800bd18:	2b0f      	cmp	r3, #15
 800bd1a:	d901      	bls.n	800bd20 <hr3_set_timer_and_average_num+0x28>
        return -1;
 800bd1c:	23ff      	movs	r3, #255	; 0xff
 800bd1e:	e023      	b.n	800bd68 <hr3_set_timer_and_average_num+0x70>

    if( enable )
 800bd20:	79fb      	ldrb	r3, [r7, #7]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d012      	beq.n	800bd4c <hr3_set_timer_and_average_num+0x54>
    {
        temp[1] |= ( 1 << TIMEREN );
 800bd26:	7b7b      	ldrb	r3, [r7, #13]
 800bd28:	f043 0301 	orr.w	r3, r3, #1
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	737b      	strb	r3, [r7, #13]
        temp[2] |= ( av_num << NUMAV );
 800bd30:	7bba      	ldrb	r2, [r7, #14]
 800bd32:	79bb      	ldrb	r3, [r7, #6]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800bd3a:	f107 010c 	add.w	r1, r7, #12
 800bd3e:	f107 030f 	add.w	r3, r7, #15
 800bd42:	2203      	movs	r2, #3
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7ff faf3 	bl	800b330 <hr3_hal_write>
 800bd4a:	e00c      	b.n	800bd66 <hr3_set_timer_and_average_num+0x6e>
    }
    else
    {
        temp[2] |= ( av_num << NUMAV );
 800bd4c:	7bba      	ldrb	r2, [r7, #14]
 800bd4e:	79bb      	ldrb	r3, [r7, #6]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800bd56:	f107 010c 	add.w	r1, r7, #12
 800bd5a:	f107 030f 	add.w	r3, r7, #15
 800bd5e:	2203      	movs	r2, #3
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff fae5 	bl	800b330 <hr3_hal_write>
    }

    return 0;
 800bd66:	2300      	movs	r3, #0

}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	0800c534 	.word	0x0800c534

0800bd74 <hr3_set_seperate_tia_gain>:

uint8_t hr3_set_seperate_tia_gain( bool seperate, uint8_t cf_setting,
                                   uint8_t gain_setting )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	71fb      	strb	r3, [r7, #7]
 800bd7e:	460b      	mov	r3, r1
 800bd80:	71bb      	strb	r3, [r7, #6]
 800bd82:	4613      	mov	r3, r2
 800bd84:	717b      	strb	r3, [r7, #5]
    uint8_t reg = TIA_GAINS2;
 800bd86:	2320      	movs	r3, #32
 800bd88:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800bd8a:	4b22      	ldr	r3, [pc, #136]	; (800be14 <hr3_set_seperate_tia_gain+0xa0>)
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	81bb      	strh	r3, [r7, #12]
 800bd90:	2300      	movs	r3, #0
 800bd92:	73bb      	strb	r3, [r7, #14]

    if( cf_setting > 7 || gain_setting > 7 )
 800bd94:	79bb      	ldrb	r3, [r7, #6]
 800bd96:	2b07      	cmp	r3, #7
 800bd98:	d802      	bhi.n	800bda0 <hr3_set_seperate_tia_gain+0x2c>
 800bd9a:	797b      	ldrb	r3, [r7, #5]
 800bd9c:	2b07      	cmp	r3, #7
 800bd9e:	d901      	bls.n	800bda4 <hr3_set_seperate_tia_gain+0x30>
        return -1;
 800bda0:	23ff      	movs	r3, #255	; 0xff
 800bda2:	e032      	b.n	800be0a <hr3_set_seperate_tia_gain+0x96>

    if( seperate )
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d018      	beq.n	800bddc <hr3_set_seperate_tia_gain+0x68>
    {
        temp[1] = TIA_ENSEPGAIN;
 800bdaa:	2308      	movs	r3, #8
 800bdac:	737b      	strb	r3, [r7, #13]
        temp[2] |= ( cf_setting << TIA_CF_SEP );
 800bdae:	7bbb      	ldrb	r3, [r7, #14]
 800bdb0:	b25a      	sxtb	r2, r3
 800bdb2:	79bb      	ldrb	r3, [r7, #6]
 800bdb4:	00db      	lsls	r3, r3, #3
 800bdb6:	b25b      	sxtb	r3, r3
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	b25b      	sxtb	r3, r3
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	73bb      	strb	r3, [r7, #14]
        temp[2] |= ( gain_setting << TIA_GAIN_SEP );
 800bdc0:	7bba      	ldrb	r2, [r7, #14]
 800bdc2:	797b      	ldrb	r3, [r7, #5]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800bdca:	f107 010c 	add.w	r1, r7, #12
 800bdce:	f107 030f 	add.w	r3, r7, #15
 800bdd2:	2203      	movs	r2, #3
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7ff faab 	bl	800b330 <hr3_hal_write>
 800bdda:	e015      	b.n	800be08 <hr3_set_seperate_tia_gain+0x94>
    }
    else
    {
        temp[2] |= ( cf_setting << TIA_CF_SEP );
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	b25a      	sxtb	r2, r3
 800bde0:	79bb      	ldrb	r3, [r7, #6]
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	b25b      	sxtb	r3, r3
 800bde6:	4313      	orrs	r3, r2
 800bde8:	b25b      	sxtb	r3, r3
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	73bb      	strb	r3, [r7, #14]
        temp[2] |= ( gain_setting << TIA_GAIN_SEP );
 800bdee:	7bba      	ldrb	r2, [r7, #14]
 800bdf0:	797b      	ldrb	r3, [r7, #5]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800bdf8:	f107 010c 	add.w	r1, r7, #12
 800bdfc:	f107 030f 	add.w	r3, r7, #15
 800be00:	2203      	movs	r2, #3
 800be02:	4618      	mov	r0, r3
 800be04:	f7ff fa94 	bl	800b330 <hr3_hal_write>
    }
    
    return 0;
 800be08:	2300      	movs	r3, #0

}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	0800c534 	.word	0x0800c534

0800be18 <hr3_set_tia_gain>:

uint8_t hr3_set_tia_gain( bool replace, uint8_t cf_setting,
                             uint8_t gain_setting )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	4603      	mov	r3, r0
 800be20:	71fb      	strb	r3, [r7, #7]
 800be22:	460b      	mov	r3, r1
 800be24:	71bb      	strb	r3, [r7, #6]
 800be26:	4613      	mov	r3, r2
 800be28:	717b      	strb	r3, [r7, #5]
    uint8_t reg = TIA_GAINS1;
 800be2a:	2321      	movs	r3, #33	; 0x21
 800be2c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800be2e:	4b23      	ldr	r3, [pc, #140]	; (800bebc <hr3_set_tia_gain+0xa4>)
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	81bb      	strh	r3, [r7, #12]
 800be34:	2300      	movs	r3, #0
 800be36:	73bb      	strb	r3, [r7, #14]

    if( cf_setting > 7 || gain_setting > 7 )
 800be38:	79bb      	ldrb	r3, [r7, #6]
 800be3a:	2b07      	cmp	r3, #7
 800be3c:	d802      	bhi.n	800be44 <hr3_set_tia_gain+0x2c>
 800be3e:	797b      	ldrb	r3, [r7, #5]
 800be40:	2b07      	cmp	r3, #7
 800be42:	d901      	bls.n	800be48 <hr3_set_tia_gain+0x30>
        return -1;
 800be44:	23ff      	movs	r3, #255	; 0xff
 800be46:	e034      	b.n	800beb2 <hr3_set_tia_gain+0x9a>

    if( replace )
 800be48:	79fb      	ldrb	r3, [r7, #7]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d018      	beq.n	800be80 <hr3_set_tia_gain+0x68>
    {
        temp[1] = TIA_PROG_TG_EN;
 800be4e:	2301      	movs	r3, #1
 800be50:	737b      	strb	r3, [r7, #13]
        temp[2] |= ( cf_setting << TIA_CF );
 800be52:	7bbb      	ldrb	r3, [r7, #14]
 800be54:	b25a      	sxtb	r2, r3
 800be56:	79bb      	ldrb	r3, [r7, #6]
 800be58:	00db      	lsls	r3, r3, #3
 800be5a:	b25b      	sxtb	r3, r3
 800be5c:	4313      	orrs	r3, r2
 800be5e:	b25b      	sxtb	r3, r3
 800be60:	b2db      	uxtb	r3, r3
 800be62:	73bb      	strb	r3, [r7, #14]
        temp[2] |= ( gain_setting << TIA_GAIN );
 800be64:	7bba      	ldrb	r2, [r7, #14]
 800be66:	797b      	ldrb	r3, [r7, #5]
 800be68:	4313      	orrs	r3, r2
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800be6e:	f107 010c 	add.w	r1, r7, #12
 800be72:	f107 030f 	add.w	r3, r7, #15
 800be76:	2203      	movs	r2, #3
 800be78:	4618      	mov	r0, r3
 800be7a:	f7ff fa59 	bl	800b330 <hr3_hal_write>
 800be7e:	e017      	b.n	800beb0 <hr3_set_tia_gain+0x98>
    }
    else
    {
        temp[1] = 0;
 800be80:	2300      	movs	r3, #0
 800be82:	737b      	strb	r3, [r7, #13]
        temp[2] |= ( cf_setting << TIA_CF_SEP );
 800be84:	7bbb      	ldrb	r3, [r7, #14]
 800be86:	b25a      	sxtb	r2, r3
 800be88:	79bb      	ldrb	r3, [r7, #6]
 800be8a:	00db      	lsls	r3, r3, #3
 800be8c:	b25b      	sxtb	r3, r3
 800be8e:	4313      	orrs	r3, r2
 800be90:	b25b      	sxtb	r3, r3
 800be92:	b2db      	uxtb	r3, r3
 800be94:	73bb      	strb	r3, [r7, #14]
        temp[2] |= ( gain_setting << TIA_GAIN_SEP );
 800be96:	7bba      	ldrb	r2, [r7, #14]
 800be98:	797b      	ldrb	r3, [r7, #5]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800bea0:	f107 010c 	add.w	r1, r7, #12
 800bea4:	f107 030f 	add.w	r3, r7, #15
 800bea8:	2203      	movs	r2, #3
 800beaa:	4618      	mov	r0, r3
 800beac:	f7ff fa40 	bl	800b330 <hr3_hal_write>
    }

    return 0;
 800beb0:	2300      	movs	r3, #0

}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	0800c534 	.word	0x0800c534

0800bec0 <hr3_set_led_currents>:

}

uint8_t hr3_set_led_currents( uint8_t led1_current, uint8_t led2_current,
                              uint8_t led3_current )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	71fb      	strb	r3, [r7, #7]
 800beca:	460b      	mov	r3, r1
 800becc:	71bb      	strb	r3, [r7, #6]
 800bece:	4613      	mov	r3, r2
 800bed0:	717b      	strb	r3, [r7, #5]
    uint8_t reg = LED_CONFIG;
 800bed2:	2322      	movs	r3, #34	; 0x22
 800bed4:	72fb      	strb	r3, [r7, #11]
    uint8_t temp[3] = { 0 };
 800bed6:	4b21      	ldr	r3, [pc, #132]	; (800bf5c <hr3_set_led_currents+0x9c>)
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	813b      	strh	r3, [r7, #8]
 800bedc:	2300      	movs	r3, #0
 800bede:	72bb      	strb	r3, [r7, #10]
    unsigned long currents = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	60fb      	str	r3, [r7, #12]

    if( led1_current > 63 ||
 800bee4:	79fb      	ldrb	r3, [r7, #7]
 800bee6:	2b3f      	cmp	r3, #63	; 0x3f
 800bee8:	d805      	bhi.n	800bef6 <hr3_set_led_currents+0x36>
 800beea:	79bb      	ldrb	r3, [r7, #6]
 800beec:	2b3f      	cmp	r3, #63	; 0x3f
 800beee:	d802      	bhi.n	800bef6 <hr3_set_led_currents+0x36>
        led2_current > 63 ||
 800bef0:	797b      	ldrb	r3, [r7, #5]
 800bef2:	2b3f      	cmp	r3, #63	; 0x3f
 800bef4:	d901      	bls.n	800befa <hr3_set_led_currents+0x3a>
        led3_current > 63 )
        return -1;
 800bef6:	23ff      	movs	r3, #255	; 0xff
 800bef8:	e02c      	b.n	800bf54 <hr3_set_led_currents+0x94>

    currents |= ( led3_current << 12 );
 800befa:	797b      	ldrb	r3, [r7, #5]
 800befc:	031b      	lsls	r3, r3, #12
 800befe:	461a      	mov	r2, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	60fb      	str	r3, [r7, #12]
    currents |= ( led2_current << 6 );
 800bf06:	79bb      	ldrb	r3, [r7, #6]
 800bf08:	019b      	lsls	r3, r3, #6
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	60fb      	str	r3, [r7, #12]
    currents |= led1_current;
 800bf12:	79fb      	ldrb	r3, [r7, #7]
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	60fb      	str	r3, [r7, #12]

    temp[2] |= currents;
 800bf1a:	7aba      	ldrb	r2, [r7, #10]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	4313      	orrs	r3, r2
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	72bb      	strb	r3, [r7, #10]
    temp[1] |= currents >> 8;
 800bf26:	7a7a      	ldrb	r2, [r7, #9]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	0a1b      	lsrs	r3, r3, #8
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	727b      	strb	r3, [r7, #9]
    temp[0] |= currents >> 16;
 800bf34:	7a3a      	ldrb	r2, [r7, #8]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	0c1b      	lsrs	r3, r3, #16
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	723b      	strb	r3, [r7, #8]


    hr3_hal_write( &reg, temp, 3 );
 800bf42:	f107 0108 	add.w	r1, r7, #8
 800bf46:	f107 030b 	add.w	r3, r7, #11
 800bf4a:	2203      	movs	r2, #3
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7ff f9ef 	bl	800b330 <hr3_hal_write>

    return 0;
 800bf52:	2300      	movs	r3, #0

}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	0800c534 	.word	0x0800c534

0800bf60 <hr3_set_dynamic_settings>:

uint8_t hr3_set_dynamic_settings( dynamic_modes_t* modes )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
    uint8_t reg = SETTINGS;
 800bf68:	2323      	movs	r3, #35	; 0x23
 800bf6a:	72fb      	strb	r3, [r7, #11]
    uint8_t temp[3] = { 0 };
 800bf6c:	4b2f      	ldr	r3, [pc, #188]	; (800c02c <hr3_set_dynamic_settings+0xcc>)
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	813b      	strh	r3, [r7, #8]
 800bf72:	2300      	movs	r3, #0
 800bf74:	72bb      	strb	r3, [r7, #10]
    unsigned long buffer = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	60fb      	str	r3, [r7, #12]

    buffer |= ( modes->transmit << STT_DYNMC1 );
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	051b      	lsls	r3, r3, #20
 800bf80:	461a      	mov	r2, r3
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->curr_range << STT_ILED_2X );
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	785b      	ldrb	r3, [r3, #1]
 800bf8c:	045b      	lsls	r3, r3, #17
 800bf8e:	461a      	mov	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->adc_power << STT_DYNMC2 );
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	789b      	ldrb	r3, [r3, #2]
 800bf9a:	039b      	lsls	r3, r3, #14
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->clk_mode << STT_OSC_EN );
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	78db      	ldrb	r3, [r3, #3]
 800bfa8:	025b      	lsls	r3, r3, #9
 800bfaa:	461a      	mov	r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->tia_power << STT_DYNMC3 );
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	791b      	ldrb	r3, [r3, #4]
 800bfb6:	011b      	lsls	r3, r3, #4
 800bfb8:	461a      	mov	r2, r3
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->rest_of_adc << STT_DYNMC4 );
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	795b      	ldrb	r3, [r3, #5]
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->afe_rx_mode << STT_PDNRX );
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	799b      	ldrb	r3, [r3, #6]
 800bfd2:	005b      	lsls	r3, r3, #1
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->afe_mode << STT_PDNAFE );
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	79db      	ldrb	r3, [r3, #7]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	60fb      	str	r3, [r7, #12]

    temp[2] |= buffer;
 800bfe8:	7aba      	ldrb	r2, [r7, #10]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	4313      	orrs	r3, r2
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	72bb      	strb	r3, [r7, #10]
    temp[1] |= buffer >> 8;
 800bff4:	7a7a      	ldrb	r2, [r7, #9]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	0a1b      	lsrs	r3, r3, #8
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	4313      	orrs	r3, r2
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	727b      	strb	r3, [r7, #9]
    temp[0] |= buffer >> 16;
 800c002:	7a3a      	ldrb	r2, [r7, #8]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	0c1b      	lsrs	r3, r3, #16
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	4313      	orrs	r3, r2
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	723b      	strb	r3, [r7, #8]


    hr3_hal_write( &reg, temp, 3 );
 800c010:	f107 0108 	add.w	r1, r7, #8
 800c014:	f107 030b 	add.w	r3, r7, #11
 800c018:	2203      	movs	r2, #3
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7ff f988 	bl	800b330 <hr3_hal_write>

    return 0;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	0800c534 	.word	0x0800c534

0800c030 <hr3_set_clkout_div>:
    return 0;

}

uint8_t hr3_set_clkout_div( bool enable, uint8_t div )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	460a      	mov	r2, r1
 800c03a:	71fb      	strb	r3, [r7, #7]
 800c03c:	4613      	mov	r3, r2
 800c03e:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = CLKOUT;
 800c040:	2329      	movs	r3, #41	; 0x29
 800c042:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c044:	4b16      	ldr	r3, [pc, #88]	; (800c0a0 <hr3_set_clkout_div+0x70>)
 800c046:	881b      	ldrh	r3, [r3, #0]
 800c048:	81bb      	strh	r3, [r7, #12]
 800c04a:	2300      	movs	r3, #0
 800c04c:	73bb      	strb	r3, [r7, #14]

    if( div > 15 )
 800c04e:	79bb      	ldrb	r3, [r7, #6]
 800c050:	2b0f      	cmp	r3, #15
 800c052:	d901      	bls.n	800c058 <hr3_set_clkout_div+0x28>
        return -1;
 800c054:	23ff      	movs	r3, #255	; 0xff
 800c056:	e01e      	b.n	800c096 <hr3_set_clkout_div+0x66>

    if( enable )
 800c058:	79fb      	ldrb	r3, [r7, #7]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00e      	beq.n	800c07c <hr3_set_clkout_div+0x4c>
    {
        temp[1] = ( 1 << CLKOUT_EN );
 800c05e:	2302      	movs	r3, #2
 800c060:	737b      	strb	r3, [r7, #13]
        temp[2] = ( div << CLKOUT_DIV );
 800c062:	79bb      	ldrb	r3, [r7, #6]
 800c064:	005b      	lsls	r3, r3, #1
 800c066:	b2db      	uxtb	r3, r3
 800c068:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c06a:	f107 010c 	add.w	r1, r7, #12
 800c06e:	f107 030f 	add.w	r3, r7, #15
 800c072:	2203      	movs	r2, #3
 800c074:	4618      	mov	r0, r3
 800c076:	f7ff f95b 	bl	800b330 <hr3_hal_write>
 800c07a:	e00b      	b.n	800c094 <hr3_set_clkout_div+0x64>
    }
    else
    {
        temp[2] = ( div << CLKOUT_DIV );
 800c07c:	79bb      	ldrb	r3, [r7, #6]
 800c07e:	005b      	lsls	r3, r3, #1
 800c080:	b2db      	uxtb	r3, r3
 800c082:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c084:	f107 010c 	add.w	r1, r7, #12
 800c088:	f107 030f 	add.w	r3, r7, #15
 800c08c:	2203      	movs	r2, #3
 800c08e:	4618      	mov	r0, r3
 800c090:	f7ff f94e 	bl	800b330 <hr3_hal_write>
    }

    return 0;
 800c094:	2300      	movs	r3, #0

}
 800c096:	4618      	mov	r0, r3
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	0800c534 	.word	0x0800c534

0800c0a4 <hr3_get_led1_val>:

uint32_t hr3_get_led1_val( void )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
    uint8_t reg = LED1VAL;
 800c0aa:	232c      	movs	r3, #44	; 0x2c
 800c0ac:	70fb      	strb	r3, [r7, #3]
    uint8_t temp[3] = { 0 };
 800c0ae:	4b10      	ldr	r3, [pc, #64]	; (800c0f0 <hr3_get_led1_val+0x4c>)
 800c0b0:	881b      	ldrh	r3, [r3, #0]
 800c0b2:	803b      	strh	r3, [r7, #0]
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	70bb      	strb	r3, [r7, #2]
    uint32_t retval = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	607b      	str	r3, [r7, #4]

    hr3_hal_read( &reg, temp, 3 );
 800c0bc:	4639      	mov	r1, r7
 800c0be:	1cfb      	adds	r3, r7, #3
 800c0c0:	2203      	movs	r2, #3
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7ff f9a1 	bl	800b40a <hr3_hal_read>

    retval |= (uint32_t)temp[0] << 16;
 800c0c8:	783b      	ldrb	r3, [r7, #0]
 800c0ca:	041b      	lsls	r3, r3, #16
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[1] << 8;
 800c0d2:	787b      	ldrb	r3, [r7, #1]
 800c0d4:	021b      	lsls	r3, r3, #8
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[2];
 800c0dc:	78bb      	ldrb	r3, [r7, #2]
 800c0de:	461a      	mov	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	607b      	str	r3, [r7, #4]

    return retval;
 800c0e6:	687b      	ldr	r3, [r7, #4]

}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	0800c534 	.word	0x0800c534

0800c0f4 <hr3_get_led2_val>:

uint32_t hr3_get_led2_val( void )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
    uint8_t reg = LED2VAL;
 800c0fa:	232a      	movs	r3, #42	; 0x2a
 800c0fc:	70fb      	strb	r3, [r7, #3]
    uint8_t temp[3] = { 0 };
 800c0fe:	4b10      	ldr	r3, [pc, #64]	; (800c140 <hr3_get_led2_val+0x4c>)
 800c100:	881b      	ldrh	r3, [r3, #0]
 800c102:	803b      	strh	r3, [r7, #0]
 800c104:	2300      	movs	r3, #0
 800c106:	70bb      	strb	r3, [r7, #2]
    uint32_t retval = 0;
 800c108:	2300      	movs	r3, #0
 800c10a:	607b      	str	r3, [r7, #4]

    hr3_hal_read( &reg, temp, 3 );
 800c10c:	4639      	mov	r1, r7
 800c10e:	1cfb      	adds	r3, r7, #3
 800c110:	2203      	movs	r2, #3
 800c112:	4618      	mov	r0, r3
 800c114:	f7ff f979 	bl	800b40a <hr3_hal_read>
    
    retval |= (uint32_t)temp[0] << 16;
 800c118:	783b      	ldrb	r3, [r7, #0]
 800c11a:	041b      	lsls	r3, r3, #16
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	4313      	orrs	r3, r2
 800c120:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[1] << 8;
 800c122:	787b      	ldrb	r3, [r7, #1]
 800c124:	021b      	lsls	r3, r3, #8
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	4313      	orrs	r3, r2
 800c12a:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[2];
 800c12c:	78bb      	ldrb	r3, [r7, #2]
 800c12e:	461a      	mov	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4313      	orrs	r3, r2
 800c134:	607b      	str	r3, [r7, #4]

    return retval;
 800c136:	687b      	ldr	r3, [r7, #4]

}
 800c138:	4618      	mov	r0, r3
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	0800c534 	.word	0x0800c534

0800c144 <hr3_get_led3_val>:

uint32_t hr3_get_led3_val( void )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
    uint8_t reg = LED3VAL;
 800c14a:	232b      	movs	r3, #43	; 0x2b
 800c14c:	70fb      	strb	r3, [r7, #3]
    uint8_t temp[3] = { 0 };
 800c14e:	4b10      	ldr	r3, [pc, #64]	; (800c190 <hr3_get_led3_val+0x4c>)
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	803b      	strh	r3, [r7, #0]
 800c154:	2300      	movs	r3, #0
 800c156:	70bb      	strb	r3, [r7, #2]
    uint32_t retval = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	607b      	str	r3, [r7, #4]

    hr3_hal_read( &reg, temp, 3 );
 800c15c:	4639      	mov	r1, r7
 800c15e:	1cfb      	adds	r3, r7, #3
 800c160:	2203      	movs	r2, #3
 800c162:	4618      	mov	r0, r3
 800c164:	f7ff f951 	bl	800b40a <hr3_hal_read>

    retval |= (uint32_t)temp[0] << 16;
 800c168:	783b      	ldrb	r3, [r7, #0]
 800c16a:	041b      	lsls	r3, r3, #16
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	4313      	orrs	r3, r2
 800c170:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[1] << 8;
 800c172:	787b      	ldrb	r3, [r7, #1]
 800c174:	021b      	lsls	r3, r3, #8
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	4313      	orrs	r3, r2
 800c17a:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[2];
 800c17c:	78bb      	ldrb	r3, [r7, #2]
 800c17e:	461a      	mov	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4313      	orrs	r3, r2
 800c184:	607b      	str	r3, [r7, #4]

    return retval;
 800c186:	687b      	ldr	r3, [r7, #4]

}
 800c188:	4618      	mov	r0, r3
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	0800c534 	.word	0x0800c534

0800c194 <hr3_set_pdn_cycle_start_end>:
    return 0;

}

uint8_t hr3_set_pdn_cycle_start_end( uint16_t start, uint16_t end )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	4603      	mov	r3, r0
 800c19c:	460a      	mov	r2, r1
 800c19e:	80fb      	strh	r3, [r7, #6]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = PDNCYCLESTC;
 800c1a4:	2332      	movs	r3, #50	; 0x32
 800c1a6:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = PDNCYCLEENDC;
 800c1a8:	2333      	movs	r3, #51	; 0x33
 800c1aa:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800c1ac:	4b17      	ldr	r3, [pc, #92]	; (800c20c <hr3_set_pdn_cycle_start_end+0x78>)
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	823b      	strh	r3, [r7, #16]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800c1b6:	4b15      	ldr	r3, [pc, #84]	; (800c20c <hr3_set_pdn_cycle_start_end+0x78>)
 800c1b8:	881b      	ldrh	r3, [r3, #0]
 800c1ba:	81bb      	strh	r3, [r7, #12]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800c1c0:	88fb      	ldrh	r3, [r7, #6]
 800c1c2:	0a1b      	lsrs	r3, r3, #8
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800c1ca:	88fb      	ldrh	r3, [r7, #6]
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800c1d0:	f107 0110 	add.w	r1, r7, #16
 800c1d4:	f107 0317 	add.w	r3, r7, #23
 800c1d8:	2203      	movs	r2, #3
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7ff f8a8 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800c1e0:	88bb      	ldrh	r3, [r7, #4]
 800c1e2:	0a1b      	lsrs	r3, r3, #8
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800c1ea:	88bb      	ldrh	r3, [r7, #4]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800c1f0:	f107 010c 	add.w	r1, r7, #12
 800c1f4:	f107 0316 	add.w	r3, r7, #22
 800c1f8:	2203      	movs	r2, #3
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7ff f898 	bl	800b330 <hr3_hal_write>

    return 0;
 800c200:	2300      	movs	r3, #0


}
 800c202:	4618      	mov	r0, r3
 800c204:	3718      	adds	r7, #24
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	0800c534 	.word	0x0800c534

0800c210 <hr3_set_led3_start_stop>:


}

uint8_t hr3_set_led3_start_stop( uint16_t start, uint16_t end )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b086      	sub	sp, #24
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	460a      	mov	r2, r1
 800c21a:	80fb      	strh	r3, [r7, #6]
 800c21c:	4613      	mov	r3, r2
 800c21e:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED3LEDSTC;
 800c220:	2336      	movs	r3, #54	; 0x36
 800c222:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED3LEDENDC;
 800c224:	2337      	movs	r3, #55	; 0x37
 800c226:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800c228:	4b17      	ldr	r3, [pc, #92]	; (800c288 <hr3_set_led3_start_stop+0x78>)
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	823b      	strh	r3, [r7, #16]
 800c22e:	2300      	movs	r3, #0
 800c230:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800c232:	4b15      	ldr	r3, [pc, #84]	; (800c288 <hr3_set_led3_start_stop+0x78>)
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	81bb      	strh	r3, [r7, #12]
 800c238:	2300      	movs	r3, #0
 800c23a:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800c23c:	88fb      	ldrh	r3, [r7, #6]
 800c23e:	0a1b      	lsrs	r3, r3, #8
 800c240:	b29b      	uxth	r3, r3
 800c242:	b2db      	uxtb	r3, r3
 800c244:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800c246:	88fb      	ldrh	r3, [r7, #6]
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800c24c:	f107 0110 	add.w	r1, r7, #16
 800c250:	f107 0317 	add.w	r3, r7, #23
 800c254:	2203      	movs	r2, #3
 800c256:	4618      	mov	r0, r3
 800c258:	f7ff f86a 	bl	800b330 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800c25c:	88bb      	ldrh	r3, [r7, #4]
 800c25e:	0a1b      	lsrs	r3, r3, #8
 800c260:	b29b      	uxth	r3, r3
 800c262:	b2db      	uxtb	r3, r3
 800c264:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800c266:	88bb      	ldrh	r3, [r7, #4]
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800c26c:	f107 010c 	add.w	r1, r7, #12
 800c270:	f107 0316 	add.w	r3, r7, #22
 800c274:	2203      	movs	r2, #3
 800c276:	4618      	mov	r0, r3
 800c278:	f7ff f85a 	bl	800b330 <hr3_hal_write>

    return 0;
 800c27c:	2300      	movs	r3, #0


}
 800c27e:	4618      	mov	r0, r3
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	0800c534 	.word	0x0800c534

0800c28c <hr3_set_int_clk_div>:

uint8_t hr3_set_int_clk_div( uint8_t div )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	71fb      	strb	r3, [r7, #7]
    uint8_t reg = CLKDIV_PRF;
 800c296:	2339      	movs	r3, #57	; 0x39
 800c298:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c29a:	4b0c      	ldr	r3, [pc, #48]	; (800c2cc <hr3_set_int_clk_div+0x40>)
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	81bb      	strh	r3, [r7, #12]
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	73bb      	strb	r3, [r7, #14]

    if( div > 7 )
 800c2a4:	79fb      	ldrb	r3, [r7, #7]
 800c2a6:	2b07      	cmp	r3, #7
 800c2a8:	d901      	bls.n	800c2ae <hr3_set_int_clk_div+0x22>
        return -1;
 800c2aa:	23ff      	movs	r3, #255	; 0xff
 800c2ac:	e00a      	b.n	800c2c4 <hr3_set_int_clk_div+0x38>

    temp[2] = div;
 800c2ae:	79fb      	ldrb	r3, [r7, #7]
 800c2b0:	73bb      	strb	r3, [r7, #14]
    hr3_hal_write( &reg, temp, 3 );
 800c2b2:	f107 010c 	add.w	r1, r7, #12
 800c2b6:	f107 030f 	add.w	r3, r7, #15
 800c2ba:	2203      	movs	r2, #3
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7ff f837 	bl	800b330 <hr3_hal_write>

    return 0;
 800c2c2:	2300      	movs	r3, #0

}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3710      	adds	r7, #16
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	0800c534 	.word	0x0800c534

0800c2d0 <__errno>:
 800c2d0:	4b01      	ldr	r3, [pc, #4]	; (800c2d8 <__errno+0x8>)
 800c2d2:	6818      	ldr	r0, [r3, #0]
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	20000184 	.word	0x20000184

0800c2dc <__libc_init_array>:
 800c2dc:	b570      	push	{r4, r5, r6, lr}
 800c2de:	2600      	movs	r6, #0
 800c2e0:	4d0c      	ldr	r5, [pc, #48]	; (800c314 <__libc_init_array+0x38>)
 800c2e2:	4c0d      	ldr	r4, [pc, #52]	; (800c318 <__libc_init_array+0x3c>)
 800c2e4:	1b64      	subs	r4, r4, r5
 800c2e6:	10a4      	asrs	r4, r4, #2
 800c2e8:	42a6      	cmp	r6, r4
 800c2ea:	d109      	bne.n	800c300 <__libc_init_array+0x24>
 800c2ec:	f000 f8ea 	bl	800c4c4 <_init>
 800c2f0:	2600      	movs	r6, #0
 800c2f2:	4d0a      	ldr	r5, [pc, #40]	; (800c31c <__libc_init_array+0x40>)
 800c2f4:	4c0a      	ldr	r4, [pc, #40]	; (800c320 <__libc_init_array+0x44>)
 800c2f6:	1b64      	subs	r4, r4, r5
 800c2f8:	10a4      	asrs	r4, r4, #2
 800c2fa:	42a6      	cmp	r6, r4
 800c2fc:	d105      	bne.n	800c30a <__libc_init_array+0x2e>
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}
 800c300:	f855 3b04 	ldr.w	r3, [r5], #4
 800c304:	4798      	blx	r3
 800c306:	3601      	adds	r6, #1
 800c308:	e7ee      	b.n	800c2e8 <__libc_init_array+0xc>
 800c30a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c30e:	4798      	blx	r3
 800c310:	3601      	adds	r6, #1
 800c312:	e7f2      	b.n	800c2fa <__libc_init_array+0x1e>
 800c314:	0800c550 	.word	0x0800c550
 800c318:	0800c550 	.word	0x0800c550
 800c31c:	0800c550 	.word	0x0800c550
 800c320:	0800c554 	.word	0x0800c554

0800c324 <malloc>:
 800c324:	4b02      	ldr	r3, [pc, #8]	; (800c330 <malloc+0xc>)
 800c326:	4601      	mov	r1, r0
 800c328:	6818      	ldr	r0, [r3, #0]
 800c32a:	f000 b839 	b.w	800c3a0 <_malloc_r>
 800c32e:	bf00      	nop
 800c330:	20000184 	.word	0x20000184

0800c334 <memcpy>:
 800c334:	440a      	add	r2, r1
 800c336:	4291      	cmp	r1, r2
 800c338:	f100 33ff 	add.w	r3, r0, #4294967295
 800c33c:	d100      	bne.n	800c340 <memcpy+0xc>
 800c33e:	4770      	bx	lr
 800c340:	b510      	push	{r4, lr}
 800c342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c346:	4291      	cmp	r1, r2
 800c348:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c34c:	d1f9      	bne.n	800c342 <memcpy+0xe>
 800c34e:	bd10      	pop	{r4, pc}

0800c350 <memset>:
 800c350:	4603      	mov	r3, r0
 800c352:	4402      	add	r2, r0
 800c354:	4293      	cmp	r3, r2
 800c356:	d100      	bne.n	800c35a <memset+0xa>
 800c358:	4770      	bx	lr
 800c35a:	f803 1b01 	strb.w	r1, [r3], #1
 800c35e:	e7f9      	b.n	800c354 <memset+0x4>

0800c360 <sbrk_aligned>:
 800c360:	b570      	push	{r4, r5, r6, lr}
 800c362:	4e0e      	ldr	r6, [pc, #56]	; (800c39c <sbrk_aligned+0x3c>)
 800c364:	460c      	mov	r4, r1
 800c366:	6831      	ldr	r1, [r6, #0]
 800c368:	4605      	mov	r5, r0
 800c36a:	b911      	cbnz	r1, 800c372 <sbrk_aligned+0x12>
 800c36c:	f000 f88c 	bl	800c488 <_sbrk_r>
 800c370:	6030      	str	r0, [r6, #0]
 800c372:	4621      	mov	r1, r4
 800c374:	4628      	mov	r0, r5
 800c376:	f000 f887 	bl	800c488 <_sbrk_r>
 800c37a:	1c43      	adds	r3, r0, #1
 800c37c:	d00a      	beq.n	800c394 <sbrk_aligned+0x34>
 800c37e:	1cc4      	adds	r4, r0, #3
 800c380:	f024 0403 	bic.w	r4, r4, #3
 800c384:	42a0      	cmp	r0, r4
 800c386:	d007      	beq.n	800c398 <sbrk_aligned+0x38>
 800c388:	1a21      	subs	r1, r4, r0
 800c38a:	4628      	mov	r0, r5
 800c38c:	f000 f87c 	bl	800c488 <_sbrk_r>
 800c390:	3001      	adds	r0, #1
 800c392:	d101      	bne.n	800c398 <sbrk_aligned+0x38>
 800c394:	f04f 34ff 	mov.w	r4, #4294967295
 800c398:	4620      	mov	r0, r4
 800c39a:	bd70      	pop	{r4, r5, r6, pc}
 800c39c:	200015b4 	.word	0x200015b4

0800c3a0 <_malloc_r>:
 800c3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a4:	1ccd      	adds	r5, r1, #3
 800c3a6:	f025 0503 	bic.w	r5, r5, #3
 800c3aa:	3508      	adds	r5, #8
 800c3ac:	2d0c      	cmp	r5, #12
 800c3ae:	bf38      	it	cc
 800c3b0:	250c      	movcc	r5, #12
 800c3b2:	2d00      	cmp	r5, #0
 800c3b4:	4607      	mov	r7, r0
 800c3b6:	db01      	blt.n	800c3bc <_malloc_r+0x1c>
 800c3b8:	42a9      	cmp	r1, r5
 800c3ba:	d905      	bls.n	800c3c8 <_malloc_r+0x28>
 800c3bc:	230c      	movs	r3, #12
 800c3be:	2600      	movs	r6, #0
 800c3c0:	603b      	str	r3, [r7, #0]
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c8:	4e2e      	ldr	r6, [pc, #184]	; (800c484 <_malloc_r+0xe4>)
 800c3ca:	f000 f86d 	bl	800c4a8 <__malloc_lock>
 800c3ce:	6833      	ldr	r3, [r6, #0]
 800c3d0:	461c      	mov	r4, r3
 800c3d2:	bb34      	cbnz	r4, 800c422 <_malloc_r+0x82>
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	f7ff ffc2 	bl	800c360 <sbrk_aligned>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	4604      	mov	r4, r0
 800c3e0:	d14d      	bne.n	800c47e <_malloc_r+0xde>
 800c3e2:	6834      	ldr	r4, [r6, #0]
 800c3e4:	4626      	mov	r6, r4
 800c3e6:	2e00      	cmp	r6, #0
 800c3e8:	d140      	bne.n	800c46c <_malloc_r+0xcc>
 800c3ea:	6823      	ldr	r3, [r4, #0]
 800c3ec:	4631      	mov	r1, r6
 800c3ee:	4638      	mov	r0, r7
 800c3f0:	eb04 0803 	add.w	r8, r4, r3
 800c3f4:	f000 f848 	bl	800c488 <_sbrk_r>
 800c3f8:	4580      	cmp	r8, r0
 800c3fa:	d13a      	bne.n	800c472 <_malloc_r+0xd2>
 800c3fc:	6821      	ldr	r1, [r4, #0]
 800c3fe:	3503      	adds	r5, #3
 800c400:	1a6d      	subs	r5, r5, r1
 800c402:	f025 0503 	bic.w	r5, r5, #3
 800c406:	3508      	adds	r5, #8
 800c408:	2d0c      	cmp	r5, #12
 800c40a:	bf38      	it	cc
 800c40c:	250c      	movcc	r5, #12
 800c40e:	4638      	mov	r0, r7
 800c410:	4629      	mov	r1, r5
 800c412:	f7ff ffa5 	bl	800c360 <sbrk_aligned>
 800c416:	3001      	adds	r0, #1
 800c418:	d02b      	beq.n	800c472 <_malloc_r+0xd2>
 800c41a:	6823      	ldr	r3, [r4, #0]
 800c41c:	442b      	add	r3, r5
 800c41e:	6023      	str	r3, [r4, #0]
 800c420:	e00e      	b.n	800c440 <_malloc_r+0xa0>
 800c422:	6822      	ldr	r2, [r4, #0]
 800c424:	1b52      	subs	r2, r2, r5
 800c426:	d41e      	bmi.n	800c466 <_malloc_r+0xc6>
 800c428:	2a0b      	cmp	r2, #11
 800c42a:	d916      	bls.n	800c45a <_malloc_r+0xba>
 800c42c:	1961      	adds	r1, r4, r5
 800c42e:	42a3      	cmp	r3, r4
 800c430:	6025      	str	r5, [r4, #0]
 800c432:	bf18      	it	ne
 800c434:	6059      	strne	r1, [r3, #4]
 800c436:	6863      	ldr	r3, [r4, #4]
 800c438:	bf08      	it	eq
 800c43a:	6031      	streq	r1, [r6, #0]
 800c43c:	5162      	str	r2, [r4, r5]
 800c43e:	604b      	str	r3, [r1, #4]
 800c440:	4638      	mov	r0, r7
 800c442:	f104 060b 	add.w	r6, r4, #11
 800c446:	f000 f835 	bl	800c4b4 <__malloc_unlock>
 800c44a:	f026 0607 	bic.w	r6, r6, #7
 800c44e:	1d23      	adds	r3, r4, #4
 800c450:	1af2      	subs	r2, r6, r3
 800c452:	d0b6      	beq.n	800c3c2 <_malloc_r+0x22>
 800c454:	1b9b      	subs	r3, r3, r6
 800c456:	50a3      	str	r3, [r4, r2]
 800c458:	e7b3      	b.n	800c3c2 <_malloc_r+0x22>
 800c45a:	6862      	ldr	r2, [r4, #4]
 800c45c:	42a3      	cmp	r3, r4
 800c45e:	bf0c      	ite	eq
 800c460:	6032      	streq	r2, [r6, #0]
 800c462:	605a      	strne	r2, [r3, #4]
 800c464:	e7ec      	b.n	800c440 <_malloc_r+0xa0>
 800c466:	4623      	mov	r3, r4
 800c468:	6864      	ldr	r4, [r4, #4]
 800c46a:	e7b2      	b.n	800c3d2 <_malloc_r+0x32>
 800c46c:	4634      	mov	r4, r6
 800c46e:	6876      	ldr	r6, [r6, #4]
 800c470:	e7b9      	b.n	800c3e6 <_malloc_r+0x46>
 800c472:	230c      	movs	r3, #12
 800c474:	4638      	mov	r0, r7
 800c476:	603b      	str	r3, [r7, #0]
 800c478:	f000 f81c 	bl	800c4b4 <__malloc_unlock>
 800c47c:	e7a1      	b.n	800c3c2 <_malloc_r+0x22>
 800c47e:	6025      	str	r5, [r4, #0]
 800c480:	e7de      	b.n	800c440 <_malloc_r+0xa0>
 800c482:	bf00      	nop
 800c484:	200015b0 	.word	0x200015b0

0800c488 <_sbrk_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	2300      	movs	r3, #0
 800c48c:	4d05      	ldr	r5, [pc, #20]	; (800c4a4 <_sbrk_r+0x1c>)
 800c48e:	4604      	mov	r4, r0
 800c490:	4608      	mov	r0, r1
 800c492:	602b      	str	r3, [r5, #0]
 800c494:	f7f4 fb52 	bl	8000b3c <_sbrk>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_sbrk_r+0x1a>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_sbrk_r+0x1a>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	200015b8 	.word	0x200015b8

0800c4a8 <__malloc_lock>:
 800c4a8:	4801      	ldr	r0, [pc, #4]	; (800c4b0 <__malloc_lock+0x8>)
 800c4aa:	f000 b809 	b.w	800c4c0 <__retarget_lock_acquire_recursive>
 800c4ae:	bf00      	nop
 800c4b0:	200015bc 	.word	0x200015bc

0800c4b4 <__malloc_unlock>:
 800c4b4:	4801      	ldr	r0, [pc, #4]	; (800c4bc <__malloc_unlock+0x8>)
 800c4b6:	f000 b804 	b.w	800c4c2 <__retarget_lock_release_recursive>
 800c4ba:	bf00      	nop
 800c4bc:	200015bc 	.word	0x200015bc

0800c4c0 <__retarget_lock_acquire_recursive>:
 800c4c0:	4770      	bx	lr

0800c4c2 <__retarget_lock_release_recursive>:
 800c4c2:	4770      	bx	lr

0800c4c4 <_init>:
 800c4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c6:	bf00      	nop
 800c4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ca:	bc08      	pop	{r3}
 800c4cc:	469e      	mov	lr, r3
 800c4ce:	4770      	bx	lr

0800c4d0 <_fini>:
 800c4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d2:	bf00      	nop
 800c4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4d6:	bc08      	pop	{r3}
 800c4d8:	469e      	mov	lr, r3
 800c4da:	4770      	bx	lr
