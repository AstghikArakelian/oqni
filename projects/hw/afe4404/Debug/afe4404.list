
afe4404.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d014  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800d120  0800d120  0001d120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1ec  0800d1ec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d1ec  0800d1ec  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d1ec  0800d1ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1ec  0800d1ec  0001d1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1f0  0800d1f0  0001d1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d1f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013dc  200001e0  0800d3d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800d3d4  000215bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180c9  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca8  00000000  00000000  000382d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  0003bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0003d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc01  00000000  00000000  0003ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6b0  00000000  00000000  0005b621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f02  00000000  00000000  00077cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108bd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fbc  00000000  00000000  00108c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d108 	.word	0x0800d108

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	0800d108 	.word	0x0800d108

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Buffer_Init>:

/* Private variables ---------------------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
BUF_HandleTypeDef Buffer_Init(size_t size)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	BUF_HandleTypeDef circular_buffer = malloc(sizeof(circular_buf));
 8000164:	2010      	movs	r0, #16
 8000166:	f00c fb45 	bl	800c7f4 <malloc>
 800016a:	4603      	mov	r3, r0
 800016c:	60fb      	str	r3, [r7, #12]
	// If size is 1024, capacity will be 1025, and indices' range is [0..1024]
	circular_buffer->buffer = (uint8_t*)malloc(size + 1);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	3301      	adds	r3, #1
 8000172:	4618      	mov	r0, r3
 8000174:	f00c fb3e 	bl	800c7f4 <malloc>
 8000178:	4603      	mov	r3, r0
 800017a:	461a      	mov	r2, r3
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	601a      	str	r2, [r3, #0]
	circular_buffer->capacity = size + 1;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	1c5a      	adds	r2, r3, #1
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	60da      	str	r2, [r3, #12]
	Buffer_Clear(circular_buffer);
 8000188:	68f8      	ldr	r0, [r7, #12]
 800018a:	f000 f830 	bl	80001ee <Buffer_Clear>
	return circular_buffer;
 800018e:	68fb      	ldr	r3, [r7, #12]
}
 8000190:	4618      	mov	r0, r3
 8000192:	3710      	adds	r7, #16
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <Buffer_Size>:

size_t Buffer_Size(BUF_HandleTypeDef buf)
{
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	size_t size = (buf->capacity + buf->write_index - buf->read_index) % buf->capacity;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	68da      	ldr	r2, [r3, #12]
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	441a      	add	r2, r3
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	689b      	ldr	r3, [r3, #8]
 80001ae:	1ad3      	subs	r3, r2, r3
 80001b0:	687a      	ldr	r2, [r7, #4]
 80001b2:	68d2      	ldr	r2, [r2, #12]
 80001b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80001b8:	fb01 f202 	mul.w	r2, r1, r2
 80001bc:	1a9b      	subs	r3, r3, r2
 80001be:	60fb      	str	r3, [r7, #12]
	return size;
 80001c0:	68fb      	ldr	r3, [r7, #12]
}
 80001c2:	4618      	mov	r0, r3
 80001c4:	3714      	adds	r7, #20
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr

080001cc <Buffer_IsEmpty>:

int Buffer_IsEmpty(BUF_HandleTypeDef buf)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == 0;
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f7ff ffdf 	bl	8000198 <Buffer_Size>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	bf0c      	ite	eq
 80001e0:	2301      	moveq	r3, #1
 80001e2:	2300      	movne	r3, #0
 80001e4:	b2db      	uxtb	r3, r3
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}

080001ee <Buffer_Clear>:

void Buffer_Clear(BUF_HandleTypeDef buf)
{
 80001ee:	b480      	push	{r7}
 80001f0:	b083      	sub	sp, #12
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
	buf->write_index = 0;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2200      	movs	r2, #0
 80001fa:	605a      	str	r2, [r3, #4]
	buf->read_index = 0;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2200      	movs	r2, #0
 8000200:	609a      	str	r2, [r3, #8]
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <Buffer_IsFull>:

int Buffer_IsFull(BUF_HandleTypeDef buf)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == buf->capacity - 1;
 8000214:	6878      	ldr	r0, [r7, #4]
 8000216:	f7ff ffbf 	bl	8000198 <Buffer_Size>
 800021a:	4602      	mov	r2, r0
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	3b01      	subs	r3, #1
 8000222:	429a      	cmp	r2, r3
 8000224:	bf0c      	ite	eq
 8000226:	2301      	moveq	r3, #1
 8000228:	2300      	movne	r3, #0
 800022a:	b2db      	uxtb	r3, r3
}
 800022c:	4618      	mov	r0, r3
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <Buffer_Read>:

uint8_t Buffer_Read(BUF_HandleTypeDef buf)
 {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 800023c:	2300      	movs	r3, #0
 800023e:	73fb      	strb	r3, [r7, #15]
	if(!Buffer_IsEmpty(buf))
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f7ff ffc3 	bl	80001cc <Buffer_IsEmpty>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d116      	bne.n	800027a <Buffer_Read+0x46>
	{
		data = buf->buffer[buf->read_index];
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	689b      	ldr	r3, [r3, #8]
 8000254:	4413      	add	r3, r2
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	73fb      	strb	r3, [r7, #15]
		buf->read_index++;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	1c5a      	adds	r2, r3, #1
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	609a      	str	r2, [r3, #8]
		buf->read_index %= buf->capacity;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	68d2      	ldr	r2, [r2, #12]
 800026c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000270:	fb01 f202 	mul.w	r2, r1, r2
 8000274:	1a9a      	subs	r2, r3, r2
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	609a      	str	r2, [r3, #8]
	}
	return data;
 800027a:	7bfb      	ldrb	r3, [r7, #15]
}
 800027c:	4618      	mov	r0, r3
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <Buffer_Write>:

void Buffer_Write(BUF_HandleTypeDef buf, uint8_t data)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	460b      	mov	r3, r1
 800028e:	70fb      	strb	r3, [r7, #3]
	if(Buffer_IsFull(buf))
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f7ff ffbb 	bl	800020c <Buffer_IsFull>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d002      	beq.n	80002a2 <Buffer_Write+0x1e>
	{
	    Buffer_Read(buf);
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f7ff ffc9 	bl	8000234 <Buffer_Read>
	}
	buf->buffer[buf->write_index] = data;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	4413      	add	r3, r2
 80002ac:	78fa      	ldrb	r2, [r7, #3]
 80002ae:	701a      	strb	r2, [r3, #0]
	buf->write_index++;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	1c5a      	adds	r2, r3, #1
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	605a      	str	r2, [r3, #4]
	buf->write_index %= buf->capacity;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	68d2      	ldr	r2, [r2, #12]
 80002c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80002c6:	fb01 f202 	mul.w	r2, r1, r2
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	605a      	str	r2, [r3, #4]
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	b083      	sub	sp, #12
 80002dc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  FIFO_buf = Buffer_Init(128);
 80002de:	2080      	movs	r0, #128	; 0x80
 80002e0:	f7ff ff3c 	bl	800015c <Buffer_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	4a3a      	ldr	r2, [pc, #232]	; (80003d0 <main+0xf8>)
 80002e8:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ea:	f000 fc31 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ee:	f000 f87b 	bl	80003e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f2:	f000 f97b 	bl	80005ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80002f6:	f000 f8d1 	bl	800049c <MX_I2C1_Init>
  MX_TIM2_Init();
 80002fa:	f000 f92b 	bl	8000554 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80002fe:	f00a f9e5 	bl	800a6cc <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 8000302:	f000 f8f9 	bl	80004f8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  AFE12_RST();
 8000306:	f000 fa13 	bl	8000730 <AFE12_RST>
  AFE1_Setup();
 800030a:	f000 fa1d 	bl	8000748 <AFE1_Setup>
  AFE2_Setup();
 800030e:	f000 fa43 	bl	8000798 <AFE2_Setup>
  adc1_rdy = 0;
 8000312:	4b30      	ldr	r3, [pc, #192]	; (80003d4 <main+0xfc>)
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
  adc2_rdy = 0;
 8000318:	4b2f      	ldr	r3, [pc, #188]	; (80003d8 <main+0x100>)
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
  afe4404_Delay_ms(200);
 800031e:	20c8      	movs	r0, #200	; 0xc8
 8000320:	f00a fedc 	bl	800b0dc <afe4404_Delay_ms>
  initStatHRM();
 8000324:	f00a ff3a 	bl	800b19c <initStatHRM>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(adc1_rdy)
 8000328:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <main+0xfc>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d024      	beq.n	800037a <main+0xa2>
	  {
		  cur_i2c = hi2c1;
 8000330:	4a2a      	ldr	r2, [pc, #168]	; (80003dc <main+0x104>)
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <main+0x108>)
 8000334:	4610      	mov	r0, r2
 8000336:	4619      	mov	r1, r3
 8000338:	2354      	movs	r3, #84	; 0x54
 800033a:	461a      	mov	r2, r3
 800033c:	f00c fa62 	bl	800c804 <memcpy>
		  statHRMAlgo(hr3_get_led1_amb1_val());
 8000340:	f00c f92a 	bl	800c598 <hr3_get_led1_amb1_val>
 8000344:	4603      	mov	r3, r0
 8000346:	4618      	mov	r0, r3
 8000348:	f00a ff9c 	bl	800b284 <statHRMAlgo>
		  afe4404_send_results(1, hr3_get_heartrate(), hr3_get_led1_val(), hr3_get_led2_val(), hr3_get_led3_val());
 800034c:	f00a fefe 	bl	800b14c <hr3_get_heartrate>
 8000350:	4603      	mov	r3, r0
 8000352:	b29c      	uxth	r4, r3
 8000354:	f00c f8a8 	bl	800c4a8 <hr3_get_led1_val>
 8000358:	4605      	mov	r5, r0
 800035a:	f00c f8cd 	bl	800c4f8 <hr3_get_led2_val>
 800035e:	4606      	mov	r6, r0
 8000360:	f00c f8f2 	bl	800c548 <hr3_get_led3_val>
 8000364:	4603      	mov	r3, r0
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	4633      	mov	r3, r6
 800036a:	462a      	mov	r2, r5
 800036c:	4621      	mov	r1, r4
 800036e:	2001      	movs	r0, #1
 8000370:	f00a fec0 	bl	800b0f4 <afe4404_send_results>
		  adc1_rdy = 0;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <main+0xfc>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
	  }
	  if(adc2_rdy)
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <main+0x100>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0d2      	beq.n	8000328 <main+0x50>
	  {
		  cur_i2c = hi2c2;
 8000382:	4a16      	ldr	r2, [pc, #88]	; (80003dc <main+0x104>)
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <main+0x10c>)
 8000386:	4610      	mov	r0, r2
 8000388:	4619      	mov	r1, r3
 800038a:	2354      	movs	r3, #84	; 0x54
 800038c:	461a      	mov	r2, r3
 800038e:	f00c fa39 	bl	800c804 <memcpy>
		  statHRMAlgo(hr3_get_led1_amb1_val());
 8000392:	f00c f901 	bl	800c598 <hr3_get_led1_amb1_val>
 8000396:	4603      	mov	r3, r0
 8000398:	4618      	mov	r0, r3
 800039a:	f00a ff73 	bl	800b284 <statHRMAlgo>
		  afe4404_send_results(2, hr3_get_heartrate(), hr3_get_led1_val(), hr3_get_led2_val(), hr3_get_led3_val());
 800039e:	f00a fed5 	bl	800b14c <hr3_get_heartrate>
 80003a2:	4603      	mov	r3, r0
 80003a4:	b29c      	uxth	r4, r3
 80003a6:	f00c f87f 	bl	800c4a8 <hr3_get_led1_val>
 80003aa:	4605      	mov	r5, r0
 80003ac:	f00c f8a4 	bl	800c4f8 <hr3_get_led2_val>
 80003b0:	4606      	mov	r6, r0
 80003b2:	f00c f8c9 	bl	800c548 <hr3_get_led3_val>
 80003b6:	4603      	mov	r3, r0
 80003b8:	9300      	str	r3, [sp, #0]
 80003ba:	4633      	mov	r3, r6
 80003bc:	462a      	mov	r2, r5
 80003be:	4621      	mov	r1, r4
 80003c0:	2002      	movs	r0, #2
 80003c2:	f00a fe97 	bl	800b0f4 <afe4404_send_results>
		  adc2_rdy = 0;
 80003c6:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <main+0x100>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
	  if(adc1_rdy)
 80003cc:	e7ac      	b.n	8000328 <main+0x50>
 80003ce:	bf00      	nop
 80003d0:	200002ec 	.word	0x200002ec
 80003d4:	200002f0 	.word	0x200002f0
 80003d8:	200002f1 	.word	0x200002f1
 80003dc:	200002f4 	.word	0x200002f4
 80003e0:	200001fc 	.word	0x200001fc
 80003e4:	20000250 	.word	0x20000250

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b094      	sub	sp, #80	; 0x50
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003f2:	2228      	movs	r2, #40	; 0x28
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f00c fa12 	bl	800c820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000418:	2301      	movs	r3, #1
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800041c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000420:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000426:	2301      	movs	r3, #1
 8000428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042a:	2302      	movs	r3, #2
 800042c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800042e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000432:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000434:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000438:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800043e:	4618      	mov	r0, r3
 8000440:	f005 f8e2 	bl	8005608 <HAL_RCC_OscConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800044a:	f000 f9cd 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044e:	230f      	movs	r3, #15
 8000450:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000452:	2302      	movs	r3, #2
 8000454:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800045a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800045e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	2102      	movs	r1, #2
 800046a:	4618      	mov	r0, r3
 800046c:	f005 fb4e 	bl	8005b0c <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000476:	f000 f9b7 	bl	80007e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800047a:	2310      	movs	r3, #16
 800047c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4618      	mov	r0, r3
 8000486:	f005 fcc5 	bl	8005e14 <HAL_RCCEx_PeriphCLKConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000490:	f000 f9aa 	bl	80007e8 <Error_Handler>
  }
}
 8000494:	bf00      	nop
 8000496:	3750      	adds	r7, #80	; 0x50
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_I2C1_Init+0x50>)
 80004a2:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <MX_I2C1_Init+0x54>)
 80004a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_I2C1_Init+0x50>)
 80004a8:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <MX_I2C1_Init+0x58>)
 80004aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_I2C1_Init+0x50>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_I2C1_Init+0x50>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_I2C1_Init+0x50>)
 80004ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <MX_I2C1_Init+0x50>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_I2C1_Init+0x50>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <MX_I2C1_Init+0x50>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_I2C1_Init+0x50>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <MX_I2C1_Init+0x50>)
 80004da:	f000 ff0d 	bl	80012f8 <HAL_I2C_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004e4:	f000 f980 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200001fc 	.word	0x200001fc
 80004f0:	40005400 	.word	0x40005400
 80004f4:	00061a80 	.word	0x00061a80

080004f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <MX_I2C2_Init+0x50>)
 80004fe:	4a13      	ldr	r2, [pc, #76]	; (800054c <MX_I2C2_Init+0x54>)
 8000500:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <MX_I2C2_Init+0x50>)
 8000504:	4a12      	ldr	r2, [pc, #72]	; (8000550 <MX_I2C2_Init+0x58>)
 8000506:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <MX_I2C2_Init+0x50>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_I2C2_Init+0x50>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <MX_I2C2_Init+0x50>)
 8000516:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800051a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <MX_I2C2_Init+0x50>)
 800051e:	2200      	movs	r2, #0
 8000520:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <MX_I2C2_Init+0x50>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <MX_I2C2_Init+0x50>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <MX_I2C2_Init+0x50>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <MX_I2C2_Init+0x50>)
 8000536:	f000 fedf 	bl	80012f8 <HAL_I2C_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000540:	f000 f952 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000250 	.word	0x20000250
 800054c:	40005800 	.word	0x40005800
 8000550:	000186a0 	.word	0x000186a0

08000554 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000568:	463b      	mov	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <MX_TIM2_Init+0x94>)
 8000572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000576:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <MX_TIM2_Init+0x94>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <MX_TIM2_Init+0x94>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <MX_TIM2_Init+0x94>)
 8000586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800058a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <MX_TIM2_Init+0x94>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <MX_TIM2_Init+0x94>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000598:	4813      	ldr	r0, [pc, #76]	; (80005e8 <MX_TIM2_Init+0x94>)
 800059a:	f005 fcf1 	bl	8005f80 <HAL_TIM_Base_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005a4:	f000 f920 	bl	80007e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	4619      	mov	r1, r3
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <MX_TIM2_Init+0x94>)
 80005b6:	f005 fd32 	bl	800601e <HAL_TIM_ConfigClockSource>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005c0:	f000 f912 	bl	80007e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c4:	2300      	movs	r3, #0
 80005c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	4619      	mov	r1, r3
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_TIM2_Init+0x94>)
 80005d2:	f005 fee1 	bl	8006398 <HAL_TIMEx_MasterConfigSynchronization>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005dc:	f000 f904 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005e0:	bf00      	nop
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200002a4 	.word	0x200002a4

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000600:	4b46      	ldr	r3, [pc, #280]	; (800071c <MX_GPIO_Init+0x130>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a45      	ldr	r2, [pc, #276]	; (800071c <MX_GPIO_Init+0x130>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b43      	ldr	r3, [pc, #268]	; (800071c <MX_GPIO_Init+0x130>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0310 	and.w	r3, r3, #16
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000618:	4b40      	ldr	r3, [pc, #256]	; (800071c <MX_GPIO_Init+0x130>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a3f      	ldr	r2, [pc, #252]	; (800071c <MX_GPIO_Init+0x130>)
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b3d      	ldr	r3, [pc, #244]	; (800071c <MX_GPIO_Init+0x130>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000630:	4b3a      	ldr	r3, [pc, #232]	; (800071c <MX_GPIO_Init+0x130>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a39      	ldr	r2, [pc, #228]	; (800071c <MX_GPIO_Init+0x130>)
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b37      	ldr	r3, [pc, #220]	; (800071c <MX_GPIO_Init+0x130>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0308 	and.w	r3, r3, #8
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b34      	ldr	r3, [pc, #208]	; (800071c <MX_GPIO_Init+0x130>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a33      	ldr	r2, [pc, #204]	; (800071c <MX_GPIO_Init+0x130>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b31      	ldr	r3, [pc, #196]	; (800071c <MX_GPIO_Init+0x130>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	482e      	ldr	r0, [pc, #184]	; (8000720 <MX_GPIO_Init+0x134>)
 8000668:	f000 fe0c 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000672:	482c      	ldr	r0, [pc, #176]	; (8000724 <MX_GPIO_Init+0x138>)
 8000674:	f000 fe06 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2110      	movs	r1, #16
 800067c:	482a      	ldr	r0, [pc, #168]	; (8000728 <MX_GPIO_Init+0x13c>)
 800067e:	f000 fe01 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4821      	ldr	r0, [pc, #132]	; (8000720 <MX_GPIO_Init+0x134>)
 800069c:	f000 fc6e 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	481a      	ldr	r0, [pc, #104]	; (8000724 <MX_GPIO_Init+0x138>)
 80006ba:	f000 fc5f 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006be:	2328      	movs	r3, #40	; 0x28
 80006c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_GPIO_Init+0x140>)
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4619      	mov	r1, r3
 80006d0:	4815      	ldr	r0, [pc, #84]	; (8000728 <MX_GPIO_Init+0x13c>)
 80006d2:	f000 fc53 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006d6:	2310      	movs	r3, #16
 80006d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2302      	movs	r3, #2
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	480e      	ldr	r0, [pc, #56]	; (8000728 <MX_GPIO_Init+0x13c>)
 80006ee:	f000 fc45 	bl	8000f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2009      	movs	r0, #9
 80006f8:	f000 fb87 	bl	8000e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006fc:	2009      	movs	r0, #9
 80006fe:	f000 fba0 	bl	8000e42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2017      	movs	r0, #23
 8000708:	f000 fb7f 	bl	8000e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800070c:	2017      	movs	r0, #23
 800070e:	f000 fb98 	bl	8000e42 <HAL_NVIC_EnableIRQ>

}
 8000712:	bf00      	nop
 8000714:	3720      	adds	r7, #32
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000
 8000720:	40011000 	.word	0x40011000
 8000724:	40010800 	.word	0x40010800
 8000728:	40010c00 	.word	0x40010c00
 800072c:	10110000 	.word	0x10110000

08000730 <AFE12_RST>:

/* USER CODE BEGIN 4 */
static void AFE12_RST(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	afe4404_RstReset();
 8000734:	f00a fc8e 	bl	800b054 <afe4404_RstReset>
	HAL_Delay(0.05);
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fa6b 	bl	8000c14 <HAL_Delay>
	afe4404_RstSet();
 800073e:	f00a fc7d 	bl	800b03c <afe4404_RstSet>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <AFE1_Setup>:

static void AFE1_Setup(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	dynamic_modes_t dynamic_modes;

	dynamic_modes.transmit = trans_dis;
 800074e:	2300      	movs	r3, #0
 8000750:	703b      	strb	r3, [r7, #0]
	dynamic_modes.curr_range = led_double;
 8000752:	2301      	movs	r3, #1
 8000754:	707b      	strb	r3, [r7, #1]
	dynamic_modes.adc_power = adc_on;
 8000756:	2301      	movs	r3, #1
 8000758:	70bb      	strb	r3, [r7, #2]
	dynamic_modes.clk_mode = osc_mode;
 800075a:	2301      	movs	r3, #1
 800075c:	70fb      	strb	r3, [r7, #3]
	dynamic_modes.tia_power = tia_off;
 800075e:	2301      	movs	r3, #1
 8000760:	713b      	strb	r3, [r7, #4]
	dynamic_modes.rest_of_adc = rest_of_adc_off;
 8000762:	2300      	movs	r3, #0
 8000764:	717b      	strb	r3, [r7, #5]
	dynamic_modes.afe_rx_mode = afe_rx_normal;
 8000766:	2300      	movs	r3, #0
 8000768:	71bb      	strb	r3, [r7, #6]
	dynamic_modes.afe_mode = afe_normal;
 800076a:	2300      	movs	r3, #0
 800076c:	71fb      	strb	r3, [r7, #7]

	cur_i2c = hi2c1;
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <AFE1_Setup+0x48>)
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <AFE1_Setup+0x4c>)
 8000772:	4610      	mov	r0, r2
 8000774:	4619      	mov	r1, r3
 8000776:	2354      	movs	r3, #84	; 0x54
 8000778:	461a      	mov	r2, r3
 800077a:	f00c f843 	bl	800c804 <memcpy>
	hr3_init(afe4404_address, &dynamic_modes);
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	2058      	movs	r0, #88	; 0x58
 8000784:	f00b f857 	bl	800b836 <hr3_init>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200002f4 	.word	0x200002f4
 8000794:	200001fc 	.word	0x200001fc

08000798 <AFE2_Setup>:

static void AFE2_Setup(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	dynamic_modes_t dynamic_modes;

	dynamic_modes.transmit = trans_dis;
 800079e:	2300      	movs	r3, #0
 80007a0:	703b      	strb	r3, [r7, #0]
	dynamic_modes.curr_range = led_double;
 80007a2:	2301      	movs	r3, #1
 80007a4:	707b      	strb	r3, [r7, #1]
	dynamic_modes.adc_power = adc_on;
 80007a6:	2301      	movs	r3, #1
 80007a8:	70bb      	strb	r3, [r7, #2]
	dynamic_modes.clk_mode = osc_mode;
 80007aa:	2301      	movs	r3, #1
 80007ac:	70fb      	strb	r3, [r7, #3]
	dynamic_modes.tia_power = tia_off;
 80007ae:	2301      	movs	r3, #1
 80007b0:	713b      	strb	r3, [r7, #4]
	dynamic_modes.rest_of_adc = rest_of_adc_off;
 80007b2:	2300      	movs	r3, #0
 80007b4:	717b      	strb	r3, [r7, #5]
	dynamic_modes.afe_rx_mode = afe_rx_normal;
 80007b6:	2300      	movs	r3, #0
 80007b8:	71bb      	strb	r3, [r7, #6]
	dynamic_modes.afe_mode = afe_normal;
 80007ba:	2300      	movs	r3, #0
 80007bc:	71fb      	strb	r3, [r7, #7]

	cur_i2c = hi2c2;
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <AFE2_Setup+0x48>)
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <AFE2_Setup+0x4c>)
 80007c2:	4610      	mov	r0, r2
 80007c4:	4619      	mov	r1, r3
 80007c6:	2354      	movs	r3, #84	; 0x54
 80007c8:	461a      	mov	r2, r3
 80007ca:	f00c f81b 	bl	800c804 <memcpy>
	hr3_init(afe4404_address, &dynamic_modes);
 80007ce:	463b      	mov	r3, r7
 80007d0:	4619      	mov	r1, r3
 80007d2:	2058      	movs	r0, #88	; 0x58
 80007d4:	f00b f82f 	bl	800b836 <hr3_init>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200002f4 	.word	0x200002f4
 80007e4:	20000250 	.word	0x20000250

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_MspInit+0x5c>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a14      	ldr	r2, [pc, #80]	; (8000850 <HAL_MspInit+0x5c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_MspInit+0x5c>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x5c>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_MspInit+0x5c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	61d3      	str	r3, [r2, #28]
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x5c>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_MspInit+0x60>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_MspInit+0x60>)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	40021000 	.word	0x40021000
 8000854:	40010000 	.word	0x40010000

08000858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a3b      	ldr	r2, [pc, #236]	; (8000960 <HAL_I2C_MspInit+0x108>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d134      	bne.n	80008e2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000878:	4b3a      	ldr	r3, [pc, #232]	; (8000964 <HAL_I2C_MspInit+0x10c>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a39      	ldr	r2, [pc, #228]	; (8000964 <HAL_I2C_MspInit+0x10c>)
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b37      	ldr	r3, [pc, #220]	; (8000964 <HAL_I2C_MspInit+0x10c>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0308 	and.w	r3, r3, #8
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000890:	23c0      	movs	r3, #192	; 0xc0
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000894:	2312      	movs	r3, #18
 8000896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0318 	add.w	r3, r7, #24
 80008a0:	4619      	mov	r1, r3
 80008a2:	4831      	ldr	r0, [pc, #196]	; (8000968 <HAL_I2C_MspInit+0x110>)
 80008a4:	f000 fb6a 	bl	8000f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a8:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <HAL_I2C_MspInit+0x10c>)
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	4a2d      	ldr	r2, [pc, #180]	; (8000964 <HAL_I2C_MspInit+0x10c>)
 80008ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b2:	61d3      	str	r3, [r2, #28]
 80008b4:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <HAL_I2C_MspInit+0x10c>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	201f      	movs	r0, #31
 80008c6:	f000 faa0 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008ca:	201f      	movs	r0, #31
 80008cc:	f000 fab9 	bl	8000e42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2020      	movs	r0, #32
 80008d6:	f000 fa98 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008da:	2020      	movs	r0, #32
 80008dc:	f000 fab1 	bl	8000e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008e0:	e039      	b.n	8000956 <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a21      	ldr	r2, [pc, #132]	; (800096c <HAL_I2C_MspInit+0x114>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d134      	bne.n	8000956 <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <HAL_I2C_MspInit+0x10c>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <HAL_I2C_MspInit+0x10c>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <HAL_I2C_MspInit+0x10c>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000904:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090a:	2312      	movs	r3, #18
 800090c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	f107 0318 	add.w	r3, r7, #24
 8000916:	4619      	mov	r1, r3
 8000918:	4813      	ldr	r0, [pc, #76]	; (8000968 <HAL_I2C_MspInit+0x110>)
 800091a:	f000 fb2f 	bl	8000f7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_I2C_MspInit+0x10c>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <HAL_I2C_MspInit+0x10c>)
 8000924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_I2C_MspInit+0x10c>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2021      	movs	r0, #33	; 0x21
 800093c:	f000 fa65 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000940:	2021      	movs	r0, #33	; 0x21
 8000942:	f000 fa7e 	bl	8000e42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2022      	movs	r0, #34	; 0x22
 800094c:	f000 fa5d 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000950:	2022      	movs	r0, #34	; 0x22
 8000952:	f000 fa76 	bl	8000e42 <HAL_NVIC_EnableIRQ>
}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40005400 	.word	0x40005400
 8000964:	40021000 	.word	0x40021000
 8000968:	40010c00 	.word	0x40010c00
 800096c:	40005800 	.word	0x40005800

08000970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000980:	d10b      	bne.n	800099a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_TIM_Base_MspInit+0x34>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_TIM_Base_MspInit+0x34>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_TIM_Base_MspInit+0x34>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40021000 	.word	0x40021000

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ee:	f000 f8f5 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  adc1_rdy = 1;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <EXTI3_IRQHandler+0x14>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000a02:	2008      	movs	r0, #8
 8000a04:	f000 fc56 	bl	80012b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200002f0 	.word	0x200002f0

08000a10 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a16:	f003 fa64 	bl	8003ee2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20001018 	.word	0x20001018

08000a24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  adc2_rdy = 1;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <EXTI9_5_IRQHandler+0x14>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000a2e:	2020      	movs	r0, #32
 8000a30:	f000 fc40 	bl	80012b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200002f1 	.word	0x200002f1

08000a3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <I2C1_EV_IRQHandler+0x10>)
 8000a42:	f001 f903 	bl	8001c4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200001fc 	.word	0x200001fc

08000a50 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <I2C1_ER_IRQHandler+0x10>)
 8000a56:	f001 fa6a 	bl	8001f2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200001fc 	.word	0x200001fc

08000a64 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <I2C2_EV_IRQHandler+0x10>)
 8000a6a:	f001 f8ef 	bl	8001c4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000250 	.word	0x20000250

08000a78 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <I2C2_ER_IRQHandler+0x10>)
 8000a7e:	f001 fa56 	bl	8001f2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000250 	.word	0x20000250

08000a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <_sbrk+0x5c>)
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <_sbrk+0x60>)
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <_sbrk+0x64>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <_sbrk+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d207      	bcs.n	8000acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000abc:	f00b fe70 	bl	800c7a0 <__errno>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	e009      	b.n	8000ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <_sbrk+0x64>)
 8000adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20005000 	.word	0x20005000
 8000aec:	00000400 	.word	0x00000400
 8000af0:	20000348 	.word	0x20000348
 8000af4:	200015c0 	.word	0x200015c0

08000af8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	; (8000b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2a:	f7ff ffe5 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f00b fe3d 	bl	800c7ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b32:	f7ff fbd1 	bl	80002d8 <main>
  bx lr
 8000b36:	4770      	bx	lr
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000b40:	0800d1f4 	.word	0x0800d1f4
  ldr r2, =_sbss
 8000b44:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000b48:	200015bc 	.word	0x200015bc

08000b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_2_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x28>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x28>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f947 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fe42 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f95f 	bl	8000e5e <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f927 	bl	8000e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <HAL_IncTick+0x20>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	2000034c 	.word	0x2000034c

08000c00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <HAL_GetTick+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	2000034c 	.word	0x2000034c

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff fff0 	bl	8000c00 <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffe0 	bl	8000c00 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4906      	ldr	r1, [pc, #24]	; (8000cf4 <__NVIC_EnableIRQ+0x34>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff90 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff2d 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff42 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff90 	bl	8000d4c <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5f 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff35 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa2 	bl	8000db0 <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d005      	beq.n	8000e9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2204      	movs	r2, #4
 8000e92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e051      	b.n	8000f3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 020e 	bic.w	r2, r2, #14
 8000ea8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0201 	bic.w	r2, r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a22      	ldr	r2, [pc, #136]	; (8000f48 <HAL_DMA_Abort_IT+0xd0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d029      	beq.n	8000f18 <HAL_DMA_Abort_IT+0xa0>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a20      	ldr	r2, [pc, #128]	; (8000f4c <HAL_DMA_Abort_IT+0xd4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d022      	beq.n	8000f14 <HAL_DMA_Abort_IT+0x9c>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_DMA_Abort_IT+0xd8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d01a      	beq.n	8000f0e <HAL_DMA_Abort_IT+0x96>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1d      	ldr	r2, [pc, #116]	; (8000f54 <HAL_DMA_Abort_IT+0xdc>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d012      	beq.n	8000f08 <HAL_DMA_Abort_IT+0x90>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <HAL_DMA_Abort_IT+0xe0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d00a      	beq.n	8000f02 <HAL_DMA_Abort_IT+0x8a>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a1a      	ldr	r2, [pc, #104]	; (8000f5c <HAL_DMA_Abort_IT+0xe4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d102      	bne.n	8000efc <HAL_DMA_Abort_IT+0x84>
 8000ef6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000efa:	e00e      	b.n	8000f1a <HAL_DMA_Abort_IT+0xa2>
 8000efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f00:	e00b      	b.n	8000f1a <HAL_DMA_Abort_IT+0xa2>
 8000f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f06:	e008      	b.n	8000f1a <HAL_DMA_Abort_IT+0xa2>
 8000f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0c:	e005      	b.n	8000f1a <HAL_DMA_Abort_IT+0xa2>
 8000f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f12:	e002      	b.n	8000f1a <HAL_DMA_Abort_IT+0xa2>
 8000f14:	2310      	movs	r3, #16
 8000f16:	e000      	b.n	8000f1a <HAL_DMA_Abort_IT+0xa2>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	4a11      	ldr	r2, [pc, #68]	; (8000f60 <HAL_DMA_Abort_IT+0xe8>)
 8000f1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	4798      	blx	r3
    } 
  }
  return status;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40020008 	.word	0x40020008
 8000f4c:	4002001c 	.word	0x4002001c
 8000f50:	40020030 	.word	0x40020030
 8000f54:	40020044 	.word	0x40020044
 8000f58:	40020058 	.word	0x40020058
 8000f5c:	4002006c 	.word	0x4002006c
 8000f60:	40020000 	.word	0x40020000

08000f64 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b08b      	sub	sp, #44	; 0x2c
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8e:	e169      	b.n	8001264 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f90:	2201      	movs	r2, #1
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	f040 8158 	bne.w	800125e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4a9a      	ldr	r2, [pc, #616]	; (800121c <HAL_GPIO_Init+0x2a0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d05e      	beq.n	8001076 <HAL_GPIO_Init+0xfa>
 8000fb8:	4a98      	ldr	r2, [pc, #608]	; (800121c <HAL_GPIO_Init+0x2a0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d875      	bhi.n	80010aa <HAL_GPIO_Init+0x12e>
 8000fbe:	4a98      	ldr	r2, [pc, #608]	; (8001220 <HAL_GPIO_Init+0x2a4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d058      	beq.n	8001076 <HAL_GPIO_Init+0xfa>
 8000fc4:	4a96      	ldr	r2, [pc, #600]	; (8001220 <HAL_GPIO_Init+0x2a4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d86f      	bhi.n	80010aa <HAL_GPIO_Init+0x12e>
 8000fca:	4a96      	ldr	r2, [pc, #600]	; (8001224 <HAL_GPIO_Init+0x2a8>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d052      	beq.n	8001076 <HAL_GPIO_Init+0xfa>
 8000fd0:	4a94      	ldr	r2, [pc, #592]	; (8001224 <HAL_GPIO_Init+0x2a8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d869      	bhi.n	80010aa <HAL_GPIO_Init+0x12e>
 8000fd6:	4a94      	ldr	r2, [pc, #592]	; (8001228 <HAL_GPIO_Init+0x2ac>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d04c      	beq.n	8001076 <HAL_GPIO_Init+0xfa>
 8000fdc:	4a92      	ldr	r2, [pc, #584]	; (8001228 <HAL_GPIO_Init+0x2ac>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d863      	bhi.n	80010aa <HAL_GPIO_Init+0x12e>
 8000fe2:	4a92      	ldr	r2, [pc, #584]	; (800122c <HAL_GPIO_Init+0x2b0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d046      	beq.n	8001076 <HAL_GPIO_Init+0xfa>
 8000fe8:	4a90      	ldr	r2, [pc, #576]	; (800122c <HAL_GPIO_Init+0x2b0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d85d      	bhi.n	80010aa <HAL_GPIO_Init+0x12e>
 8000fee:	2b12      	cmp	r3, #18
 8000ff0:	d82a      	bhi.n	8001048 <HAL_GPIO_Init+0xcc>
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	d859      	bhi.n	80010aa <HAL_GPIO_Init+0x12e>
 8000ff6:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <HAL_GPIO_Init+0x80>)
 8000ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffc:	08001077 	.word	0x08001077
 8001000:	08001051 	.word	0x08001051
 8001004:	08001063 	.word	0x08001063
 8001008:	080010a5 	.word	0x080010a5
 800100c:	080010ab 	.word	0x080010ab
 8001010:	080010ab 	.word	0x080010ab
 8001014:	080010ab 	.word	0x080010ab
 8001018:	080010ab 	.word	0x080010ab
 800101c:	080010ab 	.word	0x080010ab
 8001020:	080010ab 	.word	0x080010ab
 8001024:	080010ab 	.word	0x080010ab
 8001028:	080010ab 	.word	0x080010ab
 800102c:	080010ab 	.word	0x080010ab
 8001030:	080010ab 	.word	0x080010ab
 8001034:	080010ab 	.word	0x080010ab
 8001038:	080010ab 	.word	0x080010ab
 800103c:	080010ab 	.word	0x080010ab
 8001040:	08001059 	.word	0x08001059
 8001044:	0800106d 	.word	0x0800106d
 8001048:	4a79      	ldr	r2, [pc, #484]	; (8001230 <HAL_GPIO_Init+0x2b4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d013      	beq.n	8001076 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800104e:	e02c      	b.n	80010aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	623b      	str	r3, [r7, #32]
          break;
 8001056:	e029      	b.n	80010ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	3304      	adds	r3, #4
 800105e:	623b      	str	r3, [r7, #32]
          break;
 8001060:	e024      	b.n	80010ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	3308      	adds	r3, #8
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e01f      	b.n	80010ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	330c      	adds	r3, #12
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	e01a      	b.n	80010ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800107e:	2304      	movs	r3, #4
 8001080:	623b      	str	r3, [r7, #32]
          break;
 8001082:	e013      	b.n	80010ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d105      	bne.n	8001098 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800108c:	2308      	movs	r3, #8
 800108e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	611a      	str	r2, [r3, #16]
          break;
 8001096:	e009      	b.n	80010ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001098:	2308      	movs	r3, #8
 800109a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	615a      	str	r2, [r3, #20]
          break;
 80010a2:	e003      	b.n	80010ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
          break;
 80010a8:	e000      	b.n	80010ac <HAL_GPIO_Init+0x130>
          break;
 80010aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2bff      	cmp	r3, #255	; 0xff
 80010b0:	d801      	bhi.n	80010b6 <HAL_GPIO_Init+0x13a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	e001      	b.n	80010ba <HAL_GPIO_Init+0x13e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3304      	adds	r3, #4
 80010ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2bff      	cmp	r3, #255	; 0xff
 80010c0:	d802      	bhi.n	80010c8 <HAL_GPIO_Init+0x14c>
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	e002      	b.n	80010ce <HAL_GPIO_Init+0x152>
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	3b08      	subs	r3, #8
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	210f      	movs	r1, #15
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	401a      	ands	r2, r3
 80010e0:	6a39      	ldr	r1, [r7, #32]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	431a      	orrs	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 80b1 	beq.w	800125e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010fc:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a4c      	ldr	r2, [pc, #304]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001114:	4a48      	ldr	r2, [pc, #288]	; (8001238 <HAL_GPIO_Init+0x2bc>)
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	3302      	adds	r3, #2
 800111c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001120:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	220f      	movs	r2, #15
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4013      	ands	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a40      	ldr	r2, [pc, #256]	; (800123c <HAL_GPIO_Init+0x2c0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d013      	beq.n	8001168 <HAL_GPIO_Init+0x1ec>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a3f      	ldr	r2, [pc, #252]	; (8001240 <HAL_GPIO_Init+0x2c4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d00d      	beq.n	8001164 <HAL_GPIO_Init+0x1e8>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a3e      	ldr	r2, [pc, #248]	; (8001244 <HAL_GPIO_Init+0x2c8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d007      	beq.n	8001160 <HAL_GPIO_Init+0x1e4>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3d      	ldr	r2, [pc, #244]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d101      	bne.n	800115c <HAL_GPIO_Init+0x1e0>
 8001158:	2303      	movs	r3, #3
 800115a:	e006      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 800115c:	2304      	movs	r3, #4
 800115e:	e004      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 8001160:	2302      	movs	r3, #2
 8001162:	e002      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 8001168:	2300      	movs	r3, #0
 800116a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800116c:	f002 0203 	and.w	r2, r2, #3
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	4093      	lsls	r3, r2
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800117a:	492f      	ldr	r1, [pc, #188]	; (8001238 <HAL_GPIO_Init+0x2bc>)
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_GPIO_Init+0x2d0>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	492c      	ldr	r1, [pc, #176]	; (800124c <HAL_GPIO_Init+0x2d0>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_GPIO_Init+0x2d0>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	4928      	ldr	r1, [pc, #160]	; (800124c <HAL_GPIO_Init+0x2d0>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <HAL_GPIO_Init+0x2d0>)
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4922      	ldr	r1, [pc, #136]	; (800124c <HAL_GPIO_Init+0x2d0>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_GPIO_Init+0x2d0>)
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	491e      	ldr	r1, [pc, #120]	; (800124c <HAL_GPIO_Init+0x2d0>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_GPIO_Init+0x2d0>)
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	4918      	ldr	r1, [pc, #96]	; (800124c <HAL_GPIO_Init+0x2d0>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	608b      	str	r3, [r1, #8]
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_GPIO_Init+0x2d0>)
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	4914      	ldr	r1, [pc, #80]	; (800124c <HAL_GPIO_Init+0x2d0>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d021      	beq.n	8001250 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <HAL_GPIO_Init+0x2d0>)
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	490e      	ldr	r1, [pc, #56]	; (800124c <HAL_GPIO_Init+0x2d0>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	60cb      	str	r3, [r1, #12]
 8001218:	e021      	b.n	800125e <HAL_GPIO_Init+0x2e2>
 800121a:	bf00      	nop
 800121c:	10320000 	.word	0x10320000
 8001220:	10310000 	.word	0x10310000
 8001224:	10220000 	.word	0x10220000
 8001228:	10210000 	.word	0x10210000
 800122c:	10120000 	.word	0x10120000
 8001230:	10110000 	.word	0x10110000
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000
 800123c:	40010800 	.word	0x40010800
 8001240:	40010c00 	.word	0x40010c00
 8001244:	40011000 	.word	0x40011000
 8001248:	40011400 	.word	0x40011400
 800124c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_GPIO_Init+0x304>)
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	43db      	mvns	r3, r3
 8001258:	4909      	ldr	r1, [pc, #36]	; (8001280 <HAL_GPIO_Init+0x304>)
 800125a:	4013      	ands	r3, r2
 800125c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	3301      	adds	r3, #1
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	fa22 f303 	lsr.w	r3, r2, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	f47f ae8e 	bne.w	8000f90 <HAL_GPIO_Init+0x14>
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	372c      	adds	r7, #44	; 0x2c
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40010400 	.word	0x40010400

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012a0:	e003      	b.n	80012aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	041a      	lsls	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	611a      	str	r2, [r3, #16]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f806 	bl	80012e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e12b      	b.n	8001562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d106      	bne.n	8001324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fa9a 	bl	8000858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2224      	movs	r2, #36	; 0x24
 8001328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800134a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800135a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800135c:	f004 fd28 	bl	8005db0 <HAL_RCC_GetPCLK1Freq>
 8001360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a81      	ldr	r2, [pc, #516]	; (800156c <HAL_I2C_Init+0x274>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d807      	bhi.n	800137c <HAL_I2C_Init+0x84>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a80      	ldr	r2, [pc, #512]	; (8001570 <HAL_I2C_Init+0x278>)
 8001370:	4293      	cmp	r3, r2
 8001372:	bf94      	ite	ls
 8001374:	2301      	movls	r3, #1
 8001376:	2300      	movhi	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	e006      	b.n	800138a <HAL_I2C_Init+0x92>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a7d      	ldr	r2, [pc, #500]	; (8001574 <HAL_I2C_Init+0x27c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	bf94      	ite	ls
 8001384:	2301      	movls	r3, #1
 8001386:	2300      	movhi	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0e7      	b.n	8001562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4a78      	ldr	r2, [pc, #480]	; (8001578 <HAL_I2C_Init+0x280>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0c9b      	lsrs	r3, r3, #18
 800139c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4a6a      	ldr	r2, [pc, #424]	; (800156c <HAL_I2C_Init+0x274>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d802      	bhi.n	80013cc <HAL_I2C_Init+0xd4>
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3301      	adds	r3, #1
 80013ca:	e009      	b.n	80013e0 <HAL_I2C_Init+0xe8>
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	4a69      	ldr	r2, [pc, #420]	; (800157c <HAL_I2C_Init+0x284>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	3301      	adds	r3, #1
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	495c      	ldr	r1, [pc, #368]	; (800156c <HAL_I2C_Init+0x274>)
 80013fc:	428b      	cmp	r3, r1
 80013fe:	d819      	bhi.n	8001434 <HAL_I2C_Init+0x13c>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1e59      	subs	r1, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fbb1 f3f3 	udiv	r3, r1, r3
 800140e:	1c59      	adds	r1, r3, #1
 8001410:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001414:	400b      	ands	r3, r1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00a      	beq.n	8001430 <HAL_I2C_Init+0x138>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1e59      	subs	r1, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fbb1 f3f3 	udiv	r3, r1, r3
 8001428:	3301      	adds	r3, #1
 800142a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142e:	e051      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 8001430:	2304      	movs	r3, #4
 8001432:	e04f      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d111      	bne.n	8001460 <HAL_I2C_Init+0x168>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e58      	subs	r0, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	440b      	add	r3, r1
 800144a:	fbb0 f3f3 	udiv	r3, r0, r3
 800144e:	3301      	adds	r3, #1
 8001450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf0c      	ite	eq
 8001458:	2301      	moveq	r3, #1
 800145a:	2300      	movne	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	e012      	b.n	8001486 <HAL_I2C_Init+0x18e>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1e58      	subs	r0, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	0099      	lsls	r1, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	fbb0 f3f3 	udiv	r3, r0, r3
 8001476:	3301      	adds	r3, #1
 8001478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Init+0x196>
 800148a:	2301      	movs	r3, #1
 800148c:	e022      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10e      	bne.n	80014b4 <HAL_I2C_Init+0x1bc>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1e58      	subs	r0, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6859      	ldr	r1, [r3, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	440b      	add	r3, r1
 80014a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a8:	3301      	adds	r3, #1
 80014aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b2:	e00f      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1e58      	subs	r0, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	0099      	lsls	r1, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	6809      	ldr	r1, [r1, #0]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69da      	ldr	r2, [r3, #28]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6911      	ldr	r1, [r2, #16]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68d2      	ldr	r2, [r2, #12]
 800150e:	4311      	orrs	r1, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	430b      	orrs	r3, r1
 8001516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2220      	movs	r2, #32
 800154e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	000186a0 	.word	0x000186a0
 8001570:	001e847f 	.word	0x001e847f
 8001574:	003d08ff 	.word	0x003d08ff
 8001578:	431bde83 	.word	0x431bde83
 800157c:	10624dd3 	.word	0x10624dd3

08001580 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af02      	add	r7, sp, #8
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	461a      	mov	r2, r3
 800158c:	460b      	mov	r3, r1
 800158e:	817b      	strh	r3, [r7, #10]
 8001590:	4613      	mov	r3, r2
 8001592:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff fb34 	bl	8000c00 <HAL_GetTick>
 8001598:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b20      	cmp	r3, #32
 80015a4:	f040 80e0 	bne.w	8001768 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2319      	movs	r3, #25
 80015ae:	2201      	movs	r2, #1
 80015b0:	4970      	ldr	r1, [pc, #448]	; (8001774 <HAL_I2C_Master_Transmit+0x1f4>)
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f002 f93c 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015be:	2302      	movs	r3, #2
 80015c0:	e0d3      	b.n	800176a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_I2C_Master_Transmit+0x50>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e0cc      	b.n	800176a <HAL_I2C_Master_Transmit+0x1ea>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d007      	beq.n	80015f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001604:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2221      	movs	r2, #33	; 0x21
 800160a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2210      	movs	r2, #16
 8001612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	893a      	ldrh	r2, [r7, #8]
 8001626:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4a50      	ldr	r2, [pc, #320]	; (8001778 <HAL_I2C_Master_Transmit+0x1f8>)
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001638:	8979      	ldrh	r1, [r7, #10]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	6a3a      	ldr	r2, [r7, #32]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f001 fee4 	bl	800340c <I2C_MasterRequestWrite>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e08d      	b.n	800176a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001664:	e066      	b.n	8001734 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	6a39      	ldr	r1, [r7, #32]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f002 f9b6 	bl	80039dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00d      	beq.n	8001692 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2b04      	cmp	r3, #4
 800167c:	d107      	bne.n	800168e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800168c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e06b      	b.n	800176a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	3b01      	subs	r3, #1
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d11b      	bne.n	8001708 <HAL_I2C_Master_Transmit+0x188>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d017      	beq.n	8001708 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	6a39      	ldr	r1, [r7, #32]
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f002 f9a6 	bl	8003a5e <I2C_WaitOnBTFFlagUntilTimeout>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00d      	beq.n	8001734 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	2b04      	cmp	r3, #4
 800171e:	d107      	bne.n	8001730 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800172e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e01a      	b.n	800176a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001738:	2b00      	cmp	r3, #0
 800173a:	d194      	bne.n	8001666 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800174a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2220      	movs	r2, #32
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	e000      	b.n	800176a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001768:	2302      	movs	r3, #2
  }
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	00100002 	.word	0x00100002
 8001778:	ffff0000 	.word	0xffff0000

0800177c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	; 0x30
 8001780:	af02      	add	r7, sp, #8
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	4608      	mov	r0, r1
 8001786:	4611      	mov	r1, r2
 8001788:	461a      	mov	r2, r3
 800178a:	4603      	mov	r3, r0
 800178c:	817b      	strh	r3, [r7, #10]
 800178e:	460b      	mov	r3, r1
 8001790:	813b      	strh	r3, [r7, #8]
 8001792:	4613      	mov	r3, r2
 8001794:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800179a:	f7ff fa31 	bl	8000c00 <HAL_GetTick>
 800179e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	f040 8244 	bne.w	8001c36 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2319      	movs	r3, #25
 80017b4:	2201      	movs	r2, #1
 80017b6:	4982      	ldr	r1, [pc, #520]	; (80019c0 <HAL_I2C_Mem_Read+0x244>)
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f002 f839 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80017c4:	2302      	movs	r3, #2
 80017c6:	e237      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_I2C_Mem_Read+0x5a>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e230      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d007      	beq.n	80017fc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800180a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2222      	movs	r2, #34	; 0x22
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800182c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a62      	ldr	r2, [pc, #392]	; (80019c4 <HAL_I2C_Mem_Read+0x248>)
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800183e:	88f8      	ldrh	r0, [r7, #6]
 8001840:	893a      	ldrh	r2, [r7, #8]
 8001842:	8979      	ldrh	r1, [r7, #10]
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	4603      	mov	r3, r0
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f001 fe5e 	bl	8003510 <I2C_RequestMemoryRead>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e1ec      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001862:	2b00      	cmp	r3, #0
 8001864:	d113      	bne.n	800188e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e1c0      	b.n	8001c10 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001892:	2b01      	cmp	r3, #1
 8001894:	d11e      	bne.n	80018d4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018a6:	b672      	cpsid	i
}
 80018a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018d0:	b662      	cpsie	i
}
 80018d2:	e035      	b.n	8001940 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d11e      	bne.n	800191a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001914:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001916:	b662      	cpsie	i
}
 8001918:	e012      	b.n	8001940 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001928:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001940:	e166      	b.n	8001c10 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001946:	2b03      	cmp	r3, #3
 8001948:	f200 811f 	bhi.w	8001b8a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001950:	2b01      	cmp	r3, #1
 8001952:	d123      	bne.n	800199c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001956:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f002 f8f3 	bl	8003b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e167      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001984:	3b01      	subs	r3, #1
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001990:	b29b      	uxth	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	855a      	strh	r2, [r3, #42]	; 0x2a
 800199a:	e139      	b.n	8001c10 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d152      	bne.n	8001a4a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019aa:	2200      	movs	r2, #0
 80019ac:	4906      	ldr	r1, [pc, #24]	; (80019c8 <HAL_I2C_Mem_Read+0x24c>)
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f001 ff3e 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e13c      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
 80019be:	bf00      	nop
 80019c0:	00100002 	.word	0x00100002
 80019c4:	ffff0000 	.word	0xffff0000
 80019c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691a      	ldr	r2, [r3, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a12:	b662      	cpsie	i
}
 8001a14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a48:	e0e2      	b.n	8001c10 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a50:	2200      	movs	r2, #0
 8001a52:	497b      	ldr	r1, [pc, #492]	; (8001c40 <HAL_I2C_Mem_Read+0x4c4>)
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f001 feeb 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0e9      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001aaa:	4b66      	ldr	r3, [pc, #408]	; (8001c44 <HAL_I2C_Mem_Read+0x4c8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	08db      	lsrs	r3, r3, #3
 8001ab0:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <HAL_I2C_Mem_Read+0x4cc>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0a1a      	lsrs	r2, r3, #8
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00da      	lsls	r2, r3, #3
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d118      	bne.n	8001b02 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f043 0220 	orr.w	r2, r3, #32
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001af2:	b662      	cpsie	i
}
 8001af4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e09a      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d1d9      	bne.n	8001ac4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b52:	b662      	cpsie	i
}
 8001b54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b88:	e042      	b.n	8001c10 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f001 ffd8 	bl	8003b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e04c      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d118      	bne.n	8001c10 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f47f ae94 	bne.w	8001942 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
  }
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	00010004 	.word	0x00010004
 8001c44:	20000000 	.word	0x20000000
 8001c48:	14f8b589 	.word	0x14f8b589

08001c4c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c6c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c74:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d003      	beq.n	8001c84 <HAL_I2C_EV_IRQHandler+0x38>
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	2b40      	cmp	r3, #64	; 0x40
 8001c80:	f040 80c1 	bne.w	8001e06 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10d      	bne.n	8001cba <HAL_I2C_EV_IRQHandler+0x6e>
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001ca4:	d003      	beq.n	8001cae <HAL_I2C_EV_IRQHandler+0x62>
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001cac:	d101      	bne.n	8001cb2 <HAL_I2C_EV_IRQHandler+0x66>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_I2C_EV_IRQHandler+0x68>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	f000 8132 	beq.w	8001f1e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00c      	beq.n	8001cde <HAL_I2C_EV_IRQHandler+0x92>
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	0a5b      	lsrs	r3, r3, #9
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f001 ffbb 	bl	8003c4c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fd77 	bl	80027ca <I2C_Master_SB>
 8001cdc:	e092      	b.n	8001e04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	08db      	lsrs	r3, r3, #3
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_I2C_EV_IRQHandler+0xb2>
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	0a5b      	lsrs	r3, r3, #9
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fdec 	bl	80028d4 <I2C_Master_ADD10>
 8001cfc:	e082      	b.n	8001e04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	085b      	lsrs	r3, r3, #1
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d009      	beq.n	8001d1e <HAL_I2C_EV_IRQHandler+0xd2>
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	0a5b      	lsrs	r3, r3, #9
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fe05 	bl	8002926 <I2C_Master_ADDR>
 8001d1c:	e072      	b.n	8001e04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d03b      	beq.n	8001da2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d38:	f000 80f3 	beq.w	8001f22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	09db      	lsrs	r3, r3, #7
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00f      	beq.n	8001d68 <HAL_I2C_EV_IRQHandler+0x11c>
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <HAL_I2C_EV_IRQHandler+0x11c>
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f9f1 	bl	8002148 <I2C_MasterTransmit_TXE>
 8001d66:	e04d      	b.n	8001e04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80d6 	beq.w	8001f22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	0a5b      	lsrs	r3, r3, #9
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80cf 	beq.w	8001f22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001d84:	7bbb      	ldrb	r3, [r7, #14]
 8001d86:	2b21      	cmp	r3, #33	; 0x21
 8001d88:	d103      	bne.n	8001d92 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fa78 	bl	8002280 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d90:	e0c7      	b.n	8001f22 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	f040 80c4 	bne.w	8001f22 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fae6 	bl	800236c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001da0:	e0bf      	b.n	8001f22 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001db0:	f000 80b7 	beq.w	8001f22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	099b      	lsrs	r3, r3, #6
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00f      	beq.n	8001de0 <HAL_I2C_EV_IRQHandler+0x194>
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	0a9b      	lsrs	r3, r3, #10
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <HAL_I2C_EV_IRQHandler+0x194>
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d103      	bne.n	8001de0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fb5b 	bl	8002494 <I2C_MasterReceive_RXNE>
 8001dde:	e011      	b.n	8001e04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 809a 	beq.w	8001f22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	0a5b      	lsrs	r3, r3, #9
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8093 	beq.w	8001f22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fbfa 	bl	80025f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e02:	e08e      	b.n	8001f22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e04:	e08d      	b.n	8001f22 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d004      	beq.n	8001e18 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	e007      	b.n	8001e28 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d012      	beq.n	8001e5a <HAL_I2C_EV_IRQHandler+0x20e>
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	0a5b      	lsrs	r3, r3, #9
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00c      	beq.n	8001e5a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e50:	69b9      	ldr	r1, [r7, #24]
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 ffbe 	bl	8002dd4 <I2C_Slave_ADDR>
 8001e58:	e066      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <HAL_I2C_EV_IRQHandler+0x22e>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	0a5b      	lsrs	r3, r3, #9
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fff8 	bl	8002e68 <I2C_Slave_STOPF>
 8001e78:	e056      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e7a:	7bbb      	ldrb	r3, [r7, #14]
 8001e7c:	2b21      	cmp	r3, #33	; 0x21
 8001e7e:	d002      	beq.n	8001e86 <HAL_I2C_EV_IRQHandler+0x23a>
 8001e80:	7bbb      	ldrb	r3, [r7, #14]
 8001e82:	2b29      	cmp	r3, #41	; 0x29
 8001e84:	d125      	bne.n	8001ed2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	09db      	lsrs	r3, r3, #7
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00f      	beq.n	8001eb2 <HAL_I2C_EV_IRQHandler+0x266>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	0a9b      	lsrs	r3, r3, #10
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_I2C_EV_IRQHandler+0x266>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fed6 	bl	8002c5c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eb0:	e039      	b.n	8001f26 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d033      	beq.n	8001f26 <HAL_I2C_EV_IRQHandler+0x2da>
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	0a5b      	lsrs	r3, r3, #9
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d02d      	beq.n	8001f26 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 ff03 	bl	8002cd6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ed0:	e029      	b.n	8001f26 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00f      	beq.n	8001efe <HAL_I2C_EV_IRQHandler+0x2b2>
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	0a9b      	lsrs	r3, r3, #10
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <HAL_I2C_EV_IRQHandler+0x2b2>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d103      	bne.n	8001efe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 ff0d 	bl	8002d16 <I2C_SlaveReceive_RXNE>
 8001efc:	e014      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00e      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	0a5b      	lsrs	r3, r3, #9
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 ff3b 	bl	8002d92 <I2C_SlaveReceive_BTF>
 8001f1c:	e004      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001f1e:	bf00      	nop
 8001f20:	e002      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f22:	bf00      	nop
 8001f24:	e000      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f26:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b08a      	sub	sp, #40	; 0x28
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f50:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d016      	beq.n	8001f8c <HAL_I2C_ER_IRQHandler+0x5e>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d010      	beq.n	8001f8c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f7a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f8a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	0a5b      	lsrs	r3, r3, #9
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00e      	beq.n	8001fb6 <HAL_I2C_ER_IRQHandler+0x88>
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001fb4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	0a9b      	lsrs	r3, r3, #10
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d03f      	beq.n	8002042 <HAL_I2C_ER_IRQHandler+0x114>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d039      	beq.n	8002042 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8001fce:	7efb      	ldrb	r3, [r7, #27]
 8001fd0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001fe8:	7ebb      	ldrb	r3, [r7, #26]
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d112      	bne.n	8002014 <HAL_I2C_ER_IRQHandler+0xe6>
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10f      	bne.n	8002014 <HAL_I2C_ER_IRQHandler+0xe6>
 8001ff4:	7cfb      	ldrb	r3, [r7, #19]
 8001ff6:	2b21      	cmp	r3, #33	; 0x21
 8001ff8:	d008      	beq.n	800200c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001ffa:	7cfb      	ldrb	r3, [r7, #19]
 8001ffc:	2b29      	cmp	r3, #41	; 0x29
 8001ffe:	d005      	beq.n	800200c <HAL_I2C_ER_IRQHandler+0xde>
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	2b28      	cmp	r3, #40	; 0x28
 8002004:	d106      	bne.n	8002014 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b21      	cmp	r3, #33	; 0x21
 800200a:	d103      	bne.n	8002014 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f001 f85b 	bl	80030c8 <I2C_Slave_AF>
 8002012:	e016      	b.n	8002042 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800201c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002026:	7efb      	ldrb	r3, [r7, #27]
 8002028:	2b10      	cmp	r3, #16
 800202a:	d002      	beq.n	8002032 <HAL_I2C_ER_IRQHandler+0x104>
 800202c:	7efb      	ldrb	r3, [r7, #27]
 800202e:	2b40      	cmp	r3, #64	; 0x40
 8002030:	d107      	bne.n	8002042 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002040:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	0adb      	lsrs	r3, r3, #11
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00e      	beq.n	800206c <HAL_I2C_ER_IRQHandler+0x13e>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800206a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f001 f892 	bl	80031a8 <I2C_ITError>
  }
}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	; 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
 80020e0:	4613      	mov	r3, r2
 80020e2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002156:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800215e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	2b00      	cmp	r3, #0
 800216c:	d150      	bne.n	8002210 <I2C_MasterTransmit_TXE+0xc8>
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b21      	cmp	r3, #33	; 0x21
 8002172:	d14d      	bne.n	8002210 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b08      	cmp	r3, #8
 8002178:	d01d      	beq.n	80021b6 <I2C_MasterTransmit_TXE+0x6e>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b20      	cmp	r3, #32
 800217e:	d01a      	beq.n	80021b6 <I2C_MasterTransmit_TXE+0x6e>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002186:	d016      	beq.n	80021b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002196:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2211      	movs	r2, #17
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ff6c 	bl	800208c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021b4:	e060      	b.n	8002278 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b40      	cmp	r3, #64	; 0x40
 80021ee:	d107      	bne.n	8002200 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff81 	bl	8002100 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021fe:	e03b      	b.n	8002278 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ff3f 	bl	800208c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800220e:	e033      	b.n	8002278 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	2b21      	cmp	r3, #33	; 0x21
 8002214:	d005      	beq.n	8002222 <I2C_MasterTransmit_TXE+0xda>
 8002216:	7bbb      	ldrb	r3, [r7, #14]
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d12d      	bne.n	8002278 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b22      	cmp	r3, #34	; 0x22
 8002220:	d12a      	bne.n	8002278 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d108      	bne.n	800223e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800223c:	e01c      	b.n	8002278 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b40      	cmp	r3, #64	; 0x40
 8002248:	d103      	bne.n	8002252 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f88e 	bl	800236c <I2C_MemoryTransmit_TXE_BTF>
}
 8002250:	e012      	b.n	8002278 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002276:	e7ff      	b.n	8002278 <I2C_MasterTransmit_TXE+0x130>
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b21      	cmp	r3, #33	; 0x21
 8002298:	d164      	bne.n	8002364 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d012      	beq.n	80022ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80022c8:	e04c      	b.n	8002364 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d01d      	beq.n	800230c <I2C_MasterTransmit_BTF+0x8c>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d01a      	beq.n	800230c <I2C_MasterTransmit_BTF+0x8c>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022dc:	d016      	beq.n	800230c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2211      	movs	r2, #17
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff fec1 	bl	800208c <HAL_I2C_MasterTxCpltCallback>
}
 800230a:	e02b      	b.n	8002364 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800231a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b40      	cmp	r3, #64	; 0x40
 8002344:	d107      	bne.n	8002356 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff fed6 	bl	8002100 <HAL_I2C_MemTxCpltCallback>
}
 8002354:	e006      	b.n	8002364 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fe94 	bl	800208c <HAL_I2C_MasterTxCpltCallback>
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002380:	2b00      	cmp	r3, #0
 8002382:	d11d      	bne.n	80023c0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002388:	2b01      	cmp	r3, #1
 800238a:	d10b      	bne.n	80023a4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002390:	b2da      	uxtb	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239c:	1c9a      	adds	r2, r3, #2
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80023a2:	e073      	b.n	800248c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	121b      	asrs	r3, r3, #8
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023be:	e065      	b.n	800248c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10b      	bne.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023de:	e055      	b.n	800248c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d151      	bne.n	800248c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	2b22      	cmp	r3, #34	; 0x22
 80023ec:	d10d      	bne.n	800240a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023fc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002408:	e040      	b.n	800248c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d015      	beq.n	8002440 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b21      	cmp	r3, #33	; 0x21
 8002418:	d112      	bne.n	8002440 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	781a      	ldrb	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800243e:	e025      	b.n	800248c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d120      	bne.n	800248c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b21      	cmp	r3, #33	; 0x21
 800244e:	d11d      	bne.n	800248c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800245e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff fe3a 	bl	8002100 <HAL_I2C_MemTxCpltCallback>
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b22      	cmp	r3, #34	; 0x22
 80024a6:	f040 80a2 	bne.w	80025ee <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d921      	bls.n	80024fc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	f040 8082 	bne.w	80025ee <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80024fa:	e078      	b.n	80025ee <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	2b02      	cmp	r3, #2
 8002502:	d074      	beq.n	80025ee <I2C_MasterReceive_RXNE+0x15a>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d002      	beq.n	8002510 <I2C_MasterReceive_RXNE+0x7c>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d16e      	bne.n	80025ee <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f001 fae5 	bl	8003ae0 <I2C_WaitOnSTOPRequestThroughIT>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d142      	bne.n	80025a2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800253a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	d10a      	bne.n	800258c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fdc4 	bl	8002112 <HAL_I2C_MemRxCpltCallback>
}
 800258a:	e030      	b.n	80025ee <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2212      	movs	r2, #18
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff fd7f 	bl	800209e <HAL_I2C_MasterRxCpltCallback>
}
 80025a0:	e025      	b.n	80025ee <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fd9b 	bl	8002124 <HAL_I2C_ErrorCallback>
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b04      	cmp	r3, #4
 800260c:	d11b      	bne.n	8002646 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002644:	e0bd      	b.n	80027c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b03      	cmp	r3, #3
 800264e:	d129      	bne.n	80026a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800265e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b04      	cmp	r3, #4
 8002664:	d00a      	beq.n	800267c <I2C_MasterReceive_BTF+0x86>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d007      	beq.n	800267c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026a2:	e08e      	b.n	80027c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d176      	bne.n	800279c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d002      	beq.n	80026ba <I2C_MasterReceive_BTF+0xc4>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d108      	bne.n	80026cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e019      	b.n	8002700 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d002      	beq.n	80026d8 <I2C_MasterReceive_BTF+0xe2>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d108      	bne.n	80026ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e00a      	b.n	8002700 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d007      	beq.n	8002700 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800275a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b40      	cmp	r3, #64	; 0x40
 800276e:	d10a      	bne.n	8002786 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fcc7 	bl	8002112 <HAL_I2C_MemRxCpltCallback>
}
 8002784:	e01d      	b.n	80027c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2212      	movs	r2, #18
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff fc82 	bl	800209e <HAL_I2C_MasterRxCpltCallback>
}
 800279a:	e012      	b.n	80027c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d117      	bne.n	800280e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80027f8:	e067      	b.n	80028ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	b2da      	uxtb	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	611a      	str	r2, [r3, #16]
}
 800280c:	e05d      	b.n	80028ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002816:	d133      	bne.n	8002880 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b21      	cmp	r3, #33	; 0x21
 8002822:	d109      	bne.n	8002838 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002834:	611a      	str	r2, [r3, #16]
 8002836:	e008      	b.n	800284a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <I2C_Master_SB+0x92>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	2b00      	cmp	r3, #0
 800285a:	d108      	bne.n	800286e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	2b00      	cmp	r3, #0
 8002862:	d032      	beq.n	80028ca <I2C_Master_SB+0x100>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	2b00      	cmp	r3, #0
 800286c:	d02d      	beq.n	80028ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800287c:	605a      	str	r2, [r3, #4]
}
 800287e:	e024      	b.n	80028ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10e      	bne.n	80028a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	b29b      	uxth	r3, r3
 800288e:	11db      	asrs	r3, r3, #7
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f003 0306 	and.w	r3, r3, #6
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f063 030f 	orn	r3, r3, #15
 800289c:	b2da      	uxtb	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	611a      	str	r2, [r3, #16]
}
 80028a4:	e011      	b.n	80028ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d10d      	bne.n	80028ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	11db      	asrs	r3, r3, #7
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f003 0306 	and.w	r3, r3, #6
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f063 030e 	orn	r3, r3, #14
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	611a      	str	r2, [r3, #16]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d004      	beq.n	80028fa <I2C_Master_ADD10+0x26>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d108      	bne.n	800290c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00c      	beq.n	800291c <I2C_Master_ADD10+0x48>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800291a:	605a      	str	r2, [r3, #4]
  }
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002926:	b480      	push	{r7}
 8002928:	b091      	sub	sp, #68	; 0x44
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002934:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b22      	cmp	r3, #34	; 0x22
 800294e:	f040 8174 	bne.w	8002c3a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <I2C_Master_ADDR+0x54>
 800295a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800295e:	2b40      	cmp	r3, #64	; 0x40
 8002960:	d10b      	bne.n	800297a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002962:	2300      	movs	r3, #0
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	633b      	str	r3, [r7, #48]	; 0x30
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	e16b      	b.n	8002c52 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297e:	2b00      	cmp	r3, #0
 8002980:	d11d      	bne.n	80029be <I2C_Master_ADDR+0x98>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800298a:	d118      	bne.n	80029be <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298c:	2300      	movs	r3, #0
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	651a      	str	r2, [r3, #80]	; 0x50
 80029bc:	e149      	b.n	8002c52 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d113      	bne.n	80029f0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c8:	2300      	movs	r3, #0
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e120      	b.n	8002c32 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	f040 808a 	bne.w	8002b10 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a02:	d137      	bne.n	8002a74 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a12:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a22:	d113      	bne.n	8002a4c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a32:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a34:	2300      	movs	r3, #0
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	e0f2      	b.n	8002c32 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	623b      	str	r3, [r7, #32]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	623b      	str	r3, [r7, #32]
 8002a60:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e0de      	b.n	8002c32 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d02e      	beq.n	8002ad8 <I2C_Master_ADDR+0x1b2>
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d02b      	beq.n	8002ad8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a82:	2b12      	cmp	r3, #18
 8002a84:	d102      	bne.n	8002a8c <I2C_Master_ADDR+0x166>
 8002a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d125      	bne.n	8002ad8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d00e      	beq.n	8002ab0 <I2C_Master_ADDR+0x18a>
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d00b      	beq.n	8002ab0 <I2C_Master_ADDR+0x18a>
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d008      	beq.n	8002ab0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	e007      	b.n	8002ac0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002abe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	e0ac      	b.n	8002c32 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e090      	b.n	8002c32 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d158      	bne.n	8002bcc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d021      	beq.n	8002b64 <I2C_Master_ADDR+0x23e>
 8002b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d01e      	beq.n	8002b64 <I2C_Master_ADDR+0x23e>
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d01b      	beq.n	8002b64 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e012      	b.n	8002b8a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b72:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b98:	d14b      	bne.n	8002c32 <I2C_Master_ADDR+0x30c>
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ba0:	d00b      	beq.n	8002bba <I2C_Master_ADDR+0x294>
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d008      	beq.n	8002bba <I2C_Master_ADDR+0x294>
 8002ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d005      	beq.n	8002bba <I2C_Master_ADDR+0x294>
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d002      	beq.n	8002bba <I2C_Master_ADDR+0x294>
 8002bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d13b      	bne.n	8002c32 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	e032      	b.n	8002c32 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bda:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bea:	d117      	bne.n	8002c1c <I2C_Master_ADDR+0x2f6>
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bf2:	d00b      	beq.n	8002c0c <I2C_Master_ADDR+0x2e6>
 8002bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d008      	beq.n	8002c0c <I2C_Master_ADDR+0x2e6>
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d005      	beq.n	8002c0c <I2C_Master_ADDR+0x2e6>
 8002c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c02:	2b10      	cmp	r3, #16
 8002c04:	d002      	beq.n	8002c0c <I2C_Master_ADDR+0x2e6>
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d107      	bne.n	8002c1c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c1a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002c38:	e00b      	b.n	8002c52 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
}
 8002c50:	e7ff      	b.n	8002c52 <I2C_Master_ADDR+0x32c>
 8002c52:	bf00      	nop
 8002c54:	3744      	adds	r7, #68	; 0x44
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d02b      	beq.n	8002cce <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d114      	bne.n	8002cce <I2C_SlaveTransmit_TXE+0x72>
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b29      	cmp	r3, #41	; 0x29
 8002ca8:	d111      	bne.n	8002cce <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2221      	movs	r2, #33	; 0x21
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2228      	movs	r2, #40	; 0x28
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff f9f1 	bl	80020b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d011      	beq.n	8002d0c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d02c      	beq.n	8002d8a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d114      	bne.n	8002d8a <I2C_SlaveReceive_RXNE+0x74>
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b2a      	cmp	r3, #42	; 0x2a
 8002d64:	d111      	bne.n	8002d8a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d74:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2222      	movs	r2, #34	; 0x22
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2228      	movs	r2, #40	; 0x28
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff f99c 	bl	80020c2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dee:	2b28      	cmp	r3, #40	; 0x28
 8002df0:	d127      	bne.n	8002e42 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e00:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	09db      	lsrs	r3, r3, #7
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	81bb      	strh	r3, [r7, #12]
 8002e24:	e002      	b.n	8002e2c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002e34:	89ba      	ldrh	r2, [r7, #12]
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff f94a 	bl	80020d4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e40:	e00e      	b.n	8002e60 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e76:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e86:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec4:	d172      	bne.n	8002fac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	2b22      	cmp	r3, #34	; 0x22
 8002eca:	d002      	beq.n	8002ed2 <I2C_Slave_STOPF+0x6a>
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed0:	d135      	bne.n	8002f3e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe f82a 	bl	8000f64 <HAL_DMA_GetState>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d049      	beq.n	8002faa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	4a69      	ldr	r2, [pc, #420]	; (80030c0 <I2C_Slave_STOPF+0x258>)
 8002f1c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd ffa8 	bl	8000e78 <HAL_DMA_Abort_IT>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03d      	beq.n	8002faa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f3c:	e035      	b.n	8002faa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f043 0204 	orr.w	r2, r3, #4
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fff4 	bl	8000f64 <HAL_DMA_GetState>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d014      	beq.n	8002fac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	4a4e      	ldr	r2, [pc, #312]	; (80030c0 <I2C_Slave_STOPF+0x258>)
 8002f88:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd ff72 	bl	8000e78 <HAL_DMA_Abort_IT>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4798      	blx	r3
 8002fa8:	e000      	b.n	8002fac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002faa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d03e      	beq.n	8003034 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d112      	bne.n	8002fea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d112      	bne.n	800301e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f043 0204 	orr.w	r2, r3, #4
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f8b3 	bl	80031a8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003042:	e039      	b.n	80030b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b2a      	cmp	r3, #42	; 0x2a
 8003048:	d109      	bne.n	800305e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2228      	movs	r2, #40	; 0x28
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff f832 	bl	80020c2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b28      	cmp	r3, #40	; 0x28
 8003068:	d111      	bne.n	800308e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <I2C_Slave_STOPF+0x25c>)
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff f831 	bl	80020ee <HAL_I2C_ListenCpltCallback>
}
 800308c:	e014      	b.n	80030b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	2b22      	cmp	r3, #34	; 0x22
 8003094:	d002      	beq.n	800309c <I2C_Slave_STOPF+0x234>
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b22      	cmp	r3, #34	; 0x22
 800309a:	d10d      	bne.n	80030b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff f805 	bl	80020c2 <HAL_I2C_SlaveRxCpltCallback>
}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	080036e1 	.word	0x080036e1
 80030c4:	ffff0000 	.word	0xffff0000

080030c8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d002      	beq.n	80030ea <I2C_Slave_AF+0x22>
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d129      	bne.n	800313e <I2C_Slave_AF+0x76>
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b28      	cmp	r3, #40	; 0x28
 80030ee:	d126      	bne.n	800313e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a2c      	ldr	r2, [pc, #176]	; (80031a4 <I2C_Slave_AF+0xdc>)
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003104:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800310e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fe ffd9 	bl	80020ee <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800313c:	e02e      	b.n	800319c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b21      	cmp	r3, #33	; 0x21
 8003142:	d126      	bne.n	8003192 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <I2C_Slave_AF+0xdc>)
 8003148:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2221      	movs	r2, #33	; 0x21
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800316e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003178:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003188:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe ff90 	bl	80020b0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003190:	e004      	b.n	800319c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800319a:	615a      	str	r2, [r3, #20]
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	ffff0000 	.word	0xffff0000

080031a8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031c0:	7bbb      	ldrb	r3, [r7, #14]
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d002      	beq.n	80031cc <I2C_ITError+0x24>
 80031c6:	7bbb      	ldrb	r3, [r7, #14]
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d10a      	bne.n	80031e2 <I2C_ITError+0x3a>
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b22      	cmp	r3, #34	; 0x22
 80031d0:	d107      	bne.n	80031e2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031e8:	2b28      	cmp	r3, #40	; 0x28
 80031ea:	d107      	bne.n	80031fc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2228      	movs	r2, #40	; 0x28
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031fa:	e015      	b.n	8003228 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800320a:	d00a      	beq.n	8003222 <I2C_ITError+0x7a>
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	2b60      	cmp	r3, #96	; 0x60
 8003210:	d007      	beq.n	8003222 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003236:	d161      	bne.n	80032fc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003246:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003250:	2b01      	cmp	r3, #1
 8003252:	d020      	beq.n	8003296 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	4a6a      	ldr	r2, [pc, #424]	; (8003404 <I2C_ITError+0x25c>)
 800325a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd fe09 	bl	8000e78 <HAL_DMA_Abort_IT>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8089 	beq.w	8003380 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003290:	4610      	mov	r0, r2
 8003292:	4798      	blx	r3
 8003294:	e074      	b.n	8003380 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	4a5a      	ldr	r2, [pc, #360]	; (8003404 <I2C_ITError+0x25c>)
 800329c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd fde8 	bl	8000e78 <HAL_DMA_Abort_IT>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d068      	beq.n	8003380 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	d10b      	bne.n	80032d4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032f6:	4610      	mov	r0, r2
 80032f8:	4798      	blx	r3
 80032fa:	e041      	b.n	8003380 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b60      	cmp	r3, #96	; 0x60
 8003306:	d125      	bne.n	8003354 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d10b      	bne.n	800333c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fe fef2 	bl	8002136 <HAL_I2C_AbortCpltCallback>
 8003352:	e015      	b.n	8003380 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d10b      	bne.n	800337a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fe fed2 	bl	8002124 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10e      	bne.n	80033ae <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d104      	bne.n	80033ae <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033bc:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d113      	bne.n	80033fa <I2C_ITError+0x252>
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b28      	cmp	r3, #40	; 0x28
 80033d6:	d110      	bne.n	80033fa <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <I2C_ITError+0x260>)
 80033dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7fe fe7a 	bl	80020ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	080036e1 	.word	0x080036e1
 8003408:	ffff0000 	.word	0xffff0000

0800340c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	460b      	mov	r3, r1
 800341a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d006      	beq.n	8003436 <I2C_MasterRequestWrite+0x2a>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d003      	beq.n	8003436 <I2C_MasterRequestWrite+0x2a>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003434:	d108      	bne.n	8003448 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	e00b      	b.n	8003460 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	2b12      	cmp	r3, #18
 800344e:	d107      	bne.n	8003460 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800345e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f9df 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003486:	d103      	bne.n	8003490 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e035      	b.n	8003500 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800349c:	d108      	bne.n	80034b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800349e:	897b      	ldrh	r3, [r7, #10]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034ac:	611a      	str	r2, [r3, #16]
 80034ae:	e01b      	b.n	80034e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034b0:	897b      	ldrh	r3, [r7, #10]
 80034b2:	11db      	asrs	r3, r3, #7
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f003 0306 	and.w	r3, r3, #6
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f063 030f 	orn	r3, r3, #15
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	490e      	ldr	r1, [pc, #56]	; (8003508 <I2C_MasterRequestWrite+0xfc>)
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 fa05 	bl	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e010      	b.n	8003500 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034de:	897b      	ldrh	r3, [r7, #10]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4907      	ldr	r1, [pc, #28]	; (800350c <I2C_MasterRequestWrite+0x100>)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f9f5 	bl	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	00010008 	.word	0x00010008
 800350c:	00010002 	.word	0x00010002

08003510 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	461a      	mov	r2, r3
 800351e:	4603      	mov	r3, r0
 8003520:	817b      	strh	r3, [r7, #10]
 8003522:	460b      	mov	r3, r1
 8003524:	813b      	strh	r3, [r7, #8]
 8003526:	4613      	mov	r3, r2
 8003528:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003538:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003548:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	2200      	movs	r2, #0
 8003552:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f96a 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00d      	beq.n	800357e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003570:	d103      	bne.n	800357a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003578:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e0aa      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800358c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	4952      	ldr	r1, [pc, #328]	; (80036dc <I2C_RequestMemoryRead+0x1cc>)
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f9a2 	bl	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e097      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fa0c 	bl	80039dc <I2C_WaitOnTXEFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d107      	bne.n	80035e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e076      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d105      	bne.n	80035f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035ec:	893b      	ldrh	r3, [r7, #8]
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	611a      	str	r2, [r3, #16]
 80035f6:	e021      	b.n	800363c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035f8:	893b      	ldrh	r3, [r7, #8]
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003608:	6a39      	ldr	r1, [r7, #32]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f9e6 	bl	80039dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00d      	beq.n	8003632 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b04      	cmp	r3, #4
 800361c:	d107      	bne.n	800362e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e050      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003632:	893b      	ldrh	r3, [r7, #8]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800363c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363e:	6a39      	ldr	r1, [r7, #32]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f9cb 	bl	80039dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	2b04      	cmp	r3, #4
 8003652:	d107      	bne.n	8003664 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003662:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e035      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003676:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	2200      	movs	r2, #0
 8003680:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f8d3 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369e:	d103      	bne.n	80036a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e013      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036ac:	897b      	ldrh	r3, [r7, #10]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	6a3a      	ldr	r2, [r7, #32]
 80036c0:	4906      	ldr	r1, [pc, #24]	; (80036dc <I2C_RequestMemoryRead+0x1cc>)
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f90b 	bl	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	00010002 	.word	0x00010002

080036e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036fa:	4b4b      	ldr	r3, [pc, #300]	; (8003828 <I2C_DMAAbort+0x148>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	08db      	lsrs	r3, r3, #3
 8003700:	4a4a      	ldr	r2, [pc, #296]	; (800382c <I2C_DMAAbort+0x14c>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0a1a      	lsrs	r2, r3, #8
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	00da      	lsls	r2, r3, #3
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f043 0220 	orr.w	r2, r3, #32
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003726:	e00a      	b.n	800373e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3b01      	subs	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800373c:	d0ea      	beq.n	8003714 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374a:	2200      	movs	r2, #0
 800374c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	2200      	movs	r2, #0
 800375c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2200      	movs	r2, #0
 8003772:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003780:	2200      	movs	r2, #0
 8003782:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	2200      	movs	r2, #0
 8003792:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b60      	cmp	r3, #96	; 0x60
 80037ae:	d10e      	bne.n	80037ce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2200      	movs	r2, #0
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037c6:	6978      	ldr	r0, [r7, #20]
 80037c8:	f7fe fcb5 	bl	8002136 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037cc:	e027      	b.n	800381e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037d4:	2b28      	cmp	r3, #40	; 0x28
 80037d6:	d117      	bne.n	8003808 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2228      	movs	r2, #40	; 0x28
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003806:	e007      	b.n	8003818 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003818:	6978      	ldr	r0, [r7, #20]
 800381a:	f7fe fc83 	bl	8002124 <HAL_I2C_ErrorCallback>
}
 800381e:	bf00      	nop
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000000 	.word	0x20000000
 800382c:	14f8b589 	.word	0x14f8b589

08003830 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	4613      	mov	r3, r2
 800383e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003840:	e025      	b.n	800388e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d021      	beq.n	800388e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7fd f9d9 	bl	8000c00 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <I2C_WaitOnFlagUntilTimeout+0x30>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d116      	bne.n	800388e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f043 0220 	orr.w	r2, r3, #32
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e023      	b.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10d      	bne.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4013      	ands	r3, r2
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	e00c      	b.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	43da      	mvns	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4013      	ands	r3, r2
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf0c      	ite	eq
 80038c6:	2301      	moveq	r3, #1
 80038c8:	2300      	movne	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d0b6      	beq.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ec:	e051      	b.n	8003992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fc:	d123      	bne.n	8003946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003916:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f043 0204 	orr.w	r2, r3, #4
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e046      	b.n	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d021      	beq.n	8003992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7fd f957 	bl	8000c00 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e020      	b.n	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	0c1b      	lsrs	r3, r3, #16
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d10c      	bne.n	80039b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	43da      	mvns	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4013      	ands	r3, r2
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	bf14      	ite	ne
 80039ae:	2301      	movne	r3, #1
 80039b0:	2300      	moveq	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	e00b      	b.n	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	43da      	mvns	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	4013      	ands	r3, r2
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf14      	ite	ne
 80039c8:	2301      	movne	r3, #1
 80039ca:	2300      	moveq	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d18d      	bne.n	80038ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039e8:	e02d      	b.n	8003a46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f900 	bl	8003bf0 <I2C_IsAcknowledgeFailed>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e02d      	b.n	8003a56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d021      	beq.n	8003a46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a02:	f7fd f8fd 	bl	8000c00 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d116      	bne.n	8003a46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e007      	b.n	8003a56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a50:	2b80      	cmp	r3, #128	; 0x80
 8003a52:	d1ca      	bne.n	80039ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a6a:	e02d      	b.n	8003ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f8bf 	bl	8003bf0 <I2C_IsAcknowledgeFailed>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e02d      	b.n	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d021      	beq.n	8003ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a84:	f7fd f8bc 	bl	8000c00 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d116      	bne.n	8003ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e007      	b.n	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d1ca      	bne.n	8003a6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	08db      	lsrs	r3, r3, #3
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	0a1a      	lsrs	r2, r3, #8
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d107      	bne.n	8003b1e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f043 0220 	orr.w	r2, r3, #32
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e008      	b.n	8003b30 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2c:	d0e9      	beq.n	8003b02 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000000 	.word	0x20000000
 8003b40:	14f8b589 	.word	0x14f8b589

08003b44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b50:	e042      	b.n	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d119      	bne.n	8003b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0210 	mvn.w	r2, #16
 8003b68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e029      	b.n	8003be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b94:	f7fd f834 	bl	8000c00 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d302      	bcc.n	8003baa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f043 0220 	orr.w	r2, r3, #32
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e007      	b.n	8003be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	d1b5      	bne.n	8003b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c06:	d11b      	bne.n	8003c40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	f043 0204 	orr.w	r2, r3, #4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c5c:	d103      	bne.n	8003c66 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c64:	e007      	b.n	8003c76 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c6e:	d102      	bne.n	8003c76 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2208      	movs	r2, #8
 8003c74:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c82:	b08b      	sub	sp, #44	; 0x2c
 8003c84:	af06      	add	r7, sp, #24
 8003c86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0fd      	b.n	8003e8e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f006 ff1e 	bl	800aae8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2203      	movs	r2, #3
 8003cb0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f002 fbf1 	bl	80064a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	687e      	ldr	r6, [r7, #4]
 8003cc6:	466d      	mov	r5, sp
 8003cc8:	f106 0410 	add.w	r4, r6, #16
 8003ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	602b      	str	r3, [r5, #0]
 8003cd4:	1d33      	adds	r3, r6, #4
 8003cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cd8:	6838      	ldr	r0, [r7, #0]
 8003cda:	f002 fbbb 	bl	8006454 <USB_CoreInit>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0ce      	b.n	8003e8e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f002 fbec 	bl	80064d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	73fb      	strb	r3, [r7, #15]
 8003d00:	e04c      	b.n	8003d9c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	440b      	add	r3, r1
 8003d12:	3301      	adds	r3, #1
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	440b      	add	r3, r1
 8003d28:	7bfa      	ldrb	r2, [r7, #15]
 8003d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	b298      	uxth	r0, r3
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3336      	adds	r3, #54	; 0x36
 8003d40:	4602      	mov	r2, r0
 8003d42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	440b      	add	r3, r1
 8003d54:	3303      	adds	r3, #3
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	440b      	add	r3, r1
 8003d68:	3338      	adds	r3, #56	; 0x38
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d6e:	7bfa      	ldrb	r2, [r7, #15]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	440b      	add	r3, r1
 8003d7c:	333c      	adds	r3, #60	; 0x3c
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d82:	7bfa      	ldrb	r2, [r7, #15]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	440b      	add	r3, r1
 8003d90:	3340      	adds	r3, #64	; 0x40
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d3ad      	bcc.n	8003d02 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
 8003daa:	e044      	b.n	8003e36 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dac:	7bfa      	ldrb	r2, [r7, #15]
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	440b      	add	r3, r1
 8003dba:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dc2:	7bfa      	ldrb	r2, [r7, #15]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	440b      	add	r3, r1
 8003dd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dd4:	7bfa      	ldrb	r2, [r7, #15]
 8003dd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	440b      	add	r3, r1
 8003de6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dee:	7bfa      	ldrb	r2, [r7, #15]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	440b      	add	r3, r1
 8003dfc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	440b      	add	r3, r1
 8003e12:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	440b      	add	r3, r1
 8003e28:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	3301      	adds	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d3b5      	bcc.n	8003dac <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	687e      	ldr	r6, [r7, #4]
 8003e48:	466d      	mov	r5, sp
 8003e4a:	f106 0410 	add.w	r4, r6, #16
 8003e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	602b      	str	r3, [r5, #0]
 8003e56:	1d33      	adds	r3, r6, #4
 8003e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e5a:	6838      	ldr	r0, [r7, #0]
 8003e5c:	f002 fb46 	bl	80064ec <USB_DevInit>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d005      	beq.n	8003e72 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e00d      	b.n	8003e8e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f004 fff8 	bl	8008e7c <USB_DevDisconnect>

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e96 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_PCD_Start+0x16>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e016      	b.n	8003eda <HAL_PCD_Start+0x44>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f002 fadb 	bl	8006474 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f007 f884 	bl	800afce <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f004 ffcc 	bl	8008e68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b088      	sub	sp, #32
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f004 ffce 	bl	8008e90 <USB_ReadInterrupts>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efe:	d102      	bne.n	8003f06 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fb5f 	bl	80045c4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f004 ffc0 	bl	8008e90 <USB_ReadInterrupts>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d112      	bne.n	8003f42 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f2e:	b292      	uxth	r2, r2
 8003f30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f006 fe52 	bl	800abde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f923 	bl	8004188 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f004 ffa2 	bl	8008e90 <USB_ReadInterrupts>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f56:	d10b      	bne.n	8003f70 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f6a:	b292      	uxth	r2, r2
 8003f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f004 ff8b 	bl	8008e90 <USB_ReadInterrupts>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f84:	d10b      	bne.n	8003f9e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f004 ff74 	bl	8008e90 <USB_ReadInterrupts>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb2:	d126      	bne.n	8004002 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0204 	bic.w	r2, r2, #4
 8003fc6:	b292      	uxth	r2, r2
 8003fc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0208 	bic.w	r2, r2, #8
 8003fde:	b292      	uxth	r2, r2
 8003fe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f006 fe33 	bl	800ac50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ffc:	b292      	uxth	r2, r2
 8003ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f004 ff42 	bl	8008e90 <USB_ReadInterrupts>
 800400c:	4603      	mov	r3, r0
 800400e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004016:	f040 8082 	bne.w	800411e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800401a:	2300      	movs	r3, #0
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e010      	b.n	8004042 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	7ffb      	ldrb	r3, [r7, #31]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	441a      	add	r2, r3
 800402c:	7ffb      	ldrb	r3, [r7, #31]
 800402e:	8812      	ldrh	r2, [r2, #0]
 8004030:	b292      	uxth	r2, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	3320      	adds	r3, #32
 8004036:	443b      	add	r3, r7
 8004038:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800403c:	7ffb      	ldrb	r3, [r7, #31]
 800403e:	3301      	adds	r3, #1
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	7ffb      	ldrb	r3, [r7, #31]
 8004044:	2b07      	cmp	r3, #7
 8004046:	d9eb      	bls.n	8004020 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004050:	b29a      	uxth	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	b292      	uxth	r2, r2
 800405c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004068:	b29a      	uxth	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0201 	bic.w	r2, r2, #1
 8004072:	b292      	uxth	r2, r2
 8004074:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004078:	bf00      	nop
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004082:	b29b      	uxth	r3, r3
 8004084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f6      	beq.n	800407a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004094:	b29a      	uxth	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409e:	b292      	uxth	r2, r2
 80040a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80040a4:	2300      	movs	r3, #0
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e00f      	b.n	80040ca <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80040aa:	7ffb      	ldrb	r3, [r7, #31]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	4611      	mov	r1, r2
 80040b2:	7ffa      	ldrb	r2, [r7, #31]
 80040b4:	0092      	lsls	r2, r2, #2
 80040b6:	440a      	add	r2, r1
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	3320      	adds	r3, #32
 80040bc:	443b      	add	r3, r7
 80040be:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80040c2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80040c4:	7ffb      	ldrb	r3, [r7, #31]
 80040c6:	3301      	adds	r3, #1
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	7ffb      	ldrb	r3, [r7, #31]
 80040cc:	2b07      	cmp	r3, #7
 80040ce:	d9ec      	bls.n	80040aa <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040d8:	b29a      	uxth	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0208 	orr.w	r2, r2, #8
 80040e2:	b292      	uxth	r2, r2
 80040e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040fa:	b292      	uxth	r2, r2
 80040fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0204 	orr.w	r2, r2, #4
 8004112:	b292      	uxth	r2, r2
 8004114:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f006 fd7f 	bl	800ac1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f004 feb4 	bl	8008e90 <USB_ReadInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004132:	d10e      	bne.n	8004152 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800413c:	b29a      	uxth	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004146:	b292      	uxth	r2, r2
 8004148:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f006 fd38 	bl	800abc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f004 fe9a 	bl	8008e90 <USB_ReadInterrupts>
 800415c:	4603      	mov	r3, r0
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004166:	d10b      	bne.n	8004180 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004170:	b29a      	uxth	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800417a:	b292      	uxth	r2, r2
 800417c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004180:	bf00      	nop
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_PCD_SetAddress+0x1a>
 800419e:	2302      	movs	r3, #2
 80041a0:	e013      	b.n	80041ca <HAL_PCD_SetAddress+0x42>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	78fa      	ldrb	r2, [r7, #3]
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f004 fe41 	bl	8008e42 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	4608      	mov	r0, r1
 80041dc:	4611      	mov	r1, r2
 80041de:	461a      	mov	r2, r3
 80041e0:	4603      	mov	r3, r0
 80041e2:	70fb      	strb	r3, [r7, #3]
 80041e4:	460b      	mov	r3, r1
 80041e6:	803b      	strh	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	da0e      	bge.n	8004216 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	705a      	strb	r2, [r3, #1]
 8004214:	e00e      	b.n	8004234 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	f003 0207 	and.w	r2, r3, #7
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4413      	add	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	b2da      	uxtb	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004240:	883a      	ldrh	r2, [r7, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	78ba      	ldrb	r2, [r7, #2]
 800424a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	785b      	ldrb	r3, [r3, #1]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800425e:	78bb      	ldrb	r3, [r7, #2]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d102      	bne.n	800426a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_PCD_EP_Open+0xa6>
 8004274:	2302      	movs	r3, #2
 8004276:	e00e      	b.n	8004296 <HAL_PCD_EP_Open+0xc4>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68f9      	ldr	r1, [r7, #12]
 8004286:	4618      	mov	r0, r3
 8004288:	f002 f950 	bl	800652c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004294:	7afb      	ldrb	r3, [r7, #11]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	460b      	mov	r3, r1
 80042a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	da0e      	bge.n	80042d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	4413      	add	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	705a      	strb	r2, [r3, #1]
 80042ce:	e00e      	b.n	80042ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	f003 0207 	and.w	r2, r3, #7
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_PCD_EP_Close+0x6a>
 8004304:	2302      	movs	r3, #2
 8004306:	e00e      	b.n	8004326 <HAL_PCD_EP_Close+0x88>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	4618      	mov	r0, r3
 8004318:	f002 fc72 	bl	8006c00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b086      	sub	sp, #24
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	460b      	mov	r3, r1
 800433c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	f003 0207 	and.w	r2, r3, #7
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2200      	movs	r2, #0
 800436c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800436e:	7afb      	ldrb	r3, [r7, #11]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	b2da      	uxtb	r2, r3
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800437a:	7afb      	ldrb	r3, [r7, #11]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	2b00      	cmp	r3, #0
 8004382:	d106      	bne.n	8004392 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6979      	ldr	r1, [r7, #20]
 800438a:	4618      	mov	r0, r3
 800438c:	f002 fe24 	bl	8006fd8 <USB_EPStartXfer>
 8004390:	e005      	b.n	800439e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6979      	ldr	r1, [r7, #20]
 8004398:	4618      	mov	r0, r3
 800439a:	f002 fe1d 	bl	8006fd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	f003 0207 	and.w	r2, r3, #7
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	440b      	add	r3, r1
 80043c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr

080043d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	460b      	mov	r3, r1
 80043e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e6:	7afb      	ldrb	r3, [r7, #11]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2201      	movs	r2, #1
 8004420:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004422:	7afb      	ldrb	r3, [r7, #11]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	b2da      	uxtb	r2, r3
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800442e:	7afb      	ldrb	r3, [r7, #11]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	2b00      	cmp	r3, #0
 8004436:	d106      	bne.n	8004446 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	4618      	mov	r0, r3
 8004440:	f002 fdca 	bl	8006fd8 <USB_EPStartXfer>
 8004444:	e005      	b.n	8004452 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6979      	ldr	r1, [r7, #20]
 800444c:	4618      	mov	r0, r3
 800444e:	f002 fdc3 	bl	8006fd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	f003 0207 	and.w	r2, r3, #7
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	429a      	cmp	r2, r3
 8004474:	d901      	bls.n	800447a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e04c      	b.n	8004514 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800447a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800447e:	2b00      	cmp	r3, #0
 8004480:	da0e      	bge.n	80044a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	705a      	strb	r2, [r3, #1]
 800449e:	e00c      	b.n	80044ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044a0:	78fa      	ldrb	r2, [r7, #3]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_PCD_EP_SetStall+0x7e>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e01c      	b.n	8004514 <HAL_PCD_EP_SetStall+0xb8>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f004 fbad 	bl	8008c48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d108      	bne.n	800450a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f004 fcd2 	bl	8008eae <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	f003 020f 	and.w	r2, r3, #15
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d901      	bls.n	800453a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e040      	b.n	80045bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800453a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800453e:	2b00      	cmp	r3, #0
 8004540:	da0e      	bge.n	8004560 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	705a      	strb	r2, [r3, #1]
 800455e:	e00e      	b.n	800457e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	f003 0207 	and.w	r2, r3, #7
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	4413      	add	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	b2da      	uxtb	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_PCD_EP_ClrStall+0x82>
 800459a:	2302      	movs	r3, #2
 800459c:	e00e      	b.n	80045bc <HAL_PCD_EP_ClrStall+0xa0>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68f9      	ldr	r1, [r7, #12]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f004 fb9b 	bl	8008ce8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08e      	sub	sp, #56	; 0x38
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80045cc:	e2ec      	b.n	8004ba8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045d6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80045d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80045e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f040 8161 	bne.w	80048b0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80045ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d152      	bne.n	800469e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004608:	81fb      	strh	r3, [r7, #14]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	89fb      	ldrh	r3, [r7, #14]
 8004610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004618:	b29b      	uxth	r3, r3
 800461a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3328      	adds	r3, #40	; 0x28
 8004620:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800462a:	b29b      	uxth	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	3302      	adds	r3, #2
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	695a      	ldr	r2, [r3, #20]
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	441a      	add	r2, r3
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800465c:	2100      	movs	r1, #0
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f006 fa95 	bl	800ab8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 829b 	beq.w	8004ba8 <PCD_EP_ISR_Handler+0x5e4>
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f040 8296 	bne.w	8004ba8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004682:	b2db      	uxtb	r3, r3
 8004684:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004688:	b2da      	uxtb	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	b292      	uxth	r2, r2
 8004690:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800469c:	e284      	b.n	8004ba8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80046ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d034      	beq.n	8004722 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4413      	add	r3, r2
 80046cc:	3306      	adds	r3, #6
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f004 fc29 	bl	8008f4e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29a      	uxth	r2, r3
 8004704:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004708:	4013      	ands	r3, r2
 800470a:	823b      	strh	r3, [r7, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	8a3a      	ldrh	r2, [r7, #16]
 8004712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004716:	b292      	uxth	r2, r2
 8004718:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f006 fa0a 	bl	800ab34 <HAL_PCD_SetupStageCallback>
 8004720:	e242      	b.n	8004ba8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004722:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004726:	2b00      	cmp	r3, #0
 8004728:	f280 823e 	bge.w	8004ba8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29a      	uxth	r2, r3
 8004734:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004738:	4013      	ands	r3, r2
 800473a:	83bb      	strh	r3, [r7, #28]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	8bba      	ldrh	r2, [r7, #28]
 8004742:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004746:	b292      	uxth	r2, r2
 8004748:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004752:	b29b      	uxth	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	3306      	adds	r3, #6
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d019      	beq.n	80047b2 <PCD_EP_ISR_Handler+0x1ee>
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d015      	beq.n	80047b2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	6959      	ldr	r1, [r3, #20]
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004796:	b29b      	uxth	r3, r3
 8004798:	f004 fbd9 	bl	8008f4e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	441a      	add	r2, r3
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80047aa:	2100      	movs	r1, #0
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f006 f9d3 	bl	800ab58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f040 81f2 	bne.w	8004ba8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	4413      	add	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d112      	bne.n	8004812 <PCD_EP_ISR_Handler+0x24e>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	801a      	strh	r2, [r3, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480a:	b29a      	uxth	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	801a      	strh	r2, [r3, #0]
 8004810:	e02f      	b.n	8004872 <PCD_EP_ISR_Handler+0x2ae>
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b3e      	cmp	r3, #62	; 0x3e
 8004818:	d813      	bhi.n	8004842 <PCD_EP_ISR_Handler+0x27e>
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	633b      	str	r3, [r7, #48]	; 0x30
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <PCD_EP_ISR_Handler+0x270>
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	3301      	adds	r3, #1
 8004832:	633b      	str	r3, [r7, #48]	; 0x30
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	b29b      	uxth	r3, r3
 8004838:	029b      	lsls	r3, r3, #10
 800483a:	b29a      	uxth	r2, r3
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	e017      	b.n	8004872 <PCD_EP_ISR_Handler+0x2ae>
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	633b      	str	r3, [r7, #48]	; 0x30
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <PCD_EP_ISR_Handler+0x298>
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	3b01      	subs	r3, #1
 800485a:	633b      	str	r3, [r7, #48]	; 0x30
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	b29b      	uxth	r3, r3
 8004860:	029b      	lsls	r3, r3, #10
 8004862:	b29b      	uxth	r3, r3
 8004864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486c:	b29a      	uxth	r2, r3
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	b29b      	uxth	r3, r3
 800487a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	827b      	strh	r3, [r7, #18]
 8004884:	8a7b      	ldrh	r3, [r7, #18]
 8004886:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800488a:	827b      	strh	r3, [r7, #18]
 800488c:	8a7b      	ldrh	r3, [r7, #18]
 800488e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004892:	827b      	strh	r3, [r7, #18]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	8a7b      	ldrh	r3, [r7, #18]
 800489a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8013      	strh	r3, [r2, #0]
 80048ae:	e17b      	b.n	8004ba8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f280 80ea 	bge.w	8004aa0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80048e2:	4013      	ands	r3, r2
 80048e4:	853b      	strh	r3, [r7, #40]	; 0x28
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80048f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048fa:	b292      	uxth	r2, r2
 80048fc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80048fe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	7b1b      	ldrb	r3, [r3, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d122      	bne.n	8004962 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004924:	b29b      	uxth	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4413      	add	r3, r2
 8004930:	3306      	adds	r3, #6
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004944:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004946:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8087 	beq.w	8004a5c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	6959      	ldr	r1, [r3, #20]
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	88da      	ldrh	r2, [r3, #6]
 800495a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800495c:	f004 faf7 	bl	8008f4e <USB_ReadPMA>
 8004960:	e07c      	b.n	8004a5c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	78db      	ldrb	r3, [r3, #3]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d108      	bne.n	800497c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800496a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800496c:	461a      	mov	r2, r3
 800496e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f927 	bl	8004bc4 <HAL_PCD_EP_DB_Receive>
 8004976:	4603      	mov	r3, r0
 8004978:	86fb      	strh	r3, [r7, #54]	; 0x36
 800497a:	e06f      	b.n	8004a5c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	847b      	strh	r3, [r7, #34]	; 0x22
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	441a      	add	r2, r3
 80049a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d021      	beq.n	8004a1a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049de:	b29b      	uxth	r3, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	3302      	adds	r3, #2
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049fe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004a00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d02a      	beq.n	8004a5c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	6959      	ldr	r1, [r3, #20]
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	891a      	ldrh	r2, [r3, #8]
 8004a12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a14:	f004 fa9b 	bl	8008f4e <USB_ReadPMA>
 8004a18:	e020      	b.n	8004a5c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3306      	adds	r3, #6
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a42:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004a44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	6959      	ldr	r1, [r3, #20]
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	895a      	ldrh	r2, [r3, #10]
 8004a56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a58:	f004 fa79 	bl	8008f4e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a62:	441a      	add	r2, r3
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	695a      	ldr	r2, [r3, #20]
 8004a6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a6e:	441a      	add	r2, r3
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d004      	beq.n	8004a86 <PCD_EP_ISR_Handler+0x4c2>
 8004a7c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d206      	bcs.n	8004a94 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f006 f863 	bl	800ab58 <HAL_PCD_DataOutStageCallback>
 8004a92:	e005      	b.n	8004aa0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f002 fa9c 	bl	8006fd8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004aa0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d07e      	beq.n	8004ba8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004aaa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	4413      	add	r3, r2
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad8:	843b      	strh	r3, [r7, #32]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	8c3b      	ldrh	r3, [r7, #32]
 8004aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	78db      	ldrb	r3, [r3, #3]
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d00c      	beq.n	8004b18 <PCD_EP_ISR_Handler+0x554>
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	78db      	ldrb	r3, [r3, #3]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d008      	beq.n	8004b18 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d146      	bne.n	8004b9c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004b0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d141      	bne.n	8004b9c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b40:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	8bfb      	ldrh	r3, [r7, #30]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d906      	bls.n	8004b5a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	699a      	ldr	r2, [r3, #24]
 8004b50:	8bfb      	ldrh	r3, [r7, #30]
 8004b52:	1ad2      	subs	r2, r2, r3
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	619a      	str	r2, [r3, #24]
 8004b58:	e002      	b.n	8004b60 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f006 f80d 	bl	800ab8e <HAL_PCD_DataInStageCallback>
 8004b74:	e018      	b.n	8004ba8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	8bfb      	ldrh	r3, [r7, #30]
 8004b7c:	441a      	add	r2, r3
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	8bfb      	ldrh	r3, [r7, #30]
 8004b88:	441a      	add	r2, r3
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b94:	4618      	mov	r0, r3
 8004b96:	f002 fa1f 	bl	8006fd8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004b9a:	e005      	b.n	8004ba8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004b9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f91b 	bl	8004dde <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	b21b      	sxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f6ff ad0a 	blt.w	80045ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3738      	adds	r7, #56	; 0x38
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d07e      	beq.n	8004cda <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4413      	add	r3, r2
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	6812      	ldr	r2, [r2, #0]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	8b7b      	ldrh	r3, [r7, #26]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d306      	bcc.n	8004c1e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	699a      	ldr	r2, [r3, #24]
 8004c14:	8b7b      	ldrh	r3, [r7, #26]
 8004c16:	1ad2      	subs	r2, r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	619a      	str	r2, [r3, #24]
 8004c1c:	e002      	b.n	8004c24 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2200      	movs	r2, #0
 8004c22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d123      	bne.n	8004c74 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c46:	833b      	strh	r3, [r7, #24]
 8004c48:	8b3b      	ldrh	r3, [r7, #24]
 8004c4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c4e:	833b      	strh	r3, [r7, #24]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	441a      	add	r2, r3
 8004c5e:	8b3b      	ldrh	r3, [r7, #24]
 8004c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01f      	beq.n	8004cbe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c98:	82fb      	strh	r3, [r7, #22]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	441a      	add	r2, r3
 8004ca8:	8afb      	ldrh	r3, [r7, #22]
 8004caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004cbe:	8b7b      	ldrh	r3, [r7, #26]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8087 	beq.w	8004dd4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	6959      	ldr	r1, [r3, #20]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	891a      	ldrh	r2, [r3, #8]
 8004cd2:	8b7b      	ldrh	r3, [r7, #26]
 8004cd4:	f004 f93b 	bl	8008f4e <USB_ReadPMA>
 8004cd8:	e07c      	b.n	8004dd4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4413      	add	r3, r2
 8004cee:	3306      	adds	r3, #6
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d02:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	699a      	ldr	r2, [r3, #24]
 8004d08:	8b7b      	ldrh	r3, [r7, #26]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d306      	bcc.n	8004d1c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	8b7b      	ldrh	r3, [r7, #26]
 8004d14:	1ad2      	subs	r2, r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	619a      	str	r2, [r3, #24]
 8004d1a:	e002      	b.n	8004d22 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d123      	bne.n	8004d72 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d44:	83fb      	strh	r3, [r7, #30]
 8004d46:	8bfb      	ldrh	r3, [r7, #30]
 8004d48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d4c:	83fb      	strh	r3, [r7, #30]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	8bfb      	ldrh	r3, [r7, #30]
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d11f      	bne.n	8004dbc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	83bb      	strh	r3, [r7, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	8bbb      	ldrh	r3, [r7, #28]
 8004da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004dbc:	8b7b      	ldrh	r3, [r7, #26]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d008      	beq.n	8004dd4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6959      	ldr	r1, [r3, #20]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	895a      	ldrh	r2, [r3, #10]
 8004dce:	8b7b      	ldrh	r3, [r7, #26]
 8004dd0:	f004 f8bd 	bl	8008f4e <USB_ReadPMA>
    }
  }

  return count;
 8004dd4:	8b7b      	ldrh	r3, [r7, #26]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b0a2      	sub	sp, #136	; 0x88
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	4613      	mov	r3, r2
 8004dea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 81c7 	beq.w	8005186 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	4413      	add	r3, r2
 8004e0c:	3302      	adds	r3, #2
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d907      	bls.n	8004e40 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	699a      	ldr	r2, [r3, #24]
 8004e34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e38:	1ad2      	subs	r2, r2, r3
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	619a      	str	r2, [r3, #24]
 8004e3e:	e002      	b.n	8004e46 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2200      	movs	r2, #0
 8004e44:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f040 80b9 	bne.w	8004fc2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d126      	bne.n	8004ea6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	4413      	add	r3, r2
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	011a      	lsls	r2, r3, #4
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	4413      	add	r3, r2
 8004e7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	801a      	strh	r2, [r3, #0]
 8004ea4:	e01a      	b.n	8004edc <HAL_PCD_EP_DB_Transmit+0xfe>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d116      	bne.n	8004edc <HAL_PCD_EP_DB_Transmit+0xfe>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	4413      	add	r3, r2
 8004ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	011a      	lsls	r2, r3, #4
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	4413      	add	r3, r2
 8004ed0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	2200      	movs	r2, #0
 8004eda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	623b      	str	r3, [r7, #32]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d126      	bne.n	8004f38 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	4413      	add	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	011a      	lsls	r2, r3, #4
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	801a      	strh	r2, [r3, #0]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	e017      	b.n	8004f68 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d113      	bne.n	8004f68 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	4413      	add	r3, r2
 8004f50:	623b      	str	r3, [r7, #32]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	011a      	lsls	r2, r3, #4
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	2200      	movs	r2, #0
 8004f66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f005 fe0d 	bl	800ab8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 82d4 	beq.w	8005528 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	827b      	strh	r3, [r7, #18]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	441a      	add	r2, r3
 8004faa:	8a7b      	ldrh	r3, [r7, #18]
 8004fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	8013      	strh	r3, [r2, #0]
 8004fc0:	e2b2      	b.n	8005528 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d021      	beq.n	8005010 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	441a      	add	r2, r3
 8004ff8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500c:	b29b      	uxth	r3, r3
 800500e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005016:	2b01      	cmp	r3, #1
 8005018:	f040 8286 	bne.w	8005528 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005024:	441a      	add	r2, r3
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	69da      	ldr	r2, [r3, #28]
 800502e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005032:	441a      	add	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	6a1a      	ldr	r2, [r3, #32]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	429a      	cmp	r2, r3
 8005042:	d309      	bcc.n	8005058 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6a1a      	ldr	r2, [r3, #32]
 800504e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005050:	1ad2      	subs	r2, r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	621a      	str	r2, [r3, #32]
 8005056:	e015      	b.n	8005084 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d107      	bne.n	8005070 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005060:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005064:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800506e:	e009      	b.n	8005084 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2200      	movs	r2, #0
 8005082:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d155      	bne.n	8005138 <HAL_PCD_EP_DB_Transmit+0x35a>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	63bb      	str	r3, [r7, #56]	; 0x38
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509a:	b29b      	uxth	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	4413      	add	r3, r2
 80050a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	011a      	lsls	r2, r3, #4
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	4413      	add	r3, r2
 80050ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050b2:	637b      	str	r3, [r7, #52]	; 0x34
 80050b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d112      	bne.n	80050e0 <HAL_PCD_EP_DB_Transmit+0x302>
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c8:	801a      	strh	r2, [r3, #0]
 80050ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d8:	b29a      	uxth	r2, r3
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050dc:	801a      	strh	r2, [r3, #0]
 80050de:	e047      	b.n	8005170 <HAL_PCD_EP_DB_Transmit+0x392>
 80050e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e2:	2b3e      	cmp	r3, #62	; 0x3e
 80050e4:	d811      	bhi.n	800510a <HAL_PCD_EP_DB_Transmit+0x32c>
 80050e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_PCD_EP_DB_Transmit+0x31e>
 80050f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f8:	3301      	adds	r3, #1
 80050fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80050fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fe:	b29b      	uxth	r3, r3
 8005100:	029b      	lsls	r3, r3, #10
 8005102:	b29a      	uxth	r2, r3
 8005104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	e032      	b.n	8005170 <HAL_PCD_EP_DB_Transmit+0x392>
 800510a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <HAL_PCD_EP_DB_Transmit+0x342>
 800511a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511c:	3b01      	subs	r3, #1
 800511e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005122:	b29b      	uxth	r3, r3
 8005124:	029b      	lsls	r3, r3, #10
 8005126:	b29b      	uxth	r3, r3
 8005128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005130:	b29a      	uxth	r2, r3
 8005132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	e01b      	b.n	8005170 <HAL_PCD_EP_DB_Transmit+0x392>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d117      	bne.n	8005170 <HAL_PCD_EP_DB_Transmit+0x392>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	643b      	str	r3, [r7, #64]	; 0x40
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514e:	b29b      	uxth	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005154:	4413      	add	r3, r2
 8005156:	643b      	str	r3, [r7, #64]	; 0x40
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	011a      	lsls	r2, r3, #4
 800515e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005160:	4413      	add	r3, r2
 8005162:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800516a:	b29a      	uxth	r2, r3
 800516c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6959      	ldr	r1, [r3, #20]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	891a      	ldrh	r2, [r3, #8]
 800517c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800517e:	b29b      	uxth	r3, r3
 8005180:	f003 fea0 	bl	8008ec4 <USB_WritePMA>
 8005184:	e1d0      	b.n	8005528 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518e:	b29b      	uxth	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4413      	add	r3, r2
 800519a:	3306      	adds	r3, #6
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d307      	bcc.n	80051ce <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051c6:	1ad2      	subs	r2, r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	619a      	str	r2, [r3, #24]
 80051cc:	e002      	b.n	80051d4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2200      	movs	r2, #0
 80051d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f040 80c4 	bne.w	8005366 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	785b      	ldrb	r3, [r3, #1]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d126      	bne.n	8005234 <HAL_PCD_EP_DB_Transmit+0x456>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fa:	4413      	add	r3, r2
 80051fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	011a      	lsls	r2, r3, #4
 8005204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005206:	4413      	add	r3, r2
 8005208:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800520c:	66bb      	str	r3, [r7, #104]	; 0x68
 800520e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005218:	b29a      	uxth	r2, r3
 800521a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522c:	b29a      	uxth	r2, r3
 800522e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	e01a      	b.n	800526a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d116      	bne.n	800526a <HAL_PCD_EP_DB_Transmit+0x48c>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	677b      	str	r3, [r7, #116]	; 0x74
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005250:	4413      	add	r3, r2
 8005252:	677b      	str	r3, [r7, #116]	; 0x74
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	011a      	lsls	r2, r3, #4
 800525a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800525c:	4413      	add	r3, r2
 800525e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005262:	673b      	str	r3, [r7, #112]	; 0x70
 8005264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005266:	2200      	movs	r2, #0
 8005268:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	785b      	ldrb	r3, [r3, #1]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d12f      	bne.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005288:	b29b      	uxth	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005290:	4413      	add	r3, r2
 8005292:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	011a      	lsls	r2, r3, #4
 800529c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052a0:	4413      	add	r3, r2
 80052a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052bc:	801a      	strh	r2, [r3, #0]
 80052be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052d4:	801a      	strh	r2, [r3, #0]
 80052d6:	e017      	b.n	8005308 <HAL_PCD_EP_DB_Transmit+0x52a>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	785b      	ldrb	r3, [r3, #1]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d113      	bne.n	8005308 <HAL_PCD_EP_DB_Transmit+0x52a>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ee:	4413      	add	r3, r2
 80052f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	011a      	lsls	r2, r3, #4
 80052f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052fa:	4413      	add	r3, r2
 80052fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005300:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005302:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005304:	2200      	movs	r2, #0
 8005306:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	4619      	mov	r1, r3
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f005 fc3d 	bl	800ab8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531a:	2b00      	cmp	r3, #0
 800531c:	f040 8104 	bne.w	8005528 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	441a      	add	r2, r3
 800534c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800535c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005360:	b29b      	uxth	r3, r3
 8005362:	8013      	strh	r3, [r2, #0]
 8005364:	e0e0      	b.n	8005528 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d121      	bne.n	80053b4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	441a      	add	r2, r3
 800539c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80053a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	f040 80b4 	bne.w	8005528 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053c8:	441a      	add	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	69da      	ldr	r2, [r3, #28]
 80053d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053d6:	441a      	add	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6a1a      	ldr	r2, [r3, #32]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d309      	bcc.n	80053fc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	6a1a      	ldr	r2, [r3, #32]
 80053f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f4:	1ad2      	subs	r2, r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	621a      	str	r2, [r3, #32]
 80053fa:	e015      	b.n	8005428 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d107      	bne.n	8005414 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005404:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005408:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005412:	e009      	b.n	8005428 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2200      	movs	r2, #0
 800541e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	667b      	str	r3, [r7, #100]	; 0x64
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d155      	bne.n	80054e2 <HAL_PCD_EP_DB_Transmit+0x704>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005444:	b29b      	uxth	r3, r3
 8005446:	461a      	mov	r2, r3
 8005448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800544a:	4413      	add	r3, r2
 800544c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	011a      	lsls	r2, r3, #4
 8005454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005456:	4413      	add	r3, r2
 8005458:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800545c:	65bb      	str	r3, [r7, #88]	; 0x58
 800545e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005460:	2b00      	cmp	r3, #0
 8005462:	d112      	bne.n	800548a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800546e:	b29a      	uxth	r2, r3
 8005470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800547e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005482:	b29a      	uxth	r2, r3
 8005484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	e044      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x736>
 800548a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548c:	2b3e      	cmp	r3, #62	; 0x3e
 800548e:	d811      	bhi.n	80054b4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	657b      	str	r3, [r7, #84]	; 0x54
 8005496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80054a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a2:	3301      	adds	r3, #1
 80054a4:	657b      	str	r3, [r7, #84]	; 0x54
 80054a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	029b      	lsls	r3, r3, #10
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	e02f      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x736>
 80054b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	657b      	str	r3, [r7, #84]	; 0x54
 80054ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <HAL_PCD_EP_DB_Transmit+0x6ec>
 80054c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c6:	3b01      	subs	r3, #1
 80054c8:	657b      	str	r3, [r7, #84]	; 0x54
 80054ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	029b      	lsls	r3, r3, #10
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054da:	b29a      	uxth	r2, r3
 80054dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	e018      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x736>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d114      	bne.n	8005514 <HAL_PCD_EP_DB_Transmit+0x736>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054f8:	4413      	add	r3, r2
 80054fa:	667b      	str	r3, [r7, #100]	; 0x64
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	011a      	lsls	r2, r3, #4
 8005502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005504:	4413      	add	r3, r2
 8005506:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800550a:	663b      	str	r3, [r7, #96]	; 0x60
 800550c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550e:	b29a      	uxth	r2, r3
 8005510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005512:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	6959      	ldr	r1, [r3, #20]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	895a      	ldrh	r2, [r3, #10]
 8005520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005522:	b29b      	uxth	r3, r3
 8005524:	f003 fcce 	bl	8008ec4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005542:	823b      	strh	r3, [r7, #16]
 8005544:	8a3b      	ldrh	r3, [r7, #16]
 8005546:	f083 0310 	eor.w	r3, r3, #16
 800554a:	823b      	strh	r3, [r7, #16]
 800554c:	8a3b      	ldrh	r3, [r7, #16]
 800554e:	f083 0320 	eor.w	r3, r3, #32
 8005552:	823b      	strh	r3, [r7, #16]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	8a3b      	ldrh	r3, [r7, #16]
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3788      	adds	r7, #136	; 0x88
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005582:	b480      	push	{r7}
 8005584:	b087      	sub	sp, #28
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	817b      	strh	r3, [r7, #10]
 8005590:	4613      	mov	r3, r2
 8005592:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005594:	897b      	ldrh	r3, [r7, #10]
 8005596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00b      	beq.n	80055b8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055a0:	897b      	ldrh	r3, [r7, #10]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	e009      	b.n	80055cc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055b8:	897a      	ldrh	r2, [r7, #10]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80055cc:	893b      	ldrh	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d107      	bne.n	80055e2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	b29a      	uxth	r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	80da      	strh	r2, [r3, #6]
 80055e0:	e00b      	b.n	80055fa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2201      	movs	r2, #1
 80055e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	0c1b      	lsrs	r3, r3, #16
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr
	...

08005608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e272      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 8087 	beq.w	8005736 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005628:	4b92      	ldr	r3, [pc, #584]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 030c 	and.w	r3, r3, #12
 8005630:	2b04      	cmp	r3, #4
 8005632:	d00c      	beq.n	800564e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005634:	4b8f      	ldr	r3, [pc, #572]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 030c 	and.w	r3, r3, #12
 800563c:	2b08      	cmp	r3, #8
 800563e:	d112      	bne.n	8005666 <HAL_RCC_OscConfig+0x5e>
 8005640:	4b8c      	ldr	r3, [pc, #560]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564c:	d10b      	bne.n	8005666 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800564e:	4b89      	ldr	r3, [pc, #548]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d06c      	beq.n	8005734 <HAL_RCC_OscConfig+0x12c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d168      	bne.n	8005734 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e24c      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800566e:	d106      	bne.n	800567e <HAL_RCC_OscConfig+0x76>
 8005670:	4b80      	ldr	r3, [pc, #512]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a7f      	ldr	r2, [pc, #508]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	e02e      	b.n	80056dc <HAL_RCC_OscConfig+0xd4>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10c      	bne.n	80056a0 <HAL_RCC_OscConfig+0x98>
 8005686:	4b7b      	ldr	r3, [pc, #492]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a7a      	ldr	r2, [pc, #488]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 800568c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	4b78      	ldr	r3, [pc, #480]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a77      	ldr	r2, [pc, #476]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e01d      	b.n	80056dc <HAL_RCC_OscConfig+0xd4>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCC_OscConfig+0xbc>
 80056aa:	4b72      	ldr	r3, [pc, #456]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a71      	ldr	r2, [pc, #452]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 80056b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	4b6f      	ldr	r3, [pc, #444]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a6e      	ldr	r2, [pc, #440]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 80056bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e00b      	b.n	80056dc <HAL_RCC_OscConfig+0xd4>
 80056c4:	4b6b      	ldr	r3, [pc, #428]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a6a      	ldr	r2, [pc, #424]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 80056ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	4b68      	ldr	r3, [pc, #416]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a67      	ldr	r2, [pc, #412]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 80056d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d013      	beq.n	800570c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e4:	f7fb fa8c 	bl	8000c00 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056ec:	f7fb fa88 	bl	8000c00 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b64      	cmp	r3, #100	; 0x64
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e200      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fe:	4b5d      	ldr	r3, [pc, #372]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f0      	beq.n	80056ec <HAL_RCC_OscConfig+0xe4>
 800570a:	e014      	b.n	8005736 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570c:	f7fb fa78 	bl	8000c00 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005714:	f7fb fa74 	bl	8000c00 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b64      	cmp	r3, #100	; 0x64
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e1ec      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005726:	4b53      	ldr	r3, [pc, #332]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0x10c>
 8005732:	e000      	b.n	8005736 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d063      	beq.n	800580a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005742:	4b4c      	ldr	r3, [pc, #304]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800574e:	4b49      	ldr	r3, [pc, #292]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f003 030c 	and.w	r3, r3, #12
 8005756:	2b08      	cmp	r3, #8
 8005758:	d11c      	bne.n	8005794 <HAL_RCC_OscConfig+0x18c>
 800575a:	4b46      	ldr	r3, [pc, #280]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d116      	bne.n	8005794 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005766:	4b43      	ldr	r3, [pc, #268]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_RCC_OscConfig+0x176>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d001      	beq.n	800577e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e1c0      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577e:	4b3d      	ldr	r3, [pc, #244]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4939      	ldr	r1, [pc, #228]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 800578e:	4313      	orrs	r3, r2
 8005790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005792:	e03a      	b.n	800580a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d020      	beq.n	80057de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800579c:	4b36      	ldr	r3, [pc, #216]	; (8005878 <HAL_RCC_OscConfig+0x270>)
 800579e:	2201      	movs	r2, #1
 80057a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a2:	f7fb fa2d 	bl	8000c00 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057aa:	f7fb fa29 	bl	8000c00 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e1a1      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057bc:	4b2d      	ldr	r3, [pc, #180]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c8:	4b2a      	ldr	r3, [pc, #168]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4927      	ldr	r1, [pc, #156]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	600b      	str	r3, [r1, #0]
 80057dc:	e015      	b.n	800580a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057de:	4b26      	ldr	r3, [pc, #152]	; (8005878 <HAL_RCC_OscConfig+0x270>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e4:	f7fb fa0c 	bl	8000c00 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ec:	f7fb fa08 	bl	8000c00 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e180      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d03a      	beq.n	800588c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d019      	beq.n	8005852 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800581e:	4b17      	ldr	r3, [pc, #92]	; (800587c <HAL_RCC_OscConfig+0x274>)
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005824:	f7fb f9ec 	bl	8000c00 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800582c:	f7fb f9e8 	bl	8000c00 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e160      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583e:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <HAL_RCC_OscConfig+0x26c>)
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800584a:	2001      	movs	r0, #1
 800584c:	f000 fac4 	bl	8005dd8 <RCC_Delay>
 8005850:	e01c      	b.n	800588c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <HAL_RCC_OscConfig+0x274>)
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005858:	f7fb f9d2 	bl	8000c00 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800585e:	e00f      	b.n	8005880 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005860:	f7fb f9ce 	bl	8000c00 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d908      	bls.n	8005880 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e146      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
 8005872:	bf00      	nop
 8005874:	40021000 	.word	0x40021000
 8005878:	42420000 	.word	0x42420000
 800587c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005880:	4b92      	ldr	r3, [pc, #584]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e9      	bne.n	8005860 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80a6 	beq.w	80059e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800589a:	2300      	movs	r3, #0
 800589c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800589e:	4b8b      	ldr	r3, [pc, #556]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10d      	bne.n	80058c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058aa:	4b88      	ldr	r3, [pc, #544]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	4a87      	ldr	r2, [pc, #540]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 80058b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b4:	61d3      	str	r3, [r2, #28]
 80058b6:	4b85      	ldr	r3, [pc, #532]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c2:	2301      	movs	r3, #1
 80058c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c6:	4b82      	ldr	r3, [pc, #520]	; (8005ad0 <HAL_RCC_OscConfig+0x4c8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d118      	bne.n	8005904 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058d2:	4b7f      	ldr	r3, [pc, #508]	; (8005ad0 <HAL_RCC_OscConfig+0x4c8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a7e      	ldr	r2, [pc, #504]	; (8005ad0 <HAL_RCC_OscConfig+0x4c8>)
 80058d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058de:	f7fb f98f 	bl	8000c00 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e6:	f7fb f98b 	bl	8000c00 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b64      	cmp	r3, #100	; 0x64
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e103      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f8:	4b75      	ldr	r3, [pc, #468]	; (8005ad0 <HAL_RCC_OscConfig+0x4c8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f0      	beq.n	80058e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d106      	bne.n	800591a <HAL_RCC_OscConfig+0x312>
 800590c:	4b6f      	ldr	r3, [pc, #444]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	4a6e      	ldr	r2, [pc, #440]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	6213      	str	r3, [r2, #32]
 8005918:	e02d      	b.n	8005976 <HAL_RCC_OscConfig+0x36e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10c      	bne.n	800593c <HAL_RCC_OscConfig+0x334>
 8005922:	4b6a      	ldr	r3, [pc, #424]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	4a69      	ldr	r2, [pc, #420]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	6213      	str	r3, [r2, #32]
 800592e:	4b67      	ldr	r3, [pc, #412]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	4a66      	ldr	r2, [pc, #408]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005934:	f023 0304 	bic.w	r3, r3, #4
 8005938:	6213      	str	r3, [r2, #32]
 800593a:	e01c      	b.n	8005976 <HAL_RCC_OscConfig+0x36e>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	2b05      	cmp	r3, #5
 8005942:	d10c      	bne.n	800595e <HAL_RCC_OscConfig+0x356>
 8005944:	4b61      	ldr	r3, [pc, #388]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	4a60      	ldr	r2, [pc, #384]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 800594a:	f043 0304 	orr.w	r3, r3, #4
 800594e:	6213      	str	r3, [r2, #32]
 8005950:	4b5e      	ldr	r3, [pc, #376]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	4a5d      	ldr	r2, [pc, #372]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	6213      	str	r3, [r2, #32]
 800595c:	e00b      	b.n	8005976 <HAL_RCC_OscConfig+0x36e>
 800595e:	4b5b      	ldr	r3, [pc, #364]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	4a5a      	ldr	r2, [pc, #360]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005964:	f023 0301 	bic.w	r3, r3, #1
 8005968:	6213      	str	r3, [r2, #32]
 800596a:	4b58      	ldr	r3, [pc, #352]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	4a57      	ldr	r2, [pc, #348]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005970:	f023 0304 	bic.w	r3, r3, #4
 8005974:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d015      	beq.n	80059aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800597e:	f7fb f93f 	bl	8000c00 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005984:	e00a      	b.n	800599c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005986:	f7fb f93b 	bl	8000c00 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f241 3288 	movw	r2, #5000	; 0x1388
 8005994:	4293      	cmp	r3, r2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e0b1      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599c:	4b4b      	ldr	r3, [pc, #300]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ee      	beq.n	8005986 <HAL_RCC_OscConfig+0x37e>
 80059a8:	e014      	b.n	80059d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059aa:	f7fb f929 	bl	8000c00 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b0:	e00a      	b.n	80059c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b2:	f7fb f925 	bl	8000c00 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e09b      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c8:	4b40      	ldr	r3, [pc, #256]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1ee      	bne.n	80059b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d105      	bne.n	80059e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059da:	4b3c      	ldr	r3, [pc, #240]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	4a3b      	ldr	r2, [pc, #236]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 80059e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 8087 	beq.w	8005afe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059f0:	4b36      	ldr	r3, [pc, #216]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f003 030c 	and.w	r3, r3, #12
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d061      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d146      	bne.n	8005a92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a04:	4b33      	ldr	r3, [pc, #204]	; (8005ad4 <HAL_RCC_OscConfig+0x4cc>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0a:	f7fb f8f9 	bl	8000c00 <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a12:	f7fb f8f5 	bl	8000c00 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e06d      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a24:	4b29      	ldr	r3, [pc, #164]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f0      	bne.n	8005a12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a38:	d108      	bne.n	8005a4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a3a:	4b24      	ldr	r3, [pc, #144]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	4921      	ldr	r1, [pc, #132]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a4c:	4b1f      	ldr	r3, [pc, #124]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a19      	ldr	r1, [r3, #32]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	491b      	ldr	r1, [pc, #108]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a64:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <HAL_RCC_OscConfig+0x4cc>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a6a:	f7fb f8c9 	bl	8000c00 <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a72:	f7fb f8c5 	bl	8000c00 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e03d      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a84:	4b11      	ldr	r3, [pc, #68]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCC_OscConfig+0x46a>
 8005a90:	e035      	b.n	8005afe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a92:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <HAL_RCC_OscConfig+0x4cc>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a98:	f7fb f8b2 	bl	8000c00 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa0:	f7fb f8ae 	bl	8000c00 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e026      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <HAL_RCC_OscConfig+0x4c4>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x498>
 8005abe:	e01e      	b.n	8005afe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d107      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e019      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	40007000 	.word	0x40007000
 8005ad4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCC_OscConfig+0x500>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d106      	bne.n	8005afa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d001      	beq.n	8005afe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40021000 	.word	0x40021000

08005b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0d0      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b20:	4b6a      	ldr	r3, [pc, #424]	; (8005ccc <HAL_RCC_ClockConfig+0x1c0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d910      	bls.n	8005b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2e:	4b67      	ldr	r3, [pc, #412]	; (8005ccc <HAL_RCC_ClockConfig+0x1c0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f023 0207 	bic.w	r2, r3, #7
 8005b36:	4965      	ldr	r1, [pc, #404]	; (8005ccc <HAL_RCC_ClockConfig+0x1c0>)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3e:	4b63      	ldr	r3, [pc, #396]	; (8005ccc <HAL_RCC_ClockConfig+0x1c0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d001      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0b8      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d020      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b68:	4b59      	ldr	r3, [pc, #356]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	4a58      	ldr	r2, [pc, #352]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b80:	4b53      	ldr	r3, [pc, #332]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4a52      	ldr	r2, [pc, #328]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b8c:	4b50      	ldr	r3, [pc, #320]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	494d      	ldr	r1, [pc, #308]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d040      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d107      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb2:	4b47      	ldr	r3, [pc, #284]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d115      	bne.n	8005bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e07f      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d107      	bne.n	8005bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bca:	4b41      	ldr	r3, [pc, #260]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d109      	bne.n	8005bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e073      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bda:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e06b      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bea:	4b39      	ldr	r3, [pc, #228]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f023 0203 	bic.w	r2, r3, #3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	4936      	ldr	r1, [pc, #216]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bfc:	f7fb f800 	bl	8000c00 <HAL_GetTick>
 8005c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c02:	e00a      	b.n	8005c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c04:	f7fa fffc 	bl	8000c00 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e053      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1a:	4b2d      	ldr	r3, [pc, #180]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f003 020c 	and.w	r2, r3, #12
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d1eb      	bne.n	8005c04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c2c:	4b27      	ldr	r3, [pc, #156]	; (8005ccc <HAL_RCC_ClockConfig+0x1c0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d210      	bcs.n	8005c5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <HAL_RCC_ClockConfig+0x1c0>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 0207 	bic.w	r2, r3, #7
 8005c42:	4922      	ldr	r1, [pc, #136]	; (8005ccc <HAL_RCC_ClockConfig+0x1c0>)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4a:	4b20      	ldr	r3, [pc, #128]	; (8005ccc <HAL_RCC_ClockConfig+0x1c0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d001      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e032      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c68:	4b19      	ldr	r3, [pc, #100]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4916      	ldr	r1, [pc, #88]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d009      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	490e      	ldr	r1, [pc, #56]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c9a:	f000 f821 	bl	8005ce0 <HAL_RCC_GetSysClockFreq>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	490a      	ldr	r1, [pc, #40]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cac:	5ccb      	ldrb	r3, [r1, r3]
 8005cae:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb2:	4a09      	ldr	r2, [pc, #36]	; (8005cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8005cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005cb6:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <HAL_RCC_ClockConfig+0x1d0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fa ff5e 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	40022000 	.word	0x40022000
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	0800d1a0 	.word	0x0800d1a0
 8005cd8:	20000000 	.word	0x20000000
 8005cdc:	20000004 	.word	0x20000004

08005ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce0:	b490      	push	{r4, r7}
 8005ce2:	b08a      	sub	sp, #40	; 0x28
 8005ce4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005ce6:	4b29      	ldr	r3, [pc, #164]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xac>)
 8005ce8:	1d3c      	adds	r4, r7, #4
 8005cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005cf0:	f240 2301 	movw	r3, #513	; 0x201
 8005cf4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61fb      	str	r3, [r7, #28]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d0a:	4b21      	ldr	r3, [pc, #132]	; (8005d90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d002      	beq.n	8005d20 <HAL_RCC_GetSysClockFreq+0x40>
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCC_GetSysClockFreq+0x46>
 8005d1e:	e02b      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d20:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d22:	623b      	str	r3, [r7, #32]
      break;
 8005d24:	e02b      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	0c9b      	lsrs	r3, r3, #18
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	3328      	adds	r3, #40	; 0x28
 8005d30:	443b      	add	r3, r7
 8005d32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005d36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d012      	beq.n	8005d68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d42:	4b13      	ldr	r3, [pc, #76]	; (8005d90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	0c5b      	lsrs	r3, r3, #17
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	3328      	adds	r3, #40	; 0x28
 8005d4e:	443b      	add	r3, r7
 8005d50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005d54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	4a0e      	ldr	r2, [pc, #56]	; (8005d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d5a:	fb03 f202 	mul.w	r2, r3, r2
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
 8005d66:	e004      	b.n	8005d72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	4a0b      	ldr	r2, [pc, #44]	; (8005d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d6c:	fb02 f303 	mul.w	r3, r2, r3
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	623b      	str	r3, [r7, #32]
      break;
 8005d76:	e002      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d7a:	623b      	str	r3, [r7, #32]
      break;
 8005d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3728      	adds	r7, #40	; 0x28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc90      	pop	{r4, r7}
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	0800d120 	.word	0x0800d120
 8005d90:	40021000 	.word	0x40021000
 8005d94:	007a1200 	.word	0x007a1200
 8005d98:	003d0900 	.word	0x003d0900

08005d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005da0:	4b02      	ldr	r3, [pc, #8]	; (8005dac <HAL_RCC_GetHCLKFreq+0x10>)
 8005da2:	681b      	ldr	r3, [r3, #0]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr
 8005dac:	20000000 	.word	0x20000000

08005db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005db4:	f7ff fff2 	bl	8005d9c <HAL_RCC_GetHCLKFreq>
 8005db8:	4602      	mov	r2, r0
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	0a1b      	lsrs	r3, r3, #8
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	4903      	ldr	r1, [pc, #12]	; (8005dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dc6:	5ccb      	ldrb	r3, [r1, r3]
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	0800d1b0 	.word	0x0800d1b0

08005dd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005de0:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <RCC_Delay+0x34>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a0a      	ldr	r2, [pc, #40]	; (8005e10 <RCC_Delay+0x38>)
 8005de6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dea:	0a5b      	lsrs	r3, r3, #9
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	fb02 f303 	mul.w	r3, r2, r3
 8005df2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005df4:	bf00      	nop
  }
  while (Delay --);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	1e5a      	subs	r2, r3, #1
 8005dfa:	60fa      	str	r2, [r7, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1f9      	bne.n	8005df4 <RCC_Delay+0x1c>
}
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr
 8005e0c:	20000000 	.word	0x20000000
 8005e10:	10624dd3 	.word	0x10624dd3

08005e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d07d      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005e30:	2300      	movs	r3, #0
 8005e32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e34:	4b4f      	ldr	r3, [pc, #316]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10d      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e40:	4b4c      	ldr	r3, [pc, #304]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	4a4b      	ldr	r2, [pc, #300]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	61d3      	str	r3, [r2, #28]
 8005e4c:	4b49      	ldr	r3, [pc, #292]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e5c:	4b46      	ldr	r3, [pc, #280]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d118      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e68:	4b43      	ldr	r3, [pc, #268]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a42      	ldr	r2, [pc, #264]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e74:	f7fa fec4 	bl	8000c00 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e7a:	e008      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e7c:	f7fa fec0 	bl	8000c00 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b64      	cmp	r3, #100	; 0x64
 8005e88:	d901      	bls.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e06d      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e8e:	4b3a      	ldr	r3, [pc, #232]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0f0      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e9a:	4b36      	ldr	r3, [pc, #216]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d02e      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d027      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eb8:	4b2e      	ldr	r3, [pc, #184]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ec2:	4b2e      	ldr	r3, [pc, #184]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ec8:	4b2c      	ldr	r3, [pc, #176]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ece:	4a29      	ldr	r2, [pc, #164]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d014      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ede:	f7fa fe8f 	bl	8000c00 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee4:	e00a      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ee6:	f7fa fe8b 	bl	8000c00 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e036      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005efc:	4b1d      	ldr	r3, [pc, #116]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0ee      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f08:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	4917      	ldr	r1, [pc, #92]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f1a:	7dfb      	ldrb	r3, [r7, #23]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d105      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f20:	4b14      	ldr	r3, [pc, #80]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	4a13      	ldr	r2, [pc, #76]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d008      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f38:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	490b      	ldr	r1, [pc, #44]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f56:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	4904      	ldr	r1, [pc, #16]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	40021000 	.word	0x40021000
 8005f78:	40007000 	.word	0x40007000
 8005f7c:	42420440 	.word	0x42420440

08005f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e041      	b.n	8006016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fa fce2 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	f000 f8f2 	bl	80061a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_TIM_ConfigClockSource+0x18>
 8006032:	2302      	movs	r3, #2
 8006034:	e0b3      	b.n	800619e <HAL_TIM_ConfigClockSource+0x180>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006054:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800605c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800606e:	d03e      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0xd0>
 8006070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006074:	f200 8087 	bhi.w	8006186 <HAL_TIM_ConfigClockSource+0x168>
 8006078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607c:	f000 8085 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x16c>
 8006080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006084:	d87f      	bhi.n	8006186 <HAL_TIM_ConfigClockSource+0x168>
 8006086:	2b70      	cmp	r3, #112	; 0x70
 8006088:	d01a      	beq.n	80060c0 <HAL_TIM_ConfigClockSource+0xa2>
 800608a:	2b70      	cmp	r3, #112	; 0x70
 800608c:	d87b      	bhi.n	8006186 <HAL_TIM_ConfigClockSource+0x168>
 800608e:	2b60      	cmp	r3, #96	; 0x60
 8006090:	d050      	beq.n	8006134 <HAL_TIM_ConfigClockSource+0x116>
 8006092:	2b60      	cmp	r3, #96	; 0x60
 8006094:	d877      	bhi.n	8006186 <HAL_TIM_ConfigClockSource+0x168>
 8006096:	2b50      	cmp	r3, #80	; 0x50
 8006098:	d03c      	beq.n	8006114 <HAL_TIM_ConfigClockSource+0xf6>
 800609a:	2b50      	cmp	r3, #80	; 0x50
 800609c:	d873      	bhi.n	8006186 <HAL_TIM_ConfigClockSource+0x168>
 800609e:	2b40      	cmp	r3, #64	; 0x40
 80060a0:	d058      	beq.n	8006154 <HAL_TIM_ConfigClockSource+0x136>
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d86f      	bhi.n	8006186 <HAL_TIM_ConfigClockSource+0x168>
 80060a6:	2b30      	cmp	r3, #48	; 0x30
 80060a8:	d064      	beq.n	8006174 <HAL_TIM_ConfigClockSource+0x156>
 80060aa:	2b30      	cmp	r3, #48	; 0x30
 80060ac:	d86b      	bhi.n	8006186 <HAL_TIM_ConfigClockSource+0x168>
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d060      	beq.n	8006174 <HAL_TIM_ConfigClockSource+0x156>
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d867      	bhi.n	8006186 <HAL_TIM_ConfigClockSource+0x168>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d05c      	beq.n	8006174 <HAL_TIM_ConfigClockSource+0x156>
 80060ba:	2b10      	cmp	r3, #16
 80060bc:	d05a      	beq.n	8006174 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80060be:	e062      	b.n	8006186 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	6899      	ldr	r1, [r3, #8]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f000 f943 	bl	800635a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]
      break;
 80060ec:	e04e      	b.n	800618c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6899      	ldr	r1, [r3, #8]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f000 f92c 	bl	800635a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006110:	609a      	str	r2, [r3, #8]
      break;
 8006112:	e03b      	b.n	800618c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	6859      	ldr	r1, [r3, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	461a      	mov	r2, r3
 8006122:	f000 f8a3 	bl	800626c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2150      	movs	r1, #80	; 0x50
 800612c:	4618      	mov	r0, r3
 800612e:	f000 f8fa 	bl	8006326 <TIM_ITRx_SetConfig>
      break;
 8006132:	e02b      	b.n	800618c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	6859      	ldr	r1, [r3, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	461a      	mov	r2, r3
 8006142:	f000 f8c1 	bl	80062c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2160      	movs	r1, #96	; 0x60
 800614c:	4618      	mov	r0, r3
 800614e:	f000 f8ea 	bl	8006326 <TIM_ITRx_SetConfig>
      break;
 8006152:	e01b      	b.n	800618c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	6859      	ldr	r1, [r3, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	461a      	mov	r2, r3
 8006162:	f000 f883 	bl	800626c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2140      	movs	r1, #64	; 0x40
 800616c:	4618      	mov	r0, r3
 800616e:	f000 f8da 	bl	8006326 <TIM_ITRx_SetConfig>
      break;
 8006172:	e00b      	b.n	800618c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f000 f8d1 	bl	8006326 <TIM_ITRx_SetConfig>
        break;
 8006184:	e002      	b.n	800618c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006186:	bf00      	nop
 8006188:	e000      	b.n	800618c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800618a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a29      	ldr	r2, [pc, #164]	; (8006260 <TIM_Base_SetConfig+0xb8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00b      	beq.n	80061d8 <TIM_Base_SetConfig+0x30>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c6:	d007      	beq.n	80061d8 <TIM_Base_SetConfig+0x30>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a26      	ldr	r2, [pc, #152]	; (8006264 <TIM_Base_SetConfig+0xbc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_Base_SetConfig+0x30>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a25      	ldr	r2, [pc, #148]	; (8006268 <TIM_Base_SetConfig+0xc0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d108      	bne.n	80061ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1c      	ldr	r2, [pc, #112]	; (8006260 <TIM_Base_SetConfig+0xb8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_Base_SetConfig+0x62>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f8:	d007      	beq.n	800620a <TIM_Base_SetConfig+0x62>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a19      	ldr	r2, [pc, #100]	; (8006264 <TIM_Base_SetConfig+0xbc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_Base_SetConfig+0x62>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a18      	ldr	r2, [pc, #96]	; (8006268 <TIM_Base_SetConfig+0xc0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a07      	ldr	r2, [pc, #28]	; (8006260 <TIM_Base_SetConfig+0xb8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d103      	bne.n	8006250 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	615a      	str	r2, [r3, #20]
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	40012c00 	.word	0x40012c00
 8006264:	40000400 	.word	0x40000400
 8006268:	40000800 	.word	0x40000800

0800626c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f023 0201 	bic.w	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f023 030a 	bic.w	r3, r3, #10
 80062a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr

080062c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f023 0210 	bic.w	r2, r3, #16
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	031b      	lsls	r3, r3, #12
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006304:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	621a      	str	r2, [r3, #32]
}
 800631c:	bf00      	nop
 800631e:	371c      	adds	r7, #28
 8006320:	46bd      	mov	sp, r7
 8006322:	bc80      	pop	{r7}
 8006324:	4770      	bx	lr

08006326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006326:	b480      	push	{r7}
 8006328:	b085      	sub	sp, #20
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	f043 0307 	orr.w	r3, r3, #7
 8006348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	609a      	str	r2, [r3, #8]
}
 8006350:	bf00      	nop
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr

0800635a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800635a:	b480      	push	{r7}
 800635c:	b087      	sub	sp, #28
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006374:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	021a      	lsls	r2, r3, #8
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	431a      	orrs	r2, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	4313      	orrs	r3, r2
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	609a      	str	r2, [r3, #8]
}
 800638e:	bf00      	nop
 8006390:	371c      	adds	r7, #28
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr

08006398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e046      	b.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a16      	ldr	r2, [pc, #88]	; (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00e      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fc:	d009      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a12      	ldr	r2, [pc, #72]	; (800644c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d004      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a10      	ldr	r2, [pc, #64]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d10c      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	4313      	orrs	r3, r2
 8006422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800

08006454 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006454:	b084      	sub	sp, #16
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	f107 0014 	add.w	r0, r7, #20
 8006462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	b004      	add	sp, #16
 8006472:	4770      	bx	lr

08006474 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006484:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006488:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	b29a      	uxth	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	bc80      	pop	{r7}
 800649e:	4770      	bx	lr

080064a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80064ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	43db      	mvns	r3, r3
 80064bc:	b29b      	uxth	r3, r3
 80064be:	4013      	ands	r3, r2
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064ec:	b084      	sub	sp, #16
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	f107 0014 	add.w	r0, r7, #20
 80064fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	b004      	add	sp, #16
 800652a:	4770      	bx	lr

0800652c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800652c:	b480      	push	{r7}
 800652e:	b09b      	sub	sp, #108	; 0x6c
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	78db      	ldrb	r3, [r3, #3]
 800655a:	2b03      	cmp	r3, #3
 800655c:	d81f      	bhi.n	800659e <USB_ActivateEndpoint+0x72>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <USB_ActivateEndpoint+0x38>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006575 	.word	0x08006575
 8006568:	08006591 	.word	0x08006591
 800656c:	080065a7 	.word	0x080065a7
 8006570:	08006583 	.word	0x08006583
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006574:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800657c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006580:	e012      	b.n	80065a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006582:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006586:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800658a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800658e:	e00b      	b.n	80065a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006590:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006594:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006598:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800659c:	e004      	b.n	80065a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80065a4:	e000      	b.n	80065a8 <USB_ActivateEndpoint+0x7c>
      break;
 80065a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	441a      	add	r2, r3
 80065b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	4313      	orrs	r3, r2
 80065ea:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	441a      	add	r2, r3
 80065f8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80065fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660c:	b29b      	uxth	r3, r3
 800660e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	7b1b      	ldrb	r3, [r3, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	f040 8149 	bne.w	80068ac <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	785b      	ldrb	r3, [r3, #1]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 8084 	beq.w	800672c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662e:	b29b      	uxth	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	4413      	add	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	011a      	lsls	r2, r3, #4
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	88db      	ldrh	r3, [r3, #6]
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	b29b      	uxth	r3, r3
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	81fb      	strh	r3, [r7, #14]
 8006666:	89fb      	ldrh	r3, [r7, #14]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01b      	beq.n	80066a8 <USB_ActivateEndpoint+0x17c>
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006686:	81bb      	strh	r3, [r7, #12]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	441a      	add	r2, r3
 8006692:	89bb      	ldrh	r3, [r7, #12]
 8006694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	78db      	ldrb	r3, [r3, #3]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d020      	beq.n	80066f2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c6:	813b      	strh	r3, [r7, #8]
 80066c8:	893b      	ldrh	r3, [r7, #8]
 80066ca:	f083 0320 	eor.w	r3, r3, #32
 80066ce:	813b      	strh	r3, [r7, #8]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	893b      	ldrh	r3, [r7, #8]
 80066dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	8013      	strh	r3, [r2, #0]
 80066f0:	e27f      	b.n	8006bf2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006708:	817b      	strh	r3, [r7, #10]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	897b      	ldrh	r3, [r7, #10]
 8006716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800671a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006726:	b29b      	uxth	r3, r3
 8006728:	8013      	strh	r3, [r2, #0]
 800672a:	e262      	b.n	8006bf2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006736:	b29b      	uxth	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	4413      	add	r3, r2
 800673e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	011a      	lsls	r2, r3, #4
 8006746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006748:	4413      	add	r3, r2
 800674a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	88db      	ldrh	r3, [r3, #6]
 8006754:	085b      	lsrs	r3, r3, #1
 8006756:	b29b      	uxth	r3, r3
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800676a:	b29b      	uxth	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	4413      	add	r3, r2
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	011a      	lsls	r2, r3, #4
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	4413      	add	r3, r2
 800677e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006782:	623b      	str	r3, [r7, #32]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d112      	bne.n	80067b2 <USB_ActivateEndpoint+0x286>
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006796:	b29a      	uxth	r2, r3
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	e02f      	b.n	8006812 <USB_ActivateEndpoint+0x2e6>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b3e      	cmp	r3, #62	; 0x3e
 80067b8:	d813      	bhi.n	80067e2 <USB_ActivateEndpoint+0x2b6>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	663b      	str	r3, [r7, #96]	; 0x60
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <USB_ActivateEndpoint+0x2a8>
 80067ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d0:	3301      	adds	r3, #1
 80067d2:	663b      	str	r3, [r7, #96]	; 0x60
 80067d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	029b      	lsls	r3, r3, #10
 80067da:	b29a      	uxth	r2, r3
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	801a      	strh	r2, [r3, #0]
 80067e0:	e017      	b.n	8006812 <USB_ActivateEndpoint+0x2e6>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	663b      	str	r3, [r7, #96]	; 0x60
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <USB_ActivateEndpoint+0x2d0>
 80067f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067f8:	3b01      	subs	r3, #1
 80067fa:	663b      	str	r3, [r7, #96]	; 0x60
 80067fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067fe:	b29b      	uxth	r3, r3
 8006800:	029b      	lsls	r3, r3, #10
 8006802:	b29b      	uxth	r3, r3
 8006804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800680c:	b29a      	uxth	r2, r3
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	83fb      	strh	r3, [r7, #30]
 8006820:	8bfb      	ldrh	r3, [r7, #30]
 8006822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d01b      	beq.n	8006862 <USB_ActivateEndpoint+0x336>
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006840:	83bb      	strh	r3, [r7, #28]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	441a      	add	r2, r3
 800684c:	8bbb      	ldrh	r3, [r7, #28]
 800684e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800685a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685e:	b29b      	uxth	r3, r3
 8006860:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006878:	837b      	strh	r3, [r7, #26]
 800687a:	8b7b      	ldrh	r3, [r7, #26]
 800687c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006880:	837b      	strh	r3, [r7, #26]
 8006882:	8b7b      	ldrh	r3, [r7, #26]
 8006884:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006888:	837b      	strh	r3, [r7, #26]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	441a      	add	r2, r3
 8006894:	8b7b      	ldrh	r3, [r7, #26]
 8006896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	8013      	strh	r3, [r2, #0]
 80068aa:	e1a2      	b.n	8006bf2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	441a      	add	r2, r3
 80068d0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80068d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80068e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068f8:	4413      	add	r3, r2
 80068fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	011a      	lsls	r2, r3, #4
 8006902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006904:	4413      	add	r3, r2
 8006906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800690a:	657b      	str	r3, [r7, #84]	; 0x54
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	891b      	ldrh	r3, [r3, #8]
 8006910:	085b      	lsrs	r3, r3, #1
 8006912:	b29b      	uxth	r3, r3
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691a:	801a      	strh	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	653b      	str	r3, [r7, #80]	; 0x50
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006926:	b29b      	uxth	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692c:	4413      	add	r3, r2
 800692e:	653b      	str	r3, [r7, #80]	; 0x50
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	011a      	lsls	r2, r3, #4
 8006936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006938:	4413      	add	r3, r2
 800693a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800693e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	895b      	ldrh	r3, [r3, #10]
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	b29b      	uxth	r3, r3
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 8091 	bne.w	8006a7c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006968:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800696a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01b      	beq.n	80069aa <USB_ActivateEndpoint+0x47e>
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006988:	877b      	strh	r3, [r7, #58]	; 0x3a
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	441a      	add	r2, r3
 8006994:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80069b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01b      	beq.n	80069fa <USB_ActivateEndpoint+0x4ce>
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	441a      	add	r2, r3
 80069e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a10:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a18:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a20:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	441a      	add	r2, r3
 8006a2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a58:	867b      	strh	r3, [r7, #50]	; 0x32
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	441a      	add	r2, r3
 8006a64:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]
 8006a7a:	e0ba      	b.n	8006bf2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006a8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01d      	beq.n	8006ad4 <USB_ActivateEndpoint+0x5a8>
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006ae4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01d      	beq.n	8006b2c <USB_ActivateEndpoint+0x600>
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	78db      	ldrb	r3, [r3, #3]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d024      	beq.n	8006b7e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b52:	f083 0320 	eor.w	r3, r3, #32
 8006b56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	441a      	add	r2, r3
 8006b64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	8013      	strh	r3, [r2, #0]
 8006b7c:	e01d      	b.n	8006bba <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	441a      	add	r2, r3
 8006ba2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	441a      	add	r2, r3
 8006bdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006bf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	376c      	adds	r7, #108	; 0x6c
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr

08006c00 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b08d      	sub	sp, #52	; 0x34
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	7b1b      	ldrb	r3, [r3, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f040 808e 	bne.w	8006d30 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d044      	beq.n	8006ca6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	81bb      	strh	r3, [r7, #12]
 8006c2a:	89bb      	ldrh	r3, [r7, #12]
 8006c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01b      	beq.n	8006c6c <USB_DeactivateEndpoint+0x6c>
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4a:	817b      	strh	r3, [r7, #10]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	897b      	ldrh	r3, [r7, #10]
 8006c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c82:	813b      	strh	r3, [r7, #8]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	441a      	add	r2, r3
 8006c8e:	893b      	ldrh	r3, [r7, #8]
 8006c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	8013      	strh	r3, [r2, #0]
 8006ca4:	e192      	b.n	8006fcc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	827b      	strh	r3, [r7, #18]
 8006cb4:	8a7b      	ldrh	r3, [r7, #18]
 8006cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d01b      	beq.n	8006cf6 <USB_DeactivateEndpoint+0xf6>
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd4:	823b      	strh	r3, [r7, #16]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	441a      	add	r2, r3
 8006ce0:	8a3b      	ldrh	r3, [r7, #16]
 8006ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0c:	81fb      	strh	r3, [r7, #14]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	441a      	add	r2, r3
 8006d18:	89fb      	ldrh	r3, [r7, #14]
 8006d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	8013      	strh	r3, [r2, #0]
 8006d2e:	e14d      	b.n	8006fcc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f040 80a5 	bne.w	8006e84 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	843b      	strh	r3, [r7, #32]
 8006d48:	8c3b      	ldrh	r3, [r7, #32]
 8006d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d01b      	beq.n	8006d8a <USB_DeactivateEndpoint+0x18a>
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d68:	83fb      	strh	r3, [r7, #30]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	441a      	add	r2, r3
 8006d74:	8bfb      	ldrh	r3, [r7, #30]
 8006d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	83bb      	strh	r3, [r7, #28]
 8006d98:	8bbb      	ldrh	r3, [r7, #28]
 8006d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d01b      	beq.n	8006dda <USB_DeactivateEndpoint+0x1da>
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db8:	837b      	strh	r3, [r7, #26]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	441a      	add	r2, r3
 8006dc4:	8b7b      	ldrh	r3, [r7, #26]
 8006dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df0:	833b      	strh	r3, [r7, #24]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	441a      	add	r2, r3
 8006dfc:	8b3b      	ldrh	r3, [r7, #24]
 8006dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e28:	82fb      	strh	r3, [r7, #22]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	441a      	add	r2, r3
 8006e34:	8afb      	ldrh	r3, [r7, #22]
 8006e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e60:	82bb      	strh	r3, [r7, #20]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	441a      	add	r2, r3
 8006e6c:	8abb      	ldrh	r3, [r7, #20]
 8006e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	8013      	strh	r3, [r2, #0]
 8006e82:	e0a3      	b.n	8006fcc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01b      	beq.n	8006ed4 <USB_DeactivateEndpoint+0x2d4>
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	441a      	add	r2, r3
 8006ebe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ee2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01b      	beq.n	8006f24 <USB_DeactivateEndpoint+0x324>
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f02:	853b      	strh	r3, [r7, #40]	; 0x28
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	441a      	add	r2, r3
 8006f0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	441a      	add	r2, r3
 8006f46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f72:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	441a      	add	r2, r3
 8006f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006faa:	847b      	strh	r3, [r7, #34]	; 0x22
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	441a      	add	r2, r3
 8006fb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3734      	adds	r7, #52	; 0x34
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr

08006fd8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b0cc      	sub	sp, #304	; 0x130
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fe6:	6018      	str	r0, [r3, #0]
 8006fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	785b      	ldrb	r3, [r3, #1]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	f041 817d 	bne.w	80082fe <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	699a      	ldr	r2, [r3, #24]
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	429a      	cmp	r2, r3
 800701e:	d908      	bls.n	8007032 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007024:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007030:	e007      	b.n	8007042 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	7b1b      	ldrb	r3, [r3, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d152      	bne.n	80070f8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6959      	ldr	r1, [r3, #20]
 800705e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	88da      	ldrh	r2, [r3, #6]
 800706a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706e:	b29b      	uxth	r3, r3
 8007070:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007074:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007078:	6800      	ldr	r0, [r0, #0]
 800707a:	f001 ff23 	bl	8008ec4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800707e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007082:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007086:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800708a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	4619      	mov	r1, r3
 80070a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80070ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070b0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80070b4:	6812      	ldr	r2, [r2, #0]
 80070b6:	440a      	add	r2, r1
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	011a      	lsls	r2, r3, #4
 80070c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070cc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4413      	add	r3, r2
 80070d4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80070d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	f001 b8b5 	b.w	8008262 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80070f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	78db      	ldrb	r3, [r3, #3]
 8007104:	2b02      	cmp	r3, #2
 8007106:	f040 84c6 	bne.w	8007a96 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800710a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6a1a      	ldr	r2, [r3, #32]
 8007116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	429a      	cmp	r2, r3
 8007124:	f240 8443 	bls.w	80079ae <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007156:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	441a      	add	r2, r3
 800716c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007178:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800717c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007180:	b29b      	uxth	r3, r3
 8007182:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6a1a      	ldr	r2, [r3, #32]
 8007190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007194:	1ad2      	subs	r2, r2, r3
 8007196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 823e 	beq.w	8007646 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80071d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071d6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f040 809a 	bne.w	8007324 <USB_EPStartXfer+0x34c>
 80071f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071fc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007200:	6812      	ldr	r2, [r2, #0]
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007212:	b29b      	uxth	r3, r3
 8007214:	4619      	mov	r1, r3
 8007216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007222:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	440a      	add	r2, r1
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	011a      	lsls	r2, r3, #4
 800723a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4413      	add	r3, r2
 8007246:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800724a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d122      	bne.n	80072a2 <USB_EPStartXfer+0x2ca>
 800725c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007260:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	b29b      	uxth	r3, r3
 800726a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800726e:	b29a      	uxth	r2, r3
 8007270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007274:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	801a      	strh	r2, [r3, #0]
 800727c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007280:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29b      	uxth	r3, r3
 800728a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800728e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007292:	b29a      	uxth	r2, r3
 8007294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007298:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	801a      	strh	r2, [r3, #0]
 80072a0:	e079      	b.n	8007396 <USB_EPStartXfer+0x3be>
 80072a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a6:	2b3e      	cmp	r3, #62	; 0x3e
 80072a8:	d81b      	bhi.n	80072e2 <USB_EPStartXfer+0x30a>
 80072aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d004      	beq.n	80072ca <USB_EPStartXfer+0x2f2>
 80072c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072c4:	3301      	adds	r3, #1
 80072c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	029b      	lsls	r3, r3, #10
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	801a      	strh	r2, [r3, #0]
 80072e0:	e059      	b.n	8007396 <USB_EPStartXfer+0x3be>
 80072e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f0:	f003 031f 	and.w	r3, r3, #31
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <USB_EPStartXfer+0x32a>
 80072f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072fc:	3b01      	subs	r3, #1
 80072fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007302:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007306:	b29b      	uxth	r3, r3
 8007308:	029b      	lsls	r3, r3, #10
 800730a:	b29b      	uxth	r3, r3
 800730c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007314:	b29a      	uxth	r2, r3
 8007316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	801a      	strh	r2, [r3, #0]
 8007322:	e038      	b.n	8007396 <USB_EPStartXfer+0x3be>
 8007324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d130      	bne.n	8007396 <USB_EPStartXfer+0x3be>
 8007334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007338:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007342:	b29b      	uxth	r3, r3
 8007344:	4619      	mov	r1, r3
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800734e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007352:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007356:	6812      	ldr	r2, [r2, #0]
 8007358:	440a      	add	r2, r1
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007360:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	011a      	lsls	r2, r3, #4
 800736a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4413      	add	r3, r2
 8007376:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800737a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007388:	b29a      	uxth	r2, r3
 800738a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	895b      	ldrh	r3, [r3, #10]
 80073a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6959      	ldr	r1, [r3, #20]
 80073b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073bc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073c0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073c4:	6800      	ldr	r0, [r0, #0]
 80073c6:	f001 fd7d 	bl	8008ec4 <USB_WritePMA>
            ep->xfer_buff += len;
 80073ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695a      	ldr	r2, [r3, #20]
 80073d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073da:	441a      	add	r2, r3
 80073dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6a1a      	ldr	r2, [r3, #32]
 80073f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	429a      	cmp	r2, r3
 8007402:	d90f      	bls.n	8007424 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6a1a      	ldr	r2, [r3, #32]
 8007410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007414:	1ad2      	subs	r2, r2, r3
 8007416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	621a      	str	r2, [r3, #32]
 8007422:	e00e      	b.n	8007442 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2200      	movs	r2, #0
 8007440:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	785b      	ldrb	r3, [r3, #1]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f040 809a 	bne.w	8007588 <USB_EPStartXfer+0x5b0>
 8007454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007458:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800745c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007460:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007476:	b29b      	uxth	r3, r3
 8007478:	4619      	mov	r1, r3
 800747a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007482:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007486:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800748a:	6812      	ldr	r2, [r2, #0]
 800748c:	440a      	add	r2, r1
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	011a      	lsls	r2, r3, #4
 800749e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4413      	add	r3, r2
 80074aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80074ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d122      	bne.n	8007506 <USB_EPStartXfer+0x52e>
 80074c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	801a      	strh	r2, [r3, #0]
 80074e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	801a      	strh	r2, [r3, #0]
 8007504:	e083      	b.n	800760e <USB_EPStartXfer+0x636>
 8007506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800750a:	2b3e      	cmp	r3, #62	; 0x3e
 800750c:	d81b      	bhi.n	8007546 <USB_EPStartXfer+0x56e>
 800750e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007512:	085b      	lsrs	r3, r3, #1
 8007514:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d004      	beq.n	800752e <USB_EPStartXfer+0x556>
 8007524:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007528:	3301      	adds	r3, #1
 800752a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800752e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007532:	b29b      	uxth	r3, r3
 8007534:	029b      	lsls	r3, r3, #10
 8007536:	b29a      	uxth	r2, r3
 8007538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	801a      	strh	r2, [r3, #0]
 8007544:	e063      	b.n	800760e <USB_EPStartXfer+0x636>
 8007546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007554:	f003 031f 	and.w	r3, r3, #31
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <USB_EPStartXfer+0x58e>
 800755c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007560:	3b01      	subs	r3, #1
 8007562:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007566:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800756a:	b29b      	uxth	r3, r3
 800756c:	029b      	lsls	r3, r3, #10
 800756e:	b29b      	uxth	r3, r3
 8007570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007578:	b29a      	uxth	r2, r3
 800757a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	e042      	b.n	800760e <USB_EPStartXfer+0x636>
 8007588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	785b      	ldrb	r3, [r3, #1]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d13a      	bne.n	800760e <USB_EPStartXfer+0x636>
 8007598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80075a8:	6812      	ldr	r2, [r2, #0]
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	4619      	mov	r1, r3
 80075be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075ca:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80075ce:	6812      	ldr	r2, [r2, #0]
 80075d0:	440a      	add	r2, r1
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	011a      	lsls	r2, r3, #4
 80075e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4413      	add	r3, r2
 80075ee:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007600:	b29a      	uxth	r2, r3
 8007602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007606:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800760e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	891b      	ldrh	r3, [r3, #8]
 800761a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800761e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6959      	ldr	r1, [r3, #20]
 800762a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800762e:	b29b      	uxth	r3, r3
 8007630:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007634:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007638:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800763c:	6800      	ldr	r0, [r0, #0]
 800763e:	f001 fc41 	bl	8008ec4 <USB_WritePMA>
 8007642:	f000 be0e 	b.w	8008262 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d16d      	bne.n	8007732 <USB_EPStartXfer+0x75a>
 8007656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	64bb      	str	r3, [r7, #72]	; 0x48
 8007662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007666:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007670:	b29b      	uxth	r3, r3
 8007672:	461a      	mov	r2, r3
 8007674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007676:	4413      	add	r3, r2
 8007678:	64bb      	str	r3, [r7, #72]	; 0x48
 800767a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	011a      	lsls	r2, r3, #4
 8007688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800768a:	4413      	add	r3, r2
 800768c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007690:	647b      	str	r3, [r7, #68]	; 0x44
 8007692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007696:	2b00      	cmp	r3, #0
 8007698:	d112      	bne.n	80076c0 <USB_EPStartXfer+0x6e8>
 800769a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076a8:	801a      	strh	r2, [r3, #0]
 80076aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076bc:	801a      	strh	r2, [r3, #0]
 80076be:	e063      	b.n	8007788 <USB_EPStartXfer+0x7b0>
 80076c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c4:	2b3e      	cmp	r3, #62	; 0x3e
 80076c6:	d817      	bhi.n	80076f8 <USB_EPStartXfer+0x720>
 80076c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <USB_EPStartXfer+0x710>
 80076de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076e2:	3301      	adds	r3, #1
 80076e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	029b      	lsls	r3, r3, #10
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076f4:	801a      	strh	r2, [r3, #0]
 80076f6:	e047      	b.n	8007788 <USB_EPStartXfer+0x7b0>
 80076f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fc:	095b      	lsrs	r3, r3, #5
 80076fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007706:	f003 031f 	and.w	r3, r3, #31
 800770a:	2b00      	cmp	r3, #0
 800770c:	d104      	bne.n	8007718 <USB_EPStartXfer+0x740>
 800770e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007712:	3b01      	subs	r3, #1
 8007714:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007718:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800771c:	b29b      	uxth	r3, r3
 800771e:	029b      	lsls	r3, r3, #10
 8007720:	b29b      	uxth	r3, r3
 8007722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772a:	b29a      	uxth	r2, r3
 800772c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772e:	801a      	strh	r2, [r3, #0]
 8007730:	e02a      	b.n	8007788 <USB_EPStartXfer+0x7b0>
 8007732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d122      	bne.n	8007788 <USB_EPStartXfer+0x7b0>
 8007742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007746:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	653b      	str	r3, [r7, #80]	; 0x50
 800774e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007752:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800775c:	b29b      	uxth	r3, r3
 800775e:	461a      	mov	r2, r3
 8007760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007762:	4413      	add	r3, r2
 8007764:	653b      	str	r3, [r7, #80]	; 0x50
 8007766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	011a      	lsls	r2, r3, #4
 8007774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007776:	4413      	add	r3, r2
 8007778:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800777c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800777e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007782:	b29a      	uxth	r2, r3
 8007784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007786:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	891b      	ldrh	r3, [r3, #8]
 8007794:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6959      	ldr	r1, [r3, #20]
 80077a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077ae:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80077b2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80077b6:	6800      	ldr	r0, [r0, #0]
 80077b8:	f001 fb84 	bl	8008ec4 <USB_WritePMA>
            ep->xfer_buff += len;
 80077bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	695a      	ldr	r2, [r3, #20]
 80077c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077cc:	441a      	add	r2, r3
 80077ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6a1a      	ldr	r2, [r3, #32]
 80077e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d90f      	bls.n	8007816 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80077f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6a1a      	ldr	r2, [r3, #32]
 8007802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007806:	1ad2      	subs	r2, r2, r3
 8007808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	621a      	str	r2, [r3, #32]
 8007814:	e00e      	b.n	8007834 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2200      	movs	r2, #0
 8007832:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	643b      	str	r3, [r7, #64]	; 0x40
 8007840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	785b      	ldrb	r3, [r3, #1]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d16d      	bne.n	800792c <USB_EPStartXfer+0x954>
 8007850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007854:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	63bb      	str	r3, [r7, #56]	; 0x38
 800785c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800786a:	b29b      	uxth	r3, r3
 800786c:	461a      	mov	r2, r3
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	4413      	add	r3, r2
 8007872:	63bb      	str	r3, [r7, #56]	; 0x38
 8007874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	011a      	lsls	r2, r3, #4
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	4413      	add	r3, r2
 8007886:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800788a:	637b      	str	r3, [r7, #52]	; 0x34
 800788c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007890:	2b00      	cmp	r3, #0
 8007892:	d112      	bne.n	80078ba <USB_EPStartXfer+0x8e2>
 8007894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	b29b      	uxth	r3, r3
 800789a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800789e:	b29a      	uxth	r2, r3
 80078a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a2:	801a      	strh	r2, [r3, #0]
 80078a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b6:	801a      	strh	r2, [r3, #0]
 80078b8:	e05d      	b.n	8007976 <USB_EPStartXfer+0x99e>
 80078ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078be:	2b3e      	cmp	r3, #62	; 0x3e
 80078c0:	d817      	bhi.n	80078f2 <USB_EPStartXfer+0x91a>
 80078c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c6:	085b      	lsrs	r3, r3, #1
 80078c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <USB_EPStartXfer+0x90a>
 80078d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078dc:	3301      	adds	r3, #1
 80078de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	029b      	lsls	r3, r3, #10
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	e041      	b.n	8007976 <USB_EPStartXfer+0x99e>
 80078f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f6:	095b      	lsrs	r3, r3, #5
 80078f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	2b00      	cmp	r3, #0
 8007906:	d104      	bne.n	8007912 <USB_EPStartXfer+0x93a>
 8007908:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800790c:	3b01      	subs	r3, #1
 800790e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007912:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007916:	b29b      	uxth	r3, r3
 8007918:	029b      	lsls	r3, r3, #10
 800791a:	b29b      	uxth	r3, r3
 800791c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007924:	b29a      	uxth	r2, r3
 8007926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007928:	801a      	strh	r2, [r3, #0]
 800792a:	e024      	b.n	8007976 <USB_EPStartXfer+0x99e>
 800792c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	785b      	ldrb	r3, [r3, #1]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d11c      	bne.n	8007976 <USB_EPStartXfer+0x99e>
 800793c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794a:	b29b      	uxth	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007950:	4413      	add	r3, r2
 8007952:	643b      	str	r3, [r7, #64]	; 0x40
 8007954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	011a      	lsls	r2, r3, #4
 8007962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007964:	4413      	add	r3, r2
 8007966:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800796a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800796c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007970:	b29a      	uxth	r2, r3
 8007972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007974:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	895b      	ldrh	r3, [r3, #10]
 8007982:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6959      	ldr	r1, [r3, #20]
 8007992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007996:	b29b      	uxth	r3, r3
 8007998:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800799c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80079a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80079a4:	6800      	ldr	r0, [r0, #0]
 80079a6:	f001 fa8d 	bl	8008ec4 <USB_WritePMA>
 80079aa:	f000 bc5a 	b.w	8008262 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80079ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80079be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80079e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80079e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	441a      	add	r2, r3
 8007a02:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a3a:	4413      	add	r3, r2
 8007a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	011a      	lsls	r2, r3, #4
 8007a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a4e:	4413      	add	r3, r2
 8007a50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a54:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a5e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	891b      	ldrh	r3, [r3, #8]
 8007a6c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6959      	ldr	r1, [r3, #20]
 8007a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a86:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a8a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a8e:	6800      	ldr	r0, [r0, #0]
 8007a90:	f001 fa18 	bl	8008ec4 <USB_WritePMA>
 8007a94:	e3e5      	b.n	8008262 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007abc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	441a      	add	r2, r3
 8007ada:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6a1a      	ldr	r2, [r3, #32]
 8007afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b02:	1ad2      	subs	r2, r2, r3
 8007b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 81bc 	beq.w	8007eb0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d16d      	bne.n	8007c32 <USB_EPStartXfer+0xc5a>
 8007b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	461a      	mov	r2, r3
 8007b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b76:	4413      	add	r3, r2
 8007b78:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	011a      	lsls	r2, r3, #4
 8007b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b90:	677b      	str	r3, [r7, #116]	; 0x74
 8007b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d112      	bne.n	8007bc0 <USB_EPStartXfer+0xbe8>
 8007b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ba8:	801a      	strh	r2, [r3, #0]
 8007baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bbc:	801a      	strh	r2, [r3, #0]
 8007bbe:	e060      	b.n	8007c82 <USB_EPStartXfer+0xcaa>
 8007bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc4:	2b3e      	cmp	r3, #62	; 0x3e
 8007bc6:	d817      	bhi.n	8007bf8 <USB_EPStartXfer+0xc20>
 8007bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bcc:	085b      	lsrs	r3, r3, #1
 8007bce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d004      	beq.n	8007be8 <USB_EPStartXfer+0xc10>
 8007bde:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007be2:	3301      	adds	r3, #1
 8007be4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007be8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	029b      	lsls	r3, r3, #10
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bf4:	801a      	strh	r2, [r3, #0]
 8007bf6:	e044      	b.n	8007c82 <USB_EPStartXfer+0xcaa>
 8007bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bfc:	095b      	lsrs	r3, r3, #5
 8007bfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d104      	bne.n	8007c18 <USB_EPStartXfer+0xc40>
 8007c0e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c12:	3b01      	subs	r3, #1
 8007c14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	029b      	lsls	r3, r3, #10
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	e027      	b.n	8007c82 <USB_EPStartXfer+0xcaa>
 8007c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	785b      	ldrb	r3, [r3, #1]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d11f      	bne.n	8007c82 <USB_EPStartXfer+0xcaa>
 8007c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	461a      	mov	r2, r3
 8007c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c58:	4413      	add	r3, r2
 8007c5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	011a      	lsls	r2, r3, #4
 8007c6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c70:	4413      	add	r3, r2
 8007c72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	895b      	ldrh	r3, [r3, #10]
 8007c8e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6959      	ldr	r1, [r3, #20]
 8007c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ca8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007cac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007cb0:	6800      	ldr	r0, [r0, #0]
 8007cb2:	f001 f907 	bl	8008ec4 <USB_WritePMA>
          ep->xfer_buff += len;
 8007cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	695a      	ldr	r2, [r3, #20]
 8007cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc6:	441a      	add	r2, r3
 8007cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6a1a      	ldr	r2, [r3, #32]
 8007ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d90f      	bls.n	8007d10 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6a1a      	ldr	r2, [r3, #32]
 8007cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d00:	1ad2      	subs	r2, r2, r3
 8007d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	621a      	str	r2, [r3, #32]
 8007d0e:	e00e      	b.n	8007d2e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 8295 	beq.w	8008262 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d16d      	bne.n	8007e24 <USB_EPStartXfer+0xe4c>
 8007d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	461a      	mov	r2, r3
 8007d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d68:	4413      	add	r3, r2
 8007d6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	011a      	lsls	r2, r3, #4
 8007d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d82:	667b      	str	r3, [r7, #100]	; 0x64
 8007d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d112      	bne.n	8007db2 <USB_EPStartXfer+0xdda>
 8007d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d9a:	801a      	strh	r2, [r3, #0]
 8007d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dae:	801a      	strh	r2, [r3, #0]
 8007db0:	e063      	b.n	8007e7a <USB_EPStartXfer+0xea2>
 8007db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db6:	2b3e      	cmp	r3, #62	; 0x3e
 8007db8:	d817      	bhi.n	8007dea <USB_EPStartXfer+0xe12>
 8007dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dbe:	085b      	lsrs	r3, r3, #1
 8007dc0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d004      	beq.n	8007dda <USB_EPStartXfer+0xe02>
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	029b      	lsls	r3, r3, #10
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007de6:	801a      	strh	r2, [r3, #0]
 8007de8:	e047      	b.n	8007e7a <USB_EPStartXfer+0xea2>
 8007dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dee:	095b      	lsrs	r3, r3, #5
 8007df0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df8:	f003 031f 	and.w	r3, r3, #31
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d104      	bne.n	8007e0a <USB_EPStartXfer+0xe32>
 8007e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e04:	3b01      	subs	r3, #1
 8007e06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	029b      	lsls	r3, r3, #10
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e20:	801a      	strh	r2, [r3, #0]
 8007e22:	e02a      	b.n	8007e7a <USB_EPStartXfer+0xea2>
 8007e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	785b      	ldrb	r3, [r3, #1]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d122      	bne.n	8007e7a <USB_EPStartXfer+0xea2>
 8007e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	673b      	str	r3, [r7, #112]	; 0x70
 8007e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e54:	4413      	add	r3, r2
 8007e56:	673b      	str	r3, [r7, #112]	; 0x70
 8007e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	011a      	lsls	r2, r3, #4
 8007e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e68:	4413      	add	r3, r2
 8007e6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	891b      	ldrh	r3, [r3, #8]
 8007e86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6959      	ldr	r1, [r3, #20]
 8007e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ea0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007ea4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ea8:	6800      	ldr	r0, [r0, #0]
 8007eaa:	f001 f80b 	bl	8008ec4 <USB_WritePMA>
 8007eae:	e1d8      	b.n	8008262 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d178      	bne.n	8007fb2 <USB_EPStartXfer+0xfda>
 8007ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	011a      	lsls	r2, r3, #4
 8007ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007efc:	4413      	add	r3, r2
 8007efe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d116      	bne.n	8007f3c <USB_EPStartXfer+0xf64>
 8007f0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f20:	801a      	strh	r2, [r3, #0]
 8007f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	e06b      	b.n	8008014 <USB_EPStartXfer+0x103c>
 8007f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f40:	2b3e      	cmp	r3, #62	; 0x3e
 8007f42:	d818      	bhi.n	8007f76 <USB_EPStartXfer+0xf9e>
 8007f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f48:	085b      	lsrs	r3, r3, #1
 8007f4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d004      	beq.n	8007f64 <USB_EPStartXfer+0xf8c>
 8007f5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f5e:	3301      	adds	r3, #1
 8007f60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	029b      	lsls	r3, r3, #10
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	e04e      	b.n	8008014 <USB_EPStartXfer+0x103c>
 8007f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f84:	f003 031f 	and.w	r3, r3, #31
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d104      	bne.n	8007f96 <USB_EPStartXfer+0xfbe>
 8007f8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f90:	3b01      	subs	r3, #1
 8007f92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	029b      	lsls	r3, r3, #10
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fae:	801a      	strh	r2, [r3, #0]
 8007fb0:	e030      	b.n	8008014 <USB_EPStartXfer+0x103c>
 8007fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d128      	bne.n	8008014 <USB_EPStartXfer+0x103c>
 8007fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	011a      	lsls	r2, r3, #4
 8007ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ffe:	4413      	add	r3, r2
 8008000:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008004:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800800c:	b29a      	uxth	r2, r3
 800800e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008012:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	891b      	ldrh	r3, [r3, #8]
 8008020:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6959      	ldr	r1, [r3, #20]
 8008030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008034:	b29b      	uxth	r3, r3
 8008036:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800803a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800803e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008042:	6800      	ldr	r0, [r0, #0]
 8008044:	f000 ff3e 	bl	8008ec4 <USB_WritePMA>
          ep->xfer_buff += len;
 8008048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	695a      	ldr	r2, [r3, #20]
 8008054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008058:	441a      	add	r2, r3
 800805a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6a1a      	ldr	r2, [r3, #32]
 8008072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	429a      	cmp	r2, r3
 8008080:	d90f      	bls.n	80080a2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8008082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6a1a      	ldr	r2, [r3, #32]
 800808e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008092:	1ad2      	subs	r2, r2, r3
 8008094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	621a      	str	r2, [r3, #32]
 80080a0:	e00e      	b.n	80080c0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80080a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80080b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2200      	movs	r2, #0
 80080be:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80080c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 80cc 	beq.w	8008262 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	785b      	ldrb	r3, [r3, #1]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d178      	bne.n	80081da <USB_EPStartXfer+0x1202>
 80080e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008104:	b29b      	uxth	r3, r3
 8008106:	461a      	mov	r2, r3
 8008108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800810c:	4413      	add	r3, r2
 800810e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	011a      	lsls	r2, r3, #4
 8008120:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008124:	4413      	add	r3, r2
 8008126:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800812a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800812e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d116      	bne.n	8008164 <USB_EPStartXfer+0x118c>
 8008136:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	b29b      	uxth	r3, r3
 800813e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008142:	b29a      	uxth	r2, r3
 8008144:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008148:	801a      	strh	r2, [r3, #0]
 800814a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	b29b      	uxth	r3, r3
 8008152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800815a:	b29a      	uxth	r2, r3
 800815c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008160:	801a      	strh	r2, [r3, #0]
 8008162:	e064      	b.n	800822e <USB_EPStartXfer+0x1256>
 8008164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008168:	2b3e      	cmp	r3, #62	; 0x3e
 800816a:	d818      	bhi.n	800819e <USB_EPStartXfer+0x11c6>
 800816c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008170:	085b      	lsrs	r3, r3, #1
 8008172:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d004      	beq.n	800818c <USB_EPStartXfer+0x11b4>
 8008182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008186:	3301      	adds	r3, #1
 8008188:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800818c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008190:	b29b      	uxth	r3, r3
 8008192:	029b      	lsls	r3, r3, #10
 8008194:	b29a      	uxth	r2, r3
 8008196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800819a:	801a      	strh	r2, [r3, #0]
 800819c:	e047      	b.n	800822e <USB_EPStartXfer+0x1256>
 800819e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a2:	095b      	lsrs	r3, r3, #5
 80081a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80081a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ac:	f003 031f 	and.w	r3, r3, #31
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d104      	bne.n	80081be <USB_EPStartXfer+0x11e6>
 80081b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081b8:	3b01      	subs	r3, #1
 80081ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80081be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	029b      	lsls	r3, r3, #10
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081d6:	801a      	strh	r2, [r3, #0]
 80081d8:	e029      	b.n	800822e <USB_EPStartXfer+0x1256>
 80081da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d121      	bne.n	800822e <USB_EPStartXfer+0x1256>
 80081ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	461a      	mov	r2, r3
 80081fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008200:	4413      	add	r3, r2
 8008202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	011a      	lsls	r2, r3, #4
 8008214:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008218:	4413      	add	r3, r2
 800821a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800821e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008226:	b29a      	uxth	r2, r3
 8008228:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800822c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800822e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	895b      	ldrh	r3, [r3, #10]
 800823a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800823e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6959      	ldr	r1, [r3, #20]
 800824a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800824e:	b29b      	uxth	r3, r3
 8008250:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008254:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008258:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800825c:	6800      	ldr	r0, [r0, #0]
 800825e:	f000 fe31 	bl	8008ec4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008266:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008284:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800828c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008290:	8013      	strh	r3, [r2, #0]
 8008292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008296:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800829a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800829e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80082a2:	8812      	ldrh	r2, [r2, #0]
 80082a4:	f082 0210 	eor.w	r2, r2, #16
 80082a8:	801a      	strh	r2, [r3, #0]
 80082aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ae:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80082b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80082b6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80082ba:	8812      	ldrh	r2, [r2, #0]
 80082bc:	f082 0220 	eor.w	r2, r2, #32
 80082c0:	801a      	strh	r2, [r3, #0]
 80082c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	441a      	add	r2, r3
 80082dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	8013      	strh	r3, [r2, #0]
 80082fa:	f000 bc9f 	b.w	8008c3c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80082fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	7b1b      	ldrb	r3, [r3, #12]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f040 80ae 	bne.w	800846c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	699a      	ldr	r2, [r3, #24]
 800831c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	429a      	cmp	r2, r3
 800832a:	d917      	bls.n	800835c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800832c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800833c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	699a      	ldr	r2, [r3, #24]
 8008348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800834c:	1ad2      	subs	r2, r2, r3
 800834e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	619a      	str	r2, [r3, #24]
 800835a:	e00e      	b.n	800837a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800835c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008360:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800836c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2200      	movs	r2, #0
 8008378:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800837a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800838c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008396:	b29b      	uxth	r3, r3
 8008398:	461a      	mov	r2, r3
 800839a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800839e:	4413      	add	r3, r2
 80083a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	011a      	lsls	r2, r3, #4
 80083b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80083b6:	4413      	add	r3, r2
 80083b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d116      	bne.n	80083f6 <USB_EPStartXfer+0x141e>
 80083c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083da:	801a      	strh	r2, [r3, #0]
 80083dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083f2:	801a      	strh	r2, [r3, #0]
 80083f4:	e3e8      	b.n	8008bc8 <USB_EPStartXfer+0x1bf0>
 80083f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fa:	2b3e      	cmp	r3, #62	; 0x3e
 80083fc:	d818      	bhi.n	8008430 <USB_EPStartXfer+0x1458>
 80083fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008402:	085b      	lsrs	r3, r3, #1
 8008404:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d004      	beq.n	800841e <USB_EPStartXfer+0x1446>
 8008414:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008418:	3301      	adds	r3, #1
 800841a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800841e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008422:	b29b      	uxth	r3, r3
 8008424:	029b      	lsls	r3, r3, #10
 8008426:	b29a      	uxth	r2, r3
 8008428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800842c:	801a      	strh	r2, [r3, #0]
 800842e:	e3cb      	b.n	8008bc8 <USB_EPStartXfer+0x1bf0>
 8008430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008434:	095b      	lsrs	r3, r3, #5
 8008436:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800843a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800843e:	f003 031f 	and.w	r3, r3, #31
 8008442:	2b00      	cmp	r3, #0
 8008444:	d104      	bne.n	8008450 <USB_EPStartXfer+0x1478>
 8008446:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800844a:	3b01      	subs	r3, #1
 800844c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008450:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008454:	b29b      	uxth	r3, r3
 8008456:	029b      	lsls	r3, r3, #10
 8008458:	b29b      	uxth	r3, r3
 800845a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800845e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008462:	b29a      	uxth	r2, r3
 8008464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008468:	801a      	strh	r2, [r3, #0]
 800846a:	e3ad      	b.n	8008bc8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800846c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	78db      	ldrb	r3, [r3, #3]
 8008478:	2b02      	cmp	r3, #2
 800847a:	f040 8200 	bne.w	800887e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800847e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	785b      	ldrb	r3, [r3, #1]
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 8091 	bne.w	80085b2 <USB_EPStartXfer+0x15da>
 8008490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008494:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800849e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	461a      	mov	r2, r3
 80084b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80084b4:	4413      	add	r3, r2
 80084b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	011a      	lsls	r2, r3, #4
 80084c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80084cc:	4413      	add	r3, r2
 80084ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d116      	bne.n	8008514 <USB_EPStartXfer+0x153c>
 80084e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084f8:	801a      	strh	r2, [r3, #0]
 80084fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800850a:	b29a      	uxth	r2, r3
 800850c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008510:	801a      	strh	r2, [r3, #0]
 8008512:	e083      	b.n	800861c <USB_EPStartXfer+0x1644>
 8008514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	2b3e      	cmp	r3, #62	; 0x3e
 8008522:	d820      	bhi.n	8008566 <USB_EPStartXfer+0x158e>
 8008524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	085b      	lsrs	r3, r3, #1
 8008532:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800853a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <USB_EPStartXfer+0x157c>
 800854a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854e:	3301      	adds	r3, #1
 8008550:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008558:	b29b      	uxth	r3, r3
 800855a:	029b      	lsls	r3, r3, #10
 800855c:	b29a      	uxth	r2, r3
 800855e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008562:	801a      	strh	r2, [r3, #0]
 8008564:	e05a      	b.n	800861c <USB_EPStartXfer+0x1644>
 8008566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800856a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	095b      	lsrs	r3, r3, #5
 8008574:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800857c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <USB_EPStartXfer+0x15be>
 800858c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008590:	3b01      	subs	r3, #1
 8008592:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800859a:	b29b      	uxth	r3, r3
 800859c:	029b      	lsls	r3, r3, #10
 800859e:	b29b      	uxth	r3, r3
 80085a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085ae:	801a      	strh	r2, [r3, #0]
 80085b0:	e034      	b.n	800861c <USB_EPStartXfer+0x1644>
 80085b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d12c      	bne.n	800861c <USB_EPStartXfer+0x1644>
 80085c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085de:	b29b      	uxth	r3, r3
 80085e0:	461a      	mov	r2, r3
 80085e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085e6:	4413      	add	r3, r2
 80085e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	011a      	lsls	r2, r3, #4
 80085fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085fe:	4413      	add	r3, r2
 8008600:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	b29a      	uxth	r2, r3
 8008616:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800861a:	801a      	strh	r2, [r3, #0]
 800861c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800862a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f040 8091 	bne.w	800875e <USB_EPStartXfer+0x1786>
 800863c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008640:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800864a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008658:	b29b      	uxth	r3, r3
 800865a:	461a      	mov	r2, r3
 800865c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008660:	4413      	add	r3, r2
 8008662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800866a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	011a      	lsls	r2, r3, #4
 8008674:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008678:	4413      	add	r3, r2
 800867a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800867e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d116      	bne.n	80086c0 <USB_EPStartXfer+0x16e8>
 8008692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	b29b      	uxth	r3, r3
 800869a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800869e:	b29a      	uxth	r2, r3
 80086a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086a4:	801a      	strh	r2, [r3, #0]
 80086a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	e07c      	b.n	80087ba <USB_EPStartXfer+0x17e2>
 80086c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	2b3e      	cmp	r3, #62	; 0x3e
 80086ce:	d820      	bhi.n	8008712 <USB_EPStartXfer+0x173a>
 80086d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	085b      	lsrs	r3, r3, #1
 80086de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <USB_EPStartXfer+0x1728>
 80086f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086fa:	3301      	adds	r3, #1
 80086fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008700:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008704:	b29b      	uxth	r3, r3
 8008706:	029b      	lsls	r3, r3, #10
 8008708:	b29a      	uxth	r2, r3
 800870a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800870e:	801a      	strh	r2, [r3, #0]
 8008710:	e053      	b.n	80087ba <USB_EPStartXfer+0x17e2>
 8008712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	095b      	lsrs	r3, r3, #5
 8008720:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	f003 031f 	and.w	r3, r3, #31
 8008734:	2b00      	cmp	r3, #0
 8008736:	d104      	bne.n	8008742 <USB_EPStartXfer+0x176a>
 8008738:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800873c:	3b01      	subs	r3, #1
 800873e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008742:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008746:	b29b      	uxth	r3, r3
 8008748:	029b      	lsls	r3, r3, #10
 800874a:	b29b      	uxth	r3, r3
 800874c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008754:	b29a      	uxth	r2, r3
 8008756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800875a:	801a      	strh	r2, [r3, #0]
 800875c:	e02d      	b.n	80087ba <USB_EPStartXfer+0x17e2>
 800875e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	785b      	ldrb	r3, [r3, #1]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d125      	bne.n	80087ba <USB_EPStartXfer+0x17e2>
 800876e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008772:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800877c:	b29b      	uxth	r3, r3
 800877e:	461a      	mov	r2, r3
 8008780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008784:	4413      	add	r3, r2
 8008786:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800878a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	011a      	lsls	r2, r3, #4
 8008798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800879c:	4413      	add	r3, r2
 800879e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087b8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80087ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 81fe 	beq.w	8008bc8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80087cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087ec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <USB_EPStartXfer+0x182c>
 80087f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10d      	bne.n	8008820 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008804:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800880c:	2b00      	cmp	r3, #0
 800880e:	f040 81db 	bne.w	8008bc8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008812:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881a:	2b00      	cmp	r3, #0
 800881c:	f040 81d4 	bne.w	8008bc8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008824:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800882e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29b      	uxth	r3, r3
 800883e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008846:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800884a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800884e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	441a      	add	r2, r3
 8008864:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800886c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008874:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008878:	b29b      	uxth	r3, r3
 800887a:	8013      	strh	r3, [r2, #0]
 800887c:	e1a4      	b.n	8008bc8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800887e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	78db      	ldrb	r3, [r3, #3]
 800888a:	2b01      	cmp	r3, #1
 800888c:	f040 819a 	bne.w	8008bc4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	699a      	ldr	r2, [r3, #24]
 800889c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d917      	bls.n	80088dc <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80088ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80088bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699a      	ldr	r2, [r3, #24]
 80088c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088cc:	1ad2      	subs	r2, r2, r3
 80088ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	619a      	str	r2, [r3, #24]
 80088da:	e00e      	b.n	80088fa <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80088dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80088ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2200      	movs	r2, #0
 80088f8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80088fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	785b      	ldrb	r3, [r3, #1]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d178      	bne.n	80089fc <USB_EPStartXfer+0x1a24>
 800890a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800891c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008926:	b29b      	uxth	r3, r3
 8008928:	461a      	mov	r2, r3
 800892a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800892e:	4413      	add	r3, r2
 8008930:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	011a      	lsls	r2, r3, #4
 8008942:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008946:	4413      	add	r3, r2
 8008948:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800894c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008954:	2b00      	cmp	r3, #0
 8008956:	d116      	bne.n	8008986 <USB_EPStartXfer+0x19ae>
 8008958:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	b29b      	uxth	r3, r3
 8008960:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008964:	b29a      	uxth	r2, r3
 8008966:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800896a:	801a      	strh	r2, [r3, #0]
 800896c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	b29b      	uxth	r3, r3
 8008974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800897c:	b29a      	uxth	r2, r3
 800897e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008982:	801a      	strh	r2, [r3, #0]
 8008984:	e06b      	b.n	8008a5e <USB_EPStartXfer+0x1a86>
 8008986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800898a:	2b3e      	cmp	r3, #62	; 0x3e
 800898c:	d818      	bhi.n	80089c0 <USB_EPStartXfer+0x19e8>
 800898e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008992:	085b      	lsrs	r3, r3, #1
 8008994:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d004      	beq.n	80089ae <USB_EPStartXfer+0x19d6>
 80089a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089a8:	3301      	adds	r3, #1
 80089aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	029b      	lsls	r3, r3, #10
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089bc:	801a      	strh	r2, [r3, #0]
 80089be:	e04e      	b.n	8008a5e <USB_EPStartXfer+0x1a86>
 80089c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c4:	095b      	lsrs	r3, r3, #5
 80089c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ce:	f003 031f 	and.w	r3, r3, #31
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d104      	bne.n	80089e0 <USB_EPStartXfer+0x1a08>
 80089d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089da:	3b01      	subs	r3, #1
 80089dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	029b      	lsls	r3, r3, #10
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089f8:	801a      	strh	r2, [r3, #0]
 80089fa:	e030      	b.n	8008a5e <USB_EPStartXfer+0x1a86>
 80089fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	785b      	ldrb	r3, [r3, #1]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d128      	bne.n	8008a5e <USB_EPStartXfer+0x1a86>
 8008a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a30:	4413      	add	r3, r2
 8008a32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	011a      	lsls	r2, r3, #4
 8008a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a48:	4413      	add	r3, r2
 8008a4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a5c:	801a      	strh	r2, [r3, #0]
 8008a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	785b      	ldrb	r3, [r3, #1]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d178      	bne.n	8008b6e <USB_EPStartXfer+0x1b96>
 8008a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	011a      	lsls	r2, r3, #4
 8008ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ab8:	4413      	add	r3, r2
 8008aba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008abe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d116      	bne.n	8008af8 <USB_EPStartXfer+0x1b20>
 8008aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008adc:	801a      	strh	r2, [r3, #0]
 8008ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008af4:	801a      	strh	r2, [r3, #0]
 8008af6:	e067      	b.n	8008bc8 <USB_EPStartXfer+0x1bf0>
 8008af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008afc:	2b3e      	cmp	r3, #62	; 0x3e
 8008afe:	d818      	bhi.n	8008b32 <USB_EPStartXfer+0x1b5a>
 8008b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b04:	085b      	lsrs	r3, r3, #1
 8008b06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d004      	beq.n	8008b20 <USB_EPStartXfer+0x1b48>
 8008b16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	029b      	lsls	r3, r3, #10
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b2e:	801a      	strh	r2, [r3, #0]
 8008b30:	e04a      	b.n	8008bc8 <USB_EPStartXfer+0x1bf0>
 8008b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b36:	095b      	lsrs	r3, r3, #5
 8008b38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b40:	f003 031f 	and.w	r3, r3, #31
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d104      	bne.n	8008b52 <USB_EPStartXfer+0x1b7a>
 8008b48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	029b      	lsls	r3, r3, #10
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	e02c      	b.n	8008bc8 <USB_EPStartXfer+0x1bf0>
 8008b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	785b      	ldrb	r3, [r3, #1]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d124      	bne.n	8008bc8 <USB_EPStartXfer+0x1bf0>
 8008b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b94:	4413      	add	r3, r2
 8008b96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	011a      	lsls	r2, r3, #4
 8008ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bac:	4413      	add	r3, r2
 8008bae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008bb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	e001      	b.n	8008bc8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e03a      	b.n	8008c3e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008bf2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008bf6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bfa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008bfe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c06:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	441a      	add	r2, r3
 8008c24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	785b      	ldrb	r3, [r3, #1]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d020      	beq.n	8008c9c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c70:	81bb      	strh	r3, [r7, #12]
 8008c72:	89bb      	ldrh	r3, [r7, #12]
 8008c74:	f083 0310 	eor.w	r3, r3, #16
 8008c78:	81bb      	strh	r3, [r7, #12]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	441a      	add	r2, r3
 8008c84:	89bb      	ldrh	r3, [r7, #12]
 8008c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	8013      	strh	r3, [r2, #0]
 8008c9a:	e01f      	b.n	8008cdc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb2:	81fb      	strh	r3, [r7, #14]
 8008cb4:	89fb      	ldrh	r3, [r7, #14]
 8008cb6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cba:	81fb      	strh	r3, [r7, #14]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	441a      	add	r2, r3
 8008cc6:	89fb      	ldrh	r3, [r7, #14]
 8008cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bc80      	pop	{r7}
 8008ce6:	4770      	bx	lr

08008ce8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	7b1b      	ldrb	r3, [r3, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f040 809d 	bne.w	8008e36 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	785b      	ldrb	r3, [r3, #1]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d04c      	beq.n	8008d9e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	823b      	strh	r3, [r7, #16]
 8008d12:	8a3b      	ldrh	r3, [r7, #16]
 8008d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01b      	beq.n	8008d54 <USB_EPClearStall+0x6c>
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d32:	81fb      	strh	r3, [r7, #14]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	441a      	add	r2, r3
 8008d3e:	89fb      	ldrh	r3, [r7, #14]
 8008d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	78db      	ldrb	r3, [r3, #3]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d06c      	beq.n	8008e36 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	881b      	ldrh	r3, [r3, #0]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d72:	81bb      	strh	r3, [r7, #12]
 8008d74:	89bb      	ldrh	r3, [r7, #12]
 8008d76:	f083 0320 	eor.w	r3, r3, #32
 8008d7a:	81bb      	strh	r3, [r7, #12]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	441a      	add	r2, r3
 8008d86:	89bb      	ldrh	r3, [r7, #12]
 8008d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	8013      	strh	r3, [r2, #0]
 8008d9c:	e04b      	b.n	8008e36 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	82fb      	strh	r3, [r7, #22]
 8008dac:	8afb      	ldrh	r3, [r7, #22]
 8008dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d01b      	beq.n	8008dee <USB_EPClearStall+0x106>
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dcc:	82bb      	strh	r3, [r7, #20]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	441a      	add	r2, r3
 8008dd8:	8abb      	ldrh	r3, [r7, #20]
 8008dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e04:	827b      	strh	r3, [r7, #18]
 8008e06:	8a7b      	ldrh	r3, [r7, #18]
 8008e08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e0c:	827b      	strh	r3, [r7, #18]
 8008e0e:	8a7b      	ldrh	r3, [r7, #18]
 8008e10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e14:	827b      	strh	r3, [r7, #18]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	441a      	add	r2, r3
 8008e20:	8a7b      	ldrh	r3, [r7, #18]
 8008e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	371c      	adds	r7, #28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bc80      	pop	{r7}
 8008e40:	4770      	bx	lr

08008e42 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e4e:	78fb      	ldrb	r3, [r7, #3]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d103      	bne.n	8008e5c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2280      	movs	r2, #128	; 0x80
 8008e58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc80      	pop	{r7}
 8008e66:	4770      	bx	lr

08008e68 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bc80      	pop	{r7}
 8008e7a:	4770      	bx	lr

08008e7c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bc80      	pop	{r7}
 8008e8e:	4770      	bx	lr

08008e90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3714      	adds	r7, #20
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bc80      	pop	{r7}
 8008eac:	4770      	bx	lr

08008eae <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr

08008ec4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b08d      	sub	sp, #52	; 0x34
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	4611      	mov	r1, r2
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	80fb      	strh	r3, [r7, #6]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008eda:	88bb      	ldrh	r3, [r7, #4]
 8008edc:	3301      	adds	r3, #1
 8008ede:	085b      	lsrs	r3, r3, #1
 8008ee0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008eea:	88fb      	ldrh	r3, [r7, #6]
 8008eec:	005a      	lsls	r2, r3, #1
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008efc:	e01e      	b.n	8008f3c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	3301      	adds	r3, #1
 8008f08:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	021b      	lsls	r3, r3, #8
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	461a      	mov	r2, r3
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	3302      	adds	r3, #2
 8008f28:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	3302      	adds	r3, #2
 8008f2e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	3301      	adds	r3, #1
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1dd      	bne.n	8008efe <USB_WritePMA+0x3a>
  }
}
 8008f42:	bf00      	nop
 8008f44:	bf00      	nop
 8008f46:	3734      	adds	r7, #52	; 0x34
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bc80      	pop	{r7}
 8008f4c:	4770      	bx	lr

08008f4e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b08b      	sub	sp, #44	; 0x2c
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	4611      	mov	r1, r2
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	80fb      	strh	r3, [r7, #6]
 8008f60:	4613      	mov	r3, r2
 8008f62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f64:	88bb      	ldrh	r3, [r7, #4]
 8008f66:	085b      	lsrs	r3, r3, #1
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f74:	88fb      	ldrh	r3, [r7, #6]
 8008f76:	005a      	lsls	r2, r3, #1
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f80:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
 8008f86:	e01b      	b.n	8008fc0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	3302      	adds	r3, #2
 8008f94:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	0a1b      	lsrs	r3, r3, #8
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	3302      	adds	r3, #2
 8008fb8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1e0      	bne.n	8008f88 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008fc6:	88bb      	ldrh	r3, [r7, #4]
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d007      	beq.n	8008fe2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	701a      	strb	r2, [r3, #0]
  }
}
 8008fe2:	bf00      	nop
 8008fe4:	372c      	adds	r7, #44	; 0x2c
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bc80      	pop	{r7}
 8008fea:	4770      	bx	lr

08008fec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	7c1b      	ldrb	r3, [r3, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d115      	bne.n	8009030 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009008:	2202      	movs	r2, #2
 800900a:	2181      	movs	r1, #129	; 0x81
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f001 fea2 	bl	800ad56 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800901c:	2202      	movs	r2, #2
 800901e:	2101      	movs	r1, #1
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 fe98 	bl	800ad56 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800902e:	e012      	b.n	8009056 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009030:	2340      	movs	r3, #64	; 0x40
 8009032:	2202      	movs	r2, #2
 8009034:	2181      	movs	r1, #129	; 0x81
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 fe8d 	bl	800ad56 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009042:	2340      	movs	r3, #64	; 0x40
 8009044:	2202      	movs	r2, #2
 8009046:	2101      	movs	r1, #1
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 fe84 	bl	800ad56 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009056:	2308      	movs	r3, #8
 8009058:	2203      	movs	r2, #3
 800905a:	2182      	movs	r1, #130	; 0x82
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f001 fe7a 	bl	800ad56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009068:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800906c:	f001 ff9a 	bl	800afa4 <USBD_static_malloc>
 8009070:	4602      	mov	r2, r0
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907e:	2b00      	cmp	r3, #0
 8009080:	d102      	bne.n	8009088 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009082:	2301      	movs	r3, #1
 8009084:	73fb      	strb	r3, [r7, #15]
 8009086:	e026      	b.n	80090d6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800908e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2200      	movs	r2, #0
 800909e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	7c1b      	ldrb	r3, [r3, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d109      	bne.n	80090c6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090bc:	2101      	movs	r1, #1
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 ff3a 	bl	800af38 <USBD_LL_PrepareReceive>
 80090c4:	e007      	b.n	80090d6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090cc:	2340      	movs	r3, #64	; 0x40
 80090ce:	2101      	movs	r1, #1
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 ff31 	bl	800af38 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	460b      	mov	r3, r1
 80090ea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80090f0:	2181      	movs	r1, #129	; 0x81
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f001 fe55 	bl	800ada2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80090fe:	2101      	movs	r1, #1
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 fe4e 	bl	800ada2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800910e:	2182      	movs	r1, #130	; 0x82
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 fe46 	bl	800ada2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00e      	beq.n	8009144 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009136:	4618      	mov	r0, r3
 8009138:	f001 ff40 	bl	800afbc <USBD_static_free>
    pdev->pClassData = NULL;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009144:	7bfb      	ldrb	r3, [r7, #15]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b086      	sub	sp, #24
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009164:	2300      	movs	r3, #0
 8009166:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009174:	2b00      	cmp	r3, #0
 8009176:	d039      	beq.n	80091ec <USBD_CDC_Setup+0x9e>
 8009178:	2b20      	cmp	r3, #32
 800917a:	d17f      	bne.n	800927c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	88db      	ldrh	r3, [r3, #6]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d029      	beq.n	80091d8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	b25b      	sxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	da11      	bge.n	80091b2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800919a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	88d2      	ldrh	r2, [r2, #6]
 80091a0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80091a2:	6939      	ldr	r1, [r7, #16]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	88db      	ldrh	r3, [r3, #6]
 80091a8:	461a      	mov	r2, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f001 fa09 	bl	800a5c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80091b0:	e06b      	b.n	800928a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	785a      	ldrb	r2, [r3, #1]
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	88db      	ldrh	r3, [r3, #6]
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80091c8:	6939      	ldr	r1, [r7, #16]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	88db      	ldrh	r3, [r3, #6]
 80091ce:	461a      	mov	r2, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f001 fa24 	bl	800a61e <USBD_CtlPrepareRx>
      break;
 80091d6:	e058      	b.n	800928a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	7850      	ldrb	r0, [r2, #1]
 80091e4:	2200      	movs	r2, #0
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	4798      	blx	r3
      break;
 80091ea:	e04e      	b.n	800928a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	2b0b      	cmp	r3, #11
 80091f2:	d02e      	beq.n	8009252 <USBD_CDC_Setup+0x104>
 80091f4:	2b0b      	cmp	r3, #11
 80091f6:	dc38      	bgt.n	800926a <USBD_CDC_Setup+0x11c>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <USBD_CDC_Setup+0xb4>
 80091fc:	2b0a      	cmp	r3, #10
 80091fe:	d014      	beq.n	800922a <USBD_CDC_Setup+0xdc>
 8009200:	e033      	b.n	800926a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009208:	2b03      	cmp	r3, #3
 800920a:	d107      	bne.n	800921c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800920c:	f107 030c 	add.w	r3, r7, #12
 8009210:	2202      	movs	r2, #2
 8009212:	4619      	mov	r1, r3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f001 f9d4 	bl	800a5c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800921a:	e02e      	b.n	800927a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 f965 	bl	800a4ee <USBD_CtlError>
            ret = USBD_FAIL;
 8009224:	2302      	movs	r3, #2
 8009226:	75fb      	strb	r3, [r7, #23]
          break;
 8009228:	e027      	b.n	800927a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009230:	2b03      	cmp	r3, #3
 8009232:	d107      	bne.n	8009244 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009234:	f107 030f 	add.w	r3, r7, #15
 8009238:	2201      	movs	r2, #1
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 f9c0 	bl	800a5c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009242:	e01a      	b.n	800927a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 f951 	bl	800a4ee <USBD_CtlError>
            ret = USBD_FAIL;
 800924c:	2302      	movs	r3, #2
 800924e:	75fb      	strb	r3, [r7, #23]
          break;
 8009250:	e013      	b.n	800927a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009258:	2b03      	cmp	r3, #3
 800925a:	d00d      	beq.n	8009278 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f001 f945 	bl	800a4ee <USBD_CtlError>
            ret = USBD_FAIL;
 8009264:	2302      	movs	r3, #2
 8009266:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009268:	e006      	b.n	8009278 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 f93e 	bl	800a4ee <USBD_CtlError>
          ret = USBD_FAIL;
 8009272:	2302      	movs	r3, #2
 8009274:	75fb      	strb	r3, [r7, #23]
          break;
 8009276:	e000      	b.n	800927a <USBD_CDC_Setup+0x12c>
          break;
 8009278:	bf00      	nop
      }
      break;
 800927a:	e006      	b.n	800928a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 f935 	bl	800a4ee <USBD_CtlError>
      ret = USBD_FAIL;
 8009284:	2302      	movs	r3, #2
 8009286:	75fb      	strb	r3, [r7, #23]
      break;
 8009288:	bf00      	nop
  }

  return ret;
 800928a:	7dfb      	ldrb	r3, [r7, #23]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092ae:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d03a      	beq.n	8009330 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80092ba:	78fa      	ldrb	r2, [r7, #3]
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	4613      	mov	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	440b      	add	r3, r1
 80092c8:	331c      	adds	r3, #28
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d029      	beq.n	8009324 <USBD_CDC_DataIn+0x90>
 80092d0:	78fa      	ldrb	r2, [r7, #3]
 80092d2:	6879      	ldr	r1, [r7, #4]
 80092d4:	4613      	mov	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	440b      	add	r3, r1
 80092de:	331c      	adds	r3, #28
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	78f9      	ldrb	r1, [r7, #3]
 80092e4:	68b8      	ldr	r0, [r7, #8]
 80092e6:	460b      	mov	r3, r1
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	440b      	add	r3, r1
 80092ec:	00db      	lsls	r3, r3, #3
 80092ee:	4403      	add	r3, r0
 80092f0:	3338      	adds	r3, #56	; 0x38
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80092f8:	fb01 f303 	mul.w	r3, r1, r3
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d110      	bne.n	8009324 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009302:	78fa      	ldrb	r2, [r7, #3]
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	4613      	mov	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4413      	add	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	440b      	add	r3, r1
 8009310:	331c      	adds	r3, #28
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009316:	78f9      	ldrb	r1, [r7, #3]
 8009318:	2300      	movs	r3, #0
 800931a:	2200      	movs	r2, #0
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f001 fde8 	bl	800aef2 <USBD_LL_Transmit>
 8009322:	e003      	b.n	800932c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	e000      	b.n	8009332 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009330:	2302      	movs	r3, #2
  }
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	460b      	mov	r3, r1
 8009344:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800934e:	78fb      	ldrb	r3, [r7, #3]
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 fe13 	bl	800af7e <USBD_LL_GetRxDataSize>
 8009358:	4602      	mov	r2, r0
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00d      	beq.n	8009386 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800937e:	4611      	mov	r1, r2
 8009380:	4798      	blx	r3

    return USBD_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	e000      	b.n	8009388 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009386:	2302      	movs	r3, #2
  }
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d015      	beq.n	80093d6 <USBD_CDC_EP0_RxReady+0x46>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80093b0:	2bff      	cmp	r3, #255	; 0xff
 80093b2:	d010      	beq.n	80093d6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80093c2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093ca:	b292      	uxth	r2, r2
 80093cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	22ff      	movs	r2, #255	; 0xff
 80093d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2243      	movs	r2, #67	; 0x43
 80093ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80093ee:	4b03      	ldr	r3, [pc, #12]	; (80093fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	20000094 	.word	0x20000094

08009400 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2243      	movs	r2, #67	; 0x43
 800940c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800940e:	4b03      	ldr	r3, [pc, #12]	; (800941c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	bc80      	pop	{r7}
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	20000050 	.word	0x20000050

08009420 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2243      	movs	r2, #67	; 0x43
 800942c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800942e:	4b03      	ldr	r3, [pc, #12]	; (800943c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009430:	4618      	mov	r0, r3
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	bc80      	pop	{r7}
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	200000d8 	.word	0x200000d8

08009440 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	220a      	movs	r2, #10
 800944c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800944e:	4b03      	ldr	r3, [pc, #12]	; (800945c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	bc80      	pop	{r7}
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	2000000c 	.word	0x2000000c

08009460 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800946a:	2302      	movs	r3, #2
 800946c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d005      	beq.n	8009480 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009480:	7bfb      	ldrb	r3, [r7, #15]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	bc80      	pop	{r7}
 800948a:	4770      	bx	lr

0800948c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800948c:	b480      	push	{r7}
 800948e:	b087      	sub	sp, #28
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	4613      	mov	r3, r2
 8009498:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80094aa:	88fa      	ldrh	r2, [r7, #6]
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	371c      	adds	r7, #28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bc80      	pop	{r7}
 80094bc:	4770      	bx	lr

080094be <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80094be:	b480      	push	{r7}
 80094c0:	b085      	sub	sp, #20
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ce:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3714      	adds	r7, #20
 80094de:	46bd      	mov	sp, r7
 80094e0:	bc80      	pop	{r7}
 80094e2:	4770      	bx	lr

080094e4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d01c      	beq.n	8009538 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009504:	2b00      	cmp	r3, #0
 8009506:	d115      	bne.n	8009534 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2201      	movs	r2, #1
 800950c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009526:	b29b      	uxth	r3, r3
 8009528:	2181      	movs	r1, #129	; 0x81
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 fce1 	bl	800aef2 <USBD_LL_Transmit>

      return USBD_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	e002      	b.n	800953a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009534:	2301      	movs	r3, #1
 8009536:	e000      	b.n	800953a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009538:	2302      	movs	r3, #2
  }
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009550:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009558:	2b00      	cmp	r3, #0
 800955a:	d017      	beq.n	800958c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	7c1b      	ldrb	r3, [r3, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d109      	bne.n	8009578 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800956a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800956e:	2101      	movs	r1, #1
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f001 fce1 	bl	800af38 <USBD_LL_PrepareReceive>
 8009576:	e007      	b.n	8009588 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800957e:	2340      	movs	r3, #64	; 0x40
 8009580:	2101      	movs	r1, #1
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f001 fcd8 	bl	800af38 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	e000      	b.n	800958e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800958c:	2302      	movs	r3, #2
  }
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b084      	sub	sp, #16
 800959a:	af00      	add	r7, sp, #0
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	4613      	mov	r3, r2
 80095a2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80095aa:	2302      	movs	r3, #2
 80095ac:	e01a      	b.n	80095e4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d003      	beq.n	80095c0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	79fa      	ldrb	r2, [r7, #7]
 80095da:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f001 fb45 	bl	800ac6c <USBD_LL_Init>

  return USBD_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d006      	beq.n	800960e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
 800960c:	e001      	b.n	8009612 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800960e:	2302      	movs	r3, #2
 8009610:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	bc80      	pop	{r7}
 800961c:	4770      	bx	lr

0800961e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f001 fb7a 	bl	800ad20 <USBD_LL_Start>

  return USBD_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	bc80      	pop	{r7}
 8009648:	4770      	bx	lr

0800964a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009656:	2302      	movs	r3, #2
 8009658:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00c      	beq.n	800967e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	78fa      	ldrb	r2, [r7, #3]
 800966e:	4611      	mov	r1, r2
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	4798      	blx	r3
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800967e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	78fa      	ldrb	r2, [r7, #3]
 800969e:	4611      	mov	r1, r2
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	4798      	blx	r3

  return USBD_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 fed8 	bl	800a476 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80096d4:	461a      	mov	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80096e2:	f003 031f 	and.w	r3, r3, #31
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d016      	beq.n	8009718 <USBD_LL_SetupStage+0x6a>
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d81c      	bhi.n	8009728 <USBD_LL_SetupStage+0x7a>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <USBD_LL_SetupStage+0x4a>
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d008      	beq.n	8009708 <USBD_LL_SetupStage+0x5a>
 80096f6:	e017      	b.n	8009728 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f9cb 	bl	8009a9c <USBD_StdDevReq>
      break;
 8009706:	e01a      	b.n	800973e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fa2d 	bl	8009b70 <USBD_StdItfReq>
      break;
 8009716:	e012      	b.n	800973e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fa6d 	bl	8009c00 <USBD_StdEPReq>
      break;
 8009726:	e00a      	b.n	800973e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800972e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009732:	b2db      	uxtb	r3, r3
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f001 fb52 	bl	800ade0 <USBD_LL_StallEP>
      break;
 800973c:	bf00      	nop
  }

  return USBD_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	460b      	mov	r3, r1
 8009752:	607a      	str	r2, [r7, #4]
 8009754:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009756:	7afb      	ldrb	r3, [r7, #11]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d14b      	bne.n	80097f4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009762:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800976a:	2b03      	cmp	r3, #3
 800976c:	d134      	bne.n	80097d8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	68da      	ldr	r2, [r3, #12]
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	429a      	cmp	r2, r3
 8009778:	d919      	bls.n	80097ae <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	1ad2      	subs	r2, r2, r3
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	68da      	ldr	r2, [r3, #12]
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009790:	429a      	cmp	r2, r3
 8009792:	d203      	bcs.n	800979c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009798:	b29b      	uxth	r3, r3
 800979a:	e002      	b.n	80097a2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	461a      	mov	r2, r3
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 ff57 	bl	800a65a <USBD_CtlContinueRx>
 80097ac:	e038      	b.n	8009820 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097c0:	2b03      	cmp	r3, #3
 80097c2:	d105      	bne.n	80097d0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 ff54 	bl	800a67e <USBD_CtlSendStatus>
 80097d6:	e023      	b.n	8009820 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097de:	2b05      	cmp	r3, #5
 80097e0:	d11e      	bne.n	8009820 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80097ea:	2100      	movs	r1, #0
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f001 faf7 	bl	800ade0 <USBD_LL_StallEP>
 80097f2:	e015      	b.n	8009820 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00d      	beq.n	800981c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009806:	2b03      	cmp	r3, #3
 8009808:	d108      	bne.n	800981c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	7afa      	ldrb	r2, [r7, #11]
 8009814:	4611      	mov	r1, r2
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	4798      	blx	r3
 800981a:	e001      	b.n	8009820 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800981c:	2302      	movs	r3, #2
 800981e:	e000      	b.n	8009822 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b086      	sub	sp, #24
 800982e:	af00      	add	r7, sp, #0
 8009830:	60f8      	str	r0, [r7, #12]
 8009832:	460b      	mov	r3, r1
 8009834:	607a      	str	r2, [r7, #4]
 8009836:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009838:	7afb      	ldrb	r3, [r7, #11]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d17f      	bne.n	800993e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3314      	adds	r3, #20
 8009842:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800984a:	2b02      	cmp	r3, #2
 800984c:	d15c      	bne.n	8009908 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	68da      	ldr	r2, [r3, #12]
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	429a      	cmp	r2, r3
 8009858:	d915      	bls.n	8009886 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	1ad2      	subs	r2, r2, r3
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	b29b      	uxth	r3, r3
 800986e:	461a      	mov	r2, r3
 8009870:	6879      	ldr	r1, [r7, #4]
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 fec1 	bl	800a5fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009878:	2300      	movs	r3, #0
 800987a:	2200      	movs	r2, #0
 800987c:	2100      	movs	r1, #0
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f001 fb5a 	bl	800af38 <USBD_LL_PrepareReceive>
 8009884:	e04e      	b.n	8009924 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	6912      	ldr	r2, [r2, #16]
 800988e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009892:	fb01 f202 	mul.w	r2, r1, r2
 8009896:	1a9b      	subs	r3, r3, r2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d11c      	bne.n	80098d6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	689a      	ldr	r2, [r3, #8]
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d316      	bcc.n	80098d6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d20f      	bcs.n	80098d6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098b6:	2200      	movs	r2, #0
 80098b8:	2100      	movs	r1, #0
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 fe9d 	bl	800a5fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098c8:	2300      	movs	r3, #0
 80098ca:	2200      	movs	r2, #0
 80098cc:	2100      	movs	r1, #0
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f001 fb32 	bl	800af38 <USBD_LL_PrepareReceive>
 80098d4:	e026      	b.n	8009924 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00a      	beq.n	80098f8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d105      	bne.n	80098f8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80098f8:	2180      	movs	r1, #128	; 0x80
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f001 fa70 	bl	800ade0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f000 fecf 	bl	800a6a4 <USBD_CtlReceiveStatus>
 8009906:	e00d      	b.n	8009924 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800990e:	2b04      	cmp	r3, #4
 8009910:	d004      	beq.n	800991c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009918:	2b00      	cmp	r3, #0
 800991a:	d103      	bne.n	8009924 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800991c:	2180      	movs	r1, #128	; 0x80
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f001 fa5e 	bl	800ade0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800992a:	2b01      	cmp	r3, #1
 800992c:	d11d      	bne.n	800996a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f7ff fe81 	bl	8009636 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800993c:	e015      	b.n	800996a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00d      	beq.n	8009966 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009950:	2b03      	cmp	r3, #3
 8009952:	d108      	bne.n	8009966 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	7afa      	ldrb	r2, [r7, #11]
 800995e:	4611      	mov	r1, r2
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	4798      	blx	r3
 8009964:	e001      	b.n	800996a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009966:	2302      	movs	r3, #2
 8009968:	e000      	b.n	800996c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3718      	adds	r7, #24
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800997c:	2340      	movs	r3, #64	; 0x40
 800997e:	2200      	movs	r2, #0
 8009980:	2100      	movs	r1, #0
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f001 f9e7 	bl	800ad56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2240      	movs	r2, #64	; 0x40
 8009994:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009998:	2340      	movs	r3, #64	; 0x40
 800999a:	2200      	movs	r2, #0
 800999c:	2180      	movs	r1, #128	; 0x80
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f001 f9d9 	bl	800ad56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2240      	movs	r2, #64	; 0x40
 80099ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d009      	beq.n	80099ec <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	6852      	ldr	r2, [r2, #4]
 80099e4:	b2d2      	uxtb	r2, r2
 80099e6:	4611      	mov	r1, r2
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	4798      	blx	r3
  }

  return USBD_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b083      	sub	sp, #12
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	460b      	mov	r3, r1
 8009a00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	78fa      	ldrb	r2, [r7, #3]
 8009a06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bc80      	pop	{r7}
 8009a12:	4770      	bx	lr

08009a14 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2204      	movs	r2, #4
 8009a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bc80      	pop	{r7}
 8009a3a:	4770      	bx	lr

08009a3c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a4a:	2b04      	cmp	r3, #4
 8009a4c:	d105      	bne.n	8009a5a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bc80      	pop	{r7}
 8009a64:	4770      	bx	lr

08009a66 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b082      	sub	sp, #8
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d10b      	bne.n	8009a90 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7e:	69db      	ldr	r3, [r3, #28]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d005      	beq.n	8009a90 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8a:	69db      	ldr	r3, [r3, #28]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
	...

08009a9c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ab2:	2b40      	cmp	r3, #64	; 0x40
 8009ab4:	d005      	beq.n	8009ac2 <USBD_StdDevReq+0x26>
 8009ab6:	2b40      	cmp	r3, #64	; 0x40
 8009ab8:	d84f      	bhi.n	8009b5a <USBD_StdDevReq+0xbe>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d009      	beq.n	8009ad2 <USBD_StdDevReq+0x36>
 8009abe:	2b20      	cmp	r3, #32
 8009ac0:	d14b      	bne.n	8009b5a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	4798      	blx	r3
      break;
 8009ad0:	e048      	b.n	8009b64 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	785b      	ldrb	r3, [r3, #1]
 8009ad6:	2b09      	cmp	r3, #9
 8009ad8:	d839      	bhi.n	8009b4e <USBD_StdDevReq+0xb2>
 8009ada:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <USBD_StdDevReq+0x44>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009b31 	.word	0x08009b31
 8009ae4:	08009b45 	.word	0x08009b45
 8009ae8:	08009b4f 	.word	0x08009b4f
 8009aec:	08009b3b 	.word	0x08009b3b
 8009af0:	08009b4f 	.word	0x08009b4f
 8009af4:	08009b13 	.word	0x08009b13
 8009af8:	08009b09 	.word	0x08009b09
 8009afc:	08009b4f 	.word	0x08009b4f
 8009b00:	08009b27 	.word	0x08009b27
 8009b04:	08009b1d 	.word	0x08009b1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f9dc 	bl	8009ec8 <USBD_GetDescriptor>
          break;
 8009b10:	e022      	b.n	8009b58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fb3f 	bl	800a198 <USBD_SetAddress>
          break;
 8009b1a:	e01d      	b.n	8009b58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fb7e 	bl	800a220 <USBD_SetConfig>
          break;
 8009b24:	e018      	b.n	8009b58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fc07 	bl	800a33c <USBD_GetConfig>
          break;
 8009b2e:	e013      	b.n	8009b58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fc37 	bl	800a3a6 <USBD_GetStatus>
          break;
 8009b38:	e00e      	b.n	8009b58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fc65 	bl	800a40c <USBD_SetFeature>
          break;
 8009b42:	e009      	b.n	8009b58 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fc74 	bl	800a434 <USBD_ClrFeature>
          break;
 8009b4c:	e004      	b.n	8009b58 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fccc 	bl	800a4ee <USBD_CtlError>
          break;
 8009b56:	bf00      	nop
      }
      break;
 8009b58:	e004      	b.n	8009b64 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fcc6 	bl	800a4ee <USBD_CtlError>
      break;
 8009b62:	bf00      	nop
  }

  return ret;
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop

08009b70 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b86:	2b40      	cmp	r3, #64	; 0x40
 8009b88:	d005      	beq.n	8009b96 <USBD_StdItfReq+0x26>
 8009b8a:	2b40      	cmp	r3, #64	; 0x40
 8009b8c:	d82e      	bhi.n	8009bec <USBD_StdItfReq+0x7c>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <USBD_StdItfReq+0x26>
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	d12a      	bne.n	8009bec <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d81d      	bhi.n	8009bde <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	889b      	ldrh	r3, [r3, #4]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d813      	bhi.n	8009bd4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	4798      	blx	r3
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	88db      	ldrh	r3, [r3, #6]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d110      	bne.n	8009be8 <USBD_StdItfReq+0x78>
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10d      	bne.n	8009be8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fd56 	bl	800a67e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009bd2:	e009      	b.n	8009be8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fc89 	bl	800a4ee <USBD_CtlError>
          break;
 8009bdc:	e004      	b.n	8009be8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fc84 	bl	800a4ee <USBD_CtlError>
          break;
 8009be6:	e000      	b.n	8009bea <USBD_StdItfReq+0x7a>
          break;
 8009be8:	bf00      	nop
      }
      break;
 8009bea:	e004      	b.n	8009bf6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fc7d 	bl	800a4ee <USBD_CtlError>
      break;
 8009bf4:	bf00      	nop
  }

  return USBD_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	889b      	ldrh	r3, [r3, #4]
 8009c12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c1c:	2b40      	cmp	r3, #64	; 0x40
 8009c1e:	d007      	beq.n	8009c30 <USBD_StdEPReq+0x30>
 8009c20:	2b40      	cmp	r3, #64	; 0x40
 8009c22:	f200 8146 	bhi.w	8009eb2 <USBD_StdEPReq+0x2b2>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <USBD_StdEPReq+0x40>
 8009c2a:	2b20      	cmp	r3, #32
 8009c2c:	f040 8141 	bne.w	8009eb2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	4798      	blx	r3
      break;
 8009c3e:	e13d      	b.n	8009ebc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c48:	2b20      	cmp	r3, #32
 8009c4a:	d10a      	bne.n	8009c62 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	4798      	blx	r3
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
 8009c60:	e12d      	b.n	8009ebe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	785b      	ldrb	r3, [r3, #1]
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d007      	beq.n	8009c7a <USBD_StdEPReq+0x7a>
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	f300 811b 	bgt.w	8009ea6 <USBD_StdEPReq+0x2a6>
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d072      	beq.n	8009d5a <USBD_StdEPReq+0x15a>
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d03a      	beq.n	8009cee <USBD_StdEPReq+0xee>
 8009c78:	e115      	b.n	8009ea6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d002      	beq.n	8009c8a <USBD_StdEPReq+0x8a>
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d015      	beq.n	8009cb4 <USBD_StdEPReq+0xb4>
 8009c88:	e02b      	b.n	8009ce2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c8a:	7bbb      	ldrb	r3, [r7, #14]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00c      	beq.n	8009caa <USBD_StdEPReq+0xaa>
 8009c90:	7bbb      	ldrb	r3, [r7, #14]
 8009c92:	2b80      	cmp	r3, #128	; 0x80
 8009c94:	d009      	beq.n	8009caa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c96:	7bbb      	ldrb	r3, [r7, #14]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f001 f8a0 	bl	800ade0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009ca0:	2180      	movs	r1, #128	; 0x80
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f001 f89c 	bl	800ade0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ca8:	e020      	b.n	8009cec <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fc1e 	bl	800a4ee <USBD_CtlError>
              break;
 8009cb2:	e01b      	b.n	8009cec <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	885b      	ldrh	r3, [r3, #2]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10e      	bne.n	8009cda <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009cbc:	7bbb      	ldrb	r3, [r7, #14]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00b      	beq.n	8009cda <USBD_StdEPReq+0xda>
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	2b80      	cmp	r3, #128	; 0x80
 8009cc6:	d008      	beq.n	8009cda <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	88db      	ldrh	r3, [r3, #6]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d104      	bne.n	8009cda <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f001 f883 	bl	800ade0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fccf 	bl	800a67e <USBD_CtlSendStatus>

              break;
 8009ce0:	e004      	b.n	8009cec <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fc02 	bl	800a4ee <USBD_CtlError>
              break;
 8009cea:	bf00      	nop
          }
          break;
 8009cec:	e0e0      	b.n	8009eb0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d002      	beq.n	8009cfe <USBD_StdEPReq+0xfe>
 8009cf8:	2b03      	cmp	r3, #3
 8009cfa:	d015      	beq.n	8009d28 <USBD_StdEPReq+0x128>
 8009cfc:	e026      	b.n	8009d4c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00c      	beq.n	8009d1e <USBD_StdEPReq+0x11e>
 8009d04:	7bbb      	ldrb	r3, [r7, #14]
 8009d06:	2b80      	cmp	r3, #128	; 0x80
 8009d08:	d009      	beq.n	8009d1e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f001 f866 	bl	800ade0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d14:	2180      	movs	r1, #128	; 0x80
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f001 f862 	bl	800ade0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d1c:	e01c      	b.n	8009d58 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fbe4 	bl	800a4ee <USBD_CtlError>
              break;
 8009d26:	e017      	b.n	8009d58 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	885b      	ldrh	r3, [r3, #2]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d112      	bne.n	8009d56 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
 8009d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d004      	beq.n	8009d44 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d3a:	7bbb      	ldrb	r3, [r7, #14]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 f86d 	bl	800ae1e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fc9a 	bl	800a67e <USBD_CtlSendStatus>
              }
              break;
 8009d4a:	e004      	b.n	8009d56 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fbcd 	bl	800a4ee <USBD_CtlError>
              break;
 8009d54:	e000      	b.n	8009d58 <USBD_StdEPReq+0x158>
              break;
 8009d56:	bf00      	nop
          }
          break;
 8009d58:	e0aa      	b.n	8009eb0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d002      	beq.n	8009d6a <USBD_StdEPReq+0x16a>
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	d032      	beq.n	8009dce <USBD_StdEPReq+0x1ce>
 8009d68:	e097      	b.n	8009e9a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d007      	beq.n	8009d80 <USBD_StdEPReq+0x180>
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
 8009d72:	2b80      	cmp	r3, #128	; 0x80
 8009d74:	d004      	beq.n	8009d80 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fbb8 	bl	800a4ee <USBD_CtlError>
                break;
 8009d7e:	e091      	b.n	8009ea4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	da0b      	bge.n	8009da0 <USBD_StdEPReq+0x1a0>
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
 8009d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d8e:	4613      	mov	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4413      	add	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	3310      	adds	r3, #16
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	e00b      	b.n	8009db8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009da6:	4613      	mov	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	4413      	add	r3, r2
 8009db6:	3304      	adds	r3, #4
 8009db8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fbfb 	bl	800a5c2 <USBD_CtlSendData>
              break;
 8009dcc:	e06a      	b.n	8009ea4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009dce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	da11      	bge.n	8009dfa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	f003 020f 	and.w	r2, r3, #15
 8009ddc:	6879      	ldr	r1, [r7, #4]
 8009dde:	4613      	mov	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	440b      	add	r3, r1
 8009de8:	3318      	adds	r3, #24
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d117      	bne.n	8009e20 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fb7b 	bl	800a4ee <USBD_CtlError>
                  break;
 8009df8:	e054      	b.n	8009ea4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009dfa:	7bbb      	ldrb	r3, [r7, #14]
 8009dfc:	f003 020f 	and.w	r2, r3, #15
 8009e00:	6879      	ldr	r1, [r7, #4]
 8009e02:	4613      	mov	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	440b      	add	r3, r1
 8009e0c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d104      	bne.n	8009e20 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fb68 	bl	800a4ee <USBD_CtlError>
                  break;
 8009e1e:	e041      	b.n	8009ea4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	da0b      	bge.n	8009e40 <USBD_StdEPReq+0x240>
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
 8009e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	3310      	adds	r3, #16
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	e00b      	b.n	8009e58 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e40:	7bbb      	ldrb	r3, [r7, #14]
 8009e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e46:	4613      	mov	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	4413      	add	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	4413      	add	r3, r2
 8009e56:	3304      	adds	r3, #4
 8009e58:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <USBD_StdEPReq+0x266>
 8009e60:	7bbb      	ldrb	r3, [r7, #14]
 8009e62:	2b80      	cmp	r3, #128	; 0x80
 8009e64:	d103      	bne.n	8009e6e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	601a      	str	r2, [r3, #0]
 8009e6c:	e00e      	b.n	8009e8c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fff2 	bl	800ae5c <USBD_LL_IsStallEP>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2201      	movs	r2, #1
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	e002      	b.n	8009e8c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	4619      	mov	r1, r3
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fb95 	bl	800a5c2 <USBD_CtlSendData>
              break;
 8009e98:	e004      	b.n	8009ea4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fb26 	bl	800a4ee <USBD_CtlError>
              break;
 8009ea2:	bf00      	nop
          }
          break;
 8009ea4:	e004      	b.n	8009eb0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fb20 	bl	800a4ee <USBD_CtlError>
          break;
 8009eae:	bf00      	nop
      }
      break;
 8009eb0:	e004      	b.n	8009ebc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fb1a 	bl	800a4ee <USBD_CtlError>
      break;
 8009eba:	bf00      	nop
  }

  return ret;
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009eda:	2300      	movs	r3, #0
 8009edc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	885b      	ldrh	r3, [r3, #2]
 8009ee2:	0a1b      	lsrs	r3, r3, #8
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	2b06      	cmp	r3, #6
 8009eea:	f200 8128 	bhi.w	800a13e <USBD_GetDescriptor+0x276>
 8009eee:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <USBD_GetDescriptor+0x2c>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009f11 	.word	0x08009f11
 8009ef8:	08009f29 	.word	0x08009f29
 8009efc:	08009f69 	.word	0x08009f69
 8009f00:	0800a13f 	.word	0x0800a13f
 8009f04:	0800a13f 	.word	0x0800a13f
 8009f08:	0800a0df 	.word	0x0800a0df
 8009f0c:	0800a10b 	.word	0x0800a10b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	7c12      	ldrb	r2, [r2, #16]
 8009f1c:	f107 0108 	add.w	r1, r7, #8
 8009f20:	4610      	mov	r0, r2
 8009f22:	4798      	blx	r3
 8009f24:	60f8      	str	r0, [r7, #12]
      break;
 8009f26:	e112      	b.n	800a14e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	7c1b      	ldrb	r3, [r3, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10d      	bne.n	8009f4c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f38:	f107 0208 	add.w	r2, r7, #8
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4798      	blx	r3
 8009f40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3301      	adds	r3, #1
 8009f46:	2202      	movs	r2, #2
 8009f48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f4a:	e100      	b.n	800a14e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	f107 0208 	add.w	r2, r7, #8
 8009f58:	4610      	mov	r0, r2
 8009f5a:	4798      	blx	r3
 8009f5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3301      	adds	r3, #1
 8009f62:	2202      	movs	r2, #2
 8009f64:	701a      	strb	r2, [r3, #0]
      break;
 8009f66:	e0f2      	b.n	800a14e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	885b      	ldrh	r3, [r3, #2]
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b05      	cmp	r3, #5
 8009f70:	f200 80ac 	bhi.w	800a0cc <USBD_GetDescriptor+0x204>
 8009f74:	a201      	add	r2, pc, #4	; (adr r2, 8009f7c <USBD_GetDescriptor+0xb4>)
 8009f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7a:	bf00      	nop
 8009f7c:	08009f95 	.word	0x08009f95
 8009f80:	08009fc9 	.word	0x08009fc9
 8009f84:	08009ffd 	.word	0x08009ffd
 8009f88:	0800a031 	.word	0x0800a031
 8009f8c:	0800a065 	.word	0x0800a065
 8009f90:	0800a099 	.word	0x0800a099
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00b      	beq.n	8009fb8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	7c12      	ldrb	r2, [r2, #16]
 8009fac:	f107 0108 	add.w	r1, r7, #8
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4798      	blx	r3
 8009fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fb6:	e091      	b.n	800a0dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fa97 	bl	800a4ee <USBD_CtlError>
            err++;
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fc6:	e089      	b.n	800a0dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00b      	beq.n	8009fec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	7c12      	ldrb	r2, [r2, #16]
 8009fe0:	f107 0108 	add.w	r1, r7, #8
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	4798      	blx	r3
 8009fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fea:	e077      	b.n	800a0dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fa7d 	bl	800a4ee <USBD_CtlError>
            err++;
 8009ff4:	7afb      	ldrb	r3, [r7, #11]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8009ffa:	e06f      	b.n	800a0dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00b      	beq.n	800a020 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	7c12      	ldrb	r2, [r2, #16]
 800a014:	f107 0108 	add.w	r1, r7, #8
 800a018:	4610      	mov	r0, r2
 800a01a:	4798      	blx	r3
 800a01c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a01e:	e05d      	b.n	800a0dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fa63 	bl	800a4ee <USBD_CtlError>
            err++;
 800a028:	7afb      	ldrb	r3, [r7, #11]
 800a02a:	3301      	adds	r3, #1
 800a02c:	72fb      	strb	r3, [r7, #11]
          break;
 800a02e:	e055      	b.n	800a0dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00b      	beq.n	800a054 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	7c12      	ldrb	r2, [r2, #16]
 800a048:	f107 0108 	add.w	r1, r7, #8
 800a04c:	4610      	mov	r0, r2
 800a04e:	4798      	blx	r3
 800a050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a052:	e043      	b.n	800a0dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fa49 	bl	800a4ee <USBD_CtlError>
            err++;
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	3301      	adds	r3, #1
 800a060:	72fb      	strb	r3, [r7, #11]
          break;
 800a062:	e03b      	b.n	800a0dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a06a:	695b      	ldr	r3, [r3, #20]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	7c12      	ldrb	r2, [r2, #16]
 800a07c:	f107 0108 	add.w	r1, r7, #8
 800a080:	4610      	mov	r0, r2
 800a082:	4798      	blx	r3
 800a084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a086:	e029      	b.n	800a0dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fa2f 	bl	800a4ee <USBD_CtlError>
            err++;
 800a090:	7afb      	ldrb	r3, [r7, #11]
 800a092:	3301      	adds	r3, #1
 800a094:	72fb      	strb	r3, [r7, #11]
          break;
 800a096:	e021      	b.n	800a0dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00b      	beq.n	800a0bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	7c12      	ldrb	r2, [r2, #16]
 800a0b0:	f107 0108 	add.w	r1, r7, #8
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	4798      	blx	r3
 800a0b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ba:	e00f      	b.n	800a0dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fa15 	bl	800a4ee <USBD_CtlError>
            err++;
 800a0c4:	7afb      	ldrb	r3, [r7, #11]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ca:	e007      	b.n	800a0dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fa0d 	bl	800a4ee <USBD_CtlError>
          err++;
 800a0d4:	7afb      	ldrb	r3, [r7, #11]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a0da:	e038      	b.n	800a14e <USBD_GetDescriptor+0x286>
 800a0dc:	e037      	b.n	800a14e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	7c1b      	ldrb	r3, [r3, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ee:	f107 0208 	add.w	r2, r7, #8
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	4798      	blx	r3
 800a0f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0f8:	e029      	b.n	800a14e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f9f6 	bl	800a4ee <USBD_CtlError>
        err++;
 800a102:	7afb      	ldrb	r3, [r7, #11]
 800a104:	3301      	adds	r3, #1
 800a106:	72fb      	strb	r3, [r7, #11]
      break;
 800a108:	e021      	b.n	800a14e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	7c1b      	ldrb	r3, [r3, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10d      	bne.n	800a12e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11a:	f107 0208 	add.w	r2, r7, #8
 800a11e:	4610      	mov	r0, r2
 800a120:	4798      	blx	r3
 800a122:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	3301      	adds	r3, #1
 800a128:	2207      	movs	r2, #7
 800a12a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a12c:	e00f      	b.n	800a14e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f9dc 	bl	800a4ee <USBD_CtlError>
        err++;
 800a136:	7afb      	ldrb	r3, [r7, #11]
 800a138:	3301      	adds	r3, #1
 800a13a:	72fb      	strb	r3, [r7, #11]
      break;
 800a13c:	e007      	b.n	800a14e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f9d4 	bl	800a4ee <USBD_CtlError>
      err++;
 800a146:	7afb      	ldrb	r3, [r7, #11]
 800a148:	3301      	adds	r3, #1
 800a14a:	72fb      	strb	r3, [r7, #11]
      break;
 800a14c:	bf00      	nop
  }

  if (err != 0U)
 800a14e:	7afb      	ldrb	r3, [r7, #11]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d11c      	bne.n	800a18e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a154:	893b      	ldrh	r3, [r7, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d011      	beq.n	800a17e <USBD_GetDescriptor+0x2b6>
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	88db      	ldrh	r3, [r3, #6]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00d      	beq.n	800a17e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	88da      	ldrh	r2, [r3, #6]
 800a166:	893b      	ldrh	r3, [r7, #8]
 800a168:	4293      	cmp	r3, r2
 800a16a:	bf28      	it	cs
 800a16c:	4613      	movcs	r3, r2
 800a16e:	b29b      	uxth	r3, r3
 800a170:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a172:	893b      	ldrh	r3, [r7, #8]
 800a174:	461a      	mov	r2, r3
 800a176:	68f9      	ldr	r1, [r7, #12]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fa22 	bl	800a5c2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	88db      	ldrh	r3, [r3, #6]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d104      	bne.n	800a190 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 fa79 	bl	800a67e <USBD_CtlSendStatus>
 800a18c:	e000      	b.n	800a190 <USBD_GetDescriptor+0x2c8>
    return;
 800a18e:	bf00      	nop
    }
  }
}
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop

0800a198 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	889b      	ldrh	r3, [r3, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d130      	bne.n	800a20c <USBD_SetAddress+0x74>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	88db      	ldrh	r3, [r3, #6]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d12c      	bne.n	800a20c <USBD_SetAddress+0x74>
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	885b      	ldrh	r3, [r3, #2]
 800a1b6:	2b7f      	cmp	r3, #127	; 0x7f
 800a1b8:	d828      	bhi.n	800a20c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	885b      	ldrh	r3, [r3, #2]
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d104      	bne.n	800a1da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f98b 	bl	800a4ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1d8:	e01d      	b.n	800a216 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	7bfa      	ldrb	r2, [r7, #15]
 800a1de:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 fe64 	bl	800aeb4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fa46 	bl	800a67e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d004      	beq.n	800a202 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a200:	e009      	b.n	800a216 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a20a:	e004      	b.n	800a216 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f96d 	bl	800a4ee <USBD_CtlError>
  }
}
 800a214:	bf00      	nop
 800a216:	bf00      	nop
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
	...

0800a220 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	885b      	ldrh	r3, [r3, #2]
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	4b41      	ldr	r3, [pc, #260]	; (800a338 <USBD_SetConfig+0x118>)
 800a232:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a234:	4b40      	ldr	r3, [pc, #256]	; (800a338 <USBD_SetConfig+0x118>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d904      	bls.n	800a246 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f955 	bl	800a4ee <USBD_CtlError>
 800a244:	e075      	b.n	800a332 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d002      	beq.n	800a256 <USBD_SetConfig+0x36>
 800a250:	2b03      	cmp	r3, #3
 800a252:	d023      	beq.n	800a29c <USBD_SetConfig+0x7c>
 800a254:	e062      	b.n	800a31c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a256:	4b38      	ldr	r3, [pc, #224]	; (800a338 <USBD_SetConfig+0x118>)
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d01a      	beq.n	800a294 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a25e:	4b36      	ldr	r3, [pc, #216]	; (800a338 <USBD_SetConfig+0x118>)
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	461a      	mov	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2203      	movs	r2, #3
 800a26c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a270:	4b31      	ldr	r3, [pc, #196]	; (800a338 <USBD_SetConfig+0x118>)
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	4619      	mov	r1, r3
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7ff f9e7 	bl	800964a <USBD_SetClassConfig>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d104      	bne.n	800a28c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f932 	bl	800a4ee <USBD_CtlError>
            return;
 800a28a:	e052      	b.n	800a332 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f9f6 	bl	800a67e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a292:	e04e      	b.n	800a332 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f9f2 	bl	800a67e <USBD_CtlSendStatus>
        break;
 800a29a:	e04a      	b.n	800a332 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a29c:	4b26      	ldr	r3, [pc, #152]	; (800a338 <USBD_SetConfig+0x118>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d112      	bne.n	800a2ca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a2ac:	4b22      	ldr	r3, [pc, #136]	; (800a338 <USBD_SetConfig+0x118>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a2b6:	4b20      	ldr	r3, [pc, #128]	; (800a338 <USBD_SetConfig+0x118>)
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7ff f9e3 	bl	8009688 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f9db 	bl	800a67e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a2c8:	e033      	b.n	800a332 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a2ca:	4b1b      	ldr	r3, [pc, #108]	; (800a338 <USBD_SetConfig+0x118>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d01d      	beq.n	800a314 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7ff f9d1 	bl	8009688 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a2e6:	4b14      	ldr	r3, [pc, #80]	; (800a338 <USBD_SetConfig+0x118>)
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a2f0:	4b11      	ldr	r3, [pc, #68]	; (800a338 <USBD_SetConfig+0x118>)
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7ff f9a7 	bl	800964a <USBD_SetClassConfig>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d104      	bne.n	800a30c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f8f2 	bl	800a4ee <USBD_CtlError>
            return;
 800a30a:	e012      	b.n	800a332 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f9b6 	bl	800a67e <USBD_CtlSendStatus>
        break;
 800a312:	e00e      	b.n	800a332 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f9b2 	bl	800a67e <USBD_CtlSendStatus>
        break;
 800a31a:	e00a      	b.n	800a332 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f8e5 	bl	800a4ee <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a324:	4b04      	ldr	r3, [pc, #16]	; (800a338 <USBD_SetConfig+0x118>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	4619      	mov	r1, r3
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7ff f9ac 	bl	8009688 <USBD_ClrClassConfig>
        break;
 800a330:	bf00      	nop
    }
  }
}
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	20000350 	.word	0x20000350

0800a33c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	88db      	ldrh	r3, [r3, #6]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d004      	beq.n	800a358 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f8cc 	bl	800a4ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a356:	e022      	b.n	800a39e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a35e:	2b02      	cmp	r3, #2
 800a360:	dc02      	bgt.n	800a368 <USBD_GetConfig+0x2c>
 800a362:	2b00      	cmp	r3, #0
 800a364:	dc03      	bgt.n	800a36e <USBD_GetConfig+0x32>
 800a366:	e015      	b.n	800a394 <USBD_GetConfig+0x58>
 800a368:	2b03      	cmp	r3, #3
 800a36a:	d00b      	beq.n	800a384 <USBD_GetConfig+0x48>
 800a36c:	e012      	b.n	800a394 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3308      	adds	r3, #8
 800a378:	2201      	movs	r2, #1
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f920 	bl	800a5c2 <USBD_CtlSendData>
        break;
 800a382:	e00c      	b.n	800a39e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	3304      	adds	r3, #4
 800a388:	2201      	movs	r2, #1
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f918 	bl	800a5c2 <USBD_CtlSendData>
        break;
 800a392:	e004      	b.n	800a39e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a394:	6839      	ldr	r1, [r7, #0]
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f8a9 	bl	800a4ee <USBD_CtlError>
        break;
 800a39c:	bf00      	nop
}
 800a39e:	bf00      	nop
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b082      	sub	sp, #8
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d81e      	bhi.n	800a3fa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	88db      	ldrh	r3, [r3, #6]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d004      	beq.n	800a3ce <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f891 	bl	800a4ee <USBD_CtlError>
        break;
 800a3cc:	e01a      	b.n	800a404 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d005      	beq.n	800a3ea <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	f043 0202 	orr.w	r2, r3, #2
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	330c      	adds	r3, #12
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f8e5 	bl	800a5c2 <USBD_CtlSendData>
      break;
 800a3f8:	e004      	b.n	800a404 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a3fa:	6839      	ldr	r1, [r7, #0]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f876 	bl	800a4ee <USBD_CtlError>
      break;
 800a402:	bf00      	nop
  }
}
 800a404:	bf00      	nop
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	885b      	ldrh	r3, [r3, #2]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d106      	bne.n	800a42c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f929 	bl	800a67e <USBD_CtlSendStatus>
  }
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a444:	3b01      	subs	r3, #1
 800a446:	2b02      	cmp	r3, #2
 800a448:	d80b      	bhi.n	800a462 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	885b      	ldrh	r3, [r3, #2]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d10c      	bne.n	800a46c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f90f 	bl	800a67e <USBD_CtlSendStatus>
      }
      break;
 800a460:	e004      	b.n	800a46c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f842 	bl	800a4ee <USBD_CtlError>
      break;
 800a46a:	e000      	b.n	800a46e <USBD_ClrFeature+0x3a>
      break;
 800a46c:	bf00      	nop
  }
}
 800a46e:	bf00      	nop
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a476:	b480      	push	{r7}
 800a478:	b083      	sub	sp, #12
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	781a      	ldrb	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	785a      	ldrb	r2, [r3, #1]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	3302      	adds	r3, #2
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	b29a      	uxth	r2, r3
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	3303      	adds	r3, #3
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	021b      	lsls	r3, r3, #8
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	4413      	add	r3, r2
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	3305      	adds	r3, #5
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	021b      	lsls	r3, r3, #8
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	4413      	add	r3, r2
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	3306      	adds	r3, #6
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	3307      	adds	r3, #7
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	021b      	lsls	r3, r3, #8
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	4413      	add	r3, r2
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	80da      	strh	r2, [r3, #6]

}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bc80      	pop	{r7}
 800a4ec:	4770      	bx	lr

0800a4ee <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a4f8:	2180      	movs	r1, #128	; 0x80
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fc70 	bl	800ade0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a500:	2100      	movs	r1, #0
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fc6c 	bl	800ade0 <USBD_LL_StallEP>
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a51c:	2300      	movs	r3, #0
 800a51e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d032      	beq.n	800a58c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 f834 	bl	800a594 <USBD_GetLen>
 800a52c:	4603      	mov	r3, r0
 800a52e:	3301      	adds	r3, #1
 800a530:	b29b      	uxth	r3, r3
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	b29a      	uxth	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	1c5a      	adds	r2, r3, #1
 800a53e:	75fa      	strb	r2, [r7, #23]
 800a540:	461a      	mov	r2, r3
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	4413      	add	r3, r2
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	7812      	ldrb	r2, [r2, #0]
 800a54a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a54c:	7dfb      	ldrb	r3, [r7, #23]
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	75fa      	strb	r2, [r7, #23]
 800a552:	461a      	mov	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4413      	add	r3, r2
 800a558:	2203      	movs	r2, #3
 800a55a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a55c:	e012      	b.n	800a584 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	1c5a      	adds	r2, r3, #1
 800a562:	60fa      	str	r2, [r7, #12]
 800a564:	7dfa      	ldrb	r2, [r7, #23]
 800a566:	1c51      	adds	r1, r2, #1
 800a568:	75f9      	strb	r1, [r7, #23]
 800a56a:	4611      	mov	r1, r2
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	440a      	add	r2, r1
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a574:	7dfb      	ldrb	r3, [r7, #23]
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	75fa      	strb	r2, [r7, #23]
 800a57a:	461a      	mov	r2, r3
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	4413      	add	r3, r2
 800a580:	2200      	movs	r2, #0
 800a582:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1e8      	bne.n	800a55e <USBD_GetString+0x4e>
    }
  }
}
 800a58c:	bf00      	nop
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a5a0:	e005      	b.n	800a5ae <USBD_GetLen+0x1a>
  {
    len++;
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1f5      	bne.n	800a5a2 <USBD_GetLen+0xe>
  }

  return len;
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3714      	adds	r7, #20
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bc80      	pop	{r7}
 800a5c0:	4770      	bx	lr

0800a5c2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	60f8      	str	r0, [r7, #12]
 800a5ca:	60b9      	str	r1, [r7, #8]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a5d8:	88fa      	ldrh	r2, [r7, #6]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a5de:	88fa      	ldrh	r2, [r7, #6]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5e4:	88fb      	ldrh	r3, [r7, #6]
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 fc81 	bl	800aef2 <USBD_LL_Transmit>

  return USBD_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b084      	sub	sp, #16
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	60f8      	str	r0, [r7, #12]
 800a602:	60b9      	str	r1, [r7, #8]
 800a604:	4613      	mov	r3, r2
 800a606:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a608:	88fb      	ldrh	r3, [r7, #6]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	2100      	movs	r1, #0
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f000 fc6f 	bl	800aef2 <USBD_LL_Transmit>

  return USBD_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b084      	sub	sp, #16
 800a622:	af00      	add	r7, sp, #0
 800a624:	60f8      	str	r0, [r7, #12]
 800a626:	60b9      	str	r1, [r7, #8]
 800a628:	4613      	mov	r3, r2
 800a62a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2203      	movs	r2, #3
 800a630:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a634:	88fa      	ldrh	r2, [r7, #6]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a63c:	88fa      	ldrh	r2, [r7, #6]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a644:	88fb      	ldrh	r3, [r7, #6]
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	2100      	movs	r1, #0
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f000 fc74 	bl	800af38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	60f8      	str	r0, [r7, #12]
 800a662:	60b9      	str	r1, [r7, #8]
 800a664:	4613      	mov	r3, r2
 800a666:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a668:	88fb      	ldrh	r3, [r7, #6]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	2100      	movs	r1, #0
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 fc62 	bl	800af38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b082      	sub	sp, #8
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2204      	movs	r2, #4
 800a68a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a68e:	2300      	movs	r3, #0
 800a690:	2200      	movs	r2, #0
 800a692:	2100      	movs	r1, #0
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fc2c 	bl	800aef2 <USBD_LL_Transmit>

  return USBD_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2205      	movs	r2, #5
 800a6b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fc3c 	bl	800af38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
	...

0800a6cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	4912      	ldr	r1, [pc, #72]	; (800a71c <MX_USB_DEVICE_Init+0x50>)
 800a6d4:	4812      	ldr	r0, [pc, #72]	; (800a720 <MX_USB_DEVICE_Init+0x54>)
 800a6d6:	f7fe ff5e 	bl	8009596 <USBD_Init>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a6e0:	f7f6 f882 	bl	80007e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a6e4:	490f      	ldr	r1, [pc, #60]	; (800a724 <MX_USB_DEVICE_Init+0x58>)
 800a6e6:	480e      	ldr	r0, [pc, #56]	; (800a720 <MX_USB_DEVICE_Init+0x54>)
 800a6e8:	f7fe ff80 	bl	80095ec <USBD_RegisterClass>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a6f2:	f7f6 f879 	bl	80007e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a6f6:	490c      	ldr	r1, [pc, #48]	; (800a728 <MX_USB_DEVICE_Init+0x5c>)
 800a6f8:	4809      	ldr	r0, [pc, #36]	; (800a720 <MX_USB_DEVICE_Init+0x54>)
 800a6fa:	f7fe feb1 	bl	8009460 <USBD_CDC_RegisterInterface>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a704:	f7f6 f870 	bl	80007e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a708:	4805      	ldr	r0, [pc, #20]	; (800a720 <MX_USB_DEVICE_Init+0x54>)
 800a70a:	f7fe ff88 	bl	800961e <USBD_Start>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d001      	beq.n	800a718 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a714:	f7f6 f868 	bl	80007e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a718:	bf00      	nop
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	2000012c 	.word	0x2000012c
 800a720:	20000354 	.word	0x20000354
 800a724:	20000018 	.word	0x20000018
 800a728:	2000011c 	.word	0x2000011c

0800a72c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a730:	2200      	movs	r2, #0
 800a732:	4905      	ldr	r1, [pc, #20]	; (800a748 <CDC_Init_FS+0x1c>)
 800a734:	4805      	ldr	r0, [pc, #20]	; (800a74c <CDC_Init_FS+0x20>)
 800a736:	f7fe fea9 	bl	800948c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a73a:	4905      	ldr	r1, [pc, #20]	; (800a750 <CDC_Init_FS+0x24>)
 800a73c:	4803      	ldr	r0, [pc, #12]	; (800a74c <CDC_Init_FS+0x20>)
 800a73e:	f7fe febe 	bl	80094be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a742:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a744:	4618      	mov	r0, r3
 800a746:	bd80      	pop	{r7, pc}
 800a748:	20000a18 	.word	0x20000a18
 800a74c:	20000354 	.word	0x20000354
 800a750:	20000618 	.word	0x20000618

0800a754 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a754:	b480      	push	{r7}
 800a756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a758:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bc80      	pop	{r7}
 800a760:	4770      	bx	lr
	...

0800a764 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	4603      	mov	r3, r0
 800a76c:	6039      	str	r1, [r7, #0]
 800a76e:	71fb      	strb	r3, [r7, #7]
 800a770:	4613      	mov	r3, r2
 800a772:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	2b23      	cmp	r3, #35	; 0x23
 800a778:	d84a      	bhi.n	800a810 <CDC_Control_FS+0xac>
 800a77a:	a201      	add	r2, pc, #4	; (adr r2, 800a780 <CDC_Control_FS+0x1c>)
 800a77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a780:	0800a811 	.word	0x0800a811
 800a784:	0800a811 	.word	0x0800a811
 800a788:	0800a811 	.word	0x0800a811
 800a78c:	0800a811 	.word	0x0800a811
 800a790:	0800a811 	.word	0x0800a811
 800a794:	0800a811 	.word	0x0800a811
 800a798:	0800a811 	.word	0x0800a811
 800a79c:	0800a811 	.word	0x0800a811
 800a7a0:	0800a811 	.word	0x0800a811
 800a7a4:	0800a811 	.word	0x0800a811
 800a7a8:	0800a811 	.word	0x0800a811
 800a7ac:	0800a811 	.word	0x0800a811
 800a7b0:	0800a811 	.word	0x0800a811
 800a7b4:	0800a811 	.word	0x0800a811
 800a7b8:	0800a811 	.word	0x0800a811
 800a7bc:	0800a811 	.word	0x0800a811
 800a7c0:	0800a811 	.word	0x0800a811
 800a7c4:	0800a811 	.word	0x0800a811
 800a7c8:	0800a811 	.word	0x0800a811
 800a7cc:	0800a811 	.word	0x0800a811
 800a7d0:	0800a811 	.word	0x0800a811
 800a7d4:	0800a811 	.word	0x0800a811
 800a7d8:	0800a811 	.word	0x0800a811
 800a7dc:	0800a811 	.word	0x0800a811
 800a7e0:	0800a811 	.word	0x0800a811
 800a7e4:	0800a811 	.word	0x0800a811
 800a7e8:	0800a811 	.word	0x0800a811
 800a7ec:	0800a811 	.word	0x0800a811
 800a7f0:	0800a811 	.word	0x0800a811
 800a7f4:	0800a811 	.word	0x0800a811
 800a7f8:	0800a811 	.word	0x0800a811
 800a7fc:	0800a811 	.word	0x0800a811
 800a800:	0800a811 	.word	0x0800a811
 800a804:	0800a811 	.word	0x0800a811
 800a808:	0800a811 	.word	0x0800a811
 800a80c:	0800a811 	.word	0x0800a811
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a810:	bf00      	nop
  }

  return (USBD_OK);
 800a812:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	bc80      	pop	{r7}
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop

0800a820 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; ++i)
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]
 800a82e:	e00b      	b.n	800a848 <CDC_Receive_FS+0x28>
  {
	  Buffer_Write(FIFO_buf, Buf[i]);
 800a830:	4b11      	ldr	r3, [pc, #68]	; (800a878 <CDC_Receive_FS+0x58>)
 800a832:	6818      	ldr	r0, [r3, #0]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	4413      	add	r3, r2
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	4619      	mov	r1, r3
 800a83e:	f7f5 fd21 	bl	8000284 <Buffer_Write>
  for (int i = 0; i < *Len; ++i)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	3301      	adds	r3, #1
 800a846:	60fb      	str	r3, [r7, #12]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d8ee      	bhi.n	800a830 <CDC_Receive_FS+0x10>
  }
  memset(Buf, 0, *Len);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	461a      	mov	r2, r3
 800a858:	2100      	movs	r1, #0
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f001 ffe0 	bl	800c820 <memset>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a860:	6879      	ldr	r1, [r7, #4]
 800a862:	4806      	ldr	r0, [pc, #24]	; (800a87c <CDC_Receive_FS+0x5c>)
 800a864:	f7fe fe2b 	bl	80094be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a868:	4804      	ldr	r0, [pc, #16]	; (800a87c <CDC_Receive_FS+0x5c>)
 800a86a:	f7fe fe6a 	bl	8009542 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a86e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	200002ec 	.word	0x200002ec
 800a87c:	20000354 	.word	0x20000354

0800a880 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	460b      	mov	r3, r1
 800a88a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a890:	4b0d      	ldr	r3, [pc, #52]	; (800a8c8 <CDC_Transmit_FS+0x48>)
 800a892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a896:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e00b      	b.n	800a8be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a8a6:	887b      	ldrh	r3, [r7, #2]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	6879      	ldr	r1, [r7, #4]
 800a8ac:	4806      	ldr	r0, [pc, #24]	; (800a8c8 <CDC_Transmit_FS+0x48>)
 800a8ae:	f7fe fded 	bl	800948c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a8b2:	4805      	ldr	r0, [pc, #20]	; (800a8c8 <CDC_Transmit_FS+0x48>)
 800a8b4:	f7fe fe16 	bl	80094e4 <USBD_CDC_TransmitPacket>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20000354 	.word	0x20000354

0800a8cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	6039      	str	r1, [r7, #0]
 800a8d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2212      	movs	r2, #18
 800a8dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a8de:	4b03      	ldr	r3, [pc, #12]	; (800a8ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bc80      	pop	{r7}
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	20000148 	.word	0x20000148

0800a8f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	6039      	str	r1, [r7, #0]
 800a8fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	2204      	movs	r2, #4
 800a900:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a902:	4b03      	ldr	r3, [pc, #12]	; (800a910 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a904:	4618      	mov	r0, r3
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	bc80      	pop	{r7}
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	2000015c 	.word	0x2000015c

0800a914 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	4603      	mov	r3, r0
 800a91c:	6039      	str	r1, [r7, #0]
 800a91e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a920:	79fb      	ldrb	r3, [r7, #7]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d105      	bne.n	800a932 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	4907      	ldr	r1, [pc, #28]	; (800a948 <USBD_FS_ProductStrDescriptor+0x34>)
 800a92a:	4808      	ldr	r0, [pc, #32]	; (800a94c <USBD_FS_ProductStrDescriptor+0x38>)
 800a92c:	f7ff fdf0 	bl	800a510 <USBD_GetString>
 800a930:	e004      	b.n	800a93c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	4904      	ldr	r1, [pc, #16]	; (800a948 <USBD_FS_ProductStrDescriptor+0x34>)
 800a936:	4805      	ldr	r0, [pc, #20]	; (800a94c <USBD_FS_ProductStrDescriptor+0x38>)
 800a938:	f7ff fdea 	bl	800a510 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a93c:	4b02      	ldr	r3, [pc, #8]	; (800a948 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	20000e18 	.word	0x20000e18
 800a94c:	0800d130 	.word	0x0800d130

0800a950 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	4603      	mov	r3, r0
 800a958:	6039      	str	r1, [r7, #0]
 800a95a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	4904      	ldr	r1, [pc, #16]	; (800a970 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a960:	4804      	ldr	r0, [pc, #16]	; (800a974 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a962:	f7ff fdd5 	bl	800a510 <USBD_GetString>
  return USBD_StrDesc;
 800a966:	4b02      	ldr	r3, [pc, #8]	; (800a970 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	20000e18 	.word	0x20000e18
 800a974:	0800d148 	.word	0x0800d148

0800a978 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	4603      	mov	r3, r0
 800a980:	6039      	str	r1, [r7, #0]
 800a982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	221a      	movs	r2, #26
 800a988:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a98a:	f000 f843 	bl	800aa14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a98e:	4b02      	ldr	r3, [pc, #8]	; (800a998 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a990:	4618      	mov	r0, r3
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	20000160 	.word	0x20000160

0800a99c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	6039      	str	r1, [r7, #0]
 800a9a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d105      	bne.n	800a9ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	4907      	ldr	r1, [pc, #28]	; (800a9d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9b2:	4808      	ldr	r0, [pc, #32]	; (800a9d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9b4:	f7ff fdac 	bl	800a510 <USBD_GetString>
 800a9b8:	e004      	b.n	800a9c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	4904      	ldr	r1, [pc, #16]	; (800a9d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9be:	4805      	ldr	r0, [pc, #20]	; (800a9d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9c0:	f7ff fda6 	bl	800a510 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9c4:	4b02      	ldr	r3, [pc, #8]	; (800a9d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000e18 	.word	0x20000e18
 800a9d4:	0800d15c 	.word	0x0800d15c

0800a9d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	4603      	mov	r3, r0
 800a9e0:	6039      	str	r1, [r7, #0]
 800a9e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d105      	bne.n	800a9f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	4907      	ldr	r1, [pc, #28]	; (800aa0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9ee:	4808      	ldr	r0, [pc, #32]	; (800aa10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9f0:	f7ff fd8e 	bl	800a510 <USBD_GetString>
 800a9f4:	e004      	b.n	800aa00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	4904      	ldr	r1, [pc, #16]	; (800aa0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9fa:	4805      	ldr	r0, [pc, #20]	; (800aa10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9fc:	f7ff fd88 	bl	800a510 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa00:	4b02      	ldr	r3, [pc, #8]	; (800aa0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20000e18 	.word	0x20000e18
 800aa10:	0800d168 	.word	0x0800d168

0800aa14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa1a:	4b0f      	ldr	r3, [pc, #60]	; (800aa58 <Get_SerialNum+0x44>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa20:	4b0e      	ldr	r3, [pc, #56]	; (800aa5c <Get_SerialNum+0x48>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa26:	4b0e      	ldr	r3, [pc, #56]	; (800aa60 <Get_SerialNum+0x4c>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4413      	add	r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d009      	beq.n	800aa4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa3a:	2208      	movs	r2, #8
 800aa3c:	4909      	ldr	r1, [pc, #36]	; (800aa64 <Get_SerialNum+0x50>)
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f000 f814 	bl	800aa6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa44:	2204      	movs	r2, #4
 800aa46:	4908      	ldr	r1, [pc, #32]	; (800aa68 <Get_SerialNum+0x54>)
 800aa48:	68b8      	ldr	r0, [r7, #8]
 800aa4a:	f000 f80f 	bl	800aa6c <IntToUnicode>
  }
}
 800aa4e:	bf00      	nop
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	1ffff7e8 	.word	0x1ffff7e8
 800aa5c:	1ffff7ec 	.word	0x1ffff7ec
 800aa60:	1ffff7f0 	.word	0x1ffff7f0
 800aa64:	20000162 	.word	0x20000162
 800aa68:	20000172 	.word	0x20000172

0800aa6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b087      	sub	sp, #28
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	4613      	mov	r3, r2
 800aa78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa7e:	2300      	movs	r3, #0
 800aa80:	75fb      	strb	r3, [r7, #23]
 800aa82:	e027      	b.n	800aad4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	0f1b      	lsrs	r3, r3, #28
 800aa88:	2b09      	cmp	r3, #9
 800aa8a:	d80b      	bhi.n	800aaa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	0f1b      	lsrs	r3, r3, #28
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	4619      	mov	r1, r3
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	440b      	add	r3, r1
 800aa9c:	3230      	adds	r2, #48	; 0x30
 800aa9e:	b2d2      	uxtb	r2, r2
 800aaa0:	701a      	strb	r2, [r3, #0]
 800aaa2:	e00a      	b.n	800aaba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	0f1b      	lsrs	r3, r3, #28
 800aaa8:	b2da      	uxtb	r2, r3
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	005b      	lsls	r3, r3, #1
 800aaae:	4619      	mov	r1, r3
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	440b      	add	r3, r1
 800aab4:	3237      	adds	r2, #55	; 0x37
 800aab6:	b2d2      	uxtb	r2, r2
 800aab8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	011b      	lsls	r3, r3, #4
 800aabe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
 800aac2:	005b      	lsls	r3, r3, #1
 800aac4:	3301      	adds	r3, #1
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	4413      	add	r3, r2
 800aaca:	2200      	movs	r2, #0
 800aacc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aace:	7dfb      	ldrb	r3, [r7, #23]
 800aad0:	3301      	adds	r3, #1
 800aad2:	75fb      	strb	r3, [r7, #23]
 800aad4:	7dfa      	ldrb	r2, [r7, #23]
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d3d3      	bcc.n	800aa84 <IntToUnicode+0x18>
  }
}
 800aadc:	bf00      	nop
 800aade:	bf00      	nop
 800aae0:	371c      	adds	r7, #28
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bc80      	pop	{r7}
 800aae6:	4770      	bx	lr

0800aae8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a0d      	ldr	r2, [pc, #52]	; (800ab2c <HAL_PCD_MspInit+0x44>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d113      	bne.n	800ab22 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aafa:	4b0d      	ldr	r3, [pc, #52]	; (800ab30 <HAL_PCD_MspInit+0x48>)
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	4a0c      	ldr	r2, [pc, #48]	; (800ab30 <HAL_PCD_MspInit+0x48>)
 800ab00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab04:	61d3      	str	r3, [r2, #28]
 800ab06:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <HAL_PCD_MspInit+0x48>)
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab0e:	60fb      	str	r3, [r7, #12]
 800ab10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ab12:	2200      	movs	r2, #0
 800ab14:	2100      	movs	r1, #0
 800ab16:	2014      	movs	r0, #20
 800ab18:	f7f6 f977 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ab1c:	2014      	movs	r0, #20
 800ab1e:	f7f6 f990 	bl	8000e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ab22:	bf00      	nop
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	40005c00 	.word	0x40005c00
 800ab30:	40021000 	.word	0x40021000

0800ab34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	f7fe fdaf 	bl	80096ae <USBD_LL_SetupStage>
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ab6a:	78fa      	ldrb	r2, [r7, #3]
 800ab6c:	6879      	ldr	r1, [r7, #4]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4413      	add	r3, r2
 800ab74:	00db      	lsls	r3, r3, #3
 800ab76:	440b      	add	r3, r1
 800ab78:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	78fb      	ldrb	r3, [r7, #3]
 800ab80:	4619      	mov	r1, r3
 800ab82:	f7fe fde1 	bl	8009748 <USBD_LL_DataOutStage>
}
 800ab86:	bf00      	nop
 800ab88:	3708      	adds	r7, #8
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b082      	sub	sp, #8
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	460b      	mov	r3, r1
 800ab98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aba0:	78fa      	ldrb	r2, [r7, #3]
 800aba2:	6879      	ldr	r1, [r7, #4]
 800aba4:	4613      	mov	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	4413      	add	r3, r2
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	440b      	add	r3, r1
 800abae:	333c      	adds	r3, #60	; 0x3c
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	78fb      	ldrb	r3, [r7, #3]
 800abb4:	4619      	mov	r1, r3
 800abb6:	f7fe fe38 	bl	800982a <USBD_LL_DataInStage>
}
 800abba:	bf00      	nop
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b082      	sub	sp, #8
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fe ff48 	bl	8009a66 <USBD_LL_SOF>
}
 800abd6:	bf00      	nop
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800abe6:	2301      	movs	r3, #1
 800abe8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d001      	beq.n	800abf6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800abf2:	f7f5 fdf9 	bl	80007e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800abfc:	7bfa      	ldrb	r2, [r7, #15]
 800abfe:	4611      	mov	r1, r2
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fe fef8 	bl	80099f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7fe feb1 	bl	8009974 <USBD_LL_Reset>
}
 800ac12:	bf00      	nop
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
	...

0800ac1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fe fef2 	bl	8009a14 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d005      	beq.n	800ac44 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac38:	4b04      	ldr	r3, [pc, #16]	; (800ac4c <HAL_PCD_SuspendCallback+0x30>)
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	4a03      	ldr	r2, [pc, #12]	; (800ac4c <HAL_PCD_SuspendCallback+0x30>)
 800ac3e:	f043 0306 	orr.w	r3, r3, #6
 800ac42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	e000ed00 	.word	0xe000ed00

0800ac50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fe feec 	bl	8009a3c <USBD_LL_Resume>
}
 800ac64:	bf00      	nop
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ac74:	4a28      	ldr	r2, [pc, #160]	; (800ad18 <USBD_LL_Init+0xac>)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a26      	ldr	r2, [pc, #152]	; (800ad18 <USBD_LL_Init+0xac>)
 800ac80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ac84:	4b24      	ldr	r3, [pc, #144]	; (800ad18 <USBD_LL_Init+0xac>)
 800ac86:	4a25      	ldr	r2, [pc, #148]	; (800ad1c <USBD_LL_Init+0xb0>)
 800ac88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ac8a:	4b23      	ldr	r3, [pc, #140]	; (800ad18 <USBD_LL_Init+0xac>)
 800ac8c:	2208      	movs	r2, #8
 800ac8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ac90:	4b21      	ldr	r3, [pc, #132]	; (800ad18 <USBD_LL_Init+0xac>)
 800ac92:	2202      	movs	r2, #2
 800ac94:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ac96:	4b20      	ldr	r3, [pc, #128]	; (800ad18 <USBD_LL_Init+0xac>)
 800ac98:	2200      	movs	r2, #0
 800ac9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ac9c:	4b1e      	ldr	r3, [pc, #120]	; (800ad18 <USBD_LL_Init+0xac>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aca2:	4b1d      	ldr	r3, [pc, #116]	; (800ad18 <USBD_LL_Init+0xac>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aca8:	481b      	ldr	r0, [pc, #108]	; (800ad18 <USBD_LL_Init+0xac>)
 800acaa:	f7f8 ffe9 	bl	8003c80 <HAL_PCD_Init>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800acb4:	f7f5 fd98 	bl	80007e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acbe:	2318      	movs	r3, #24
 800acc0:	2200      	movs	r2, #0
 800acc2:	2100      	movs	r1, #0
 800acc4:	f7fa fc5d 	bl	8005582 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acce:	2358      	movs	r3, #88	; 0x58
 800acd0:	2200      	movs	r2, #0
 800acd2:	2180      	movs	r1, #128	; 0x80
 800acd4:	f7fa fc55 	bl	8005582 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acde:	23c0      	movs	r3, #192	; 0xc0
 800ace0:	2200      	movs	r2, #0
 800ace2:	2181      	movs	r1, #129	; 0x81
 800ace4:	f7fa fc4d 	bl	8005582 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acee:	f44f 7388 	mov.w	r3, #272	; 0x110
 800acf2:	2200      	movs	r2, #0
 800acf4:	2101      	movs	r1, #1
 800acf6:	f7fa fc44 	bl	8005582 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad04:	2200      	movs	r2, #0
 800ad06:	2182      	movs	r1, #130	; 0x82
 800ad08:	f7fa fc3b 	bl	8005582 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20001018 	.word	0x20001018
 800ad1c:	40005c00 	.word	0x40005c00

0800ad20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f9 f8ad 	bl	8003e96 <HAL_PCD_Start>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 f94e 	bl	800afe4 <USBD_Get_USB_Status>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
 800ad5e:	4608      	mov	r0, r1
 800ad60:	4611      	mov	r1, r2
 800ad62:	461a      	mov	r2, r3
 800ad64:	4603      	mov	r3, r0
 800ad66:	70fb      	strb	r3, [r7, #3]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70bb      	strb	r3, [r7, #2]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad7e:	78bb      	ldrb	r3, [r7, #2]
 800ad80:	883a      	ldrh	r2, [r7, #0]
 800ad82:	78f9      	ldrb	r1, [r7, #3]
 800ad84:	f7f9 fa25 	bl	80041d2 <HAL_PCD_EP_Open>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad8c:	7bfb      	ldrb	r3, [r7, #15]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 f928 	bl	800afe4 <USBD_Get_USB_Status>
 800ad94:	4603      	mov	r3, r0
 800ad96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad98:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b084      	sub	sp, #16
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	460b      	mov	r3, r1
 800adac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adae:	2300      	movs	r3, #0
 800adb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adbc:	78fa      	ldrb	r2, [r7, #3]
 800adbe:	4611      	mov	r1, r2
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7f9 fa6c 	bl	800429e <HAL_PCD_EP_Close>
 800adc6:	4603      	mov	r3, r0
 800adc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adca:	7bfb      	ldrb	r3, [r7, #15]
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 f909 	bl	800afe4 <USBD_Get_USB_Status>
 800add2:	4603      	mov	r3, r0
 800add4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800add6:	7bbb      	ldrb	r3, [r7, #14]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adfa:	78fa      	ldrb	r2, [r7, #3]
 800adfc:	4611      	mov	r1, r2
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7f9 fb2c 	bl	800445c <HAL_PCD_EP_SetStall>
 800ae04:	4603      	mov	r3, r0
 800ae06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae08:	7bfb      	ldrb	r3, [r7, #15]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 f8ea 	bl	800afe4 <USBD_Get_USB_Status>
 800ae10:	4603      	mov	r3, r0
 800ae12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae14:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	460b      	mov	r3, r1
 800ae28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae38:	78fa      	ldrb	r2, [r7, #3]
 800ae3a:	4611      	mov	r1, r2
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7f9 fb6d 	bl	800451c <HAL_PCD_EP_ClrStall>
 800ae42:	4603      	mov	r3, r0
 800ae44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f000 f8cb 	bl	800afe4 <USBD_Get_USB_Status>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae52:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	da0c      	bge.n	800ae92 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae78:	78fb      	ldrb	r3, [r7, #3]
 800ae7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae7e:	68f9      	ldr	r1, [r7, #12]
 800ae80:	1c5a      	adds	r2, r3, #1
 800ae82:	4613      	mov	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
 800ae88:	00db      	lsls	r3, r3, #3
 800ae8a:	440b      	add	r3, r1
 800ae8c:	3302      	adds	r3, #2
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	e00b      	b.n	800aeaa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae92:	78fb      	ldrb	r3, [r7, #3]
 800ae94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae98:	68f9      	ldr	r1, [r7, #12]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	00db      	lsls	r3, r3, #3
 800aea2:	440b      	add	r3, r1
 800aea4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aea8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3714      	adds	r7, #20
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bc80      	pop	{r7}
 800aeb2:	4770      	bx	lr

0800aeb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	460b      	mov	r3, r1
 800aebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aece:	78fa      	ldrb	r2, [r7, #3]
 800aed0:	4611      	mov	r1, r2
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7f9 f958 	bl	8004188 <HAL_PCD_SetAddress>
 800aed8:	4603      	mov	r3, r0
 800aeda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 f880 	bl	800afe4 <USBD_Get_USB_Status>
 800aee4:	4603      	mov	r3, r0
 800aee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b086      	sub	sp, #24
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	60f8      	str	r0, [r7, #12]
 800aefa:	607a      	str	r2, [r7, #4]
 800aefc:	461a      	mov	r2, r3
 800aefe:	460b      	mov	r3, r1
 800af00:	72fb      	strb	r3, [r7, #11]
 800af02:	4613      	mov	r3, r2
 800af04:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af14:	893b      	ldrh	r3, [r7, #8]
 800af16:	7af9      	ldrb	r1, [r7, #11]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	f7f9 fa5c 	bl	80043d6 <HAL_PCD_EP_Transmit>
 800af1e:	4603      	mov	r3, r0
 800af20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af22:	7dfb      	ldrb	r3, [r7, #23]
 800af24:	4618      	mov	r0, r3
 800af26:	f000 f85d 	bl	800afe4 <USBD_Get_USB_Status>
 800af2a:	4603      	mov	r3, r0
 800af2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af2e:	7dbb      	ldrb	r3, [r7, #22]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3718      	adds	r7, #24
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	607a      	str	r2, [r7, #4]
 800af42:	461a      	mov	r2, r3
 800af44:	460b      	mov	r3, r1
 800af46:	72fb      	strb	r3, [r7, #11]
 800af48:	4613      	mov	r3, r2
 800af4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af5a:	893b      	ldrh	r3, [r7, #8]
 800af5c:	7af9      	ldrb	r1, [r7, #11]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	f7f9 f9e5 	bl	800432e <HAL_PCD_EP_Receive>
 800af64:	4603      	mov	r3, r0
 800af66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 f83a 	bl	800afe4 <USBD_Get_USB_Status>
 800af70:	4603      	mov	r3, r0
 800af72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af74:	7dbb      	ldrb	r3, [r7, #22]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b082      	sub	sp, #8
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	460b      	mov	r3, r1
 800af88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af90:	78fa      	ldrb	r2, [r7, #3]
 800af92:	4611      	mov	r1, r2
 800af94:	4618      	mov	r0, r3
 800af96:	f7f9 fa07 	bl	80043a8 <HAL_PCD_EP_GetRxCount>
 800af9a:	4603      	mov	r3, r0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800afac:	4b02      	ldr	r3, [pc, #8]	; (800afb8 <USBD_static_malloc+0x14>)
}
 800afae:	4618      	mov	r0, r3
 800afb0:	370c      	adds	r7, #12
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bc80      	pop	{r7}
 800afb6:	4770      	bx	lr
 800afb8:	20001304 	.word	0x20001304

0800afbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]

}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	bc80      	pop	{r7}
 800afcc:	4770      	bx	lr

0800afce <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afce:	b480      	push	{r7}
 800afd0:	b083      	sub	sp, #12
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	460b      	mov	r3, r1
 800afd8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800afda:	bf00      	nop
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	bc80      	pop	{r7}
 800afe2:	4770      	bx	lr

0800afe4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	4603      	mov	r3, r0
 800afec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afee:	2300      	movs	r3, #0
 800aff0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aff2:	79fb      	ldrb	r3, [r7, #7]
 800aff4:	2b03      	cmp	r3, #3
 800aff6:	d817      	bhi.n	800b028 <USBD_Get_USB_Status+0x44>
 800aff8:	a201      	add	r2, pc, #4	; (adr r2, 800b000 <USBD_Get_USB_Status+0x1c>)
 800affa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affe:	bf00      	nop
 800b000:	0800b011 	.word	0x0800b011
 800b004:	0800b017 	.word	0x0800b017
 800b008:	0800b01d 	.word	0x0800b01d
 800b00c:	0800b023 	.word	0x0800b023
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b010:	2300      	movs	r3, #0
 800b012:	73fb      	strb	r3, [r7, #15]
    break;
 800b014:	e00b      	b.n	800b02e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b016:	2302      	movs	r3, #2
 800b018:	73fb      	strb	r3, [r7, #15]
    break;
 800b01a:	e008      	b.n	800b02e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b01c:	2301      	movs	r3, #1
 800b01e:	73fb      	strb	r3, [r7, #15]
    break;
 800b020:	e005      	b.n	800b02e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b022:	2302      	movs	r3, #2
 800b024:	73fb      	strb	r3, [r7, #15]
    break;
 800b026:	e002      	b.n	800b02e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b028:	2302      	movs	r3, #2
 800b02a:	73fb      	strb	r3, [r7, #15]
    break;
 800b02c:	bf00      	nop
  }
  return usb_status;
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	bc80      	pop	{r7}
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop

0800b03c <afe4404_RstSet>:
extern uint8_t transmit_cplt;
extern I2C_HandleTypeDef cur_i2c;

/* Private user code ---------------------------------------------------------*/
void afe4404_RstSet(void)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(afe4404_RST_GPIO_PORT, afe4404_RST_PIN, SET);
 800b040:	2201      	movs	r2, #1
 800b042:	2110      	movs	r1, #16
 800b044:	4802      	ldr	r0, [pc, #8]	; (800b050 <afe4404_RstSet+0x14>)
 800b046:	f7f6 f91d 	bl	8001284 <HAL_GPIO_WritePin>
}
 800b04a:	bf00      	nop
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	40010c00 	.word	0x40010c00

0800b054 <afe4404_RstReset>:


void afe4404_RstReset(void)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(afe4404_RST_GPIO_PORT, afe4404_RST_PIN, RESET);
 800b058:	2200      	movs	r2, #0
 800b05a:	2110      	movs	r1, #16
 800b05c:	4802      	ldr	r0, [pc, #8]	; (800b068 <afe4404_RstReset+0x14>)
 800b05e:	f7f6 f911 	bl	8001284 <HAL_GPIO_WritePin>
}
 800b062:	bf00      	nop
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	40010c00 	.word	0x40010c00

0800b06c <afe4404_I2C_Write>:

void afe4404_I2C_Write(uint8_t * data, uint8_t count)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af02      	add	r7, sp, #8
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&cur_i2c, afe4404_address<< 1, data, count, 10);
 800b078:	78fb      	ldrb	r3, [r7, #3]
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	220a      	movs	r2, #10
 800b07e:	9200      	str	r2, [sp, #0]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	21b0      	movs	r1, #176	; 0xb0
 800b084:	4803      	ldr	r0, [pc, #12]	; (800b094 <afe4404_I2C_Write+0x28>)
 800b086:	f7f6 fa7b 	bl	8001580 <HAL_I2C_Master_Transmit>
}
 800b08a:	bf00      	nop
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	200002f4 	.word	0x200002f4

0800b098 <afe4404_I2C_Read>:

void afe4404_I2C_Read(uint8_t * reg, uint8_t * buffer, uint8_t cmd_size, uint8_t count)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af04      	add	r7, sp, #16
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	71fb      	strb	r3, [r7, #7]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&cur_i2c, afe4404_address<< 1, *reg, cmd_size, buffer, count, 10);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	79fb      	ldrb	r3, [r7, #7]
 800b0b6:	b299      	uxth	r1, r3
 800b0b8:	79bb      	ldrb	r3, [r7, #6]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	200a      	movs	r0, #10
 800b0be:	9002      	str	r0, [sp, #8]
 800b0c0:	9301      	str	r3, [sp, #4]
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	21b0      	movs	r1, #176	; 0xb0
 800b0ca:	4803      	ldr	r0, [pc, #12]	; (800b0d8 <afe4404_I2C_Read+0x40>)
 800b0cc:	f7f6 fb56 	bl	800177c <HAL_I2C_Mem_Read>
}
 800b0d0:	bf00      	nop
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	200002f4 	.word	0x200002f4

0800b0dc <afe4404_Delay_ms>:

void afe4404_Delay_ms(uint32_t ms)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f7f5 fd95 	bl	8000c14 <HAL_Delay>
}
 800b0ea:	bf00      	nop
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <afe4404_send_results>:

void afe4404_send_results(uint8_t num, uint16_t hr, uint32_t led1, uint32_t led2, uint32_t led3)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b0a8      	sub	sp, #160	; 0xa0
 800b0f8:	af04      	add	r7, sp, #16
 800b0fa:	60ba      	str	r2, [r7, #8]
 800b0fc:	607b      	str	r3, [r7, #4]
 800b0fe:	4603      	mov	r3, r0
 800b100:	73fb      	strb	r3, [r7, #15]
 800b102:	460b      	mov	r3, r1
 800b104:	81bb      	strh	r3, [r7, #12]
	char send_buf[128];
	sprintf(send_buf, "%d, %d, %ld, %ld, %ld\r\n", num, hr, led1, led2, led3);
 800b106:	7bfa      	ldrb	r2, [r7, #15]
 800b108:	89b9      	ldrh	r1, [r7, #12]
 800b10a:	f107 0010 	add.w	r0, r7, #16
 800b10e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b112:	9302      	str	r3, [sp, #8]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	460b      	mov	r3, r1
 800b11e:	490a      	ldr	r1, [pc, #40]	; (800b148 <afe4404_send_results+0x54>)
 800b120:	f001 fc72 	bl	800ca08 <siprintf>
	CDC_Transmit_FS((unsigned char*) send_buf, strlen(send_buf));
 800b124:	f107 0310 	add.w	r3, r7, #16
 800b128:	4618      	mov	r0, r3
 800b12a:	f7f5 f80f 	bl	800014c <strlen>
 800b12e:	4603      	mov	r3, r0
 800b130:	b29a      	uxth	r2, r3
 800b132:	f107 0310 	add.w	r3, r7, #16
 800b136:	4611      	mov	r1, r2
 800b138:	4618      	mov	r0, r3
 800b13a:	f7ff fba1 	bl	800a880 <CDC_Transmit_FS>
}
 800b13e:	bf00      	nop
 800b140:	3790      	adds	r7, #144	; 0x90
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	0800d178 	.word	0x0800d178

0800b14c <hr3_get_heartrate>:

    return &led_values;
}

uint8_t hr3_get_heartrate( void )
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
        uint8_t i = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	71fb      	strb	r3, [r7, #7]
        uint32_t temp = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	603b      	str	r3, [r7, #0]
        
        for( i = 0; i < 12; i++ )
 800b15a:	2300      	movs	r3, #0
 800b15c:	71fb      	strb	r3, [r7, #7]
 800b15e:	e009      	b.n	800b174 <hr3_get_heartrate+0x28>
            temp += HR[i];
 800b160:	79fb      	ldrb	r3, [r7, #7]
 800b162:	4a0c      	ldr	r2, [pc, #48]	; (800b194 <hr3_get_heartrate+0x48>)
 800b164:	5cd3      	ldrb	r3, [r2, r3]
 800b166:	461a      	mov	r2, r3
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	4413      	add	r3, r2
 800b16c:	603b      	str	r3, [r7, #0]
        for( i = 0; i < 12; i++ )
 800b16e:	79fb      	ldrb	r3, [r7, #7]
 800b170:	3301      	adds	r3, #1
 800b172:	71fb      	strb	r3, [r7, #7]
 800b174:	79fb      	ldrb	r3, [r7, #7]
 800b176:	2b0b      	cmp	r3, #11
 800b178:	d9f2      	bls.n	800b160 <hr3_get_heartrate+0x14>
        temp /= 12;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	4a06      	ldr	r2, [pc, #24]	; (800b198 <hr3_get_heartrate+0x4c>)
 800b17e:	fba2 2303 	umull	r2, r3, r2, r3
 800b182:	08db      	lsrs	r3, r3, #3
 800b184:	603b      	str	r3, [r7, #0]
        
        return temp;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	b2db      	uxtb	r3, r3
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	bc80      	pop	{r7}
 800b192:	4770      	bx	lr
 800b194:	20001580 	.word	0x20001580
 800b198:	aaaaaaab 	.word	0xaaaaaaab

0800b19c <initStatHRM>:

//TI HRM Library Functions
void initStatHRM (void)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
  unsigned char i;

  // Init HR variables
  lastPeak=0;
 800b1a2:	4b2a      	ldr	r3, [pc, #168]	; (800b24c <initStatHRM+0xb0>)
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	601a      	str	r2, [r3, #0]
  lastOnset=0;
 800b1a8:	4b29      	ldr	r3, [pc, #164]	; (800b250 <initStatHRM+0xb4>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	601a      	str	r2, [r3, #0]
  movingWindowHP=0;
 800b1ae:	4b29      	ldr	r3, [pc, #164]	; (800b254 <initStatHRM+0xb8>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	601a      	str	r2, [r3, #0]
  movingWindowCount=0;
 800b1b4:	4b28      	ldr	r3, [pc, #160]	; (800b258 <initStatHRM+0xbc>)
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	701a      	strb	r2, [r3, #0]

  for (i=20; i>=1; i--)
 800b1ba:	2314      	movs	r3, #20
 800b1bc:	71fb      	strb	r3, [r7, #7]
 800b1be:	e00a      	b.n	800b1d6 <initStatHRM+0x3a>
    peakWindowHP[(unsigned char)(i-1)]=0;
 800b1c0:	79fb      	ldrb	r3, [r7, #7]
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	4b24      	ldr	r3, [pc, #144]	; (800b25c <initStatHRM+0xc0>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
  for (i=20; i>=1; i--)
 800b1d0:	79fb      	ldrb	r3, [r7, #7]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	71fb      	strb	r3, [r7, #7]
 800b1d6:	79fb      	ldrb	r3, [r7, #7]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1f1      	bne.n	800b1c0 <initStatHRM+0x24>

  for (i=12; i>=1; i--)
 800b1dc:	230c      	movs	r3, #12
 800b1de:	71fb      	strb	r3, [r7, #7]
 800b1e0:	e009      	b.n	800b1f6 <initStatHRM+0x5a>
    HR[(unsigned char)(i-1)]=0;
 800b1e2:	79fb      	ldrb	r3, [r7, #7]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	4b1d      	ldr	r3, [pc, #116]	; (800b260 <initStatHRM+0xc4>)
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	5499      	strb	r1, [r3, r2]
  for (i=12; i>=1; i--)
 800b1f0:	79fb      	ldrb	r3, [r7, #7]
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	71fb      	strb	r3, [r7, #7]
 800b1f6:	79fb      	ldrb	r3, [r7, #7]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1f2      	bne.n	800b1e2 <initStatHRM+0x46>

  // Sampling frequency
  frequency = 100;
 800b1fc:	4b19      	ldr	r3, [pc, #100]	; (800b264 <initStatHRM+0xc8>)
 800b1fe:	2264      	movs	r2, #100	; 0x64
 800b200:	601a      	str	r2, [r3, #0]
  // Moving average window size (removes high frequency noise)
  movingWindowSize = frequency/50;
 800b202:	4b18      	ldr	r3, [pc, #96]	; (800b264 <initStatHRM+0xc8>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a18      	ldr	r2, [pc, #96]	; (800b268 <initStatHRM+0xcc>)
 800b208:	fba2 2303 	umull	r2, r3, r2, r3
 800b20c:	091b      	lsrs	r3, r3, #4
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	4b16      	ldr	r3, [pc, #88]	; (800b26c <initStatHRM+0xd0>)
 800b212:	701a      	strb	r2, [r3, #0]
  // Length of the shortest pulse possible
  smallest = frequency*60/220;
 800b214:	4b13      	ldr	r3, [pc, #76]	; (800b264 <initStatHRM+0xc8>)
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	4613      	mov	r3, r2
 800b21a:	011b      	lsls	r3, r3, #4
 800b21c:	1a9b      	subs	r3, r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	089b      	lsrs	r3, r3, #2
 800b222:	4a13      	ldr	r2, [pc, #76]	; (800b270 <initStatHRM+0xd4>)
 800b224:	fba2 2303 	umull	r2, r3, r2, r3
 800b228:	085b      	lsrs	r3, r3, #1
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	4b11      	ldr	r3, [pc, #68]	; (800b274 <initStatHRM+0xd8>)
 800b22e:	701a      	strb	r2, [r3, #0]
  foundPeak=0;
 800b230:	4b11      	ldr	r3, [pc, #68]	; (800b278 <initStatHRM+0xdc>)
 800b232:	2200      	movs	r2, #0
 800b234:	701a      	strb	r2, [r3, #0]
  totalFoundPeak=0;
 800b236:	4b11      	ldr	r3, [pc, #68]	; (800b27c <initStatHRM+0xe0>)
 800b238:	2200      	movs	r2, #0
 800b23a:	701a      	strb	r2, [r3, #0]
  HeartRate=0;
 800b23c:	4b10      	ldr	r3, [pc, #64]	; (800b280 <initStatHRM+0xe4>)
 800b23e:	2200      	movs	r2, #0
 800b240:	701a      	strb	r2, [r3, #0]
}
 800b242:	bf00      	nop
 800b244:	370c      	adds	r7, #12
 800b246:	46bd      	mov	sp, r7
 800b248:	bc80      	pop	{r7}
 800b24a:	4770      	bx	lr
 800b24c:	20001590 	.word	0x20001590
 800b250:	20001594 	.word	0x20001594
 800b254:	20001598 	.word	0x20001598
 800b258:	2000159d 	.word	0x2000159d
 800b25c:	20001524 	.word	0x20001524
 800b260:	20001580 	.word	0x20001580
 800b264:	200015a4 	.word	0x200015a4
 800b268:	51eb851f 	.word	0x51eb851f
 800b26c:	2000159e 	.word	0x2000159e
 800b270:	094f2095 	.word	0x094f2095
 800b274:	2000159f 	.word	0x2000159f
 800b278:	200015a0 	.word	0x200015a0
 800b27c:	200015a1 	.word	0x200015a1
 800b280:	2000158c 	.word	0x2000158c

0800b284 <statHRMAlgo>:


void statHRMAlgo (unsigned long ppgData)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  unsigned char i;
  // moving average calculation
  movingWindowHP+= ppgData;
 800b28c:	4b77      	ldr	r3, [pc, #476]	; (800b46c <statHRMAlgo+0x1e8>)
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4413      	add	r3, r2
 800b294:	4a75      	ldr	r2, [pc, #468]	; (800b46c <statHRMAlgo+0x1e8>)
 800b296:	6013      	str	r3, [r2, #0]

  if (movingWindowCount>movingWindowSize)
 800b298:	4b75      	ldr	r3, [pc, #468]	; (800b470 <statHRMAlgo+0x1ec>)
 800b29a:	781a      	ldrb	r2, [r3, #0]
 800b29c:	4b75      	ldr	r3, [pc, #468]	; (800b474 <statHRMAlgo+0x1f0>)
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	f240 80ce 	bls.w	800b442 <statHRMAlgo+0x1be>
  {
    // Data processing
    movingWindowCount=0;
 800b2a6:	4b72      	ldr	r3, [pc, #456]	; (800b470 <statHRMAlgo+0x1ec>)
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	701a      	strb	r2, [r3, #0]
    // update data buffer
    updateWindow(peakWindowHP,movingWindowHP,movingWindowSize+1);
 800b2ac:	4b6f      	ldr	r3, [pc, #444]	; (800b46c <statHRMAlgo+0x1e8>)
 800b2ae:	6819      	ldr	r1, [r3, #0]
 800b2b0:	4b70      	ldr	r3, [pc, #448]	; (800b474 <statHRMAlgo+0x1f0>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	486f      	ldr	r0, [pc, #444]	; (800b478 <statHRMAlgo+0x1f4>)
 800b2bc:	f000 f8f6 	bl	800b4ac <updateWindow>
    // reset moving average
    movingWindowHP=0;
 800b2c0:	4b6a      	ldr	r3, [pc, #424]	; (800b46c <statHRMAlgo+0x1e8>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	601a      	str	r2, [r3, #0]
    ispeak=0;
 800b2c6:	4b6d      	ldr	r3, [pc, #436]	; (800b47c <statHRMAlgo+0x1f8>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	701a      	strb	r2, [r3, #0]
    if (lastPeak>smallest)
 800b2cc:	4b6c      	ldr	r3, [pc, #432]	; (800b480 <statHRMAlgo+0x1fc>)
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	4b6c      	ldr	r3, [pc, #432]	; (800b484 <statHRMAlgo+0x200>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d24e      	bcs.n	800b378 <statHRMAlgo+0xf4>
    {
      // looking for a local maximum using the 20 point buffer
      ispeak=1;
 800b2da:	4b68      	ldr	r3, [pc, #416]	; (800b47c <statHRMAlgo+0x1f8>)
 800b2dc:	2201      	movs	r2, #1
 800b2de:	701a      	strb	r2, [r3, #0]
      for (i=10;i>=1;i--)
 800b2e0:	230a      	movs	r3, #10
 800b2e2:	73fb      	strb	r3, [r7, #15]
 800b2e4:	e01d      	b.n	800b322 <statHRMAlgo+0x9e>
      {
        if (peakWindowHP[10]<peakWindowHP[(unsigned int)(10-i)])
 800b2e6:	4b64      	ldr	r3, [pc, #400]	; (800b478 <statHRMAlgo+0x1f4>)
 800b2e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2ea:	7bfb      	ldrb	r3, [r7, #15]
 800b2ec:	f1c3 030a 	rsb	r3, r3, #10
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4b61      	ldr	r3, [pc, #388]	; (800b478 <statHRMAlgo+0x1f4>)
 800b2f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d202      	bcs.n	800b302 <statHRMAlgo+0x7e>
          ispeak=0;
 800b2fc:	4b5f      	ldr	r3, [pc, #380]	; (800b47c <statHRMAlgo+0x1f8>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	701a      	strb	r2, [r3, #0]
        if (peakWindowHP[10]<peakWindowHP[(unsigned int)(10+i)])
 800b302:	4b5d      	ldr	r3, [pc, #372]	; (800b478 <statHRMAlgo+0x1f4>)
 800b304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	330a      	adds	r3, #10
 800b30a:	4619      	mov	r1, r3
 800b30c:	4b5a      	ldr	r3, [pc, #360]	; (800b478 <statHRMAlgo+0x1f4>)
 800b30e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b312:	429a      	cmp	r2, r3
 800b314:	d202      	bcs.n	800b31c <statHRMAlgo+0x98>
          ispeak=0;
 800b316:	4b59      	ldr	r3, [pc, #356]	; (800b47c <statHRMAlgo+0x1f8>)
 800b318:	2200      	movs	r2, #0
 800b31a:	701a      	strb	r2, [r3, #0]
      for (i=10;i>=1;i--)
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	3b01      	subs	r3, #1
 800b320:	73fb      	strb	r3, [r7, #15]
 800b322:	7bfb      	ldrb	r3, [r7, #15]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1de      	bne.n	800b2e6 <statHRMAlgo+0x62>

      }
      if (ispeak==1)
 800b328:	4b54      	ldr	r3, [pc, #336]	; (800b47c <statHRMAlgo+0x1f8>)
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d123      	bne.n	800b378 <statHRMAlgo+0xf4>
      {
        // if we have a local maximum
        // values for SPO2 ratio
        lastPeakValueLED1 = findMax(peakWindowHP);
 800b330:	4851      	ldr	r0, [pc, #324]	; (800b478 <statHRMAlgo+0x1f4>)
 800b332:	f000 f9a4 	bl	800b67e <findMax>
 800b336:	4603      	mov	r3, r0
 800b338:	4a53      	ldr	r2, [pc, #332]	; (800b488 <statHRMAlgo+0x204>)
 800b33a:	6013      	str	r3, [r2, #0]
        totalFoundPeak++;
 800b33c:	4b53      	ldr	r3, [pc, #332]	; (800b48c <statHRMAlgo+0x208>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	3301      	adds	r3, #1
 800b342:	b2da      	uxtb	r2, r3
 800b344:	4b51      	ldr	r3, [pc, #324]	; (800b48c <statHRMAlgo+0x208>)
 800b346:	701a      	strb	r2, [r3, #0]

        if (totalFoundPeak>2)
 800b348:	4b50      	ldr	r3, [pc, #320]	; (800b48c <statHRMAlgo+0x208>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d907      	bls.n	800b360 <statHRMAlgo+0xdc>
        {
          // Update the HR and SPO2 buffer
          updateHeartRate(HR,frequency,lastPeak);
 800b350:	4b4f      	ldr	r3, [pc, #316]	; (800b490 <statHRMAlgo+0x20c>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a4b      	ldr	r2, [pc, #300]	; (800b484 <statHRMAlgo+0x200>)
 800b356:	6812      	ldr	r2, [r2, #0]
 800b358:	4619      	mov	r1, r3
 800b35a:	484e      	ldr	r0, [pc, #312]	; (800b494 <statHRMAlgo+0x210>)
 800b35c:	f000 f954 	bl	800b608 <updateHeartRate>
        }
        ispeak=1;
 800b360:	4b46      	ldr	r3, [pc, #280]	; (800b47c <statHRMAlgo+0x1f8>)
 800b362:	2201      	movs	r2, #1
 800b364:	701a      	strb	r2, [r3, #0]
        lastPeak=0;
 800b366:	4b47      	ldr	r3, [pc, #284]	; (800b484 <statHRMAlgo+0x200>)
 800b368:	2200      	movs	r2, #0
 800b36a:	601a      	str	r2, [r3, #0]
        foundPeak++;
 800b36c:	4b4a      	ldr	r3, [pc, #296]	; (800b498 <statHRMAlgo+0x214>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	3301      	adds	r3, #1
 800b372:	b2da      	uxtb	r2, r3
 800b374:	4b48      	ldr	r3, [pc, #288]	; (800b498 <statHRMAlgo+0x214>)
 800b376:	701a      	strb	r2, [r3, #0]
      }
    }

    if ((lastOnset>smallest)&&(ispeak==0))
 800b378:	4b41      	ldr	r3, [pc, #260]	; (800b480 <statHRMAlgo+0x1fc>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	461a      	mov	r2, r3
 800b37e:	4b47      	ldr	r3, [pc, #284]	; (800b49c <statHRMAlgo+0x218>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	429a      	cmp	r2, r3
 800b384:	d243      	bcs.n	800b40e <statHRMAlgo+0x18a>
 800b386:	4b3d      	ldr	r3, [pc, #244]	; (800b47c <statHRMAlgo+0x1f8>)
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d13f      	bne.n	800b40e <statHRMAlgo+0x18a>
    {
      // looking for a local minimum using the 20 point buffer
      ispeak=1;
 800b38e:	4b3b      	ldr	r3, [pc, #236]	; (800b47c <statHRMAlgo+0x1f8>)
 800b390:	2201      	movs	r2, #1
 800b392:	701a      	strb	r2, [r3, #0]
      for (i=10;i>=1;i--)
 800b394:	230a      	movs	r3, #10
 800b396:	73fb      	strb	r3, [r7, #15]
 800b398:	e01d      	b.n	800b3d6 <statHRMAlgo+0x152>
      {
        if (peakWindowHP[10]>peakWindowHP[(unsigned int)(10-i)])
 800b39a:	4b37      	ldr	r3, [pc, #220]	; (800b478 <statHRMAlgo+0x1f4>)
 800b39c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
 800b3a0:	f1c3 030a 	rsb	r3, r3, #10
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4b34      	ldr	r3, [pc, #208]	; (800b478 <statHRMAlgo+0x1f4>)
 800b3a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d902      	bls.n	800b3b6 <statHRMAlgo+0x132>
          ispeak=0;
 800b3b0:	4b32      	ldr	r3, [pc, #200]	; (800b47c <statHRMAlgo+0x1f8>)
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	701a      	strb	r2, [r3, #0]
        if (peakWindowHP[10]>peakWindowHP[(unsigned int)(10+i)])
 800b3b6:	4b30      	ldr	r3, [pc, #192]	; (800b478 <statHRMAlgo+0x1f4>)
 800b3b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	330a      	adds	r3, #10
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4b2d      	ldr	r3, [pc, #180]	; (800b478 <statHRMAlgo+0x1f4>)
 800b3c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d902      	bls.n	800b3d0 <statHRMAlgo+0x14c>
          ispeak=0;
 800b3ca:	4b2c      	ldr	r3, [pc, #176]	; (800b47c <statHRMAlgo+0x1f8>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	701a      	strb	r2, [r3, #0]
      for (i=10;i>=1;i--)
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	73fb      	strb	r3, [r7, #15]
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1de      	bne.n	800b39a <statHRMAlgo+0x116>
      }

      // if we have a local minimum
      if (ispeak==1)
 800b3dc:	4b27      	ldr	r3, [pc, #156]	; (800b47c <statHRMAlgo+0x1f8>)
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d114      	bne.n	800b40e <statHRMAlgo+0x18a>
      {
        // values for SPO2 ratio
        lastOnsetValueLED1 = findMin(peakWindowHP);
 800b3e4:	4824      	ldr	r0, [pc, #144]	; (800b478 <statHRMAlgo+0x1f4>)
 800b3e6:	f000 f96e 	bl	800b6c6 <findMin>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	4a2c      	ldr	r2, [pc, #176]	; (800b4a0 <statHRMAlgo+0x21c>)
 800b3ee:	6013      	str	r3, [r2, #0]
        totalFoundPeak++;
 800b3f0:	4b26      	ldr	r3, [pc, #152]	; (800b48c <statHRMAlgo+0x208>)
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	4b24      	ldr	r3, [pc, #144]	; (800b48c <statHRMAlgo+0x208>)
 800b3fa:	701a      	strb	r2, [r3, #0]

          // If you wanted to run an auto calibration here is the ratio that should be used
          // AutoCalibrate=peakRed/ onsetRed;
          // AutoCalibrate ratio should be greater that 1-2% if not you need to increase the LED current or adjust the setttings
        }
        lastOnset=0;
 800b3fc:	4b27      	ldr	r3, [pc, #156]	; (800b49c <statHRMAlgo+0x218>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	601a      	str	r2, [r3, #0]
        foundPeak++;
 800b402:	4b25      	ldr	r3, [pc, #148]	; (800b498 <statHRMAlgo+0x214>)
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	3301      	adds	r3, #1
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	4b23      	ldr	r3, [pc, #140]	; (800b498 <statHRMAlgo+0x214>)
 800b40c:	701a      	strb	r2, [r3, #0]
      }
    }
    

    
    if (foundPeak>2)
 800b40e:	4b22      	ldr	r3, [pc, #136]	; (800b498 <statHRMAlgo+0x214>)
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	2b02      	cmp	r3, #2
 800b414:	d915      	bls.n	800b442 <statHRMAlgo+0x1be>
    {
      // Every 4 new peaks update return values
      foundPeak=0;
 800b416:	4b20      	ldr	r3, [pc, #128]	; (800b498 <statHRMAlgo+0x214>)
 800b418:	2200      	movs	r2, #0
 800b41a:	701a      	strb	r2, [r3, #0]
      temp=chooseRate(HR);
 800b41c:	481d      	ldr	r0, [pc, #116]	; (800b494 <statHRMAlgo+0x210>)
 800b41e:	f000 f86d 	bl	800b4fc <chooseRate>
 800b422:	4603      	mov	r3, r0
 800b424:	461a      	mov	r2, r3
 800b426:	4b1f      	ldr	r3, [pc, #124]	; (800b4a4 <statHRMAlgo+0x220>)
 800b428:	701a      	strb	r2, [r3, #0]
      if ((temp>40)&&(temp<220))
 800b42a:	4b1e      	ldr	r3, [pc, #120]	; (800b4a4 <statHRMAlgo+0x220>)
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	2b28      	cmp	r3, #40	; 0x28
 800b430:	d907      	bls.n	800b442 <statHRMAlgo+0x1be>
 800b432:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <statHRMAlgo+0x220>)
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	2bdb      	cmp	r3, #219	; 0xdb
 800b438:	d803      	bhi.n	800b442 <statHRMAlgo+0x1be>
        HeartRate=temp;
 800b43a:	4b1a      	ldr	r3, [pc, #104]	; (800b4a4 <statHRMAlgo+0x220>)
 800b43c:	781a      	ldrb	r2, [r3, #0]
 800b43e:	4b1a      	ldr	r3, [pc, #104]	; (800b4a8 <statHRMAlgo+0x224>)
 800b440:	701a      	strb	r2, [r3, #0]
    }
  }
  movingWindowCount++;
 800b442:	4b0b      	ldr	r3, [pc, #44]	; (800b470 <statHRMAlgo+0x1ec>)
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	3301      	adds	r3, #1
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	4b09      	ldr	r3, [pc, #36]	; (800b470 <statHRMAlgo+0x1ec>)
 800b44c:	701a      	strb	r2, [r3, #0]
  lastOnset++;
 800b44e:	4b13      	ldr	r3, [pc, #76]	; (800b49c <statHRMAlgo+0x218>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	3301      	adds	r3, #1
 800b454:	4a11      	ldr	r2, [pc, #68]	; (800b49c <statHRMAlgo+0x218>)
 800b456:	6013      	str	r3, [r2, #0]
  lastPeak++;
 800b458:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <statHRMAlgo+0x200>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3301      	adds	r3, #1
 800b45e:	4a09      	ldr	r2, [pc, #36]	; (800b484 <statHRMAlgo+0x200>)
 800b460:	6013      	str	r3, [r2, #0]
}
 800b462:	bf00      	nop
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	20001598 	.word	0x20001598
 800b470:	2000159d 	.word	0x2000159d
 800b474:	2000159e 	.word	0x2000159e
 800b478:	20001524 	.word	0x20001524
 800b47c:	2000159c 	.word	0x2000159c
 800b480:	2000159f 	.word	0x2000159f
 800b484:	20001590 	.word	0x20001590
 800b488:	2000157c 	.word	0x2000157c
 800b48c:	200015a1 	.word	0x200015a1
 800b490:	200015a4 	.word	0x200015a4
 800b494:	20001580 	.word	0x20001580
 800b498:	200015a0 	.word	0x200015a0
 800b49c:	20001594 	.word	0x20001594
 800b4a0:	20001578 	.word	0x20001578
 800b4a4:	2000158d 	.word	0x2000158d
 800b4a8:	2000158c 	.word	0x2000158c

0800b4ac <updateWindow>:

void updateWindow(unsigned long *peakWindow, unsigned long Y, unsigned char n)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	71fb      	strb	r3, [r7, #7]
  // Moving average buffer for LED data
  unsigned char i;
  
  for (i=20;i>=1;i--)
 800b4ba:	2314      	movs	r3, #20
 800b4bc:	75fb      	strb	r3, [r7, #23]
 800b4be:	e00e      	b.n	800b4de <updateWindow+0x32>
  {
    peakWindow[i]=peakWindow[(unsigned char)(i-1)];
 800b4c0:	7dfb      	ldrb	r3, [r7, #23]
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	441a      	add	r2, r3
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	68f9      	ldr	r1, [r7, #12]
 800b4d2:	440b      	add	r3, r1
 800b4d4:	6812      	ldr	r2, [r2, #0]
 800b4d6:	601a      	str	r2, [r3, #0]
  for (i=20;i>=1;i--)
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	75fb      	strb	r3, [r7, #23]
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1ed      	bne.n	800b4c0 <updateWindow+0x14>
  }
  peakWindow[0]=(Y/n);
 800b4e4:	79fb      	ldrb	r3, [r7, #7]
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	601a      	str	r2, [r3, #0]

}
 800b4f0:	bf00      	nop
 800b4f2:	371c      	adds	r7, #28
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bc80      	pop	{r7}
 800b4f8:	4770      	bx	lr
	...

0800b4fc <chooseRate>:

unsigned char chooseRate(unsigned char *rate)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b087      	sub	sp, #28
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  // Returns the average rate, after removing the lowest and highest values (based on the number of found HR removing 2-4-6 values).
  unsigned char max,min,i,nb;
  unsigned int sum,fullsum;
  max=rate[0];
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	75fb      	strb	r3, [r7, #23]
  min=rate[0];
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	75bb      	strb	r3, [r7, #22]
  sum=0;
 800b510:	2300      	movs	r3, #0
 800b512:	613b      	str	r3, [r7, #16]
  nb=0;
 800b514:	2300      	movs	r3, #0
 800b516:	753b      	strb	r3, [r7, #20]
  for (i=7;i>=1;i--)
 800b518:	2307      	movs	r3, #7
 800b51a:	757b      	strb	r3, [r7, #21]
 800b51c:	e037      	b.n	800b58e <chooseRate+0x92>
  {
    if (rate[(unsigned int)(i-1)]>0)
 800b51e:	7d7b      	ldrb	r3, [r7, #21]
 800b520:	3b01      	subs	r3, #1
 800b522:	461a      	mov	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4413      	add	r3, r2
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d02c      	beq.n	800b588 <chooseRate+0x8c>
    {
      if (rate[(unsigned int)(i-1)]>max)
 800b52e:	7d7b      	ldrb	r3, [r7, #21]
 800b530:	3b01      	subs	r3, #1
 800b532:	461a      	mov	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4413      	add	r3, r2
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	7dfa      	ldrb	r2, [r7, #23]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d206      	bcs.n	800b54e <chooseRate+0x52>
      {
        max=rate[(unsigned int)(i-1)];
 800b540:	7d7b      	ldrb	r3, [r7, #21]
 800b542:	3b01      	subs	r3, #1
 800b544:	461a      	mov	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4413      	add	r3, r2
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	75fb      	strb	r3, [r7, #23]
      }
      if (rate[(unsigned int)(i-1)]<min)
 800b54e:	7d7b      	ldrb	r3, [r7, #21]
 800b550:	3b01      	subs	r3, #1
 800b552:	461a      	mov	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4413      	add	r3, r2
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	7dba      	ldrb	r2, [r7, #22]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d906      	bls.n	800b56e <chooseRate+0x72>
      {
        min=rate[(unsigned int)(i-1)];
 800b560:	7d7b      	ldrb	r3, [r7, #21]
 800b562:	3b01      	subs	r3, #1
 800b564:	461a      	mov	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4413      	add	r3, r2
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	75bb      	strb	r3, [r7, #22]
      }
      sum+=rate[(unsigned int)(i-1)];
 800b56e:	7d7b      	ldrb	r3, [r7, #21]
 800b570:	3b01      	subs	r3, #1
 800b572:	461a      	mov	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4413      	add	r3, r2
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	461a      	mov	r2, r3
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	4413      	add	r3, r2
 800b580:	613b      	str	r3, [r7, #16]
      nb++;
 800b582:	7d3b      	ldrb	r3, [r7, #20]
 800b584:	3301      	adds	r3, #1
 800b586:	753b      	strb	r3, [r7, #20]
  for (i=7;i>=1;i--)
 800b588:	7d7b      	ldrb	r3, [r7, #21]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	757b      	strb	r3, [r7, #21]
 800b58e:	7d7b      	ldrb	r3, [r7, #21]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1c4      	bne.n	800b51e <chooseRate+0x22>
    }
  }

  if (nb>2)
 800b594:	7d3b      	ldrb	r3, [r7, #20]
 800b596:	2b02      	cmp	r3, #2
 800b598:	d90f      	bls.n	800b5ba <chooseRate+0xbe>
    fullsum= (sum-max-min)*10/(nb-2);
 800b59a:	7dfb      	ldrb	r3, [r7, #23]
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	1ad2      	subs	r2, r2, r3
 800b5a0:	7dbb      	ldrb	r3, [r7, #22]
 800b5a2:	1ad2      	subs	r2, r2, r3
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4413      	add	r3, r2
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	7d3b      	ldrb	r3, [r7, #20]
 800b5b0:	3b02      	subs	r3, #2
 800b5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b6:	60fb      	str	r3, [r7, #12]
 800b5b8:	e009      	b.n	800b5ce <chooseRate+0xd2>
  else
    fullsum= (sum)*10/(nb);
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	005b      	lsls	r3, r3, #1
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	7d3b      	ldrb	r3, [r7, #20]
 800b5c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5cc:	60fb      	str	r3, [r7, #12]

  sum=fullsum/10;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	4a0c      	ldr	r2, [pc, #48]	; (800b604 <chooseRate+0x108>)
 800b5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5d6:	08db      	lsrs	r3, r3, #3
 800b5d8:	613b      	str	r3, [r7, #16]

  if (fullsum-sum*10 > 4)
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	1a9b      	subs	r3, r3, r2
 800b5ea:	2b04      	cmp	r3, #4
 800b5ec:	d902      	bls.n	800b5f4 <chooseRate+0xf8>
    sum++;
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	613b      	str	r3, [r7, #16]
  return sum;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	b2db      	uxtb	r3, r3
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	371c      	adds	r7, #28
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bc80      	pop	{r7}
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	cccccccd 	.word	0xcccccccd

0800b608 <updateHeartRate>:

void updateHeartRate (unsigned char *rate, unsigned int freq, unsigned int last)
{
 800b608:	b480      	push	{r7}
 800b60a:	b087      	sub	sp, #28
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
  // Adds a new Heart rate into the array and lose the oldest
  unsigned char i;
  i=60*freq/last;
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	4613      	mov	r3, r2
 800b618:	011b      	lsls	r3, r3, #4
 800b61a:	1a9b      	subs	r3, r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	461a      	mov	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	fbb2 f3f3 	udiv	r3, r2, r3
 800b626:	75fb      	strb	r3, [r7, #23]
  if ((i>40)&&(i<220))
 800b628:	7dfb      	ldrb	r3, [r7, #23]
 800b62a:	2b28      	cmp	r3, #40	; 0x28
 800b62c:	d922      	bls.n	800b674 <updateHeartRate+0x6c>
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	2bdb      	cmp	r3, #219	; 0xdb
 800b632:	d81f      	bhi.n	800b674 <updateHeartRate+0x6c>
  {
    for (i=11;i>=1;i--)
 800b634:	230b      	movs	r3, #11
 800b636:	75fb      	strb	r3, [r7, #23]
 800b638:	e00d      	b.n	800b656 <updateHeartRate+0x4e>
    {
      rate[i]=rate[(unsigned char)(i-1)];
 800b63a:	7dfb      	ldrb	r3, [r7, #23]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	461a      	mov	r2, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	441a      	add	r2, r3
 800b646:	7dfb      	ldrb	r3, [r7, #23]
 800b648:	68f9      	ldr	r1, [r7, #12]
 800b64a:	440b      	add	r3, r1
 800b64c:	7812      	ldrb	r2, [r2, #0]
 800b64e:	701a      	strb	r2, [r3, #0]
    for (i=11;i>=1;i--)
 800b650:	7dfb      	ldrb	r3, [r7, #23]
 800b652:	3b01      	subs	r3, #1
 800b654:	75fb      	strb	r3, [r7, #23]
 800b656:	7dfb      	ldrb	r3, [r7, #23]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1ee      	bne.n	800b63a <updateHeartRate+0x32>
    }
    rate[0]=60*freq/last;
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	4613      	mov	r3, r2
 800b660:	011b      	lsls	r3, r3, #4
 800b662:	1a9b      	subs	r3, r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	461a      	mov	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	701a      	strb	r2, [r3, #0]
  }
}
 800b674:	bf00      	nop
 800b676:	371c      	adds	r7, #28
 800b678:	46bd      	mov	sp, r7
 800b67a:	bc80      	pop	{r7}
 800b67c:	4770      	bx	lr

0800b67e <findMax>:

unsigned long findMax(unsigned long *X)
{
 800b67e:	b480      	push	{r7}
 800b680:	b085      	sub	sp, #20
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
  // Finds the maximum around the center of the buffer
  unsigned long res=X[8];
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	60fb      	str	r3, [r7, #12]
  unsigned char i;
  for (i=12; i>=9; i--)
 800b68c:	230c      	movs	r3, #12
 800b68e:	72fb      	strb	r3, [r7, #11]
 800b690:	e010      	b.n	800b6b4 <findMax+0x36>
  {
    if (res<X[i])
 800b692:	7afb      	ldrb	r3, [r7, #11]
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	4413      	add	r3, r2
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d205      	bcs.n	800b6ae <findMax+0x30>
      res=X[i];
 800b6a2:	7afb      	ldrb	r3, [r7, #11]
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	60fb      	str	r3, [r7, #12]
  for (i=12; i>=9; i--)
 800b6ae:	7afb      	ldrb	r3, [r7, #11]
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	72fb      	strb	r3, [r7, #11]
 800b6b4:	7afb      	ldrb	r3, [r7, #11]
 800b6b6:	2b08      	cmp	r3, #8
 800b6b8:	d8eb      	bhi.n	800b692 <findMax+0x14>
  }
  return res;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bc80      	pop	{r7}
 800b6c4:	4770      	bx	lr

0800b6c6 <findMin>:

unsigned long findMin (unsigned long *X)
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b085      	sub	sp, #20
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  // Finds the minimum around the center of the buffer
  unsigned long res=X[8];
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	60fb      	str	r3, [r7, #12]
  unsigned char i;
  for (i=12; i>=9; i--)
 800b6d4:	230c      	movs	r3, #12
 800b6d6:	72fb      	strb	r3, [r7, #11]
 800b6d8:	e010      	b.n	800b6fc <findMin+0x36>
  {
    if (res>X[i])
 800b6da:	7afb      	ldrb	r3, [r7, #11]
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d905      	bls.n	800b6f6 <findMin+0x30>
      res=X[i];
 800b6ea:	7afb      	ldrb	r3, [r7, #11]
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	60fb      	str	r3, [r7, #12]
  for (i=12; i>=9; i--)
 800b6f6:	7afb      	ldrb	r3, [r7, #11]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	72fb      	strb	r3, [r7, #11]
 800b6fc:	7afb      	ldrb	r3, [r7, #11]
 800b6fe:	2b08      	cmp	r3, #8
 800b700:	d8eb      	bhi.n	800b6da <findMin+0x14>
  }
  return res;
 800b702:	68fb      	ldr	r3, [r7, #12]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3714      	adds	r7, #20
 800b708:	46bd      	mov	sp, r7
 800b70a:	bc80      	pop	{r7}
 800b70c:	4770      	bx	lr
	...

0800b710 <hr3_hal_init>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void hr3_hal_init( uint8_t address_id )
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	4603      	mov	r3, r0
 800b718:	71fb      	strb	r3, [r7, #7]

#if defined( __MIKROC_PRO_FOR_ARM__ )   ||  \
    defined( __MIKROC_PRO_FOR_FT90x__ )
    _i2c_hw_address             = address_id;
#else
    _i2c_hw_address             = ( address_id << 1 );
 800b71a:	79fb      	ldrb	r3, [r7, #7]
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	b2da      	uxtb	r2, r3
 800b720:	4b03      	ldr	r3, [pc, #12]	; (800b730 <hr3_hal_init+0x20>)
 800b722:	701a      	strb	r2, [r3, #0]
#endif
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	bc80      	pop	{r7}
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	200015a8 	.word	0x200015a8

0800b734 <hr3_hal_write>:

void hr3_hal_write( uint8_t *command,
                          uint8_t *buffer,
                          uint16_t count )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b0c8      	sub	sp, #288	; 0x120
 800b738:	af00      	add	r7, sp, #0
 800b73a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b73e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b742:	6018      	str	r0, [r3, #0]
 800b744:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b748:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b74c:	6019      	str	r1, [r3, #0]
 800b74e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b752:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800b756:	801a      	strh	r2, [r3, #0]
    uint8_t temp[ BUFF_SIZE ];

    uint8_t cmd_size    = 1;
 800b758:	2301      	movs	r3, #1
 800b75a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    uint16_t i          = 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
    uint8_t *temp_ptr   = temp;
 800b764:	f107 0310 	add.w	r3, r7, #16
 800b768:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    uint8_t *buff_ptr   = buffer;
 800b76c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b770:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    uint8_t *cmd_ptr    = command;
 800b77a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b77e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    /* Fill the temp buffer with data*/
    while( cmd_size-- )
 800b788:	e00f      	b.n	800b7aa <hr3_hal_write+0x76>
        temp[ i++ ] = *( cmd_ptr++ );
 800b78a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b78e:	1c5a      	adds	r2, r3, #1
 800b790:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800b794:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 800b798:	1c51      	adds	r1, r2, #1
 800b79a:	f8a7 111c 	strh.w	r1, [r7, #284]	; 0x11c
 800b79e:	7819      	ldrb	r1, [r3, #0]
 800b7a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b7a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b7a8:	5499      	strb	r1, [r3, r2]
    while( cmd_size-- )
 800b7aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7ae:	1e5a      	subs	r2, r3, #1
 800b7b0:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e8      	bne.n	800b78a <hr3_hal_write+0x56>

    while ( count-- )
 800b7b8:	e00f      	b.n	800b7da <hr3_hal_write+0xa6>
        temp[ i++ ] = *( buff_ptr++ );
 800b7ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b7be:	1c5a      	adds	r2, r3, #1
 800b7c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800b7c4:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 800b7c8:	1c51      	adds	r1, r2, #1
 800b7ca:	f8a7 111c 	strh.w	r1, [r7, #284]	; 0x11c
 800b7ce:	7819      	ldrb	r1, [r3, #0]
 800b7d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b7d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b7d8:	5499      	strb	r1, [r3, r2]
    while ( count-- )
 800b7da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b7de:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800b7e2:	881b      	ldrh	r3, [r3, #0]
 800b7e4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800b7e8:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 800b7ec:	1e59      	subs	r1, r3, #1
 800b7ee:	8011      	strh	r1, [r2, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1e2      	bne.n	800b7ba <hr3_hal_write+0x86>


#if defined(HAL_STM32F103)
    afe4404_I2C_Write(temp_ptr, i);
 800b7f4:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800b800:	f7ff fc34 	bl	800b06c <afe4404_I2C_Write>
    while( i-- )
        write_i2c_p( *( temp_ptr++ ) );

    stop_i2c_p();
#endif
}
 800b804:	bf00      	nop
 800b806:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <hr3_hal_read>:

void hr3_hal_read( uint8_t *command,
                         uint8_t *buffer,
                         uint16_t count )
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b086      	sub	sp, #24
 800b812:	af00      	add	r7, sp, #0
 800b814:	60f8      	str	r0, [r7, #12]
 800b816:	60b9      	str	r1, [r7, #8]
 800b818:	4613      	mov	r3, r2
 800b81a:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd_size    =  1;
 800b81c:	2301      	movs	r3, #1
 800b81e:	75fb      	strb	r3, [r7, #23]

#if defined(HAL_STM32F103)
    afe4404_I2C_Read(command, buffer, cmd_size, count);
 800b820:	88fb      	ldrh	r3, [r7, #6]
 800b822:	b2db      	uxtb	r3, r3
 800b824:	7dfa      	ldrb	r2, [r7, #23]
 800b826:	68b9      	ldr	r1, [r7, #8]
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f7ff fc35 	bl	800b098 <afe4404_I2C_Read>

    *buffer = read_i2c_p( PIC_NACK_BIT );

    stop_i2c_p();
#endif
}
 800b82e:	bf00      	nop
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <hr3_init>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

uint8_t hr3_init( uint8_t address, dynamic_modes_t* dyn_modes )
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b082      	sub	sp, #8
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	4603      	mov	r3, r0
 800b83e:	6039      	str	r1, [r7, #0]
 800b840:	71fb      	strb	r3, [r7, #7]
    hr3_hal_init( address );
 800b842:	79fb      	ldrb	r3, [r7, #7]
 800b844:	4618      	mov	r0, r3
 800b846:	f7ff ff63 	bl	800b710 <hr3_hal_init>
    hr3_set_settings( sw_reset_en,diag_mode_dis,susp_count_dis,reg_read_dis );
 800b84a:	2300      	movs	r3, #0
 800b84c:	2200      	movs	r2, #0
 800b84e:	2100      	movs	r1, #0
 800b850:	2001      	movs	r0, #1
 800b852:	f000 f885 	bl	800b960 <hr3_set_settings>
    hr3_set_led2_start_end( 0, 399 );
 800b856:	f240 118f 	movw	r1, #399	; 0x18f
 800b85a:	2000      	movs	r0, #0
 800b85c:	f000 f9be 	bl	800bbdc <hr3_set_led2_start_end>
    hr3_set_led2_sample_start_end( 100, 399 ); //rec in datasheet 100, previous ex value 80
 800b860:	f240 118f 	movw	r1, #399	; 0x18f
 800b864:	2064      	movs	r0, #100	; 0x64
 800b866:	f000 f8c1 	bl	800b9ec <hr3_set_led2_sample_start_end>
    hr3_set_adc_reset0_start_end( 401, 407 );
 800b86a:	f240 1197 	movw	r1, #407	; 0x197
 800b86e:	f240 1091 	movw	r0, #401	; 0x191
 800b872:	f000 fb27 	bl	800bec4 <hr3_set_adc_reset0_start_end>
    hr3_set_led2_convert_start_end( 408, 1467 );
 800b876:	f240 51bb 	movw	r1, #1467	; 0x5bb
 800b87a:	f44f 70cc 	mov.w	r0, #408	; 0x198
 800b87e:	f000 fa29 	bl	800bcd4 <hr3_set_led2_convert_start_end>
    hr3_set_led3_start_stop( 500, 799 ); //rec in datasheet 501, previous ex value 400
 800b882:	f240 311f 	movw	r1, #799	; 0x31f
 800b886:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b88a:	f000 fef1 	bl	800c670 <hr3_set_led3_start_stop>
    hr3_set_led3_sample_start_end( 480, 799 );
 800b88e:	f240 311f 	movw	r1, #799	; 0x31f
 800b892:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800b896:	f000 f925 	bl	800bae4 <hr3_set_led3_sample_start_end>
    hr3_set_adc_reset1_start_end( 1469, 1475 );
 800b89a:	f240 51c3 	movw	r1, #1475	; 0x5c3
 800b89e:	f240 50bd 	movw	r0, #1469	; 0x5bd
 800b8a2:	f000 fb4d 	bl	800bf40 <hr3_set_adc_reset1_start_end>
    hr3_set_led3_convert_start_end( 1476, 2535 );
 800b8a6:	f640 11e7 	movw	r1, #2535	; 0x9e7
 800b8aa:	f240 50c4 	movw	r0, #1476	; 0x5c4
 800b8ae:	f000 fa4f 	bl	800bd50 <hr3_set_led3_convert_start_end>
    hr3_set_led1_start_end( 800, 1199 );
 800b8b2:	f240 41af 	movw	r1, #1199	; 0x4af
 800b8b6:	f44f 7048 	mov.w	r0, #800	; 0x320
 800b8ba:	f000 f8d5 	bl	800ba68 <hr3_set_led1_start_end>
    hr3_set_led1_sample_start_end( 880, 1199 );
 800b8be:	f240 41af 	movw	r1, #1199	; 0x4af
 800b8c2:	f44f 705c 	mov.w	r0, #880	; 0x370
 800b8c6:	f000 f94b 	bl	800bb60 <hr3_set_led1_sample_start_end>
    hr3_set_adc_reset2_start_end( 2537, 2543 );
 800b8ca:	f640 11ef 	movw	r1, #2543	; 0x9ef
 800b8ce:	f640 10e9 	movw	r0, #2537	; 0x9e9
 800b8d2:	f000 fb73 	bl	800bfbc <hr3_set_adc_reset2_start_end>
    hr3_set_led1_convert_start_end( 2544, 3603 );
 800b8d6:	f640 6113 	movw	r1, #3603	; 0xe13
 800b8da:	f44f 601f 	mov.w	r0, #2544	; 0x9f0
 800b8de:	f000 fa75 	bl	800bdcc <hr3_set_led1_convert_start_end>
    hr3_set_amb1_sample_start_end( 1279, 1598 );
 800b8e2:	f240 613e 	movw	r1, #1598	; 0x63e
 800b8e6:	f240 40ff 	movw	r0, #1279	; 0x4ff
 800b8ea:	f000 f9b5 	bl	800bc58 <hr3_set_amb1_sample_start_end>
    hr3_set_adc_reset3_start_end( 3605, 3611 );
 800b8ee:	f640 611b 	movw	r1, #3611	; 0xe1b
 800b8f2:	f640 6015 	movw	r0, #3605	; 0xe15
 800b8f6:	f000 fb9f 	bl	800c038 <hr3_set_adc_reset3_start_end>
    hr3_set_amb1_convert_start_end( 3612, 4671 );
 800b8fa:	f241 213f 	movw	r1, #4671	; 0x123f
 800b8fe:	f640 601c 	movw	r0, #3612	; 0xe1c
 800b902:	f000 faa1 	bl	800be48 <hr3_set_amb1_convert_start_end>
    hr3_set_pdn_cycle_start_end( 5471, 39199 );
 800b906:	f649 111f 	movw	r1, #39199	; 0x991f
 800b90a:	f241 505f 	movw	r0, #5471	; 0x155f
 800b90e:	f000 fe71 	bl	800c5f4 <hr3_set_pdn_cycle_start_end>
    hr3_set_prpct_count( 39999 );                              //Clock timing for CLKDIV_PRF  = 1
 800b912:	f649 403f 	movw	r0, #39999	; 0x9c3f
 800b916:	f000 fbcd 	bl	800c0b4 <hr3_set_prpct_count>
    hr3_set_adc_reset3_start_end( 721, 722 );
    hr3_set_amb1_convert_start_end( 722, 934 );
    hr3_set_pdn_cycle_start_end( 1094, 7839 );
    hr3_set_prpct_count( 7999 );        */
    
    hr3_set_timer_and_average_num( true, 3 );
 800b91a:	2103      	movs	r1, #3
 800b91c:	2001      	movs	r0, #1
 800b91e:	f000 fbed 	bl	800c0fc <hr3_set_timer_and_average_num>
    hr3_set_seperate_tia_gain( true, 0, 4 );
 800b922:	2204      	movs	r2, #4
 800b924:	2100      	movs	r1, #0
 800b926:	2001      	movs	r0, #1
 800b928:	f000 fc26 	bl	800c178 <hr3_set_seperate_tia_gain>
    hr3_set_tia_gain( false, 0, 3 );
 800b92c:	2203      	movs	r2, #3
 800b92e:	2100      	movs	r1, #0
 800b930:	2000      	movs	r0, #0
 800b932:	f000 fc73 	bl	800c21c <hr3_set_tia_gain>
    hr3_set_led_currents( 15,3,3 );
 800b936:	2203      	movs	r2, #3
 800b938:	2103      	movs	r1, #3
 800b93a:	200f      	movs	r0, #15
 800b93c:	f000 fcc2 	bl	800c2c4 <hr3_set_led_currents>
    hr3_set_dynamic_settings( dyn_modes );
 800b940:	6838      	ldr	r0, [r7, #0]
 800b942:	f000 fd0f 	bl	800c364 <hr3_set_dynamic_settings>
    hr3_set_clkout_div( false, 2 );
 800b946:	2102      	movs	r1, #2
 800b948:	2000      	movs	r0, #0
 800b94a:	f000 fd73 	bl	800c434 <hr3_set_clkout_div>
    hr3_set_int_clk_div( 1 );
 800b94e:	2001      	movs	r0, #1
 800b950:	f000 fecc 	bl	800c6ec <hr3_set_int_clk_div>

    return 0;
 800b954:	2300      	movs	r3, #0
}
 800b956:	4618      	mov	r0, r3
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
	...

0800b960 <hr3_set_settings>:

uint8_t hr3_set_settings( sw_reset_t sw_reset, diag_mode_t diag_mode,
                          susp_count_t susp_counter, reg_read_t reg_read )
{
 800b960:	b590      	push	{r4, r7, lr}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	4604      	mov	r4, r0
 800b968:	4608      	mov	r0, r1
 800b96a:	4611      	mov	r1, r2
 800b96c:	461a      	mov	r2, r3
 800b96e:	4623      	mov	r3, r4
 800b970:	71fb      	strb	r3, [r7, #7]
 800b972:	4603      	mov	r3, r0
 800b974:	71bb      	strb	r3, [r7, #6]
 800b976:	460b      	mov	r3, r1
 800b978:	717b      	strb	r3, [r7, #5]
 800b97a:	4613      	mov	r3, r2
 800b97c:	713b      	strb	r3, [r7, #4]
    uint8_t reg = DIAGNOSIS;
 800b97e:	2300      	movs	r3, #0
 800b980:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800b982:	4b19      	ldr	r3, [pc, #100]	; (800b9e8 <hr3_set_settings+0x88>)
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	81bb      	strh	r3, [r7, #12]
 800b988:	2300      	movs	r3, #0
 800b98a:	73bb      	strb	r3, [r7, #14]

    temp[2] |= ( sw_reset << DIAG_SW_RST );
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	b25a      	sxtb	r2, r3
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	00db      	lsls	r3, r3, #3
 800b994:	b25b      	sxtb	r3, r3
 800b996:	4313      	orrs	r3, r2
 800b998:	b25b      	sxtb	r3, r3
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	73bb      	strb	r3, [r7, #14]
    temp[2] |= ( diag_mode << DIAG_EN );
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	b25a      	sxtb	r2, r3
 800b9a2:	79bb      	ldrb	r3, [r7, #6]
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	b25b      	sxtb	r3, r3
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	b25b      	sxtb	r3, r3
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	73bb      	strb	r3, [r7, #14]
    temp[2] |= ( susp_counter << DIAG_TM_CNT_RST );
 800b9b0:	7bbb      	ldrb	r3, [r7, #14]
 800b9b2:	b25a      	sxtb	r2, r3
 800b9b4:	797b      	ldrb	r3, [r7, #5]
 800b9b6:	005b      	lsls	r3, r3, #1
 800b9b8:	b25b      	sxtb	r3, r3
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	b25b      	sxtb	r3, r3
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	73bb      	strb	r3, [r7, #14]
    temp[2] |= ( reg_read << DIAG_REG_READ );
 800b9c2:	7bba      	ldrb	r2, [r7, #14]
 800b9c4:	793b      	ldrb	r3, [r7, #4]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg, temp, 3 );
 800b9cc:	f107 010c 	add.w	r1, r7, #12
 800b9d0:	f107 030f 	add.w	r3, r7, #15
 800b9d4:	2203      	movs	r2, #3
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff feac 	bl	800b734 <hr3_hal_write>
    
    return 0;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd90      	pop	{r4, r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	0800d19c 	.word	0x0800d19c

0800b9ec <hr3_set_led2_sample_start_end>:

uint8_t hr3_set_led2_sample_start_end( uint16_t start, uint16_t end )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	460a      	mov	r2, r1
 800b9f6:	80fb      	strh	r3, [r7, #6]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = SMPL_LED2_ST;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = SMPL_LED2_END;
 800ba00:	2302      	movs	r3, #2
 800ba02:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800ba04:	4b17      	ldr	r3, [pc, #92]	; (800ba64 <hr3_set_led2_sample_start_end+0x78>)
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	823b      	strh	r3, [r7, #16]
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800ba0e:	4b15      	ldr	r3, [pc, #84]	; (800ba64 <hr3_set_led2_sample_start_end+0x78>)
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	81bb      	strh	r3, [r7, #12]
 800ba14:	2300      	movs	r3, #0
 800ba16:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800ba18:	88fb      	ldrh	r3, [r7, #6]
 800ba1a:	0a1b      	lsrs	r3, r3, #8
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800ba22:	88fb      	ldrh	r3, [r7, #6]
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800ba28:	f107 0110 	add.w	r1, r7, #16
 800ba2c:	f107 0317 	add.w	r3, r7, #23
 800ba30:	2203      	movs	r2, #3
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7ff fe7e 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800ba38:	88bb      	ldrh	r3, [r7, #4]
 800ba3a:	0a1b      	lsrs	r3, r3, #8
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800ba42:	88bb      	ldrh	r3, [r7, #4]
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800ba48:	f107 010c 	add.w	r1, r7, #12
 800ba4c:	f107 0316 	add.w	r3, r7, #22
 800ba50:	2203      	movs	r2, #3
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7ff fe6e 	bl	800b734 <hr3_hal_write>

    return 0;
 800ba58:	2300      	movs	r3, #0

}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3718      	adds	r7, #24
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	0800d19c 	.word	0x0800d19c

0800ba68 <hr3_set_led1_start_end>:

uint8_t hr3_set_led1_start_end( uint16_t start, uint16_t end )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	460a      	mov	r2, r1
 800ba72:	80fb      	strh	r3, [r7, #6]
 800ba74:	4613      	mov	r3, r2
 800ba76:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED1_ST;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED1_END;
 800ba7c:	2304      	movs	r3, #4
 800ba7e:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800ba80:	4b17      	ldr	r3, [pc, #92]	; (800bae0 <hr3_set_led1_start_end+0x78>)
 800ba82:	881b      	ldrh	r3, [r3, #0]
 800ba84:	823b      	strh	r3, [r7, #16]
 800ba86:	2300      	movs	r3, #0
 800ba88:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800ba8a:	4b15      	ldr	r3, [pc, #84]	; (800bae0 <hr3_set_led1_start_end+0x78>)
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	81bb      	strh	r3, [r7, #12]
 800ba90:	2300      	movs	r3, #0
 800ba92:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800ba94:	88fb      	ldrh	r3, [r7, #6]
 800ba96:	0a1b      	lsrs	r3, r3, #8
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800ba9e:	88fb      	ldrh	r3, [r7, #6]
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800baa4:	f107 0110 	add.w	r1, r7, #16
 800baa8:	f107 0317 	add.w	r3, r7, #23
 800baac:	2203      	movs	r2, #3
 800baae:	4618      	mov	r0, r3
 800bab0:	f7ff fe40 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bab4:	88bb      	ldrh	r3, [r7, #4]
 800bab6:	0a1b      	lsrs	r3, r3, #8
 800bab8:	b29b      	uxth	r3, r3
 800baba:	b2db      	uxtb	r3, r3
 800babc:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800babe:	88bb      	ldrh	r3, [r7, #4]
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bac4:	f107 010c 	add.w	r1, r7, #12
 800bac8:	f107 0316 	add.w	r3, r7, #22
 800bacc:	2203      	movs	r2, #3
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff fe30 	bl	800b734 <hr3_hal_write>

    return 0;
 800bad4:	2300      	movs	r3, #0

}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3718      	adds	r7, #24
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	0800d19c 	.word	0x0800d19c

0800bae4 <hr3_set_led3_sample_start_end>:

uint8_t hr3_set_led3_sample_start_end( uint16_t start, uint16_t end )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	4603      	mov	r3, r0
 800baec:	460a      	mov	r2, r1
 800baee:	80fb      	strh	r3, [r7, #6]
 800baf0:	4613      	mov	r3, r2
 800baf2:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = SMPL_LED3_ST;
 800baf4:	2305      	movs	r3, #5
 800baf6:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = SMPL_LED3_END;
 800baf8:	2306      	movs	r3, #6
 800bafa:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bafc:	4b17      	ldr	r3, [pc, #92]	; (800bb5c <hr3_set_led3_sample_start_end+0x78>)
 800bafe:	881b      	ldrh	r3, [r3, #0]
 800bb00:	823b      	strh	r3, [r7, #16]
 800bb02:	2300      	movs	r3, #0
 800bb04:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bb06:	4b15      	ldr	r3, [pc, #84]	; (800bb5c <hr3_set_led3_sample_start_end+0x78>)
 800bb08:	881b      	ldrh	r3, [r3, #0]
 800bb0a:	81bb      	strh	r3, [r7, #12]
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bb10:	88fb      	ldrh	r3, [r7, #6]
 800bb12:	0a1b      	lsrs	r3, r3, #8
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bb1a:	88fb      	ldrh	r3, [r7, #6]
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bb20:	f107 0110 	add.w	r1, r7, #16
 800bb24:	f107 0317 	add.w	r3, r7, #23
 800bb28:	2203      	movs	r2, #3
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7ff fe02 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bb30:	88bb      	ldrh	r3, [r7, #4]
 800bb32:	0a1b      	lsrs	r3, r3, #8
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bb3a:	88bb      	ldrh	r3, [r7, #4]
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bb40:	f107 010c 	add.w	r1, r7, #12
 800bb44:	f107 0316 	add.w	r3, r7, #22
 800bb48:	2203      	movs	r2, #3
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7ff fdf2 	bl	800b734 <hr3_hal_write>

    return 0;
 800bb50:	2300      	movs	r3, #0

}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3718      	adds	r7, #24
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	0800d19c 	.word	0x0800d19c

0800bb60 <hr3_set_led1_sample_start_end>:

uint8_t hr3_set_led1_sample_start_end( uint16_t start, uint16_t end )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	4603      	mov	r3, r0
 800bb68:	460a      	mov	r2, r1
 800bb6a:	80fb      	strh	r3, [r7, #6]
 800bb6c:	4613      	mov	r3, r2
 800bb6e:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = SMPL_LED1_ST;
 800bb70:	2307      	movs	r3, #7
 800bb72:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = SMPL_LED1_END;
 800bb74:	2308      	movs	r3, #8
 800bb76:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bb78:	4b17      	ldr	r3, [pc, #92]	; (800bbd8 <hr3_set_led1_sample_start_end+0x78>)
 800bb7a:	881b      	ldrh	r3, [r3, #0]
 800bb7c:	823b      	strh	r3, [r7, #16]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bb82:	4b15      	ldr	r3, [pc, #84]	; (800bbd8 <hr3_set_led1_sample_start_end+0x78>)
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	81bb      	strh	r3, [r7, #12]
 800bb88:	2300      	movs	r3, #0
 800bb8a:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bb8c:	88fb      	ldrh	r3, [r7, #6]
 800bb8e:	0a1b      	lsrs	r3, r3, #8
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bb96:	88fb      	ldrh	r3, [r7, #6]
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bb9c:	f107 0110 	add.w	r1, r7, #16
 800bba0:	f107 0317 	add.w	r3, r7, #23
 800bba4:	2203      	movs	r2, #3
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fdc4 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bbac:	88bb      	ldrh	r3, [r7, #4]
 800bbae:	0a1b      	lsrs	r3, r3, #8
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bbb6:	88bb      	ldrh	r3, [r7, #4]
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bbbc:	f107 010c 	add.w	r1, r7, #12
 800bbc0:	f107 0316 	add.w	r3, r7, #22
 800bbc4:	2203      	movs	r2, #3
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7ff fdb4 	bl	800b734 <hr3_hal_write>

    return 0;
 800bbcc:	2300      	movs	r3, #0

}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3718      	adds	r7, #24
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	0800d19c 	.word	0x0800d19c

0800bbdc <hr3_set_led2_start_end>:

uint8_t hr3_set_led2_start_end( uint16_t start, uint16_t end )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	460a      	mov	r2, r1
 800bbe6:	80fb      	strh	r3, [r7, #6]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED2_ST;
 800bbec:	2309      	movs	r3, #9
 800bbee:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED2_END;
 800bbf0:	230a      	movs	r3, #10
 800bbf2:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bbf4:	4b17      	ldr	r3, [pc, #92]	; (800bc54 <hr3_set_led2_start_end+0x78>)
 800bbf6:	881b      	ldrh	r3, [r3, #0]
 800bbf8:	823b      	strh	r3, [r7, #16]
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bbfe:	4b15      	ldr	r3, [pc, #84]	; (800bc54 <hr3_set_led2_start_end+0x78>)
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	81bb      	strh	r3, [r7, #12]
 800bc04:	2300      	movs	r3, #0
 800bc06:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bc08:	88fb      	ldrh	r3, [r7, #6]
 800bc0a:	0a1b      	lsrs	r3, r3, #8
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bc12:	88fb      	ldrh	r3, [r7, #6]
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bc18:	f107 0110 	add.w	r1, r7, #16
 800bc1c:	f107 0317 	add.w	r3, r7, #23
 800bc20:	2203      	movs	r2, #3
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7ff fd86 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bc28:	88bb      	ldrh	r3, [r7, #4]
 800bc2a:	0a1b      	lsrs	r3, r3, #8
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bc32:	88bb      	ldrh	r3, [r7, #4]
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bc38:	f107 010c 	add.w	r1, r7, #12
 800bc3c:	f107 0316 	add.w	r3, r7, #22
 800bc40:	2203      	movs	r2, #3
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7ff fd76 	bl	800b734 <hr3_hal_write>

    return 0;
 800bc48:	2300      	movs	r3, #0

}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3718      	adds	r7, #24
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	0800d19c 	.word	0x0800d19c

0800bc58 <hr3_set_amb1_sample_start_end>:

uint8_t hr3_set_amb1_sample_start_end( uint16_t start, uint16_t end )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b086      	sub	sp, #24
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	460a      	mov	r2, r1
 800bc62:	80fb      	strh	r3, [r7, #6]
 800bc64:	4613      	mov	r3, r2
 800bc66:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = SMPL_AMB1_ST;
 800bc68:	230b      	movs	r3, #11
 800bc6a:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = SMPL_AMB1_END;
 800bc6c:	230c      	movs	r3, #12
 800bc6e:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bc70:	4b17      	ldr	r3, [pc, #92]	; (800bcd0 <hr3_set_amb1_sample_start_end+0x78>)
 800bc72:	881b      	ldrh	r3, [r3, #0]
 800bc74:	823b      	strh	r3, [r7, #16]
 800bc76:	2300      	movs	r3, #0
 800bc78:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bc7a:	4b15      	ldr	r3, [pc, #84]	; (800bcd0 <hr3_set_amb1_sample_start_end+0x78>)
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	81bb      	strh	r3, [r7, #12]
 800bc80:	2300      	movs	r3, #0
 800bc82:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bc84:	88fb      	ldrh	r3, [r7, #6]
 800bc86:	0a1b      	lsrs	r3, r3, #8
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bc8e:	88fb      	ldrh	r3, [r7, #6]
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bc94:	f107 0110 	add.w	r1, r7, #16
 800bc98:	f107 0317 	add.w	r3, r7, #23
 800bc9c:	2203      	movs	r2, #3
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7ff fd48 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bca4:	88bb      	ldrh	r3, [r7, #4]
 800bca6:	0a1b      	lsrs	r3, r3, #8
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bcae:	88bb      	ldrh	r3, [r7, #4]
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bcb4:	f107 010c 	add.w	r1, r7, #12
 800bcb8:	f107 0316 	add.w	r3, r7, #22
 800bcbc:	2203      	movs	r2, #3
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7ff fd38 	bl	800b734 <hr3_hal_write>

    return 0;
 800bcc4:	2300      	movs	r3, #0

}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	0800d19c 	.word	0x0800d19c

0800bcd4 <hr3_set_led2_convert_start_end>:

uint8_t hr3_set_led2_convert_start_end( uint16_t start, uint16_t end )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b086      	sub	sp, #24
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	4603      	mov	r3, r0
 800bcdc:	460a      	mov	r2, r1
 800bcde:	80fb      	strh	r3, [r7, #6]
 800bce0:	4613      	mov	r3, r2
 800bce2:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED2_CONV_ST;
 800bce4:	230d      	movs	r3, #13
 800bce6:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED2_CONV_END;
 800bce8:	230e      	movs	r3, #14
 800bcea:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bcec:	4b17      	ldr	r3, [pc, #92]	; (800bd4c <hr3_set_led2_convert_start_end+0x78>)
 800bcee:	881b      	ldrh	r3, [r3, #0]
 800bcf0:	823b      	strh	r3, [r7, #16]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bcf6:	4b15      	ldr	r3, [pc, #84]	; (800bd4c <hr3_set_led2_convert_start_end+0x78>)
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	81bb      	strh	r3, [r7, #12]
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bd00:	88fb      	ldrh	r3, [r7, #6]
 800bd02:	0a1b      	lsrs	r3, r3, #8
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bd0a:	88fb      	ldrh	r3, [r7, #6]
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bd10:	f107 0110 	add.w	r1, r7, #16
 800bd14:	f107 0317 	add.w	r3, r7, #23
 800bd18:	2203      	movs	r2, #3
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7ff fd0a 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bd20:	88bb      	ldrh	r3, [r7, #4]
 800bd22:	0a1b      	lsrs	r3, r3, #8
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bd2a:	88bb      	ldrh	r3, [r7, #4]
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bd30:	f107 010c 	add.w	r1, r7, #12
 800bd34:	f107 0316 	add.w	r3, r7, #22
 800bd38:	2203      	movs	r2, #3
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7ff fcfa 	bl	800b734 <hr3_hal_write>

    return 0;
 800bd40:	2300      	movs	r3, #0

}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3718      	adds	r7, #24
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	0800d19c 	.word	0x0800d19c

0800bd50 <hr3_set_led3_convert_start_end>:

uint8_t hr3_set_led3_convert_start_end( uint16_t start, uint16_t end )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	460a      	mov	r2, r1
 800bd5a:	80fb      	strh	r3, [r7, #6]
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED3_CONV_ST;
 800bd60:	230f      	movs	r3, #15
 800bd62:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED3_CONV_END;
 800bd64:	2310      	movs	r3, #16
 800bd66:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bd68:	4b17      	ldr	r3, [pc, #92]	; (800bdc8 <hr3_set_led3_convert_start_end+0x78>)
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	823b      	strh	r3, [r7, #16]
 800bd6e:	2300      	movs	r3, #0
 800bd70:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bd72:	4b15      	ldr	r3, [pc, #84]	; (800bdc8 <hr3_set_led3_convert_start_end+0x78>)
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	81bb      	strh	r3, [r7, #12]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bd7c:	88fb      	ldrh	r3, [r7, #6]
 800bd7e:	0a1b      	lsrs	r3, r3, #8
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bd86:	88fb      	ldrh	r3, [r7, #6]
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bd8c:	f107 0110 	add.w	r1, r7, #16
 800bd90:	f107 0317 	add.w	r3, r7, #23
 800bd94:	2203      	movs	r2, #3
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7ff fccc 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bd9c:	88bb      	ldrh	r3, [r7, #4]
 800bd9e:	0a1b      	lsrs	r3, r3, #8
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bda6:	88bb      	ldrh	r3, [r7, #4]
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bdac:	f107 010c 	add.w	r1, r7, #12
 800bdb0:	f107 0316 	add.w	r3, r7, #22
 800bdb4:	2203      	movs	r2, #3
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7ff fcbc 	bl	800b734 <hr3_hal_write>

    return 0;
 800bdbc:	2300      	movs	r3, #0

}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3718      	adds	r7, #24
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	0800d19c 	.word	0x0800d19c

0800bdcc <hr3_set_led1_convert_start_end>:

uint8_t hr3_set_led1_convert_start_end( uint16_t start, uint16_t end )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	460a      	mov	r2, r1
 800bdd6:	80fb      	strh	r3, [r7, #6]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED1_CONV_ST;
 800bddc:	2311      	movs	r3, #17
 800bdde:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED1_CONV_END;
 800bde0:	2312      	movs	r3, #18
 800bde2:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bde4:	4b17      	ldr	r3, [pc, #92]	; (800be44 <hr3_set_led1_convert_start_end+0x78>)
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	823b      	strh	r3, [r7, #16]
 800bdea:	2300      	movs	r3, #0
 800bdec:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bdee:	4b15      	ldr	r3, [pc, #84]	; (800be44 <hr3_set_led1_convert_start_end+0x78>)
 800bdf0:	881b      	ldrh	r3, [r3, #0]
 800bdf2:	81bb      	strh	r3, [r7, #12]
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bdf8:	88fb      	ldrh	r3, [r7, #6]
 800bdfa:	0a1b      	lsrs	r3, r3, #8
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800be02:	88fb      	ldrh	r3, [r7, #6]
 800be04:	b2db      	uxtb	r3, r3
 800be06:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800be08:	f107 0110 	add.w	r1, r7, #16
 800be0c:	f107 0317 	add.w	r3, r7, #23
 800be10:	2203      	movs	r2, #3
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff fc8e 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800be18:	88bb      	ldrh	r3, [r7, #4]
 800be1a:	0a1b      	lsrs	r3, r3, #8
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800be22:	88bb      	ldrh	r3, [r7, #4]
 800be24:	b2db      	uxtb	r3, r3
 800be26:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800be28:	f107 010c 	add.w	r1, r7, #12
 800be2c:	f107 0316 	add.w	r3, r7, #22
 800be30:	2203      	movs	r2, #3
 800be32:	4618      	mov	r0, r3
 800be34:	f7ff fc7e 	bl	800b734 <hr3_hal_write>

    return 0;
 800be38:	2300      	movs	r3, #0

}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3718      	adds	r7, #24
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	0800d19c 	.word	0x0800d19c

0800be48 <hr3_set_amb1_convert_start_end>:

uint8_t hr3_set_amb1_convert_start_end( uint16_t start, uint16_t end )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	4603      	mov	r3, r0
 800be50:	460a      	mov	r2, r1
 800be52:	80fb      	strh	r3, [r7, #6]
 800be54:	4613      	mov	r3, r2
 800be56:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = AMB1_CONV_ST;
 800be58:	2313      	movs	r3, #19
 800be5a:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = AMB1_CONV_END;
 800be5c:	2314      	movs	r3, #20
 800be5e:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800be60:	4b17      	ldr	r3, [pc, #92]	; (800bec0 <hr3_set_amb1_convert_start_end+0x78>)
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	823b      	strh	r3, [r7, #16]
 800be66:	2300      	movs	r3, #0
 800be68:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800be6a:	4b15      	ldr	r3, [pc, #84]	; (800bec0 <hr3_set_amb1_convert_start_end+0x78>)
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	81bb      	strh	r3, [r7, #12]
 800be70:	2300      	movs	r3, #0
 800be72:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800be74:	88fb      	ldrh	r3, [r7, #6]
 800be76:	0a1b      	lsrs	r3, r3, #8
 800be78:	b29b      	uxth	r3, r3
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800be7e:	88fb      	ldrh	r3, [r7, #6]
 800be80:	b2db      	uxtb	r3, r3
 800be82:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800be84:	f107 0110 	add.w	r1, r7, #16
 800be88:	f107 0317 	add.w	r3, r7, #23
 800be8c:	2203      	movs	r2, #3
 800be8e:	4618      	mov	r0, r3
 800be90:	f7ff fc50 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800be94:	88bb      	ldrh	r3, [r7, #4]
 800be96:	0a1b      	lsrs	r3, r3, #8
 800be98:	b29b      	uxth	r3, r3
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800be9e:	88bb      	ldrh	r3, [r7, #4]
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bea4:	f107 010c 	add.w	r1, r7, #12
 800bea8:	f107 0316 	add.w	r3, r7, #22
 800beac:	2203      	movs	r2, #3
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff fc40 	bl	800b734 <hr3_hal_write>

    return 0;
 800beb4:	2300      	movs	r3, #0

}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3718      	adds	r7, #24
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	0800d19c 	.word	0x0800d19c

0800bec4 <hr3_set_adc_reset0_start_end>:

uint8_t hr3_set_adc_reset0_start_end( uint16_t start, uint16_t end )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	4603      	mov	r3, r0
 800becc:	460a      	mov	r2, r1
 800bece:	80fb      	strh	r3, [r7, #6]
 800bed0:	4613      	mov	r3, r2
 800bed2:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = ADC_RST_P0_ST;
 800bed4:	2315      	movs	r3, #21
 800bed6:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = ADC_RST_P0_END;
 800bed8:	2316      	movs	r3, #22
 800beda:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bedc:	4b17      	ldr	r3, [pc, #92]	; (800bf3c <hr3_set_adc_reset0_start_end+0x78>)
 800bede:	881b      	ldrh	r3, [r3, #0]
 800bee0:	823b      	strh	r3, [r7, #16]
 800bee2:	2300      	movs	r3, #0
 800bee4:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bee6:	4b15      	ldr	r3, [pc, #84]	; (800bf3c <hr3_set_adc_reset0_start_end+0x78>)
 800bee8:	881b      	ldrh	r3, [r3, #0]
 800beea:	81bb      	strh	r3, [r7, #12]
 800beec:	2300      	movs	r3, #0
 800beee:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bef0:	88fb      	ldrh	r3, [r7, #6]
 800bef2:	0a1b      	lsrs	r3, r3, #8
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800befa:	88fb      	ldrh	r3, [r7, #6]
 800befc:	b2db      	uxtb	r3, r3
 800befe:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bf00:	f107 0110 	add.w	r1, r7, #16
 800bf04:	f107 0317 	add.w	r3, r7, #23
 800bf08:	2203      	movs	r2, #3
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7ff fc12 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bf10:	88bb      	ldrh	r3, [r7, #4]
 800bf12:	0a1b      	lsrs	r3, r3, #8
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bf1a:	88bb      	ldrh	r3, [r7, #4]
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bf20:	f107 010c 	add.w	r1, r7, #12
 800bf24:	f107 0316 	add.w	r3, r7, #22
 800bf28:	2203      	movs	r2, #3
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7ff fc02 	bl	800b734 <hr3_hal_write>

    return 0;
 800bf30:	2300      	movs	r3, #0

}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	0800d19c 	.word	0x0800d19c

0800bf40 <hr3_set_adc_reset1_start_end>:

uint8_t hr3_set_adc_reset1_start_end( uint16_t start, uint16_t end )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	4603      	mov	r3, r0
 800bf48:	460a      	mov	r2, r1
 800bf4a:	80fb      	strh	r3, [r7, #6]
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = ADC_RST_P1_ST;
 800bf50:	2317      	movs	r3, #23
 800bf52:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = ADC_RST_P1_END;
 800bf54:	2318      	movs	r3, #24
 800bf56:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bf58:	4b17      	ldr	r3, [pc, #92]	; (800bfb8 <hr3_set_adc_reset1_start_end+0x78>)
 800bf5a:	881b      	ldrh	r3, [r3, #0]
 800bf5c:	823b      	strh	r3, [r7, #16]
 800bf5e:	2300      	movs	r3, #0
 800bf60:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bf62:	4b15      	ldr	r3, [pc, #84]	; (800bfb8 <hr3_set_adc_reset1_start_end+0x78>)
 800bf64:	881b      	ldrh	r3, [r3, #0]
 800bf66:	81bb      	strh	r3, [r7, #12]
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800bf6c:	88fb      	ldrh	r3, [r7, #6]
 800bf6e:	0a1b      	lsrs	r3, r3, #8
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bf76:	88fb      	ldrh	r3, [r7, #6]
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bf7c:	f107 0110 	add.w	r1, r7, #16
 800bf80:	f107 0317 	add.w	r3, r7, #23
 800bf84:	2203      	movs	r2, #3
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7ff fbd4 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800bf8c:	88bb      	ldrh	r3, [r7, #4]
 800bf8e:	0a1b      	lsrs	r3, r3, #8
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800bf96:	88bb      	ldrh	r3, [r7, #4]
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800bf9c:	f107 010c 	add.w	r1, r7, #12
 800bfa0:	f107 0316 	add.w	r3, r7, #22
 800bfa4:	2203      	movs	r2, #3
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7ff fbc4 	bl	800b734 <hr3_hal_write>

    return 0;
 800bfac:	2300      	movs	r3, #0

}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3718      	adds	r7, #24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	0800d19c 	.word	0x0800d19c

0800bfbc <hr3_set_adc_reset2_start_end>:

uint8_t hr3_set_adc_reset2_start_end( uint16_t start, uint16_t end )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	460a      	mov	r2, r1
 800bfc6:	80fb      	strh	r3, [r7, #6]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = ADC_RST_P2_ST;
 800bfcc:	2319      	movs	r3, #25
 800bfce:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = ADC_RST_P2_END;
 800bfd0:	231a      	movs	r3, #26
 800bfd2:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800bfd4:	4b17      	ldr	r3, [pc, #92]	; (800c034 <hr3_set_adc_reset2_start_end+0x78>)
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	823b      	strh	r3, [r7, #16]
 800bfda:	2300      	movs	r3, #0
 800bfdc:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800bfde:	4b15      	ldr	r3, [pc, #84]	; (800c034 <hr3_set_adc_reset2_start_end+0x78>)
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	81bb      	strh	r3, [r7, #12]
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535  )
        return -1;

    temp_st[1] = start >> 8;
 800bfe8:	88fb      	ldrh	r3, [r7, #6]
 800bfea:	0a1b      	lsrs	r3, r3, #8
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800bff2:	88fb      	ldrh	r3, [r7, #6]
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800bff8:	f107 0110 	add.w	r1, r7, #16
 800bffc:	f107 0317 	add.w	r3, r7, #23
 800c000:	2203      	movs	r2, #3
 800c002:	4618      	mov	r0, r3
 800c004:	f7ff fb96 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800c008:	88bb      	ldrh	r3, [r7, #4]
 800c00a:	0a1b      	lsrs	r3, r3, #8
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800c012:	88bb      	ldrh	r3, [r7, #4]
 800c014:	b2db      	uxtb	r3, r3
 800c016:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800c018:	f107 010c 	add.w	r1, r7, #12
 800c01c:	f107 0316 	add.w	r3, r7, #22
 800c020:	2203      	movs	r2, #3
 800c022:	4618      	mov	r0, r3
 800c024:	f7ff fb86 	bl	800b734 <hr3_hal_write>

    return 0;
 800c028:	2300      	movs	r3, #0

}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3718      	adds	r7, #24
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	0800d19c 	.word	0x0800d19c

0800c038 <hr3_set_adc_reset3_start_end>:

uint8_t hr3_set_adc_reset3_start_end( uint16_t start, uint16_t end )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	4603      	mov	r3, r0
 800c040:	460a      	mov	r2, r1
 800c042:	80fb      	strh	r3, [r7, #6]
 800c044:	4613      	mov	r3, r2
 800c046:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = ADC_RST_P3_ST;
 800c048:	231b      	movs	r3, #27
 800c04a:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = ADC_RST_P3_END;
 800c04c:	231c      	movs	r3, #28
 800c04e:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800c050:	4b17      	ldr	r3, [pc, #92]	; (800c0b0 <hr3_set_adc_reset3_start_end+0x78>)
 800c052:	881b      	ldrh	r3, [r3, #0]
 800c054:	823b      	strh	r3, [r7, #16]
 800c056:	2300      	movs	r3, #0
 800c058:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800c05a:	4b15      	ldr	r3, [pc, #84]	; (800c0b0 <hr3_set_adc_reset3_start_end+0x78>)
 800c05c:	881b      	ldrh	r3, [r3, #0]
 800c05e:	81bb      	strh	r3, [r7, #12]
 800c060:	2300      	movs	r3, #0
 800c062:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800c064:	88fb      	ldrh	r3, [r7, #6]
 800c066:	0a1b      	lsrs	r3, r3, #8
 800c068:	b29b      	uxth	r3, r3
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800c06e:	88fb      	ldrh	r3, [r7, #6]
 800c070:	b2db      	uxtb	r3, r3
 800c072:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800c074:	f107 0110 	add.w	r1, r7, #16
 800c078:	f107 0317 	add.w	r3, r7, #23
 800c07c:	2203      	movs	r2, #3
 800c07e:	4618      	mov	r0, r3
 800c080:	f7ff fb58 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800c084:	88bb      	ldrh	r3, [r7, #4]
 800c086:	0a1b      	lsrs	r3, r3, #8
 800c088:	b29b      	uxth	r3, r3
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800c08e:	88bb      	ldrh	r3, [r7, #4]
 800c090:	b2db      	uxtb	r3, r3
 800c092:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800c094:	f107 010c 	add.w	r1, r7, #12
 800c098:	f107 0316 	add.w	r3, r7, #22
 800c09c:	2203      	movs	r2, #3
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7ff fb48 	bl	800b734 <hr3_hal_write>

    return 0;
 800c0a4:	2300      	movs	r3, #0

}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3718      	adds	r7, #24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	0800d19c 	.word	0x0800d19c

0800c0b4 <hr3_set_prpct_count>:

uint8_t hr3_set_prpct_count( uint16_t count )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	80fb      	strh	r3, [r7, #6]
    uint8_t reg = PRPCT;
 800c0be:	231d      	movs	r3, #29
 800c0c0:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c0c2:	4b0d      	ldr	r3, [pc, #52]	; (800c0f8 <hr3_set_prpct_count+0x44>)
 800c0c4:	881b      	ldrh	r3, [r3, #0]
 800c0c6:	81bb      	strh	r3, [r7, #12]
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	73bb      	strb	r3, [r7, #14]

    if( count > 65535 )
        return -1;

    temp[1] = count >> 8;
 800c0cc:	88fb      	ldrh	r3, [r7, #6]
 800c0ce:	0a1b      	lsrs	r3, r3, #8
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	737b      	strb	r3, [r7, #13]
    temp[2] = (uint8_t)count;
 800c0d6:	88fb      	ldrh	r3, [r7, #6]
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg, temp, 3 );
 800c0dc:	f107 010c 	add.w	r1, r7, #12
 800c0e0:	f107 030f 	add.w	r3, r7, #15
 800c0e4:	2203      	movs	r2, #3
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7ff fb24 	bl	800b734 <hr3_hal_write>

    return 0;
 800c0ec:	2300      	movs	r3, #0

}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	0800d19c 	.word	0x0800d19c

0800c0fc <hr3_set_timer_and_average_num>:

uint8_t hr3_set_timer_and_average_num( bool enable, uint8_t av_num )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	460a      	mov	r2, r1
 800c106:	71fb      	strb	r3, [r7, #7]
 800c108:	4613      	mov	r3, r2
 800c10a:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = TIM_NUMAV;
 800c10c:	231e      	movs	r3, #30
 800c10e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c110:	4b18      	ldr	r3, [pc, #96]	; (800c174 <hr3_set_timer_and_average_num+0x78>)
 800c112:	881b      	ldrh	r3, [r3, #0]
 800c114:	81bb      	strh	r3, [r7, #12]
 800c116:	2300      	movs	r3, #0
 800c118:	73bb      	strb	r3, [r7, #14]

    if( av_num > 15 || av_num < 0 )
 800c11a:	79bb      	ldrb	r3, [r7, #6]
 800c11c:	2b0f      	cmp	r3, #15
 800c11e:	d901      	bls.n	800c124 <hr3_set_timer_and_average_num+0x28>
        return -1;
 800c120:	23ff      	movs	r3, #255	; 0xff
 800c122:	e023      	b.n	800c16c <hr3_set_timer_and_average_num+0x70>

    if( enable )
 800c124:	79fb      	ldrb	r3, [r7, #7]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d012      	beq.n	800c150 <hr3_set_timer_and_average_num+0x54>
    {
        temp[1] |= ( 1 << TIMEREN );
 800c12a:	7b7b      	ldrb	r3, [r7, #13]
 800c12c:	f043 0301 	orr.w	r3, r3, #1
 800c130:	b2db      	uxtb	r3, r3
 800c132:	737b      	strb	r3, [r7, #13]
        temp[2] |= ( av_num << NUMAV );
 800c134:	7bba      	ldrb	r2, [r7, #14]
 800c136:	79bb      	ldrb	r3, [r7, #6]
 800c138:	4313      	orrs	r3, r2
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c13e:	f107 010c 	add.w	r1, r7, #12
 800c142:	f107 030f 	add.w	r3, r7, #15
 800c146:	2203      	movs	r2, #3
 800c148:	4618      	mov	r0, r3
 800c14a:	f7ff faf3 	bl	800b734 <hr3_hal_write>
 800c14e:	e00c      	b.n	800c16a <hr3_set_timer_and_average_num+0x6e>
    }
    else
    {
        temp[2] |= ( av_num << NUMAV );
 800c150:	7bba      	ldrb	r2, [r7, #14]
 800c152:	79bb      	ldrb	r3, [r7, #6]
 800c154:	4313      	orrs	r3, r2
 800c156:	b2db      	uxtb	r3, r3
 800c158:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c15a:	f107 010c 	add.w	r1, r7, #12
 800c15e:	f107 030f 	add.w	r3, r7, #15
 800c162:	2203      	movs	r2, #3
 800c164:	4618      	mov	r0, r3
 800c166:	f7ff fae5 	bl	800b734 <hr3_hal_write>
    }

    return 0;
 800c16a:	2300      	movs	r3, #0

}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	0800d19c 	.word	0x0800d19c

0800c178 <hr3_set_seperate_tia_gain>:

uint8_t hr3_set_seperate_tia_gain( bool seperate, uint8_t cf_setting,
                                   uint8_t gain_setting )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4603      	mov	r3, r0
 800c180:	71fb      	strb	r3, [r7, #7]
 800c182:	460b      	mov	r3, r1
 800c184:	71bb      	strb	r3, [r7, #6]
 800c186:	4613      	mov	r3, r2
 800c188:	717b      	strb	r3, [r7, #5]
    uint8_t reg = TIA_GAINS2;
 800c18a:	2320      	movs	r3, #32
 800c18c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c18e:	4b22      	ldr	r3, [pc, #136]	; (800c218 <hr3_set_seperate_tia_gain+0xa0>)
 800c190:	881b      	ldrh	r3, [r3, #0]
 800c192:	81bb      	strh	r3, [r7, #12]
 800c194:	2300      	movs	r3, #0
 800c196:	73bb      	strb	r3, [r7, #14]

    if( cf_setting > 7 || gain_setting > 7 )
 800c198:	79bb      	ldrb	r3, [r7, #6]
 800c19a:	2b07      	cmp	r3, #7
 800c19c:	d802      	bhi.n	800c1a4 <hr3_set_seperate_tia_gain+0x2c>
 800c19e:	797b      	ldrb	r3, [r7, #5]
 800c1a0:	2b07      	cmp	r3, #7
 800c1a2:	d901      	bls.n	800c1a8 <hr3_set_seperate_tia_gain+0x30>
        return -1;
 800c1a4:	23ff      	movs	r3, #255	; 0xff
 800c1a6:	e032      	b.n	800c20e <hr3_set_seperate_tia_gain+0x96>

    if( seperate )
 800c1a8:	79fb      	ldrb	r3, [r7, #7]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d018      	beq.n	800c1e0 <hr3_set_seperate_tia_gain+0x68>
    {
        temp[1] = TIA_ENSEPGAIN;
 800c1ae:	2308      	movs	r3, #8
 800c1b0:	737b      	strb	r3, [r7, #13]
        temp[2] |= ( cf_setting << TIA_CF_SEP );
 800c1b2:	7bbb      	ldrb	r3, [r7, #14]
 800c1b4:	b25a      	sxtb	r2, r3
 800c1b6:	79bb      	ldrb	r3, [r7, #6]
 800c1b8:	00db      	lsls	r3, r3, #3
 800c1ba:	b25b      	sxtb	r3, r3
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	b25b      	sxtb	r3, r3
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	73bb      	strb	r3, [r7, #14]
        temp[2] |= ( gain_setting << TIA_GAIN_SEP );
 800c1c4:	7bba      	ldrb	r2, [r7, #14]
 800c1c6:	797b      	ldrb	r3, [r7, #5]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c1ce:	f107 010c 	add.w	r1, r7, #12
 800c1d2:	f107 030f 	add.w	r3, r7, #15
 800c1d6:	2203      	movs	r2, #3
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7ff faab 	bl	800b734 <hr3_hal_write>
 800c1de:	e015      	b.n	800c20c <hr3_set_seperate_tia_gain+0x94>
    }
    else
    {
        temp[2] |= ( cf_setting << TIA_CF_SEP );
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	b25a      	sxtb	r2, r3
 800c1e4:	79bb      	ldrb	r3, [r7, #6]
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	b25b      	sxtb	r3, r3
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	b25b      	sxtb	r3, r3
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	73bb      	strb	r3, [r7, #14]
        temp[2] |= ( gain_setting << TIA_GAIN_SEP );
 800c1f2:	7bba      	ldrb	r2, [r7, #14]
 800c1f4:	797b      	ldrb	r3, [r7, #5]
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c1fc:	f107 010c 	add.w	r1, r7, #12
 800c200:	f107 030f 	add.w	r3, r7, #15
 800c204:	2203      	movs	r2, #3
 800c206:	4618      	mov	r0, r3
 800c208:	f7ff fa94 	bl	800b734 <hr3_hal_write>
    }
    
    return 0;
 800c20c:	2300      	movs	r3, #0

}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	0800d19c 	.word	0x0800d19c

0800c21c <hr3_set_tia_gain>:

uint8_t hr3_set_tia_gain( bool replace, uint8_t cf_setting,
                             uint8_t gain_setting )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	4603      	mov	r3, r0
 800c224:	71fb      	strb	r3, [r7, #7]
 800c226:	460b      	mov	r3, r1
 800c228:	71bb      	strb	r3, [r7, #6]
 800c22a:	4613      	mov	r3, r2
 800c22c:	717b      	strb	r3, [r7, #5]
    uint8_t reg = TIA_GAINS1;
 800c22e:	2321      	movs	r3, #33	; 0x21
 800c230:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c232:	4b23      	ldr	r3, [pc, #140]	; (800c2c0 <hr3_set_tia_gain+0xa4>)
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	81bb      	strh	r3, [r7, #12]
 800c238:	2300      	movs	r3, #0
 800c23a:	73bb      	strb	r3, [r7, #14]

    if( cf_setting > 7 || gain_setting > 7 )
 800c23c:	79bb      	ldrb	r3, [r7, #6]
 800c23e:	2b07      	cmp	r3, #7
 800c240:	d802      	bhi.n	800c248 <hr3_set_tia_gain+0x2c>
 800c242:	797b      	ldrb	r3, [r7, #5]
 800c244:	2b07      	cmp	r3, #7
 800c246:	d901      	bls.n	800c24c <hr3_set_tia_gain+0x30>
        return -1;
 800c248:	23ff      	movs	r3, #255	; 0xff
 800c24a:	e034      	b.n	800c2b6 <hr3_set_tia_gain+0x9a>

    if( replace )
 800c24c:	79fb      	ldrb	r3, [r7, #7]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d018      	beq.n	800c284 <hr3_set_tia_gain+0x68>
    {
        temp[1] = TIA_PROG_TG_EN;
 800c252:	2301      	movs	r3, #1
 800c254:	737b      	strb	r3, [r7, #13]
        temp[2] |= ( cf_setting << TIA_CF );
 800c256:	7bbb      	ldrb	r3, [r7, #14]
 800c258:	b25a      	sxtb	r2, r3
 800c25a:	79bb      	ldrb	r3, [r7, #6]
 800c25c:	00db      	lsls	r3, r3, #3
 800c25e:	b25b      	sxtb	r3, r3
 800c260:	4313      	orrs	r3, r2
 800c262:	b25b      	sxtb	r3, r3
 800c264:	b2db      	uxtb	r3, r3
 800c266:	73bb      	strb	r3, [r7, #14]
        temp[2] |= ( gain_setting << TIA_GAIN );
 800c268:	7bba      	ldrb	r2, [r7, #14]
 800c26a:	797b      	ldrb	r3, [r7, #5]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c272:	f107 010c 	add.w	r1, r7, #12
 800c276:	f107 030f 	add.w	r3, r7, #15
 800c27a:	2203      	movs	r2, #3
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7ff fa59 	bl	800b734 <hr3_hal_write>
 800c282:	e017      	b.n	800c2b4 <hr3_set_tia_gain+0x98>
    }
    else
    {
        temp[1] = 0;
 800c284:	2300      	movs	r3, #0
 800c286:	737b      	strb	r3, [r7, #13]
        temp[2] |= ( cf_setting << TIA_CF_SEP );
 800c288:	7bbb      	ldrb	r3, [r7, #14]
 800c28a:	b25a      	sxtb	r2, r3
 800c28c:	79bb      	ldrb	r3, [r7, #6]
 800c28e:	00db      	lsls	r3, r3, #3
 800c290:	b25b      	sxtb	r3, r3
 800c292:	4313      	orrs	r3, r2
 800c294:	b25b      	sxtb	r3, r3
 800c296:	b2db      	uxtb	r3, r3
 800c298:	73bb      	strb	r3, [r7, #14]
        temp[2] |= ( gain_setting << TIA_GAIN_SEP );
 800c29a:	7bba      	ldrb	r2, [r7, #14]
 800c29c:	797b      	ldrb	r3, [r7, #5]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c2a4:	f107 010c 	add.w	r1, r7, #12
 800c2a8:	f107 030f 	add.w	r3, r7, #15
 800c2ac:	2203      	movs	r2, #3
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7ff fa40 	bl	800b734 <hr3_hal_write>
    }

    return 0;
 800c2b4:	2300      	movs	r3, #0

}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	0800d19c 	.word	0x0800d19c

0800c2c4 <hr3_set_led_currents>:

}

uint8_t hr3_set_led_currents( uint8_t led1_current, uint8_t led2_current,
                              uint8_t led3_current )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	71fb      	strb	r3, [r7, #7]
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	71bb      	strb	r3, [r7, #6]
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	717b      	strb	r3, [r7, #5]
    uint8_t reg = LED_CONFIG;
 800c2d6:	2322      	movs	r3, #34	; 0x22
 800c2d8:	72fb      	strb	r3, [r7, #11]
    uint8_t temp[3] = { 0 };
 800c2da:	4b21      	ldr	r3, [pc, #132]	; (800c360 <hr3_set_led_currents+0x9c>)
 800c2dc:	881b      	ldrh	r3, [r3, #0]
 800c2de:	813b      	strh	r3, [r7, #8]
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	72bb      	strb	r3, [r7, #10]
    unsigned long currents = 0;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	60fb      	str	r3, [r7, #12]

    if( led1_current > 63 ||
 800c2e8:	79fb      	ldrb	r3, [r7, #7]
 800c2ea:	2b3f      	cmp	r3, #63	; 0x3f
 800c2ec:	d805      	bhi.n	800c2fa <hr3_set_led_currents+0x36>
 800c2ee:	79bb      	ldrb	r3, [r7, #6]
 800c2f0:	2b3f      	cmp	r3, #63	; 0x3f
 800c2f2:	d802      	bhi.n	800c2fa <hr3_set_led_currents+0x36>
        led2_current > 63 ||
 800c2f4:	797b      	ldrb	r3, [r7, #5]
 800c2f6:	2b3f      	cmp	r3, #63	; 0x3f
 800c2f8:	d901      	bls.n	800c2fe <hr3_set_led_currents+0x3a>
        led3_current > 63 )
        return -1;
 800c2fa:	23ff      	movs	r3, #255	; 0xff
 800c2fc:	e02c      	b.n	800c358 <hr3_set_led_currents+0x94>

    currents |= ( led3_current << 12 );
 800c2fe:	797b      	ldrb	r3, [r7, #5]
 800c300:	031b      	lsls	r3, r3, #12
 800c302:	461a      	mov	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	4313      	orrs	r3, r2
 800c308:	60fb      	str	r3, [r7, #12]
    currents |= ( led2_current << 6 );
 800c30a:	79bb      	ldrb	r3, [r7, #6]
 800c30c:	019b      	lsls	r3, r3, #6
 800c30e:	461a      	mov	r2, r3
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	4313      	orrs	r3, r2
 800c314:	60fb      	str	r3, [r7, #12]
    currents |= led1_current;
 800c316:	79fb      	ldrb	r3, [r7, #7]
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	4313      	orrs	r3, r2
 800c31c:	60fb      	str	r3, [r7, #12]

    temp[2] |= currents;
 800c31e:	7aba      	ldrb	r2, [r7, #10]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	b2db      	uxtb	r3, r3
 800c324:	4313      	orrs	r3, r2
 800c326:	b2db      	uxtb	r3, r3
 800c328:	72bb      	strb	r3, [r7, #10]
    temp[1] |= currents >> 8;
 800c32a:	7a7a      	ldrb	r2, [r7, #9]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	0a1b      	lsrs	r3, r3, #8
 800c330:	b2db      	uxtb	r3, r3
 800c332:	4313      	orrs	r3, r2
 800c334:	b2db      	uxtb	r3, r3
 800c336:	727b      	strb	r3, [r7, #9]
    temp[0] |= currents >> 16;
 800c338:	7a3a      	ldrb	r2, [r7, #8]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	0c1b      	lsrs	r3, r3, #16
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	4313      	orrs	r3, r2
 800c342:	b2db      	uxtb	r3, r3
 800c344:	723b      	strb	r3, [r7, #8]


    hr3_hal_write( &reg, temp, 3 );
 800c346:	f107 0108 	add.w	r1, r7, #8
 800c34a:	f107 030b 	add.w	r3, r7, #11
 800c34e:	2203      	movs	r2, #3
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff f9ef 	bl	800b734 <hr3_hal_write>

    return 0;
 800c356:	2300      	movs	r3, #0

}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	0800d19c 	.word	0x0800d19c

0800c364 <hr3_set_dynamic_settings>:

uint8_t hr3_set_dynamic_settings( dynamic_modes_t* modes )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
    uint8_t reg = SETTINGS;
 800c36c:	2323      	movs	r3, #35	; 0x23
 800c36e:	72fb      	strb	r3, [r7, #11]
    uint8_t temp[3] = { 0 };
 800c370:	4b2f      	ldr	r3, [pc, #188]	; (800c430 <hr3_set_dynamic_settings+0xcc>)
 800c372:	881b      	ldrh	r3, [r3, #0]
 800c374:	813b      	strh	r3, [r7, #8]
 800c376:	2300      	movs	r3, #0
 800c378:	72bb      	strb	r3, [r7, #10]
    unsigned long buffer = 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	60fb      	str	r3, [r7, #12]

    buffer |= ( modes->transmit << STT_DYNMC1 );
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	051b      	lsls	r3, r3, #20
 800c384:	461a      	mov	r2, r3
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	4313      	orrs	r3, r2
 800c38a:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->curr_range << STT_ILED_2X );
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	785b      	ldrb	r3, [r3, #1]
 800c390:	045b      	lsls	r3, r3, #17
 800c392:	461a      	mov	r2, r3
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	4313      	orrs	r3, r2
 800c398:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->adc_power << STT_DYNMC2 );
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	789b      	ldrb	r3, [r3, #2]
 800c39e:	039b      	lsls	r3, r3, #14
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->clk_mode << STT_OSC_EN );
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	78db      	ldrb	r3, [r3, #3]
 800c3ac:	025b      	lsls	r3, r3, #9
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->tia_power << STT_DYNMC3 );
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	791b      	ldrb	r3, [r3, #4]
 800c3ba:	011b      	lsls	r3, r3, #4
 800c3bc:	461a      	mov	r2, r3
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->rest_of_adc << STT_DYNMC4 );
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	795b      	ldrb	r3, [r3, #5]
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->afe_rx_mode << STT_PDNRX );
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	799b      	ldrb	r3, [r3, #6]
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	461a      	mov	r2, r3
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]
    buffer |= ( modes->afe_mode << STT_PDNAFE );
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	79db      	ldrb	r3, [r3, #7]
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	60fb      	str	r3, [r7, #12]

    temp[2] |= buffer;
 800c3ec:	7aba      	ldrb	r2, [r7, #10]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	72bb      	strb	r3, [r7, #10]
    temp[1] |= buffer >> 8;
 800c3f8:	7a7a      	ldrb	r2, [r7, #9]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	0a1b      	lsrs	r3, r3, #8
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	4313      	orrs	r3, r2
 800c402:	b2db      	uxtb	r3, r3
 800c404:	727b      	strb	r3, [r7, #9]
    temp[0] |= buffer >> 16;
 800c406:	7a3a      	ldrb	r2, [r7, #8]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	0c1b      	lsrs	r3, r3, #16
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	4313      	orrs	r3, r2
 800c410:	b2db      	uxtb	r3, r3
 800c412:	723b      	strb	r3, [r7, #8]


    hr3_hal_write( &reg, temp, 3 );
 800c414:	f107 0108 	add.w	r1, r7, #8
 800c418:	f107 030b 	add.w	r3, r7, #11
 800c41c:	2203      	movs	r2, #3
 800c41e:	4618      	mov	r0, r3
 800c420:	f7ff f988 	bl	800b734 <hr3_hal_write>

    return 0;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	0800d19c 	.word	0x0800d19c

0800c434 <hr3_set_clkout_div>:
    return 0;

}

uint8_t hr3_set_clkout_div( bool enable, uint8_t div )
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	460a      	mov	r2, r1
 800c43e:	71fb      	strb	r3, [r7, #7]
 800c440:	4613      	mov	r3, r2
 800c442:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = CLKOUT;
 800c444:	2329      	movs	r3, #41	; 0x29
 800c446:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c448:	4b16      	ldr	r3, [pc, #88]	; (800c4a4 <hr3_set_clkout_div+0x70>)
 800c44a:	881b      	ldrh	r3, [r3, #0]
 800c44c:	81bb      	strh	r3, [r7, #12]
 800c44e:	2300      	movs	r3, #0
 800c450:	73bb      	strb	r3, [r7, #14]

    if( div > 15 )
 800c452:	79bb      	ldrb	r3, [r7, #6]
 800c454:	2b0f      	cmp	r3, #15
 800c456:	d901      	bls.n	800c45c <hr3_set_clkout_div+0x28>
        return -1;
 800c458:	23ff      	movs	r3, #255	; 0xff
 800c45a:	e01e      	b.n	800c49a <hr3_set_clkout_div+0x66>

    if( enable )
 800c45c:	79fb      	ldrb	r3, [r7, #7]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00e      	beq.n	800c480 <hr3_set_clkout_div+0x4c>
    {
        temp[1] = ( 1 << CLKOUT_EN );
 800c462:	2302      	movs	r3, #2
 800c464:	737b      	strb	r3, [r7, #13]
        temp[2] = ( div << CLKOUT_DIV );
 800c466:	79bb      	ldrb	r3, [r7, #6]
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c46e:	f107 010c 	add.w	r1, r7, #12
 800c472:	f107 030f 	add.w	r3, r7, #15
 800c476:	2203      	movs	r2, #3
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff f95b 	bl	800b734 <hr3_hal_write>
 800c47e:	e00b      	b.n	800c498 <hr3_set_clkout_div+0x64>
    }
    else
    {
        temp[2] = ( div << CLKOUT_DIV );
 800c480:	79bb      	ldrb	r3, [r7, #6]
 800c482:	005b      	lsls	r3, r3, #1
 800c484:	b2db      	uxtb	r3, r3
 800c486:	73bb      	strb	r3, [r7, #14]
        hr3_hal_write( &reg, temp, 3 );
 800c488:	f107 010c 	add.w	r1, r7, #12
 800c48c:	f107 030f 	add.w	r3, r7, #15
 800c490:	2203      	movs	r2, #3
 800c492:	4618      	mov	r0, r3
 800c494:	f7ff f94e 	bl	800b734 <hr3_hal_write>
    }

    return 0;
 800c498:	2300      	movs	r3, #0

}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	0800d19c 	.word	0x0800d19c

0800c4a8 <hr3_get_led1_val>:

uint32_t hr3_get_led1_val( void )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
    uint8_t reg = LED1VAL;
 800c4ae:	232c      	movs	r3, #44	; 0x2c
 800c4b0:	70fb      	strb	r3, [r7, #3]
    uint8_t temp[3] = { 0 };
 800c4b2:	4b10      	ldr	r3, [pc, #64]	; (800c4f4 <hr3_get_led1_val+0x4c>)
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	803b      	strh	r3, [r7, #0]
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	70bb      	strb	r3, [r7, #2]
    uint32_t retval = 0;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	607b      	str	r3, [r7, #4]

    hr3_hal_read( &reg, temp, 3 );
 800c4c0:	4639      	mov	r1, r7
 800c4c2:	1cfb      	adds	r3, r7, #3
 800c4c4:	2203      	movs	r2, #3
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7ff f9a1 	bl	800b80e <hr3_hal_read>

    retval |= (uint32_t)temp[0] << 16;
 800c4cc:	783b      	ldrb	r3, [r7, #0]
 800c4ce:	041b      	lsls	r3, r3, #16
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[1] << 8;
 800c4d6:	787b      	ldrb	r3, [r7, #1]
 800c4d8:	021b      	lsls	r3, r3, #8
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[2];
 800c4e0:	78bb      	ldrb	r3, [r7, #2]
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	607b      	str	r3, [r7, #4]

    return retval;
 800c4ea:	687b      	ldr	r3, [r7, #4]

}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	0800d19c 	.word	0x0800d19c

0800c4f8 <hr3_get_led2_val>:

uint32_t hr3_get_led2_val( void )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
    uint8_t reg = LED2VAL;
 800c4fe:	232a      	movs	r3, #42	; 0x2a
 800c500:	70fb      	strb	r3, [r7, #3]
    uint8_t temp[3] = { 0 };
 800c502:	4b10      	ldr	r3, [pc, #64]	; (800c544 <hr3_get_led2_val+0x4c>)
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	803b      	strh	r3, [r7, #0]
 800c508:	2300      	movs	r3, #0
 800c50a:	70bb      	strb	r3, [r7, #2]
    uint32_t retval = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	607b      	str	r3, [r7, #4]

    hr3_hal_read( &reg, temp, 3 );
 800c510:	4639      	mov	r1, r7
 800c512:	1cfb      	adds	r3, r7, #3
 800c514:	2203      	movs	r2, #3
 800c516:	4618      	mov	r0, r3
 800c518:	f7ff f979 	bl	800b80e <hr3_hal_read>
    
    retval |= (uint32_t)temp[0] << 16;
 800c51c:	783b      	ldrb	r3, [r7, #0]
 800c51e:	041b      	lsls	r3, r3, #16
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	4313      	orrs	r3, r2
 800c524:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[1] << 8;
 800c526:	787b      	ldrb	r3, [r7, #1]
 800c528:	021b      	lsls	r3, r3, #8
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[2];
 800c530:	78bb      	ldrb	r3, [r7, #2]
 800c532:	461a      	mov	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4313      	orrs	r3, r2
 800c538:	607b      	str	r3, [r7, #4]

    return retval;
 800c53a:	687b      	ldr	r3, [r7, #4]

}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3708      	adds	r7, #8
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	0800d19c 	.word	0x0800d19c

0800c548 <hr3_get_led3_val>:

uint32_t hr3_get_led3_val( void )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
    uint8_t reg = LED3VAL;
 800c54e:	232b      	movs	r3, #43	; 0x2b
 800c550:	70fb      	strb	r3, [r7, #3]
    uint8_t temp[3] = { 0 };
 800c552:	4b10      	ldr	r3, [pc, #64]	; (800c594 <hr3_get_led3_val+0x4c>)
 800c554:	881b      	ldrh	r3, [r3, #0]
 800c556:	803b      	strh	r3, [r7, #0]
 800c558:	2300      	movs	r3, #0
 800c55a:	70bb      	strb	r3, [r7, #2]
    uint32_t retval = 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	607b      	str	r3, [r7, #4]

    hr3_hal_read( &reg, temp, 3 );
 800c560:	4639      	mov	r1, r7
 800c562:	1cfb      	adds	r3, r7, #3
 800c564:	2203      	movs	r2, #3
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff f951 	bl	800b80e <hr3_hal_read>

    retval |= (uint32_t)temp[0] << 16;
 800c56c:	783b      	ldrb	r3, [r7, #0]
 800c56e:	041b      	lsls	r3, r3, #16
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	4313      	orrs	r3, r2
 800c574:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[1] << 8;
 800c576:	787b      	ldrb	r3, [r7, #1]
 800c578:	021b      	lsls	r3, r3, #8
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	607b      	str	r3, [r7, #4]
    retval |= (uint32_t)temp[2];
 800c580:	78bb      	ldrb	r3, [r7, #2]
 800c582:	461a      	mov	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4313      	orrs	r3, r2
 800c588:	607b      	str	r3, [r7, #4]

    return retval;
 800c58a:	687b      	ldr	r3, [r7, #4]

}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	0800d19c 	.word	0x0800d19c

0800c598 <hr3_get_led1_amb1_val>:
    return retval;

}

uint32_t hr3_get_led1_amb1_val( void )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
    uint8_t reg = LED1_ALED1VAL;
 800c59e:	232f      	movs	r3, #47	; 0x2f
 800c5a0:	70fb      	strb	r3, [r7, #3]
    uint8_t temp[3] = { 0 };
 800c5a2:	4b13      	ldr	r3, [pc, #76]	; (800c5f0 <hr3_get_led1_amb1_val+0x58>)
 800c5a4:	881b      	ldrh	r3, [r3, #0]
 800c5a6:	803b      	strh	r3, [r7, #0]
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	70bb      	strb	r3, [r7, #2]
    uint32_t retval = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	607b      	str	r3, [r7, #4]

    hr3_read_enable();
 800c5b0:	f000 f8be 	bl	800c730 <hr3_read_enable>
    hr3_hal_read( &reg, temp, 3 );
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	1cfb      	adds	r3, r7, #3
 800c5b8:	2203      	movs	r2, #3
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7ff f927 	bl	800b80e <hr3_hal_read>
    hr3_read_disable();
 800c5c0:	f000 f8d2 	bl	800c768 <hr3_read_disable>
    
    retval |= ( temp[0] << 16 );
 800c5c4:	783b      	ldrb	r3, [r7, #0]
 800c5c6:	041b      	lsls	r3, r3, #16
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	607b      	str	r3, [r7, #4]
    retval |= ( temp[1] << 8 );
 800c5d0:	787b      	ldrb	r3, [r7, #1]
 800c5d2:	021b      	lsls	r3, r3, #8
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	607b      	str	r3, [r7, #4]
    retval |= temp[2];
 800c5dc:	78bb      	ldrb	r3, [r7, #2]
 800c5de:	461a      	mov	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	607b      	str	r3, [r7, #4]

    return retval;
 800c5e6:	687b      	ldr	r3, [r7, #4]

}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	0800d19c 	.word	0x0800d19c

0800c5f4 <hr3_set_pdn_cycle_start_end>:
    return 0;

}

uint8_t hr3_set_pdn_cycle_start_end( uint16_t start, uint16_t end )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	460a      	mov	r2, r1
 800c5fe:	80fb      	strh	r3, [r7, #6]
 800c600:	4613      	mov	r3, r2
 800c602:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = PDNCYCLESTC;
 800c604:	2332      	movs	r3, #50	; 0x32
 800c606:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = PDNCYCLEENDC;
 800c608:	2333      	movs	r3, #51	; 0x33
 800c60a:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800c60c:	4b17      	ldr	r3, [pc, #92]	; (800c66c <hr3_set_pdn_cycle_start_end+0x78>)
 800c60e:	881b      	ldrh	r3, [r3, #0]
 800c610:	823b      	strh	r3, [r7, #16]
 800c612:	2300      	movs	r3, #0
 800c614:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800c616:	4b15      	ldr	r3, [pc, #84]	; (800c66c <hr3_set_pdn_cycle_start_end+0x78>)
 800c618:	881b      	ldrh	r3, [r3, #0]
 800c61a:	81bb      	strh	r3, [r7, #12]
 800c61c:	2300      	movs	r3, #0
 800c61e:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800c620:	88fb      	ldrh	r3, [r7, #6]
 800c622:	0a1b      	lsrs	r3, r3, #8
 800c624:	b29b      	uxth	r3, r3
 800c626:	b2db      	uxtb	r3, r3
 800c628:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800c62a:	88fb      	ldrh	r3, [r7, #6]
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800c630:	f107 0110 	add.w	r1, r7, #16
 800c634:	f107 0317 	add.w	r3, r7, #23
 800c638:	2203      	movs	r2, #3
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7ff f87a 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800c640:	88bb      	ldrh	r3, [r7, #4]
 800c642:	0a1b      	lsrs	r3, r3, #8
 800c644:	b29b      	uxth	r3, r3
 800c646:	b2db      	uxtb	r3, r3
 800c648:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800c64a:	88bb      	ldrh	r3, [r7, #4]
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800c650:	f107 010c 	add.w	r1, r7, #12
 800c654:	f107 0316 	add.w	r3, r7, #22
 800c658:	2203      	movs	r2, #3
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7ff f86a 	bl	800b734 <hr3_hal_write>

    return 0;
 800c660:	2300      	movs	r3, #0


}
 800c662:	4618      	mov	r0, r3
 800c664:	3718      	adds	r7, #24
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	0800d19c 	.word	0x0800d19c

0800c670 <hr3_set_led3_start_stop>:


}

uint8_t hr3_set_led3_start_stop( uint16_t start, uint16_t end )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	4603      	mov	r3, r0
 800c678:	460a      	mov	r2, r1
 800c67a:	80fb      	strh	r3, [r7, #6]
 800c67c:	4613      	mov	r3, r2
 800c67e:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_st = LED3LEDSTC;
 800c680:	2336      	movs	r3, #54	; 0x36
 800c682:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_end = LED3LEDENDC;
 800c684:	2337      	movs	r3, #55	; 0x37
 800c686:	75bb      	strb	r3, [r7, #22]
    uint8_t temp_st[3] = { 0 };
 800c688:	4b17      	ldr	r3, [pc, #92]	; (800c6e8 <hr3_set_led3_start_stop+0x78>)
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	823b      	strh	r3, [r7, #16]
 800c68e:	2300      	movs	r3, #0
 800c690:	74bb      	strb	r3, [r7, #18]
    uint8_t temp_end[3] = { 0 };
 800c692:	4b15      	ldr	r3, [pc, #84]	; (800c6e8 <hr3_set_led3_start_stop+0x78>)
 800c694:	881b      	ldrh	r3, [r3, #0]
 800c696:	81bb      	strh	r3, [r7, #12]
 800c698:	2300      	movs	r3, #0
 800c69a:	73bb      	strb	r3, [r7, #14]

    if( start > 65535 || end > 65535 )
        return -1;

    temp_st[1] = start >> 8;
 800c69c:	88fb      	ldrh	r3, [r7, #6]
 800c69e:	0a1b      	lsrs	r3, r3, #8
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	747b      	strb	r3, [r7, #17]
    temp_st[2] = (uint8_t)start;
 800c6a6:	88fb      	ldrh	r3, [r7, #6]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	74bb      	strb	r3, [r7, #18]

    hr3_hal_write( &reg_st, temp_st, 3 );
 800c6ac:	f107 0110 	add.w	r1, r7, #16
 800c6b0:	f107 0317 	add.w	r3, r7, #23
 800c6b4:	2203      	movs	r2, #3
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff f83c 	bl	800b734 <hr3_hal_write>

    temp_end[1] = end >> 8;
 800c6bc:	88bb      	ldrh	r3, [r7, #4]
 800c6be:	0a1b      	lsrs	r3, r3, #8
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	737b      	strb	r3, [r7, #13]
    temp_end[2] = (uint8_t)end;
 800c6c6:	88bb      	ldrh	r3, [r7, #4]
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	73bb      	strb	r3, [r7, #14]

    hr3_hal_write( &reg_end, temp_end, 3 );
 800c6cc:	f107 010c 	add.w	r1, r7, #12
 800c6d0:	f107 0316 	add.w	r3, r7, #22
 800c6d4:	2203      	movs	r2, #3
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7ff f82c 	bl	800b734 <hr3_hal_write>

    return 0;
 800c6dc:	2300      	movs	r3, #0


}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3718      	adds	r7, #24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	0800d19c 	.word	0x0800d19c

0800c6ec <hr3_set_int_clk_div>:

uint8_t hr3_set_int_clk_div( uint8_t div )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	71fb      	strb	r3, [r7, #7]
    uint8_t reg = CLKDIV_PRF;
 800c6f6:	2339      	movs	r3, #57	; 0x39
 800c6f8:	73fb      	strb	r3, [r7, #15]
    uint8_t temp[3] = { 0 };
 800c6fa:	4b0c      	ldr	r3, [pc, #48]	; (800c72c <hr3_set_int_clk_div+0x40>)
 800c6fc:	881b      	ldrh	r3, [r3, #0]
 800c6fe:	81bb      	strh	r3, [r7, #12]
 800c700:	2300      	movs	r3, #0
 800c702:	73bb      	strb	r3, [r7, #14]

    if( div > 7 )
 800c704:	79fb      	ldrb	r3, [r7, #7]
 800c706:	2b07      	cmp	r3, #7
 800c708:	d901      	bls.n	800c70e <hr3_set_int_clk_div+0x22>
        return -1;
 800c70a:	23ff      	movs	r3, #255	; 0xff
 800c70c:	e00a      	b.n	800c724 <hr3_set_int_clk_div+0x38>

    temp[2] = div;
 800c70e:	79fb      	ldrb	r3, [r7, #7]
 800c710:	73bb      	strb	r3, [r7, #14]
    hr3_hal_write( &reg, temp, 3 );
 800c712:	f107 010c 	add.w	r1, r7, #12
 800c716:	f107 030f 	add.w	r3, r7, #15
 800c71a:	2203      	movs	r2, #3
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7ff f809 	bl	800b734 <hr3_hal_write>

    return 0;
 800c722:	2300      	movs	r3, #0

}
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	0800d19c 	.word	0x0800d19c

0800c730 <hr3_read_enable>:
                */
	return 0;
}

uint8_t hr3_read_enable( void )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
    uint8_t reg = DIAGNOSIS;
 800c736:	2300      	movs	r3, #0
 800c738:	71fb      	strb	r3, [r7, #7]
    uint8_t temp[3] = { 0 };
 800c73a:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <hr3_read_enable+0x34>)
 800c73c:	881b      	ldrh	r3, [r3, #0]
 800c73e:	80bb      	strh	r3, [r7, #4]
 800c740:	2300      	movs	r3, #0
 800c742:	71bb      	strb	r3, [r7, #6]

    temp[2] |= ( 1 << DIAG_REG_READ );
 800c744:	79bb      	ldrb	r3, [r7, #6]
 800c746:	f043 0301 	orr.w	r3, r3, #1
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	71bb      	strb	r3, [r7, #6]

    hr3_hal_write( &reg, temp, 3 );
 800c74e:	1d39      	adds	r1, r7, #4
 800c750:	1dfb      	adds	r3, r7, #7
 800c752:	2203      	movs	r2, #3
 800c754:	4618      	mov	r0, r3
 800c756:	f7fe ffed 	bl	800b734 <hr3_hal_write>

    return 0;
 800c75a:	2300      	movs	r3, #0

}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	0800d19c 	.word	0x0800d19c

0800c768 <hr3_read_disable>:

uint8_t hr3_read_disable( void )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
    uint8_t reg = DIAGNOSIS;
 800c76e:	2300      	movs	r3, #0
 800c770:	71fb      	strb	r3, [r7, #7]
    uint8_t temp[3] = { 0 };
 800c772:	4b0a      	ldr	r3, [pc, #40]	; (800c79c <hr3_read_disable+0x34>)
 800c774:	881b      	ldrh	r3, [r3, #0]
 800c776:	80bb      	strh	r3, [r7, #4]
 800c778:	2300      	movs	r3, #0
 800c77a:	71bb      	strb	r3, [r7, #6]

    temp[2] &= ~( 1 << DIAG_REG_READ );
 800c77c:	79bb      	ldrb	r3, [r7, #6]
 800c77e:	f023 0301 	bic.w	r3, r3, #1
 800c782:	b2db      	uxtb	r3, r3
 800c784:	71bb      	strb	r3, [r7, #6]

    hr3_hal_write( &reg, temp, 3 );
 800c786:	1d39      	adds	r1, r7, #4
 800c788:	1dfb      	adds	r3, r7, #7
 800c78a:	2203      	movs	r2, #3
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7fe ffd1 	bl	800b734 <hr3_hal_write>

    return 0;
 800c792:	2300      	movs	r3, #0

}
 800c794:	4618      	mov	r0, r3
 800c796:	3708      	adds	r7, #8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	0800d19c 	.word	0x0800d19c

0800c7a0 <__errno>:
 800c7a0:	4b01      	ldr	r3, [pc, #4]	; (800c7a8 <__errno+0x8>)
 800c7a2:	6818      	ldr	r0, [r3, #0]
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	2000017c 	.word	0x2000017c

0800c7ac <__libc_init_array>:
 800c7ac:	b570      	push	{r4, r5, r6, lr}
 800c7ae:	2600      	movs	r6, #0
 800c7b0:	4d0c      	ldr	r5, [pc, #48]	; (800c7e4 <__libc_init_array+0x38>)
 800c7b2:	4c0d      	ldr	r4, [pc, #52]	; (800c7e8 <__libc_init_array+0x3c>)
 800c7b4:	1b64      	subs	r4, r4, r5
 800c7b6:	10a4      	asrs	r4, r4, #2
 800c7b8:	42a6      	cmp	r6, r4
 800c7ba:	d109      	bne.n	800c7d0 <__libc_init_array+0x24>
 800c7bc:	f000 fca4 	bl	800d108 <_init>
 800c7c0:	2600      	movs	r6, #0
 800c7c2:	4d0a      	ldr	r5, [pc, #40]	; (800c7ec <__libc_init_array+0x40>)
 800c7c4:	4c0a      	ldr	r4, [pc, #40]	; (800c7f0 <__libc_init_array+0x44>)
 800c7c6:	1b64      	subs	r4, r4, r5
 800c7c8:	10a4      	asrs	r4, r4, #2
 800c7ca:	42a6      	cmp	r6, r4
 800c7cc:	d105      	bne.n	800c7da <__libc_init_array+0x2e>
 800c7ce:	bd70      	pop	{r4, r5, r6, pc}
 800c7d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7d4:	4798      	blx	r3
 800c7d6:	3601      	adds	r6, #1
 800c7d8:	e7ee      	b.n	800c7b8 <__libc_init_array+0xc>
 800c7da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7de:	4798      	blx	r3
 800c7e0:	3601      	adds	r6, #1
 800c7e2:	e7f2      	b.n	800c7ca <__libc_init_array+0x1e>
 800c7e4:	0800d1ec 	.word	0x0800d1ec
 800c7e8:	0800d1ec 	.word	0x0800d1ec
 800c7ec:	0800d1ec 	.word	0x0800d1ec
 800c7f0:	0800d1f0 	.word	0x0800d1f0

0800c7f4 <malloc>:
 800c7f4:	4b02      	ldr	r3, [pc, #8]	; (800c800 <malloc+0xc>)
 800c7f6:	4601      	mov	r1, r0
 800c7f8:	6818      	ldr	r0, [r3, #0]
 800c7fa:	f000 b881 	b.w	800c900 <_malloc_r>
 800c7fe:	bf00      	nop
 800c800:	2000017c 	.word	0x2000017c

0800c804 <memcpy>:
 800c804:	440a      	add	r2, r1
 800c806:	4291      	cmp	r1, r2
 800c808:	f100 33ff 	add.w	r3, r0, #4294967295
 800c80c:	d100      	bne.n	800c810 <memcpy+0xc>
 800c80e:	4770      	bx	lr
 800c810:	b510      	push	{r4, lr}
 800c812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c816:	4291      	cmp	r1, r2
 800c818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c81c:	d1f9      	bne.n	800c812 <memcpy+0xe>
 800c81e:	bd10      	pop	{r4, pc}

0800c820 <memset>:
 800c820:	4603      	mov	r3, r0
 800c822:	4402      	add	r2, r0
 800c824:	4293      	cmp	r3, r2
 800c826:	d100      	bne.n	800c82a <memset+0xa>
 800c828:	4770      	bx	lr
 800c82a:	f803 1b01 	strb.w	r1, [r3], #1
 800c82e:	e7f9      	b.n	800c824 <memset+0x4>

0800c830 <_free_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4605      	mov	r5, r0
 800c834:	2900      	cmp	r1, #0
 800c836:	d040      	beq.n	800c8ba <_free_r+0x8a>
 800c838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c83c:	1f0c      	subs	r4, r1, #4
 800c83e:	2b00      	cmp	r3, #0
 800c840:	bfb8      	it	lt
 800c842:	18e4      	addlt	r4, r4, r3
 800c844:	f000 f900 	bl	800ca48 <__malloc_lock>
 800c848:	4a1c      	ldr	r2, [pc, #112]	; (800c8bc <_free_r+0x8c>)
 800c84a:	6813      	ldr	r3, [r2, #0]
 800c84c:	b933      	cbnz	r3, 800c85c <_free_r+0x2c>
 800c84e:	6063      	str	r3, [r4, #4]
 800c850:	6014      	str	r4, [r2, #0]
 800c852:	4628      	mov	r0, r5
 800c854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c858:	f000 b8fc 	b.w	800ca54 <__malloc_unlock>
 800c85c:	42a3      	cmp	r3, r4
 800c85e:	d908      	bls.n	800c872 <_free_r+0x42>
 800c860:	6820      	ldr	r0, [r4, #0]
 800c862:	1821      	adds	r1, r4, r0
 800c864:	428b      	cmp	r3, r1
 800c866:	bf01      	itttt	eq
 800c868:	6819      	ldreq	r1, [r3, #0]
 800c86a:	685b      	ldreq	r3, [r3, #4]
 800c86c:	1809      	addeq	r1, r1, r0
 800c86e:	6021      	streq	r1, [r4, #0]
 800c870:	e7ed      	b.n	800c84e <_free_r+0x1e>
 800c872:	461a      	mov	r2, r3
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	b10b      	cbz	r3, 800c87c <_free_r+0x4c>
 800c878:	42a3      	cmp	r3, r4
 800c87a:	d9fa      	bls.n	800c872 <_free_r+0x42>
 800c87c:	6811      	ldr	r1, [r2, #0]
 800c87e:	1850      	adds	r0, r2, r1
 800c880:	42a0      	cmp	r0, r4
 800c882:	d10b      	bne.n	800c89c <_free_r+0x6c>
 800c884:	6820      	ldr	r0, [r4, #0]
 800c886:	4401      	add	r1, r0
 800c888:	1850      	adds	r0, r2, r1
 800c88a:	4283      	cmp	r3, r0
 800c88c:	6011      	str	r1, [r2, #0]
 800c88e:	d1e0      	bne.n	800c852 <_free_r+0x22>
 800c890:	6818      	ldr	r0, [r3, #0]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	4401      	add	r1, r0
 800c896:	6011      	str	r1, [r2, #0]
 800c898:	6053      	str	r3, [r2, #4]
 800c89a:	e7da      	b.n	800c852 <_free_r+0x22>
 800c89c:	d902      	bls.n	800c8a4 <_free_r+0x74>
 800c89e:	230c      	movs	r3, #12
 800c8a0:	602b      	str	r3, [r5, #0]
 800c8a2:	e7d6      	b.n	800c852 <_free_r+0x22>
 800c8a4:	6820      	ldr	r0, [r4, #0]
 800c8a6:	1821      	adds	r1, r4, r0
 800c8a8:	428b      	cmp	r3, r1
 800c8aa:	bf01      	itttt	eq
 800c8ac:	6819      	ldreq	r1, [r3, #0]
 800c8ae:	685b      	ldreq	r3, [r3, #4]
 800c8b0:	1809      	addeq	r1, r1, r0
 800c8b2:	6021      	streq	r1, [r4, #0]
 800c8b4:	6063      	str	r3, [r4, #4]
 800c8b6:	6054      	str	r4, [r2, #4]
 800c8b8:	e7cb      	b.n	800c852 <_free_r+0x22>
 800c8ba:	bd38      	pop	{r3, r4, r5, pc}
 800c8bc:	200015ac 	.word	0x200015ac

0800c8c0 <sbrk_aligned>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	4e0e      	ldr	r6, [pc, #56]	; (800c8fc <sbrk_aligned+0x3c>)
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	6831      	ldr	r1, [r6, #0]
 800c8c8:	4605      	mov	r5, r0
 800c8ca:	b911      	cbnz	r1, 800c8d2 <sbrk_aligned+0x12>
 800c8cc:	f000 f88c 	bl	800c9e8 <_sbrk_r>
 800c8d0:	6030      	str	r0, [r6, #0]
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	f000 f887 	bl	800c9e8 <_sbrk_r>
 800c8da:	1c43      	adds	r3, r0, #1
 800c8dc:	d00a      	beq.n	800c8f4 <sbrk_aligned+0x34>
 800c8de:	1cc4      	adds	r4, r0, #3
 800c8e0:	f024 0403 	bic.w	r4, r4, #3
 800c8e4:	42a0      	cmp	r0, r4
 800c8e6:	d007      	beq.n	800c8f8 <sbrk_aligned+0x38>
 800c8e8:	1a21      	subs	r1, r4, r0
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f000 f87c 	bl	800c9e8 <_sbrk_r>
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	d101      	bne.n	800c8f8 <sbrk_aligned+0x38>
 800c8f4:	f04f 34ff 	mov.w	r4, #4294967295
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}
 800c8fc:	200015b0 	.word	0x200015b0

0800c900 <_malloc_r>:
 800c900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c904:	1ccd      	adds	r5, r1, #3
 800c906:	f025 0503 	bic.w	r5, r5, #3
 800c90a:	3508      	adds	r5, #8
 800c90c:	2d0c      	cmp	r5, #12
 800c90e:	bf38      	it	cc
 800c910:	250c      	movcc	r5, #12
 800c912:	2d00      	cmp	r5, #0
 800c914:	4607      	mov	r7, r0
 800c916:	db01      	blt.n	800c91c <_malloc_r+0x1c>
 800c918:	42a9      	cmp	r1, r5
 800c91a:	d905      	bls.n	800c928 <_malloc_r+0x28>
 800c91c:	230c      	movs	r3, #12
 800c91e:	2600      	movs	r6, #0
 800c920:	603b      	str	r3, [r7, #0]
 800c922:	4630      	mov	r0, r6
 800c924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c928:	4e2e      	ldr	r6, [pc, #184]	; (800c9e4 <_malloc_r+0xe4>)
 800c92a:	f000 f88d 	bl	800ca48 <__malloc_lock>
 800c92e:	6833      	ldr	r3, [r6, #0]
 800c930:	461c      	mov	r4, r3
 800c932:	bb34      	cbnz	r4, 800c982 <_malloc_r+0x82>
 800c934:	4629      	mov	r1, r5
 800c936:	4638      	mov	r0, r7
 800c938:	f7ff ffc2 	bl	800c8c0 <sbrk_aligned>
 800c93c:	1c43      	adds	r3, r0, #1
 800c93e:	4604      	mov	r4, r0
 800c940:	d14d      	bne.n	800c9de <_malloc_r+0xde>
 800c942:	6834      	ldr	r4, [r6, #0]
 800c944:	4626      	mov	r6, r4
 800c946:	2e00      	cmp	r6, #0
 800c948:	d140      	bne.n	800c9cc <_malloc_r+0xcc>
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	4631      	mov	r1, r6
 800c94e:	4638      	mov	r0, r7
 800c950:	eb04 0803 	add.w	r8, r4, r3
 800c954:	f000 f848 	bl	800c9e8 <_sbrk_r>
 800c958:	4580      	cmp	r8, r0
 800c95a:	d13a      	bne.n	800c9d2 <_malloc_r+0xd2>
 800c95c:	6821      	ldr	r1, [r4, #0]
 800c95e:	3503      	adds	r5, #3
 800c960:	1a6d      	subs	r5, r5, r1
 800c962:	f025 0503 	bic.w	r5, r5, #3
 800c966:	3508      	adds	r5, #8
 800c968:	2d0c      	cmp	r5, #12
 800c96a:	bf38      	it	cc
 800c96c:	250c      	movcc	r5, #12
 800c96e:	4638      	mov	r0, r7
 800c970:	4629      	mov	r1, r5
 800c972:	f7ff ffa5 	bl	800c8c0 <sbrk_aligned>
 800c976:	3001      	adds	r0, #1
 800c978:	d02b      	beq.n	800c9d2 <_malloc_r+0xd2>
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	442b      	add	r3, r5
 800c97e:	6023      	str	r3, [r4, #0]
 800c980:	e00e      	b.n	800c9a0 <_malloc_r+0xa0>
 800c982:	6822      	ldr	r2, [r4, #0]
 800c984:	1b52      	subs	r2, r2, r5
 800c986:	d41e      	bmi.n	800c9c6 <_malloc_r+0xc6>
 800c988:	2a0b      	cmp	r2, #11
 800c98a:	d916      	bls.n	800c9ba <_malloc_r+0xba>
 800c98c:	1961      	adds	r1, r4, r5
 800c98e:	42a3      	cmp	r3, r4
 800c990:	6025      	str	r5, [r4, #0]
 800c992:	bf18      	it	ne
 800c994:	6059      	strne	r1, [r3, #4]
 800c996:	6863      	ldr	r3, [r4, #4]
 800c998:	bf08      	it	eq
 800c99a:	6031      	streq	r1, [r6, #0]
 800c99c:	5162      	str	r2, [r4, r5]
 800c99e:	604b      	str	r3, [r1, #4]
 800c9a0:	4638      	mov	r0, r7
 800c9a2:	f104 060b 	add.w	r6, r4, #11
 800c9a6:	f000 f855 	bl	800ca54 <__malloc_unlock>
 800c9aa:	f026 0607 	bic.w	r6, r6, #7
 800c9ae:	1d23      	adds	r3, r4, #4
 800c9b0:	1af2      	subs	r2, r6, r3
 800c9b2:	d0b6      	beq.n	800c922 <_malloc_r+0x22>
 800c9b4:	1b9b      	subs	r3, r3, r6
 800c9b6:	50a3      	str	r3, [r4, r2]
 800c9b8:	e7b3      	b.n	800c922 <_malloc_r+0x22>
 800c9ba:	6862      	ldr	r2, [r4, #4]
 800c9bc:	42a3      	cmp	r3, r4
 800c9be:	bf0c      	ite	eq
 800c9c0:	6032      	streq	r2, [r6, #0]
 800c9c2:	605a      	strne	r2, [r3, #4]
 800c9c4:	e7ec      	b.n	800c9a0 <_malloc_r+0xa0>
 800c9c6:	4623      	mov	r3, r4
 800c9c8:	6864      	ldr	r4, [r4, #4]
 800c9ca:	e7b2      	b.n	800c932 <_malloc_r+0x32>
 800c9cc:	4634      	mov	r4, r6
 800c9ce:	6876      	ldr	r6, [r6, #4]
 800c9d0:	e7b9      	b.n	800c946 <_malloc_r+0x46>
 800c9d2:	230c      	movs	r3, #12
 800c9d4:	4638      	mov	r0, r7
 800c9d6:	603b      	str	r3, [r7, #0]
 800c9d8:	f000 f83c 	bl	800ca54 <__malloc_unlock>
 800c9dc:	e7a1      	b.n	800c922 <_malloc_r+0x22>
 800c9de:	6025      	str	r5, [r4, #0]
 800c9e0:	e7de      	b.n	800c9a0 <_malloc_r+0xa0>
 800c9e2:	bf00      	nop
 800c9e4:	200015ac 	.word	0x200015ac

0800c9e8 <_sbrk_r>:
 800c9e8:	b538      	push	{r3, r4, r5, lr}
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	4d05      	ldr	r5, [pc, #20]	; (800ca04 <_sbrk_r+0x1c>)
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	4608      	mov	r0, r1
 800c9f2:	602b      	str	r3, [r5, #0]
 800c9f4:	f7f4 f84a 	bl	8000a8c <_sbrk>
 800c9f8:	1c43      	adds	r3, r0, #1
 800c9fa:	d102      	bne.n	800ca02 <_sbrk_r+0x1a>
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	b103      	cbz	r3, 800ca02 <_sbrk_r+0x1a>
 800ca00:	6023      	str	r3, [r4, #0]
 800ca02:	bd38      	pop	{r3, r4, r5, pc}
 800ca04:	200015b4 	.word	0x200015b4

0800ca08 <siprintf>:
 800ca08:	b40e      	push	{r1, r2, r3}
 800ca0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca0e:	b500      	push	{lr}
 800ca10:	b09c      	sub	sp, #112	; 0x70
 800ca12:	ab1d      	add	r3, sp, #116	; 0x74
 800ca14:	9002      	str	r0, [sp, #8]
 800ca16:	9006      	str	r0, [sp, #24]
 800ca18:	9107      	str	r1, [sp, #28]
 800ca1a:	9104      	str	r1, [sp, #16]
 800ca1c:	4808      	ldr	r0, [pc, #32]	; (800ca40 <siprintf+0x38>)
 800ca1e:	4909      	ldr	r1, [pc, #36]	; (800ca44 <siprintf+0x3c>)
 800ca20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca24:	9105      	str	r1, [sp, #20]
 800ca26:	6800      	ldr	r0, [r0, #0]
 800ca28:	a902      	add	r1, sp, #8
 800ca2a:	9301      	str	r3, [sp, #4]
 800ca2c:	f000 f874 	bl	800cb18 <_svfiprintf_r>
 800ca30:	2200      	movs	r2, #0
 800ca32:	9b02      	ldr	r3, [sp, #8]
 800ca34:	701a      	strb	r2, [r3, #0]
 800ca36:	b01c      	add	sp, #112	; 0x70
 800ca38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca3c:	b003      	add	sp, #12
 800ca3e:	4770      	bx	lr
 800ca40:	2000017c 	.word	0x2000017c
 800ca44:	ffff0208 	.word	0xffff0208

0800ca48 <__malloc_lock>:
 800ca48:	4801      	ldr	r0, [pc, #4]	; (800ca50 <__malloc_lock+0x8>)
 800ca4a:	f000 bafb 	b.w	800d044 <__retarget_lock_acquire_recursive>
 800ca4e:	bf00      	nop
 800ca50:	200015b8 	.word	0x200015b8

0800ca54 <__malloc_unlock>:
 800ca54:	4801      	ldr	r0, [pc, #4]	; (800ca5c <__malloc_unlock+0x8>)
 800ca56:	f000 baf6 	b.w	800d046 <__retarget_lock_release_recursive>
 800ca5a:	bf00      	nop
 800ca5c:	200015b8 	.word	0x200015b8

0800ca60 <__ssputs_r>:
 800ca60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca64:	688e      	ldr	r6, [r1, #8]
 800ca66:	4682      	mov	sl, r0
 800ca68:	429e      	cmp	r6, r3
 800ca6a:	460c      	mov	r4, r1
 800ca6c:	4690      	mov	r8, r2
 800ca6e:	461f      	mov	r7, r3
 800ca70:	d838      	bhi.n	800cae4 <__ssputs_r+0x84>
 800ca72:	898a      	ldrh	r2, [r1, #12]
 800ca74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca78:	d032      	beq.n	800cae0 <__ssputs_r+0x80>
 800ca7a:	6825      	ldr	r5, [r4, #0]
 800ca7c:	6909      	ldr	r1, [r1, #16]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	eba5 0901 	sub.w	r9, r5, r1
 800ca84:	6965      	ldr	r5, [r4, #20]
 800ca86:	444b      	add	r3, r9
 800ca88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca90:	106d      	asrs	r5, r5, #1
 800ca92:	429d      	cmp	r5, r3
 800ca94:	bf38      	it	cc
 800ca96:	461d      	movcc	r5, r3
 800ca98:	0553      	lsls	r3, r2, #21
 800ca9a:	d531      	bpl.n	800cb00 <__ssputs_r+0xa0>
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	f7ff ff2f 	bl	800c900 <_malloc_r>
 800caa2:	4606      	mov	r6, r0
 800caa4:	b950      	cbnz	r0, 800cabc <__ssputs_r+0x5c>
 800caa6:	230c      	movs	r3, #12
 800caa8:	f04f 30ff 	mov.w	r0, #4294967295
 800caac:	f8ca 3000 	str.w	r3, [sl]
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cab6:	81a3      	strh	r3, [r4, #12]
 800cab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cabc:	464a      	mov	r2, r9
 800cabe:	6921      	ldr	r1, [r4, #16]
 800cac0:	f7ff fea0 	bl	800c804 <memcpy>
 800cac4:	89a3      	ldrh	r3, [r4, #12]
 800cac6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800caca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cace:	81a3      	strh	r3, [r4, #12]
 800cad0:	6126      	str	r6, [r4, #16]
 800cad2:	444e      	add	r6, r9
 800cad4:	6026      	str	r6, [r4, #0]
 800cad6:	463e      	mov	r6, r7
 800cad8:	6165      	str	r5, [r4, #20]
 800cada:	eba5 0509 	sub.w	r5, r5, r9
 800cade:	60a5      	str	r5, [r4, #8]
 800cae0:	42be      	cmp	r6, r7
 800cae2:	d900      	bls.n	800cae6 <__ssputs_r+0x86>
 800cae4:	463e      	mov	r6, r7
 800cae6:	4632      	mov	r2, r6
 800cae8:	4641      	mov	r1, r8
 800caea:	6820      	ldr	r0, [r4, #0]
 800caec:	f000 faba 	bl	800d064 <memmove>
 800caf0:	68a3      	ldr	r3, [r4, #8]
 800caf2:	2000      	movs	r0, #0
 800caf4:	1b9b      	subs	r3, r3, r6
 800caf6:	60a3      	str	r3, [r4, #8]
 800caf8:	6823      	ldr	r3, [r4, #0]
 800cafa:	4433      	add	r3, r6
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	e7db      	b.n	800cab8 <__ssputs_r+0x58>
 800cb00:	462a      	mov	r2, r5
 800cb02:	f000 fac9 	bl	800d098 <_realloc_r>
 800cb06:	4606      	mov	r6, r0
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	d1e1      	bne.n	800cad0 <__ssputs_r+0x70>
 800cb0c:	4650      	mov	r0, sl
 800cb0e:	6921      	ldr	r1, [r4, #16]
 800cb10:	f7ff fe8e 	bl	800c830 <_free_r>
 800cb14:	e7c7      	b.n	800caa6 <__ssputs_r+0x46>
	...

0800cb18 <_svfiprintf_r>:
 800cb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1c:	4698      	mov	r8, r3
 800cb1e:	898b      	ldrh	r3, [r1, #12]
 800cb20:	4607      	mov	r7, r0
 800cb22:	061b      	lsls	r3, r3, #24
 800cb24:	460d      	mov	r5, r1
 800cb26:	4614      	mov	r4, r2
 800cb28:	b09d      	sub	sp, #116	; 0x74
 800cb2a:	d50e      	bpl.n	800cb4a <_svfiprintf_r+0x32>
 800cb2c:	690b      	ldr	r3, [r1, #16]
 800cb2e:	b963      	cbnz	r3, 800cb4a <_svfiprintf_r+0x32>
 800cb30:	2140      	movs	r1, #64	; 0x40
 800cb32:	f7ff fee5 	bl	800c900 <_malloc_r>
 800cb36:	6028      	str	r0, [r5, #0]
 800cb38:	6128      	str	r0, [r5, #16]
 800cb3a:	b920      	cbnz	r0, 800cb46 <_svfiprintf_r+0x2e>
 800cb3c:	230c      	movs	r3, #12
 800cb3e:	603b      	str	r3, [r7, #0]
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295
 800cb44:	e0d1      	b.n	800ccea <_svfiprintf_r+0x1d2>
 800cb46:	2340      	movs	r3, #64	; 0x40
 800cb48:	616b      	str	r3, [r5, #20]
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb4e:	2320      	movs	r3, #32
 800cb50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb54:	2330      	movs	r3, #48	; 0x30
 800cb56:	f04f 0901 	mov.w	r9, #1
 800cb5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cd04 <_svfiprintf_r+0x1ec>
 800cb62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb66:	4623      	mov	r3, r4
 800cb68:	469a      	mov	sl, r3
 800cb6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb6e:	b10a      	cbz	r2, 800cb74 <_svfiprintf_r+0x5c>
 800cb70:	2a25      	cmp	r2, #37	; 0x25
 800cb72:	d1f9      	bne.n	800cb68 <_svfiprintf_r+0x50>
 800cb74:	ebba 0b04 	subs.w	fp, sl, r4
 800cb78:	d00b      	beq.n	800cb92 <_svfiprintf_r+0x7a>
 800cb7a:	465b      	mov	r3, fp
 800cb7c:	4622      	mov	r2, r4
 800cb7e:	4629      	mov	r1, r5
 800cb80:	4638      	mov	r0, r7
 800cb82:	f7ff ff6d 	bl	800ca60 <__ssputs_r>
 800cb86:	3001      	adds	r0, #1
 800cb88:	f000 80aa 	beq.w	800cce0 <_svfiprintf_r+0x1c8>
 800cb8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb8e:	445a      	add	r2, fp
 800cb90:	9209      	str	r2, [sp, #36]	; 0x24
 800cb92:	f89a 3000 	ldrb.w	r3, [sl]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f000 80a2 	beq.w	800cce0 <_svfiprintf_r+0x1c8>
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cba6:	f10a 0a01 	add.w	sl, sl, #1
 800cbaa:	9304      	str	r3, [sp, #16]
 800cbac:	9307      	str	r3, [sp, #28]
 800cbae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbb2:	931a      	str	r3, [sp, #104]	; 0x68
 800cbb4:	4654      	mov	r4, sl
 800cbb6:	2205      	movs	r2, #5
 800cbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbbc:	4851      	ldr	r0, [pc, #324]	; (800cd04 <_svfiprintf_r+0x1ec>)
 800cbbe:	f000 fa43 	bl	800d048 <memchr>
 800cbc2:	9a04      	ldr	r2, [sp, #16]
 800cbc4:	b9d8      	cbnz	r0, 800cbfe <_svfiprintf_r+0xe6>
 800cbc6:	06d0      	lsls	r0, r2, #27
 800cbc8:	bf44      	itt	mi
 800cbca:	2320      	movmi	r3, #32
 800cbcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbd0:	0711      	lsls	r1, r2, #28
 800cbd2:	bf44      	itt	mi
 800cbd4:	232b      	movmi	r3, #43	; 0x2b
 800cbd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbda:	f89a 3000 	ldrb.w	r3, [sl]
 800cbde:	2b2a      	cmp	r3, #42	; 0x2a
 800cbe0:	d015      	beq.n	800cc0e <_svfiprintf_r+0xf6>
 800cbe2:	4654      	mov	r4, sl
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	f04f 0c0a 	mov.w	ip, #10
 800cbea:	9a07      	ldr	r2, [sp, #28]
 800cbec:	4621      	mov	r1, r4
 800cbee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbf2:	3b30      	subs	r3, #48	; 0x30
 800cbf4:	2b09      	cmp	r3, #9
 800cbf6:	d94e      	bls.n	800cc96 <_svfiprintf_r+0x17e>
 800cbf8:	b1b0      	cbz	r0, 800cc28 <_svfiprintf_r+0x110>
 800cbfa:	9207      	str	r2, [sp, #28]
 800cbfc:	e014      	b.n	800cc28 <_svfiprintf_r+0x110>
 800cbfe:	eba0 0308 	sub.w	r3, r0, r8
 800cc02:	fa09 f303 	lsl.w	r3, r9, r3
 800cc06:	4313      	orrs	r3, r2
 800cc08:	46a2      	mov	sl, r4
 800cc0a:	9304      	str	r3, [sp, #16]
 800cc0c:	e7d2      	b.n	800cbb4 <_svfiprintf_r+0x9c>
 800cc0e:	9b03      	ldr	r3, [sp, #12]
 800cc10:	1d19      	adds	r1, r3, #4
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	9103      	str	r1, [sp, #12]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	bfbb      	ittet	lt
 800cc1a:	425b      	neglt	r3, r3
 800cc1c:	f042 0202 	orrlt.w	r2, r2, #2
 800cc20:	9307      	strge	r3, [sp, #28]
 800cc22:	9307      	strlt	r3, [sp, #28]
 800cc24:	bfb8      	it	lt
 800cc26:	9204      	strlt	r2, [sp, #16]
 800cc28:	7823      	ldrb	r3, [r4, #0]
 800cc2a:	2b2e      	cmp	r3, #46	; 0x2e
 800cc2c:	d10c      	bne.n	800cc48 <_svfiprintf_r+0x130>
 800cc2e:	7863      	ldrb	r3, [r4, #1]
 800cc30:	2b2a      	cmp	r3, #42	; 0x2a
 800cc32:	d135      	bne.n	800cca0 <_svfiprintf_r+0x188>
 800cc34:	9b03      	ldr	r3, [sp, #12]
 800cc36:	3402      	adds	r4, #2
 800cc38:	1d1a      	adds	r2, r3, #4
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	9203      	str	r2, [sp, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	bfb8      	it	lt
 800cc42:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc46:	9305      	str	r3, [sp, #20]
 800cc48:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cd08 <_svfiprintf_r+0x1f0>
 800cc4c:	2203      	movs	r2, #3
 800cc4e:	4650      	mov	r0, sl
 800cc50:	7821      	ldrb	r1, [r4, #0]
 800cc52:	f000 f9f9 	bl	800d048 <memchr>
 800cc56:	b140      	cbz	r0, 800cc6a <_svfiprintf_r+0x152>
 800cc58:	2340      	movs	r3, #64	; 0x40
 800cc5a:	eba0 000a 	sub.w	r0, r0, sl
 800cc5e:	fa03 f000 	lsl.w	r0, r3, r0
 800cc62:	9b04      	ldr	r3, [sp, #16]
 800cc64:	3401      	adds	r4, #1
 800cc66:	4303      	orrs	r3, r0
 800cc68:	9304      	str	r3, [sp, #16]
 800cc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc6e:	2206      	movs	r2, #6
 800cc70:	4826      	ldr	r0, [pc, #152]	; (800cd0c <_svfiprintf_r+0x1f4>)
 800cc72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc76:	f000 f9e7 	bl	800d048 <memchr>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d038      	beq.n	800ccf0 <_svfiprintf_r+0x1d8>
 800cc7e:	4b24      	ldr	r3, [pc, #144]	; (800cd10 <_svfiprintf_r+0x1f8>)
 800cc80:	bb1b      	cbnz	r3, 800ccca <_svfiprintf_r+0x1b2>
 800cc82:	9b03      	ldr	r3, [sp, #12]
 800cc84:	3307      	adds	r3, #7
 800cc86:	f023 0307 	bic.w	r3, r3, #7
 800cc8a:	3308      	adds	r3, #8
 800cc8c:	9303      	str	r3, [sp, #12]
 800cc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc90:	4433      	add	r3, r6
 800cc92:	9309      	str	r3, [sp, #36]	; 0x24
 800cc94:	e767      	b.n	800cb66 <_svfiprintf_r+0x4e>
 800cc96:	460c      	mov	r4, r1
 800cc98:	2001      	movs	r0, #1
 800cc9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc9e:	e7a5      	b.n	800cbec <_svfiprintf_r+0xd4>
 800cca0:	2300      	movs	r3, #0
 800cca2:	f04f 0c0a 	mov.w	ip, #10
 800cca6:	4619      	mov	r1, r3
 800cca8:	3401      	adds	r4, #1
 800ccaa:	9305      	str	r3, [sp, #20]
 800ccac:	4620      	mov	r0, r4
 800ccae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccb2:	3a30      	subs	r2, #48	; 0x30
 800ccb4:	2a09      	cmp	r2, #9
 800ccb6:	d903      	bls.n	800ccc0 <_svfiprintf_r+0x1a8>
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d0c5      	beq.n	800cc48 <_svfiprintf_r+0x130>
 800ccbc:	9105      	str	r1, [sp, #20]
 800ccbe:	e7c3      	b.n	800cc48 <_svfiprintf_r+0x130>
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccc8:	e7f0      	b.n	800ccac <_svfiprintf_r+0x194>
 800ccca:	ab03      	add	r3, sp, #12
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	462a      	mov	r2, r5
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	4b10      	ldr	r3, [pc, #64]	; (800cd14 <_svfiprintf_r+0x1fc>)
 800ccd4:	a904      	add	r1, sp, #16
 800ccd6:	f3af 8000 	nop.w
 800ccda:	1c42      	adds	r2, r0, #1
 800ccdc:	4606      	mov	r6, r0
 800ccde:	d1d6      	bne.n	800cc8e <_svfiprintf_r+0x176>
 800cce0:	89ab      	ldrh	r3, [r5, #12]
 800cce2:	065b      	lsls	r3, r3, #25
 800cce4:	f53f af2c 	bmi.w	800cb40 <_svfiprintf_r+0x28>
 800cce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccea:	b01d      	add	sp, #116	; 0x74
 800ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf0:	ab03      	add	r3, sp, #12
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	462a      	mov	r2, r5
 800ccf6:	4638      	mov	r0, r7
 800ccf8:	4b06      	ldr	r3, [pc, #24]	; (800cd14 <_svfiprintf_r+0x1fc>)
 800ccfa:	a904      	add	r1, sp, #16
 800ccfc:	f000 f87c 	bl	800cdf8 <_printf_i>
 800cd00:	e7eb      	b.n	800ccda <_svfiprintf_r+0x1c2>
 800cd02:	bf00      	nop
 800cd04:	0800d1b8 	.word	0x0800d1b8
 800cd08:	0800d1be 	.word	0x0800d1be
 800cd0c:	0800d1c2 	.word	0x0800d1c2
 800cd10:	00000000 	.word	0x00000000
 800cd14:	0800ca61 	.word	0x0800ca61

0800cd18 <_printf_common>:
 800cd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd1c:	4616      	mov	r6, r2
 800cd1e:	4699      	mov	r9, r3
 800cd20:	688a      	ldr	r2, [r1, #8]
 800cd22:	690b      	ldr	r3, [r1, #16]
 800cd24:	4607      	mov	r7, r0
 800cd26:	4293      	cmp	r3, r2
 800cd28:	bfb8      	it	lt
 800cd2a:	4613      	movlt	r3, r2
 800cd2c:	6033      	str	r3, [r6, #0]
 800cd2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd32:	460c      	mov	r4, r1
 800cd34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd38:	b10a      	cbz	r2, 800cd3e <_printf_common+0x26>
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	6033      	str	r3, [r6, #0]
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	0699      	lsls	r1, r3, #26
 800cd42:	bf42      	ittt	mi
 800cd44:	6833      	ldrmi	r3, [r6, #0]
 800cd46:	3302      	addmi	r3, #2
 800cd48:	6033      	strmi	r3, [r6, #0]
 800cd4a:	6825      	ldr	r5, [r4, #0]
 800cd4c:	f015 0506 	ands.w	r5, r5, #6
 800cd50:	d106      	bne.n	800cd60 <_printf_common+0x48>
 800cd52:	f104 0a19 	add.w	sl, r4, #25
 800cd56:	68e3      	ldr	r3, [r4, #12]
 800cd58:	6832      	ldr	r2, [r6, #0]
 800cd5a:	1a9b      	subs	r3, r3, r2
 800cd5c:	42ab      	cmp	r3, r5
 800cd5e:	dc28      	bgt.n	800cdb2 <_printf_common+0x9a>
 800cd60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd64:	1e13      	subs	r3, r2, #0
 800cd66:	6822      	ldr	r2, [r4, #0]
 800cd68:	bf18      	it	ne
 800cd6a:	2301      	movne	r3, #1
 800cd6c:	0692      	lsls	r2, r2, #26
 800cd6e:	d42d      	bmi.n	800cdcc <_printf_common+0xb4>
 800cd70:	4649      	mov	r1, r9
 800cd72:	4638      	mov	r0, r7
 800cd74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd78:	47c0      	blx	r8
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	d020      	beq.n	800cdc0 <_printf_common+0xa8>
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	68e5      	ldr	r5, [r4, #12]
 800cd82:	f003 0306 	and.w	r3, r3, #6
 800cd86:	2b04      	cmp	r3, #4
 800cd88:	bf18      	it	ne
 800cd8a:	2500      	movne	r5, #0
 800cd8c:	6832      	ldr	r2, [r6, #0]
 800cd8e:	f04f 0600 	mov.w	r6, #0
 800cd92:	68a3      	ldr	r3, [r4, #8]
 800cd94:	bf08      	it	eq
 800cd96:	1aad      	subeq	r5, r5, r2
 800cd98:	6922      	ldr	r2, [r4, #16]
 800cd9a:	bf08      	it	eq
 800cd9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cda0:	4293      	cmp	r3, r2
 800cda2:	bfc4      	itt	gt
 800cda4:	1a9b      	subgt	r3, r3, r2
 800cda6:	18ed      	addgt	r5, r5, r3
 800cda8:	341a      	adds	r4, #26
 800cdaa:	42b5      	cmp	r5, r6
 800cdac:	d11a      	bne.n	800cde4 <_printf_common+0xcc>
 800cdae:	2000      	movs	r0, #0
 800cdb0:	e008      	b.n	800cdc4 <_printf_common+0xac>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	4652      	mov	r2, sl
 800cdb6:	4649      	mov	r1, r9
 800cdb8:	4638      	mov	r0, r7
 800cdba:	47c0      	blx	r8
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d103      	bne.n	800cdc8 <_printf_common+0xb0>
 800cdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc8:	3501      	adds	r5, #1
 800cdca:	e7c4      	b.n	800cd56 <_printf_common+0x3e>
 800cdcc:	2030      	movs	r0, #48	; 0x30
 800cdce:	18e1      	adds	r1, r4, r3
 800cdd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdd4:	1c5a      	adds	r2, r3, #1
 800cdd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdda:	4422      	add	r2, r4
 800cddc:	3302      	adds	r3, #2
 800cdde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cde2:	e7c5      	b.n	800cd70 <_printf_common+0x58>
 800cde4:	2301      	movs	r3, #1
 800cde6:	4622      	mov	r2, r4
 800cde8:	4649      	mov	r1, r9
 800cdea:	4638      	mov	r0, r7
 800cdec:	47c0      	blx	r8
 800cdee:	3001      	adds	r0, #1
 800cdf0:	d0e6      	beq.n	800cdc0 <_printf_common+0xa8>
 800cdf2:	3601      	adds	r6, #1
 800cdf4:	e7d9      	b.n	800cdaa <_printf_common+0x92>
	...

0800cdf8 <_printf_i>:
 800cdf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdfc:	7e0f      	ldrb	r7, [r1, #24]
 800cdfe:	4691      	mov	r9, r2
 800ce00:	2f78      	cmp	r7, #120	; 0x78
 800ce02:	4680      	mov	r8, r0
 800ce04:	460c      	mov	r4, r1
 800ce06:	469a      	mov	sl, r3
 800ce08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce0e:	d807      	bhi.n	800ce20 <_printf_i+0x28>
 800ce10:	2f62      	cmp	r7, #98	; 0x62
 800ce12:	d80a      	bhi.n	800ce2a <_printf_i+0x32>
 800ce14:	2f00      	cmp	r7, #0
 800ce16:	f000 80d9 	beq.w	800cfcc <_printf_i+0x1d4>
 800ce1a:	2f58      	cmp	r7, #88	; 0x58
 800ce1c:	f000 80a4 	beq.w	800cf68 <_printf_i+0x170>
 800ce20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce28:	e03a      	b.n	800cea0 <_printf_i+0xa8>
 800ce2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce2e:	2b15      	cmp	r3, #21
 800ce30:	d8f6      	bhi.n	800ce20 <_printf_i+0x28>
 800ce32:	a101      	add	r1, pc, #4	; (adr r1, 800ce38 <_printf_i+0x40>)
 800ce34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce38:	0800ce91 	.word	0x0800ce91
 800ce3c:	0800cea5 	.word	0x0800cea5
 800ce40:	0800ce21 	.word	0x0800ce21
 800ce44:	0800ce21 	.word	0x0800ce21
 800ce48:	0800ce21 	.word	0x0800ce21
 800ce4c:	0800ce21 	.word	0x0800ce21
 800ce50:	0800cea5 	.word	0x0800cea5
 800ce54:	0800ce21 	.word	0x0800ce21
 800ce58:	0800ce21 	.word	0x0800ce21
 800ce5c:	0800ce21 	.word	0x0800ce21
 800ce60:	0800ce21 	.word	0x0800ce21
 800ce64:	0800cfb3 	.word	0x0800cfb3
 800ce68:	0800ced5 	.word	0x0800ced5
 800ce6c:	0800cf95 	.word	0x0800cf95
 800ce70:	0800ce21 	.word	0x0800ce21
 800ce74:	0800ce21 	.word	0x0800ce21
 800ce78:	0800cfd5 	.word	0x0800cfd5
 800ce7c:	0800ce21 	.word	0x0800ce21
 800ce80:	0800ced5 	.word	0x0800ced5
 800ce84:	0800ce21 	.word	0x0800ce21
 800ce88:	0800ce21 	.word	0x0800ce21
 800ce8c:	0800cf9d 	.word	0x0800cf9d
 800ce90:	682b      	ldr	r3, [r5, #0]
 800ce92:	1d1a      	adds	r2, r3, #4
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	602a      	str	r2, [r5, #0]
 800ce98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cea0:	2301      	movs	r3, #1
 800cea2:	e0a4      	b.n	800cfee <_printf_i+0x1f6>
 800cea4:	6820      	ldr	r0, [r4, #0]
 800cea6:	6829      	ldr	r1, [r5, #0]
 800cea8:	0606      	lsls	r6, r0, #24
 800ceaa:	f101 0304 	add.w	r3, r1, #4
 800ceae:	d50a      	bpl.n	800cec6 <_printf_i+0xce>
 800ceb0:	680e      	ldr	r6, [r1, #0]
 800ceb2:	602b      	str	r3, [r5, #0]
 800ceb4:	2e00      	cmp	r6, #0
 800ceb6:	da03      	bge.n	800cec0 <_printf_i+0xc8>
 800ceb8:	232d      	movs	r3, #45	; 0x2d
 800ceba:	4276      	negs	r6, r6
 800cebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cec0:	230a      	movs	r3, #10
 800cec2:	485e      	ldr	r0, [pc, #376]	; (800d03c <_printf_i+0x244>)
 800cec4:	e019      	b.n	800cefa <_printf_i+0x102>
 800cec6:	680e      	ldr	r6, [r1, #0]
 800cec8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cecc:	602b      	str	r3, [r5, #0]
 800cece:	bf18      	it	ne
 800ced0:	b236      	sxthne	r6, r6
 800ced2:	e7ef      	b.n	800ceb4 <_printf_i+0xbc>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	6820      	ldr	r0, [r4, #0]
 800ced8:	1d19      	adds	r1, r3, #4
 800ceda:	6029      	str	r1, [r5, #0]
 800cedc:	0601      	lsls	r1, r0, #24
 800cede:	d501      	bpl.n	800cee4 <_printf_i+0xec>
 800cee0:	681e      	ldr	r6, [r3, #0]
 800cee2:	e002      	b.n	800ceea <_printf_i+0xf2>
 800cee4:	0646      	lsls	r6, r0, #25
 800cee6:	d5fb      	bpl.n	800cee0 <_printf_i+0xe8>
 800cee8:	881e      	ldrh	r6, [r3, #0]
 800ceea:	2f6f      	cmp	r7, #111	; 0x6f
 800ceec:	bf0c      	ite	eq
 800ceee:	2308      	moveq	r3, #8
 800cef0:	230a      	movne	r3, #10
 800cef2:	4852      	ldr	r0, [pc, #328]	; (800d03c <_printf_i+0x244>)
 800cef4:	2100      	movs	r1, #0
 800cef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cefa:	6865      	ldr	r5, [r4, #4]
 800cefc:	2d00      	cmp	r5, #0
 800cefe:	bfa8      	it	ge
 800cf00:	6821      	ldrge	r1, [r4, #0]
 800cf02:	60a5      	str	r5, [r4, #8]
 800cf04:	bfa4      	itt	ge
 800cf06:	f021 0104 	bicge.w	r1, r1, #4
 800cf0a:	6021      	strge	r1, [r4, #0]
 800cf0c:	b90e      	cbnz	r6, 800cf12 <_printf_i+0x11a>
 800cf0e:	2d00      	cmp	r5, #0
 800cf10:	d04d      	beq.n	800cfae <_printf_i+0x1b6>
 800cf12:	4615      	mov	r5, r2
 800cf14:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf18:	fb03 6711 	mls	r7, r3, r1, r6
 800cf1c:	5dc7      	ldrb	r7, [r0, r7]
 800cf1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf22:	4637      	mov	r7, r6
 800cf24:	42bb      	cmp	r3, r7
 800cf26:	460e      	mov	r6, r1
 800cf28:	d9f4      	bls.n	800cf14 <_printf_i+0x11c>
 800cf2a:	2b08      	cmp	r3, #8
 800cf2c:	d10b      	bne.n	800cf46 <_printf_i+0x14e>
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	07de      	lsls	r6, r3, #31
 800cf32:	d508      	bpl.n	800cf46 <_printf_i+0x14e>
 800cf34:	6923      	ldr	r3, [r4, #16]
 800cf36:	6861      	ldr	r1, [r4, #4]
 800cf38:	4299      	cmp	r1, r3
 800cf3a:	bfde      	ittt	le
 800cf3c:	2330      	movle	r3, #48	; 0x30
 800cf3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf42:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf46:	1b52      	subs	r2, r2, r5
 800cf48:	6122      	str	r2, [r4, #16]
 800cf4a:	464b      	mov	r3, r9
 800cf4c:	4621      	mov	r1, r4
 800cf4e:	4640      	mov	r0, r8
 800cf50:	f8cd a000 	str.w	sl, [sp]
 800cf54:	aa03      	add	r2, sp, #12
 800cf56:	f7ff fedf 	bl	800cd18 <_printf_common>
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	d14c      	bne.n	800cff8 <_printf_i+0x200>
 800cf5e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf62:	b004      	add	sp, #16
 800cf64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf68:	4834      	ldr	r0, [pc, #208]	; (800d03c <_printf_i+0x244>)
 800cf6a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf6e:	6829      	ldr	r1, [r5, #0]
 800cf70:	6823      	ldr	r3, [r4, #0]
 800cf72:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf76:	6029      	str	r1, [r5, #0]
 800cf78:	061d      	lsls	r5, r3, #24
 800cf7a:	d514      	bpl.n	800cfa6 <_printf_i+0x1ae>
 800cf7c:	07df      	lsls	r7, r3, #31
 800cf7e:	bf44      	itt	mi
 800cf80:	f043 0320 	orrmi.w	r3, r3, #32
 800cf84:	6023      	strmi	r3, [r4, #0]
 800cf86:	b91e      	cbnz	r6, 800cf90 <_printf_i+0x198>
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	f023 0320 	bic.w	r3, r3, #32
 800cf8e:	6023      	str	r3, [r4, #0]
 800cf90:	2310      	movs	r3, #16
 800cf92:	e7af      	b.n	800cef4 <_printf_i+0xfc>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	f043 0320 	orr.w	r3, r3, #32
 800cf9a:	6023      	str	r3, [r4, #0]
 800cf9c:	2378      	movs	r3, #120	; 0x78
 800cf9e:	4828      	ldr	r0, [pc, #160]	; (800d040 <_printf_i+0x248>)
 800cfa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfa4:	e7e3      	b.n	800cf6e <_printf_i+0x176>
 800cfa6:	0659      	lsls	r1, r3, #25
 800cfa8:	bf48      	it	mi
 800cfaa:	b2b6      	uxthmi	r6, r6
 800cfac:	e7e6      	b.n	800cf7c <_printf_i+0x184>
 800cfae:	4615      	mov	r5, r2
 800cfb0:	e7bb      	b.n	800cf2a <_printf_i+0x132>
 800cfb2:	682b      	ldr	r3, [r5, #0]
 800cfb4:	6826      	ldr	r6, [r4, #0]
 800cfb6:	1d18      	adds	r0, r3, #4
 800cfb8:	6961      	ldr	r1, [r4, #20]
 800cfba:	6028      	str	r0, [r5, #0]
 800cfbc:	0635      	lsls	r5, r6, #24
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	d501      	bpl.n	800cfc6 <_printf_i+0x1ce>
 800cfc2:	6019      	str	r1, [r3, #0]
 800cfc4:	e002      	b.n	800cfcc <_printf_i+0x1d4>
 800cfc6:	0670      	lsls	r0, r6, #25
 800cfc8:	d5fb      	bpl.n	800cfc2 <_printf_i+0x1ca>
 800cfca:	8019      	strh	r1, [r3, #0]
 800cfcc:	2300      	movs	r3, #0
 800cfce:	4615      	mov	r5, r2
 800cfd0:	6123      	str	r3, [r4, #16]
 800cfd2:	e7ba      	b.n	800cf4a <_printf_i+0x152>
 800cfd4:	682b      	ldr	r3, [r5, #0]
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	1d1a      	adds	r2, r3, #4
 800cfda:	602a      	str	r2, [r5, #0]
 800cfdc:	681d      	ldr	r5, [r3, #0]
 800cfde:	6862      	ldr	r2, [r4, #4]
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	f000 f831 	bl	800d048 <memchr>
 800cfe6:	b108      	cbz	r0, 800cfec <_printf_i+0x1f4>
 800cfe8:	1b40      	subs	r0, r0, r5
 800cfea:	6060      	str	r0, [r4, #4]
 800cfec:	6863      	ldr	r3, [r4, #4]
 800cfee:	6123      	str	r3, [r4, #16]
 800cff0:	2300      	movs	r3, #0
 800cff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cff6:	e7a8      	b.n	800cf4a <_printf_i+0x152>
 800cff8:	462a      	mov	r2, r5
 800cffa:	4649      	mov	r1, r9
 800cffc:	4640      	mov	r0, r8
 800cffe:	6923      	ldr	r3, [r4, #16]
 800d000:	47d0      	blx	sl
 800d002:	3001      	adds	r0, #1
 800d004:	d0ab      	beq.n	800cf5e <_printf_i+0x166>
 800d006:	6823      	ldr	r3, [r4, #0]
 800d008:	079b      	lsls	r3, r3, #30
 800d00a:	d413      	bmi.n	800d034 <_printf_i+0x23c>
 800d00c:	68e0      	ldr	r0, [r4, #12]
 800d00e:	9b03      	ldr	r3, [sp, #12]
 800d010:	4298      	cmp	r0, r3
 800d012:	bfb8      	it	lt
 800d014:	4618      	movlt	r0, r3
 800d016:	e7a4      	b.n	800cf62 <_printf_i+0x16a>
 800d018:	2301      	movs	r3, #1
 800d01a:	4632      	mov	r2, r6
 800d01c:	4649      	mov	r1, r9
 800d01e:	4640      	mov	r0, r8
 800d020:	47d0      	blx	sl
 800d022:	3001      	adds	r0, #1
 800d024:	d09b      	beq.n	800cf5e <_printf_i+0x166>
 800d026:	3501      	adds	r5, #1
 800d028:	68e3      	ldr	r3, [r4, #12]
 800d02a:	9903      	ldr	r1, [sp, #12]
 800d02c:	1a5b      	subs	r3, r3, r1
 800d02e:	42ab      	cmp	r3, r5
 800d030:	dcf2      	bgt.n	800d018 <_printf_i+0x220>
 800d032:	e7eb      	b.n	800d00c <_printf_i+0x214>
 800d034:	2500      	movs	r5, #0
 800d036:	f104 0619 	add.w	r6, r4, #25
 800d03a:	e7f5      	b.n	800d028 <_printf_i+0x230>
 800d03c:	0800d1c9 	.word	0x0800d1c9
 800d040:	0800d1da 	.word	0x0800d1da

0800d044 <__retarget_lock_acquire_recursive>:
 800d044:	4770      	bx	lr

0800d046 <__retarget_lock_release_recursive>:
 800d046:	4770      	bx	lr

0800d048 <memchr>:
 800d048:	4603      	mov	r3, r0
 800d04a:	b510      	push	{r4, lr}
 800d04c:	b2c9      	uxtb	r1, r1
 800d04e:	4402      	add	r2, r0
 800d050:	4293      	cmp	r3, r2
 800d052:	4618      	mov	r0, r3
 800d054:	d101      	bne.n	800d05a <memchr+0x12>
 800d056:	2000      	movs	r0, #0
 800d058:	e003      	b.n	800d062 <memchr+0x1a>
 800d05a:	7804      	ldrb	r4, [r0, #0]
 800d05c:	3301      	adds	r3, #1
 800d05e:	428c      	cmp	r4, r1
 800d060:	d1f6      	bne.n	800d050 <memchr+0x8>
 800d062:	bd10      	pop	{r4, pc}

0800d064 <memmove>:
 800d064:	4288      	cmp	r0, r1
 800d066:	b510      	push	{r4, lr}
 800d068:	eb01 0402 	add.w	r4, r1, r2
 800d06c:	d902      	bls.n	800d074 <memmove+0x10>
 800d06e:	4284      	cmp	r4, r0
 800d070:	4623      	mov	r3, r4
 800d072:	d807      	bhi.n	800d084 <memmove+0x20>
 800d074:	1e43      	subs	r3, r0, #1
 800d076:	42a1      	cmp	r1, r4
 800d078:	d008      	beq.n	800d08c <memmove+0x28>
 800d07a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d07e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d082:	e7f8      	b.n	800d076 <memmove+0x12>
 800d084:	4601      	mov	r1, r0
 800d086:	4402      	add	r2, r0
 800d088:	428a      	cmp	r2, r1
 800d08a:	d100      	bne.n	800d08e <memmove+0x2a>
 800d08c:	bd10      	pop	{r4, pc}
 800d08e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d096:	e7f7      	b.n	800d088 <memmove+0x24>

0800d098 <_realloc_r>:
 800d098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d09c:	4680      	mov	r8, r0
 800d09e:	4614      	mov	r4, r2
 800d0a0:	460e      	mov	r6, r1
 800d0a2:	b921      	cbnz	r1, 800d0ae <_realloc_r+0x16>
 800d0a4:	4611      	mov	r1, r2
 800d0a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0aa:	f7ff bc29 	b.w	800c900 <_malloc_r>
 800d0ae:	b92a      	cbnz	r2, 800d0bc <_realloc_r+0x24>
 800d0b0:	f7ff fbbe 	bl	800c830 <_free_r>
 800d0b4:	4625      	mov	r5, r4
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0bc:	f000 f81b 	bl	800d0f6 <_malloc_usable_size_r>
 800d0c0:	4284      	cmp	r4, r0
 800d0c2:	4607      	mov	r7, r0
 800d0c4:	d802      	bhi.n	800d0cc <_realloc_r+0x34>
 800d0c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0ca:	d812      	bhi.n	800d0f2 <_realloc_r+0x5a>
 800d0cc:	4621      	mov	r1, r4
 800d0ce:	4640      	mov	r0, r8
 800d0d0:	f7ff fc16 	bl	800c900 <_malloc_r>
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d0ed      	beq.n	800d0b6 <_realloc_r+0x1e>
 800d0da:	42bc      	cmp	r4, r7
 800d0dc:	4622      	mov	r2, r4
 800d0de:	4631      	mov	r1, r6
 800d0e0:	bf28      	it	cs
 800d0e2:	463a      	movcs	r2, r7
 800d0e4:	f7ff fb8e 	bl	800c804 <memcpy>
 800d0e8:	4631      	mov	r1, r6
 800d0ea:	4640      	mov	r0, r8
 800d0ec:	f7ff fba0 	bl	800c830 <_free_r>
 800d0f0:	e7e1      	b.n	800d0b6 <_realloc_r+0x1e>
 800d0f2:	4635      	mov	r5, r6
 800d0f4:	e7df      	b.n	800d0b6 <_realloc_r+0x1e>

0800d0f6 <_malloc_usable_size_r>:
 800d0f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0fa:	1f18      	subs	r0, r3, #4
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	bfbc      	itt	lt
 800d100:	580b      	ldrlt	r3, [r1, r0]
 800d102:	18c0      	addlt	r0, r0, r3
 800d104:	4770      	bx	lr
	...

0800d108 <_init>:
 800d108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d10a:	bf00      	nop
 800d10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10e:	bc08      	pop	{r3}
 800d110:	469e      	mov	lr, r3
 800d112:	4770      	bx	lr

0800d114 <_fini>:
 800d114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d116:	bf00      	nop
 800d118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d11a:	bc08      	pop	{r3}
 800d11c:	469e      	mov	lr, r3
 800d11e:	4770      	bx	lr
