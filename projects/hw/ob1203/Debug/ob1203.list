
ob1203.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800c038  0800c038  0001c038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0ac  0800c0ac  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c0ac  0800c0ac  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c0ac  0800c0ac  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0ac  0800c0ac  0001c0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0b0  0800c0b0  0001c0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001358  200001e4  0800c298  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000153c  0800c298  0002153c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165e4  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000397e  00000000  00000000  000367f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003a170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  0003b5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c536  00000000  00000000  0003c890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a37a  00000000  00000000  00058dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091722  00000000  00000000  00073140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104862  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d8  00000000  00000000  001048b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c020 	.word	0x0800c020

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800c020 	.word	0x0800c020

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__gesf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpsf2+0x4>
 8000932:	bf00      	nop

08000934 <__lesf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpsf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpsf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000948:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800094c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000950:	bf18      	it	ne
 8000952:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000956:	d011      	beq.n	800097c <__cmpsf2+0x40>
 8000958:	b001      	add	sp, #4
 800095a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800095e:	bf18      	it	ne
 8000960:	ea90 0f01 	teqne	r0, r1
 8000964:	bf58      	it	pl
 8000966:	ebb2 0003 	subspl.w	r0, r2, r3
 800096a:	bf88      	it	hi
 800096c:	17c8      	asrhi	r0, r1, #31
 800096e:	bf38      	it	cc
 8000970:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000974:	bf18      	it	ne
 8000976:	f040 0001 	orrne.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000980:	d102      	bne.n	8000988 <__cmpsf2+0x4c>
 8000982:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000986:	d105      	bne.n	8000994 <__cmpsf2+0x58>
 8000988:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800098c:	d1e4      	bne.n	8000958 <__cmpsf2+0x1c>
 800098e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000992:	d0e1      	beq.n	8000958 <__cmpsf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cfrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4608      	mov	r0, r1
 80009a0:	4661      	mov	r1, ip
 80009a2:	e7ff      	b.n	80009a4 <__aeabi_cfcmpeq>

080009a4 <__aeabi_cfcmpeq>:
 80009a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80009a6:	f7ff ffc9 	bl	800093c <__cmpsf2>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	bf48      	it	mi
 80009ae:	f110 0f00 	cmnmi.w	r0, #0
 80009b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080009b4 <__aeabi_fcmpeq>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff fff4 	bl	80009a4 <__aeabi_cfcmpeq>
 80009bc:	bf0c      	ite	eq
 80009be:	2001      	moveq	r0, #1
 80009c0:	2000      	movne	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_fcmplt>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffea 	bl	80009a4 <__aeabi_cfcmpeq>
 80009d0:	bf34      	ite	cc
 80009d2:	2001      	movcc	r0, #1
 80009d4:	2000      	movcs	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_fcmple>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffe0 	bl	80009a4 <__aeabi_cfcmpeq>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_fcmpge>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffd2 	bl	800099c <__aeabi_cfrcmple>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_fcmpgt>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffc8 	bl	800099c <__aeabi_cfrcmple>
 8000a0c:	bf34      	ite	cc
 8000a0e:	2001      	movcc	r0, #1
 8000a10:	2000      	movcs	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <Buffer_Init>:

/* Private variables ---------------------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
BUF_HandleTypeDef Buffer_Init(size_t size)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	BUF_HandleTypeDef circular_buffer = malloc(sizeof(circular_buf));
 8000a20:	2010      	movs	r0, #16
 8000a22:	f00b fa2d 	bl	800be80 <malloc>
 8000a26:	4603      	mov	r3, r0
 8000a28:	60fb      	str	r3, [r7, #12]
	// If size is 1024, capacity will be 1025, and indices' range is [0..1024]
	circular_buffer->buffer = (uint8_t*)malloc(size + 1);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f00b fa26 	bl	800be80 <malloc>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	601a      	str	r2, [r3, #0]
	circular_buffer->capacity = size + 1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	60da      	str	r2, [r3, #12]
	Buffer_Clear(circular_buffer);
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f000 f830 	bl	8000aaa <Buffer_Clear>
	return circular_buffer;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <Buffer_Size>:

size_t Buffer_Size(BUF_HandleTypeDef buf)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	size_t size = (buf->capacity + buf->write_index - buf->read_index) % buf->capacity;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	68d2      	ldr	r2, [r2, #12]
 8000a70:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a74:	fb01 f202 	mul.w	r2, r1, r2
 8000a78:	1a9b      	subs	r3, r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
	return size;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <Buffer_IsEmpty>:

int Buffer_IsEmpty(BUF_HandleTypeDef buf)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == 0;
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ffdf 	bl	8000a54 <Buffer_Size>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf0c      	ite	eq
 8000a9c:	2301      	moveq	r3, #1
 8000a9e:	2300      	movne	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <Buffer_Clear>:

void Buffer_Clear(BUF_HandleTypeDef buf)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
	buf->write_index = 0;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
	buf->read_index = 0;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <Buffer_IsFull>:

int Buffer_IsFull(BUF_HandleTypeDef buf)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == buf->capacity - 1;
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ffbf 	bl	8000a54 <Buffer_Size>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2301      	moveq	r3, #1
 8000ae4:	2300      	movne	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <Buffer_Read>:

uint8_t Buffer_Read(BUF_HandleTypeDef buf)
 {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]
	if(!Buffer_IsEmpty(buf))
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ffc3 	bl	8000a88 <Buffer_IsEmpty>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d116      	bne.n	8000b36 <Buffer_Read+0x46>
	{
		data = buf->buffer[buf->read_index];
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	73fb      	strb	r3, [r7, #15]
		buf->read_index++;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
		buf->read_index %= buf->capacity;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	68d2      	ldr	r2, [r2, #12]
 8000b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b2c:	fb01 f202 	mul.w	r2, r1, r2
 8000b30:	1a9a      	subs	r2, r3, r2
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	609a      	str	r2, [r3, #8]
	}
	return data;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <Buffer_Write>:

void Buffer_Write(BUF_HandleTypeDef buf, uint8_t data)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
	if(Buffer_IsFull(buf))
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ffbb 	bl	8000ac8 <Buffer_IsFull>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <Buffer_Write+0x1e>
	{
	    Buffer_Read(buf);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ffc9 	bl	8000af0 <Buffer_Read>
	}
	buf->buffer[buf->write_index] = data;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	78fa      	ldrb	r2, [r7, #3]
 8000b6a:	701a      	strb	r2, [r3, #0]
	buf->write_index++;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	605a      	str	r2, [r3, #4]
	buf->write_index %= buf->capacity;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68d2      	ldr	r2, [r2, #12]
 8000b7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b82:	fb01 f202 	mul.w	r2, r1, r2
 8000b86:	1a9a      	subs	r2, r3, r2
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	605a      	str	r2, [r3, #4]
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <Command_Check>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int Command_Check()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
	int command_count = COMMAND_FIRST_BYTE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
	int command_status = COMMAND_NOTRECEIVED;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
	while (! Buffer_IsEmpty(FIFO_buf) && command_status == COMMAND_NOTRECEIVED)
 8000ba2:	e035      	b.n	8000c10 <Command_Check+0x7c>
	{
		uint8_t data = Buffer_Read(FIFO_buf);
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <Command_Check+0x9c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ffa1 	bl	8000af0 <Buffer_Read>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
		switch (command_count)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d020      	beq.n	8000bfa <Command_Check+0x66>
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	dc28      	bgt.n	8000c10 <Command_Check+0x7c>
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <Command_Check+0x38>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d00c      	beq.n	8000be4 <Command_Check+0x50>
 8000bca:	e021      	b.n	8000c10 <Command_Check+0x7c>
		{
		case COMMAND_FIRST_BYTE:
			if (data == 0)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d102      	bne.n	8000bd8 <Command_Check+0x44>
			{
				command_count = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	e01b      	b.n	8000c10 <Command_Check+0x7c>
			}
			else if(data == 255)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2bff      	cmp	r3, #255	; 0xff
 8000bdc:	d118      	bne.n	8000c10 <Command_Check+0x7c>
			{
				command_count = 2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	60fb      	str	r3, [r7, #12]
			}
			break;
 8000be2:	e015      	b.n	8000c10 <Command_Check+0x7c>
		case COMMAND_SECOND_BYTE:
			command_status = (data == 7)? COMMAND_RECEIVED: COMMAND_NOTRECEIVED;
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	bf14      	ite	ne
 8000bea:	2301      	movne	r3, #1
 8000bec:	2300      	moveq	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	60bb      	str	r3, [r7, #8]
			command = COMMAND_START;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <Command_Check+0xa0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
			break;
 8000bf8:	e00a      	b.n	8000c10 <Command_Check+0x7c>
		case COMMAND_SWITCH:
			command_status = (data == 0)? COMMAND_RECEIVED: COMMAND_NOTRECEIVED;
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	60bb      	str	r3, [r7, #8]
			command = COMMAND_STOP;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <Command_Check+0xa0>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
			break;
 8000c0e:	bf00      	nop
	while (! Buffer_IsEmpty(FIFO_buf) && command_status == COMMAND_NOTRECEIVED)
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <Command_Check+0x9c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff37 	bl	8000a88 <Buffer_IsEmpty>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <Command_Check+0x92>
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d0be      	beq.n	8000ba4 <Command_Check+0x10>
		}
	}
	return command_status;
 8000c26:	68bb      	ldr	r3, [r7, #8]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200002f4 	.word	0x200002f4
 8000c34:	20000000 	.word	0x20000000

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  FIFO_buf = Buffer_Init(128);
 8000c3e:	2080      	movs	r0, #128	; 0x80
 8000c40:	f7ff feea 	bl	8000a18 <Buffer_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	4a4f      	ldr	r2, [pc, #316]	; (8000d84 <main+0x14c>)
 8000c48:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4a:	f000 fc0d 	bl	8001468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4e:	f000 f8ab 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c52:	f000 f9ab 	bl	8000fac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c56:	f000 f901 	bl	8000e5c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c5a:	f000 f95b 	bl	8000f14 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000c5e:	f00a f9c1 	bl	800afe4 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 8000c62:	f000 f929 	bl	8000eb8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  adc1_rdy = 0;
 8000c66:	4b48      	ldr	r3, [pc, #288]	; (8000d88 <main+0x150>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
  adc2_rdy = 0;
 8000c6c:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <main+0x154>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
  uint32_t ppg;
  uint16_t ps;
  int setup = SETUP_NOTDONE;
 8000c72:	2301      	movs	r3, #1
 8000c74:	607b      	str	r3, [r7, #4]
  command = COMMAND_NOTR;
 8000c76:	4b46      	ldr	r3, [pc, #280]	; (8000d90 <main+0x158>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(Command_Check() == COMMAND_RECEIVED)
 8000c7c:	f7ff ff8a 	bl	8000b94 <Command_Check>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d102      	bne.n	8000c8c <main+0x54>
	{
		SM_Case = ST_IDLE;
 8000c86:	4b43      	ldr	r3, [pc, #268]	; (8000d94 <main+0x15c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
	}
	switch(SM_Case)
 8000c8c:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <main+0x15c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d06d      	beq.n	8000d70 <main+0x138>
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	dcf1      	bgt.n	8000c7c <main+0x44>
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <main+0x6a>
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d00f      	beq.n	8000cc0 <main+0x88>
 8000ca0:	e06e      	b.n	8000d80 <main+0x148>
	{
		case ST_IDLE:
			if (command == COMMAND_START)
 8000ca2:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <main+0x158>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d102      	bne.n	8000cb0 <main+0x78>
			{
				SM_Case = ST_START;
 8000caa:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <main+0x15c>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
			}
			if (command == COMMAND_STOP)
 8000cb0:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <main+0x158>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d160      	bne.n	8000d7a <main+0x142>
			{
				SM_Case = ST_STOP;
 8000cb8:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <main+0x15c>)
 8000cba:	2202      	movs	r2, #2
 8000cbc:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000cbe:	e05c      	b.n	8000d7a <main+0x142>
		case ST_START:

			if (setup == SETUP_NOTDONE)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d11d      	bne.n	8000d02 <main+0xca>
			{
				rate = HEARTRATE11_PPG_RATE_1MS;
 8000cc6:	4b34      	ldr	r3, [pc, #208]	; (8000d98 <main+0x160>)
 8000cc8:	2202      	movs	r2, #2
 8000cca:	701a      	strb	r2, [r3, #0]
				cur_i2c = hi2c1;
 8000ccc:	4a33      	ldr	r2, [pc, #204]	; (8000d9c <main+0x164>)
 8000cce:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <main+0x168>)
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	2354      	movs	r3, #84	; 0x54
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f00b f8da 	bl	800be90 <memcpy>
				OB1203_Setup();
 8000cdc:	f000 f9ff 	bl	80010de <OB1203_Setup>
				cur_i2c = hi2c2;
 8000ce0:	4a2e      	ldr	r2, [pc, #184]	; (8000d9c <main+0x164>)
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <main+0x16c>)
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	2354      	movs	r3, #84	; 0x54
 8000cea:	461a      	mov	r2, r3
 8000cec:	f00b f8d0 	bl	800be90 <memcpy>
				OB1203_Setup();
 8000cf0:	f000 f9f5 	bl	80010de <OB1203_Setup>
				setup = SETUP_DONE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
				ob1203_send_info(rate);
 8000cf8:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <main+0x160>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00a fea7 	bl	800ba50 <ob1203_send_info>
			}
			if(adc1_rdy)
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <main+0x150>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d016      	beq.n	8000d38 <main+0x100>
			{
				cur_i2c = hi2c1;
 8000d0a:	4a24      	ldr	r2, [pc, #144]	; (8000d9c <main+0x164>)
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <main+0x168>)
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	2354      	movs	r3, #84	; 0x54
 8000d14:	461a      	mov	r2, r3
 8000d16:	f00b f8bb 	bl	800be90 <memcpy>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
				memset(&ppg, 0, sizeof(ppg));
				heartrate11_read_fifo(0, &ppg);
 8000d1e:	463b      	mov	r3, r7
 8000d20:	4619      	mov	r1, r3
 8000d22:	2000      	movs	r0, #0
 8000d24:	f00b f85e 	bl	800bde4 <heartrate11_read_fifo>
				ob1203_send_results(ppg, 1);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f00a fe5e 	bl	800b9ee <ob1203_send_results>
				adc1_rdy = 0;
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <main+0x150>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
			}
			if(adc2_rdy)
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <main+0x154>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01e      	beq.n	8000d7e <main+0x146>
			{
				cur_i2c = hi2c2;
 8000d40:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <main+0x164>)
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <main+0x16c>)
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	2354      	movs	r3, #84	; 0x54
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f00b f8a0 	bl	800be90 <memcpy>
 8000d50:	2300      	movs	r3, #0
 8000d52:	603b      	str	r3, [r7, #0]
				memset(&ppg, 0, sizeof(ppg));
				heartrate11_read_fifo(0, &ppg);
 8000d54:	463b      	mov	r3, r7
 8000d56:	4619      	mov	r1, r3
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f00b f843 	bl	800bde4 <heartrate11_read_fifo>
				ob1203_send_results(ppg, 2);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	2102      	movs	r1, #2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f00a fe43 	bl	800b9ee <ob1203_send_results>
				adc2_rdy = 0;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <main+0x154>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000d6e:	e006      	b.n	8000d7e <main+0x146>
		case ST_STOP:
			OB1203_RST();
 8000d70:	f000 f9aa 	bl	80010c8 <OB1203_RST>
			setup = SETUP_NOTDONE;
 8000d74:	2301      	movs	r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
			break;
 8000d78:	e002      	b.n	8000d80 <main+0x148>
			break;
 8000d7a:	bf00      	nop
 8000d7c:	e77e      	b.n	8000c7c <main+0x44>
			break;
 8000d7e:	bf00      	nop
	if(Command_Check() == COMMAND_RECEIVED)
 8000d80:	e77c      	b.n	8000c7c <main+0x44>
 8000d82:	bf00      	nop
 8000d84:	200002f4 	.word	0x200002f4
 8000d88:	200002f9 	.word	0x200002f9
 8000d8c:	200002fa 	.word	0x200002fa
 8000d90:	20000000 	.word	0x20000000
 8000d94:	200002f0 	.word	0x200002f0
 8000d98:	200002f8 	.word	0x200002f8
 8000d9c:	200002fc 	.word	0x200002fc
 8000da0:	20000200 	.word	0x20000200
 8000da4:	20000254 	.word	0x20000254

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b094      	sub	sp, #80	; 0x50
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db2:	2228      	movs	r2, #40	; 0x28
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f00b f878 	bl	800beac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de6:	2301      	movs	r3, #1
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dea:	2302      	movs	r3, #2
 8000dec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000df4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000df8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f005 f88e 	bl	8005f20 <HAL_RCC_OscConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e0a:	f000 f979 	bl	8001100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f005 fafa 	bl	8006424 <HAL_RCC_ClockConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e36:	f000 f963 	bl	8001100 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4618      	mov	r0, r3
 8000e46:	f005 fc71 	bl	800672c <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e50:	f000 f956 	bl	8001100 <Error_Handler>
  }
}
 8000e54:	bf00      	nop
 8000e56:	3750      	adds	r7, #80	; 0x50
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e62:	4a13      	ldr	r2, [pc, #76]	; (8000eb0 <MX_I2C1_Init+0x54>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <MX_I2C1_Init+0x58>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e9a:	f000 feb9 	bl	8001c10 <HAL_I2C_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea4:	f000 f92c 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000200 	.word	0x20000200
 8000eb0:	40005400 	.word	0x40005400
 8000eb4:	00061a80 	.word	0x00061a80

08000eb8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ebe:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <MX_I2C2_Init+0x54>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ec4:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_I2C2_Init+0x58>)
 8000ec6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ed6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eda:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_I2C2_Init+0x50>)
 8000ef6:	f000 fe8b 	bl	8001c10 <HAL_I2C_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f00:	f000 f8fe 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000254 	.word	0x20000254
 8000f0c:	40005800 	.word	0x40005800
 8000f10:	00061a80 	.word	0x00061a80

08000f14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f58:	4813      	ldr	r0, [pc, #76]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f5a:	f005 fc9d 	bl	8006898 <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f64:	f000 f8cc 	bl	8001100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f76:	f005 fcde 	bl	8006936 <HAL_TIM_ConfigClockSource>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f80:	f000 f8be 	bl	8001100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_TIM2_Init+0x94>)
 8000f92:	f005 fe8d 	bl	8006cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f9c:	f000 f8b0 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200002a8 	.word	0x200002a8

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc0:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <MX_GPIO_Init+0x108>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a3b      	ldr	r2, [pc, #236]	; (80010b4 <MX_GPIO_Init+0x108>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <MX_GPIO_Init+0x108>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd8:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <MX_GPIO_Init+0x108>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a35      	ldr	r2, [pc, #212]	; (80010b4 <MX_GPIO_Init+0x108>)
 8000fde:	f043 0320 	orr.w	r3, r3, #32
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <MX_GPIO_Init+0x108>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0320 	and.w	r3, r3, #32
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <MX_GPIO_Init+0x108>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a2f      	ldr	r2, [pc, #188]	; (80010b4 <MX_GPIO_Init+0x108>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <MX_GPIO_Init+0x108>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <MX_GPIO_Init+0x108>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a29      	ldr	r2, [pc, #164]	; (80010b4 <MX_GPIO_Init+0x108>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <MX_GPIO_Init+0x108>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001026:	4824      	ldr	r0, [pc, #144]	; (80010b8 <MX_GPIO_Init+0x10c>)
 8001028:	f000 fdb8 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001032:	4822      	ldr	r0, [pc, #136]	; (80010bc <MX_GPIO_Init+0x110>)
 8001034:	f000 fdb2 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2302      	movs	r3, #2
 8001048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	4619      	mov	r1, r3
 8001050:	4819      	ldr	r0, [pc, #100]	; (80010b8 <MX_GPIO_Init+0x10c>)
 8001052:	f000 fc1f 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2302      	movs	r3, #2
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4619      	mov	r1, r3
 800106e:	4813      	ldr	r0, [pc, #76]	; (80010bc <MX_GPIO_Init+0x110>)
 8001070:	f000 fc10 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001074:	2328      	movs	r3, #40	; 0x28
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_GPIO_Init+0x114>)
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107c:	2301      	movs	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4619      	mov	r1, r3
 8001086:	480f      	ldr	r0, [pc, #60]	; (80010c4 <MX_GPIO_Init+0x118>)
 8001088:	f000 fc04 	bl	8001894 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	2009      	movs	r0, #9
 8001092:	f000 fb46 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001096:	2009      	movs	r0, #9
 8001098:	f000 fb5f 	bl	800175a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	2017      	movs	r0, #23
 80010a2:	f000 fb3e 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010a6:	2017      	movs	r0, #23
 80010a8:	f000 fb57 	bl	800175a <HAL_NVIC_EnableIRQ>

}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40011000 	.word	0x40011000
 80010bc:	40010800 	.word	0x40010800
 80010c0:	10210000 	.word	0x10210000
 80010c4:	40010c00 	.word	0x40010c00

080010c8 <OB1203_RST>:

/* USER CODE BEGIN 4 */
void OB1203_RST(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	heartrate11_t heartrate11;
	heartrate11_reset_device(&heartrate11);
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00a fddb 	bl	800bc8c <heartrate11_reset_device>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <OB1203_Setup>:

void OB1203_Setup(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
	heartrate11_t heartrate11;
	if(HEARTRATE11_OK == heartrate11_reset_device(0))
 80010e4:	2000      	movs	r0, #0
 80010e6:	f00a fdd1 	bl	800bc8c <heartrate11_reset_device>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <OB1203_Setup+0x1a>
	{
		heartrate11_default_cfg(&heartrate11);
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00a fcd0 	bl	800ba98 <heartrate11_default_cfg>
	}
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001108:	e7fe      	b.n	8001108 <Error_Handler+0x8>
	...

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_MspInit+0x5c>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4a14      	ldr	r2, [pc, #80]	; (8001168 <HAL_MspInit+0x5c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6193      	str	r3, [r2, #24]
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_MspInit+0x5c>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_MspInit+0x5c>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_MspInit+0x5c>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_MspInit+0x5c>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_MspInit+0x60>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_MspInit+0x60>)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000

08001170 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a3b      	ldr	r2, [pc, #236]	; (8001278 <HAL_I2C_MspInit+0x108>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d134      	bne.n	80011fa <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	4b3a      	ldr	r3, [pc, #232]	; (800127c <HAL_I2C_MspInit+0x10c>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a39      	ldr	r2, [pc, #228]	; (800127c <HAL_I2C_MspInit+0x10c>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b37      	ldr	r3, [pc, #220]	; (800127c <HAL_I2C_MspInit+0x10c>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011a8:	23c0      	movs	r3, #192	; 0xc0
 80011aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ac:	2312      	movs	r3, #18
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	4619      	mov	r1, r3
 80011ba:	4831      	ldr	r0, [pc, #196]	; (8001280 <HAL_I2C_MspInit+0x110>)
 80011bc:	f000 fb6a 	bl	8001894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011c0:	4b2e      	ldr	r3, [pc, #184]	; (800127c <HAL_I2C_MspInit+0x10c>)
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	4a2d      	ldr	r2, [pc, #180]	; (800127c <HAL_I2C_MspInit+0x10c>)
 80011c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ca:	61d3      	str	r3, [r2, #28]
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <HAL_I2C_MspInit+0x10c>)
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	201f      	movs	r0, #31
 80011de:	f000 faa0 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011e2:	201f      	movs	r0, #31
 80011e4:	f000 fab9 	bl	800175a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2020      	movs	r0, #32
 80011ee:	f000 fa98 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011f2:	2020      	movs	r0, #32
 80011f4:	f000 fab1 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011f8:	e039      	b.n	800126e <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a21      	ldr	r2, [pc, #132]	; (8001284 <HAL_I2C_MspInit+0x114>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d134      	bne.n	800126e <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HAL_I2C_MspInit+0x10c>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a1c      	ldr	r2, [pc, #112]	; (800127c <HAL_I2C_MspInit+0x10c>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_I2C_MspInit+0x10c>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800121c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001222:	2312      	movs	r3, #18
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	4619      	mov	r1, r3
 8001230:	4813      	ldr	r0, [pc, #76]	; (8001280 <HAL_I2C_MspInit+0x110>)
 8001232:	f000 fb2f 	bl	8001894 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_I2C_MspInit+0x10c>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <HAL_I2C_MspInit+0x10c>)
 800123c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_I2C_MspInit+0x10c>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2021      	movs	r0, #33	; 0x21
 8001254:	f000 fa65 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001258:	2021      	movs	r0, #33	; 0x21
 800125a:	f000 fa7e 	bl	800175a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2022      	movs	r0, #34	; 0x22
 8001264:	f000 fa5d 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001268:	2022      	movs	r0, #34	; 0x22
 800126a:	f000 fa76 	bl	800175a <HAL_NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40005400 	.word	0x40005400
 800127c:	40021000 	.word	0x40021000
 8001280:	40010c00 	.word	0x40010c00
 8001284:	40005800 	.word	0x40005800

08001288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001298:	d10b      	bne.n	80012b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_TIM_Base_MspInit+0x34>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_TIM_Base_MspInit+0x34>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_TIM_Base_MspInit+0x34>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	40021000 	.word	0x40021000

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <NMI_Handler+0x4>

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler+0x4>

080012de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001306:	f000 f8f5 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  adc1_rdy = 1;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <EXTI3_IRQHandler+0x14>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800131a:	2008      	movs	r0, #8
 800131c:	f000 fc56 	bl	8001bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200002f9 	.word	0x200002f9

08001328 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800132e:	f003 fa64 	bl	80047fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20001020 	.word	0x20001020

0800133c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  adc2_rdy = 1;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <EXTI9_5_IRQHandler+0x14>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001346:	2020      	movs	r0, #32
 8001348:	f000 fc40 	bl	8001bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200002fa 	.word	0x200002fa

08001354 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <I2C1_EV_IRQHandler+0x10>)
 800135a:	f001 f903 	bl	8002564 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000200 	.word	0x20000200

08001368 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <I2C1_ER_IRQHandler+0x10>)
 800136e:	f001 fa6a 	bl	8002846 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000200 	.word	0x20000200

0800137c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <I2C2_EV_IRQHandler+0x10>)
 8001382:	f001 f8ef 	bl	8002564 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000254 	.word	0x20000254

08001390 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <I2C2_ER_IRQHandler+0x10>)
 8001396:	f001 fa56 	bl	8002846 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000254 	.word	0x20000254

080013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d4:	f00a fd2a 	bl	800be2c <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	220c      	movs	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20005000 	.word	0x20005000
 8001404:	00000400 	.word	0x00000400
 8001408:	20000350 	.word	0x20000350
 800140c:	20001540 	.word	0x20001540

08001410 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	; (8001454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	; (8001460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001442:	f7ff ffe5 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001446:	f00a fcf7 	bl	800be38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800144a:	f7ff fbf5 	bl	8000c38 <main>
  bx lr
 800144e:	4770      	bx	lr
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001458:	0800c0b4 	.word	0x0800c0b4
  ldr r2, =_sbss
 800145c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001460:	2000153c 	.word	0x2000153c

08001464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC1_2_IRQHandler>
	...

08001468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_Init+0x28>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_Init+0x28>)
 8001472:	f043 0310 	orr.w	r3, r3, #16
 8001476:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f000 f947 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147e:	200f      	movs	r0, #15
 8001480:	f000 f808 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fe42 	bl	800110c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40022000 	.word	0x40022000

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f95f 	bl	8001776 <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 f927 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000004 	.word	0x20000004
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	20000008 	.word	0x20000008

080014f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_IncTick+0x1c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_IncTick+0x20>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a03      	ldr	r2, [pc, #12]	; (8001514 <HAL_IncTick+0x20>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	2000000c 	.word	0x2000000c
 8001514:	20000354 	.word	0x20000354

08001518 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b02      	ldr	r3, [pc, #8]	; (8001528 <HAL_GetTick+0x10>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	20000354 	.word	0x20000354

0800152c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001534:	f7ff fff0 	bl	8001518 <HAL_GetTick>
 8001538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001544:	d005      	beq.n	8001552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_Delay+0x44>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001552:	bf00      	nop
 8001554:	f7ff ffe0 	bl	8001518 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	d8f7      	bhi.n	8001554 <HAL_Delay+0x28>
  {
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000000c 	.word	0x2000000c

08001574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001590:	4013      	ands	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800159c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <__NVIC_GetPriorityGrouping+0x18>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 0307 	and.w	r3, r3, #7
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db0b      	blt.n	8001602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 021f 	and.w	r2, r3, #31
 80015f0:	4906      	ldr	r1, [pc, #24]	; (800160c <__NVIC_EnableIRQ+0x34>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	2001      	movs	r0, #1
 80015fa:	fa00 f202 	lsl.w	r2, r0, r2
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	; (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff90 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff2d 	bl	8001574 <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff42 	bl	80015bc <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff90 	bl	8001664 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5f 	bl	8001610 <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff35 	bl	80015d8 <__NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffa2 	bl	80016c8 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d005      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2204      	movs	r2, #4
 80017aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e051      	b.n	8001856 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 020e 	bic.w	r2, r2, #14
 80017c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0201 	bic.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a22      	ldr	r2, [pc, #136]	; (8001860 <HAL_DMA_Abort_IT+0xd0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d029      	beq.n	8001830 <HAL_DMA_Abort_IT+0xa0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a20      	ldr	r2, [pc, #128]	; (8001864 <HAL_DMA_Abort_IT+0xd4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d022      	beq.n	800182c <HAL_DMA_Abort_IT+0x9c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <HAL_DMA_Abort_IT+0xd8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d01a      	beq.n	8001826 <HAL_DMA_Abort_IT+0x96>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_DMA_Abort_IT+0xdc>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d012      	beq.n	8001820 <HAL_DMA_Abort_IT+0x90>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a1c      	ldr	r2, [pc, #112]	; (8001870 <HAL_DMA_Abort_IT+0xe0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d00a      	beq.n	800181a <HAL_DMA_Abort_IT+0x8a>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1a      	ldr	r2, [pc, #104]	; (8001874 <HAL_DMA_Abort_IT+0xe4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d102      	bne.n	8001814 <HAL_DMA_Abort_IT+0x84>
 800180e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001812:	e00e      	b.n	8001832 <HAL_DMA_Abort_IT+0xa2>
 8001814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001818:	e00b      	b.n	8001832 <HAL_DMA_Abort_IT+0xa2>
 800181a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800181e:	e008      	b.n	8001832 <HAL_DMA_Abort_IT+0xa2>
 8001820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001824:	e005      	b.n	8001832 <HAL_DMA_Abort_IT+0xa2>
 8001826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182a:	e002      	b.n	8001832 <HAL_DMA_Abort_IT+0xa2>
 800182c:	2310      	movs	r3, #16
 800182e:	e000      	b.n	8001832 <HAL_DMA_Abort_IT+0xa2>
 8001830:	2301      	movs	r3, #1
 8001832:	4a11      	ldr	r2, [pc, #68]	; (8001878 <HAL_DMA_Abort_IT+0xe8>)
 8001834:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
    } 
  }
  return status;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40020008 	.word	0x40020008
 8001864:	4002001c 	.word	0x4002001c
 8001868:	40020030 	.word	0x40020030
 800186c:	40020044 	.word	0x40020044
 8001870:	40020058 	.word	0x40020058
 8001874:	4002006c 	.word	0x4002006c
 8001878:	40020000 	.word	0x40020000

0800187c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b08b      	sub	sp, #44	; 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	e169      	b.n	8001b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a8:	2201      	movs	r2, #1
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8158 	bne.w	8001b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a9a      	ldr	r2, [pc, #616]	; (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d05e      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018d0:	4a98      	ldr	r2, [pc, #608]	; (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d875      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018d6:	4a98      	ldr	r2, [pc, #608]	; (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d058      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018dc:	4a96      	ldr	r2, [pc, #600]	; (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d86f      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018e2:	4a96      	ldr	r2, [pc, #600]	; (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d052      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018e8:	4a94      	ldr	r2, [pc, #592]	; (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d869      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018ee:	4a94      	ldr	r2, [pc, #592]	; (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d04c      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018f4:	4a92      	ldr	r2, [pc, #584]	; (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d863      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018fa:	4a92      	ldr	r2, [pc, #584]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d046      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 8001900:	4a90      	ldr	r2, [pc, #576]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d85d      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 8001906:	2b12      	cmp	r3, #18
 8001908:	d82a      	bhi.n	8001960 <HAL_GPIO_Init+0xcc>
 800190a:	2b12      	cmp	r3, #18
 800190c:	d859      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <HAL_GPIO_Init+0x80>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	0800198f 	.word	0x0800198f
 8001918:	08001969 	.word	0x08001969
 800191c:	0800197b 	.word	0x0800197b
 8001920:	080019bd 	.word	0x080019bd
 8001924:	080019c3 	.word	0x080019c3
 8001928:	080019c3 	.word	0x080019c3
 800192c:	080019c3 	.word	0x080019c3
 8001930:	080019c3 	.word	0x080019c3
 8001934:	080019c3 	.word	0x080019c3
 8001938:	080019c3 	.word	0x080019c3
 800193c:	080019c3 	.word	0x080019c3
 8001940:	080019c3 	.word	0x080019c3
 8001944:	080019c3 	.word	0x080019c3
 8001948:	080019c3 	.word	0x080019c3
 800194c:	080019c3 	.word	0x080019c3
 8001950:	080019c3 	.word	0x080019c3
 8001954:	080019c3 	.word	0x080019c3
 8001958:	08001971 	.word	0x08001971
 800195c:	08001985 	.word	0x08001985
 8001960:	4a79      	ldr	r2, [pc, #484]	; (8001b48 <HAL_GPIO_Init+0x2b4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001966:	e02c      	b.n	80019c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e029      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	3304      	adds	r3, #4
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e024      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	3308      	adds	r3, #8
 8001980:	623b      	str	r3, [r7, #32]
          break;
 8001982:	e01f      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	330c      	adds	r3, #12
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e01a      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001996:	2304      	movs	r3, #4
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e013      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	611a      	str	r2, [r3, #16]
          break;
 80019ae:	e009      	b.n	80019c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b0:	2308      	movs	r3, #8
 80019b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	615a      	str	r2, [r3, #20]
          break;
 80019ba:	e003      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
          break;
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          break;
 80019c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2bff      	cmp	r3, #255	; 0xff
 80019c8:	d801      	bhi.n	80019ce <HAL_GPIO_Init+0x13a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	e001      	b.n	80019d2 <HAL_GPIO_Init+0x13e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3304      	adds	r3, #4
 80019d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	d802      	bhi.n	80019e0 <HAL_GPIO_Init+0x14c>
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_Init+0x152>
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	3b08      	subs	r3, #8
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	210f      	movs	r1, #15
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	6a39      	ldr	r1, [r7, #32]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80b1 	beq.w	8001b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a14:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	; (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a2c:	4a48      	ldr	r2, [pc, #288]	; (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a40      	ldr	r2, [pc, #256]	; (8001b54 <HAL_GPIO_Init+0x2c0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d013      	beq.n	8001a80 <HAL_GPIO_Init+0x1ec>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3f      	ldr	r2, [pc, #252]	; (8001b58 <HAL_GPIO_Init+0x2c4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <HAL_GPIO_Init+0x1e8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3e      	ldr	r2, [pc, #248]	; (8001b5c <HAL_GPIO_Init+0x2c8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d007      	beq.n	8001a78 <HAL_GPIO_Init+0x1e4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	; (8001b60 <HAL_GPIO_Init+0x2cc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_GPIO_Init+0x1e0>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e004      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a80:	2300      	movs	r3, #0
 8001a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a92:	492f      	ldr	r1, [pc, #188]	; (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	492c      	ldr	r1, [pc, #176]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4928      	ldr	r1, [pc, #160]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad4:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4922      	ldr	r1, [pc, #136]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	491e      	ldr	r1, [pc, #120]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4918      	ldr	r1, [pc, #96]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4914      	ldr	r1, [pc, #80]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d021      	beq.n	8001b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60cb      	str	r3, [r1, #12]
 8001b30:	e021      	b.n	8001b76 <HAL_GPIO_Init+0x2e2>
 8001b32:	bf00      	nop
 8001b34:	10320000 	.word	0x10320000
 8001b38:	10310000 	.word	0x10310000
 8001b3c:	10220000 	.word	0x10220000
 8001b40:	10210000 	.word	0x10210000
 8001b44:	10120000 	.word	0x10120000
 8001b48:	10110000 	.word	0x10110000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40010800 	.word	0x40010800
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40011400 	.word	0x40011400
 8001b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4909      	ldr	r1, [pc, #36]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	3301      	adds	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f47f ae8e 	bne.w	80018a8 <HAL_GPIO_Init+0x14>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	372c      	adds	r7, #44	; 0x2c
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	611a      	str	r2, [r3, #16]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d006      	beq.n	8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f806 	bl	8001bfc <HAL_GPIO_EXTI_Callback>
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40010400 	.word	0x40010400

08001bfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e12b      	b.n	8001e7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fa9a 	bl	8001170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2224      	movs	r2, #36	; 0x24
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c74:	f004 fd28 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 8001c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a81      	ldr	r2, [pc, #516]	; (8001e84 <HAL_I2C_Init+0x274>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d807      	bhi.n	8001c94 <HAL_I2C_Init+0x84>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4a80      	ldr	r2, [pc, #512]	; (8001e88 <HAL_I2C_Init+0x278>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	bf94      	ite	ls
 8001c8c:	2301      	movls	r3, #1
 8001c8e:	2300      	movhi	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	e006      	b.n	8001ca2 <HAL_I2C_Init+0x92>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a7d      	ldr	r2, [pc, #500]	; (8001e8c <HAL_I2C_Init+0x27c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	bf94      	ite	ls
 8001c9c:	2301      	movls	r3, #1
 8001c9e:	2300      	movhi	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0e7      	b.n	8001e7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4a78      	ldr	r2, [pc, #480]	; (8001e90 <HAL_I2C_Init+0x280>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0c9b      	lsrs	r3, r3, #18
 8001cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a6a      	ldr	r2, [pc, #424]	; (8001e84 <HAL_I2C_Init+0x274>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d802      	bhi.n	8001ce4 <HAL_I2C_Init+0xd4>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	e009      	b.n	8001cf8 <HAL_I2C_Init+0xe8>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	4a69      	ldr	r2, [pc, #420]	; (8001e94 <HAL_I2C_Init+0x284>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	495c      	ldr	r1, [pc, #368]	; (8001e84 <HAL_I2C_Init+0x274>)
 8001d14:	428b      	cmp	r3, r1
 8001d16:	d819      	bhi.n	8001d4c <HAL_I2C_Init+0x13c>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1e59      	subs	r1, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d26:	1c59      	adds	r1, r3, #1
 8001d28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d2c:	400b      	ands	r3, r1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <HAL_I2C_Init+0x138>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1e59      	subs	r1, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d46:	e051      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001d48:	2304      	movs	r3, #4
 8001d4a:	e04f      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d111      	bne.n	8001d78 <HAL_I2C_Init+0x168>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e58      	subs	r0, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	440b      	add	r3, r1
 8001d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	e012      	b.n	8001d9e <HAL_I2C_Init+0x18e>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1e58      	subs	r0, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	0099      	lsls	r1, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_Init+0x196>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e022      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10e      	bne.n	8001dcc <HAL_I2C_Init+0x1bc>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1e58      	subs	r0, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6859      	ldr	r1, [r3, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	440b      	add	r3, r1
 8001dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dca:	e00f      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e58      	subs	r0, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	0099      	lsls	r1, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	6809      	ldr	r1, [r1, #0]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6911      	ldr	r1, [r2, #16]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68d2      	ldr	r2, [r2, #12]
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	000186a0 	.word	0x000186a0
 8001e88:	001e847f 	.word	0x001e847f
 8001e8c:	003d08ff 	.word	0x003d08ff
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	10624dd3 	.word	0x10624dd3

08001e98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	817b      	strh	r3, [r7, #10]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff fb34 	bl	8001518 <HAL_GetTick>
 8001eb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	f040 80e0 	bne.w	8002080 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2319      	movs	r3, #25
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4970      	ldr	r1, [pc, #448]	; (800208c <HAL_I2C_Master_Transmit+0x1f4>)
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f002 f93c 	bl	8004148 <I2C_WaitOnFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0d3      	b.n	8002082 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_I2C_Master_Transmit+0x50>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e0cc      	b.n	8002082 <HAL_I2C_Master_Transmit+0x1ea>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d007      	beq.n	8001f0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2221      	movs	r2, #33	; 0x21
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	893a      	ldrh	r2, [r7, #8]
 8001f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4a50      	ldr	r2, [pc, #320]	; (8002090 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f50:	8979      	ldrh	r1, [r7, #10]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	6a3a      	ldr	r2, [r7, #32]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f001 fee4 	bl	8003d24 <I2C_MasterRequestWrite>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e08d      	b.n	8002082 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f7c:	e066      	b.n	800204c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	6a39      	ldr	r1, [r7, #32]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f002 f9b6 	bl	80042f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00d      	beq.n	8001faa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d107      	bne.n	8001fa6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06b      	b.n	8002082 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d11b      	bne.n	8002020 <HAL_I2C_Master_Transmit+0x188>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d017      	beq.n	8002020 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	6a39      	ldr	r1, [r7, #32]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f002 f9a6 	bl	8004376 <I2C_WaitOnBTFFlagUntilTimeout>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00d      	beq.n	800204c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	2b04      	cmp	r3, #4
 8002036:	d107      	bne.n	8002048 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002046:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e01a      	b.n	8002082 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	d194      	bne.n	8001f7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	00100002 	.word	0x00100002
 8002090:	ffff0000 	.word	0xffff0000

08002094 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08c      	sub	sp, #48	; 0x30
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	817b      	strh	r3, [r7, #10]
 80020a6:	460b      	mov	r3, r1
 80020a8:	813b      	strh	r3, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020b2:	f7ff fa31 	bl	8001518 <HAL_GetTick>
 80020b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	f040 8244 	bne.w	800254e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2319      	movs	r3, #25
 80020cc:	2201      	movs	r2, #1
 80020ce:	4982      	ldr	r1, [pc, #520]	; (80022d8 <HAL_I2C_Mem_Read+0x244>)
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f002 f839 	bl	8004148 <I2C_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80020dc:	2302      	movs	r3, #2
 80020de:	e237      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_I2C_Mem_Read+0x5a>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e230      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d007      	beq.n	8002114 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002122:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2222      	movs	r2, #34	; 0x22
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2240      	movs	r2, #64	; 0x40
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4a62      	ldr	r2, [pc, #392]	; (80022dc <HAL_I2C_Mem_Read+0x248>)
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002156:	88f8      	ldrh	r0, [r7, #6]
 8002158:	893a      	ldrh	r2, [r7, #8]
 800215a:	8979      	ldrh	r1, [r7, #10]
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	4603      	mov	r3, r0
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f001 fe5e 	bl	8003e28 <I2C_RequestMemoryRead>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e1ec      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	2b00      	cmp	r3, #0
 800217c:	d113      	bne.n	80021a6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e1c0      	b.n	8002528 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d11e      	bne.n	80021ec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021be:	b672      	cpsid	i
}
 80021c0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021e8:	b662      	cpsie	i
}
 80021ea:	e035      	b.n	8002258 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d11e      	bne.n	8002232 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002202:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002204:	b672      	cpsid	i
}
 8002206:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800222e:	b662      	cpsie	i
}
 8002230:	e012      	b.n	8002258 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002240:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002258:	e166      	b.n	8002528 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	2b03      	cmp	r3, #3
 8002260:	f200 811f 	bhi.w	80024a2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	2b01      	cmp	r3, #1
 800226a:	d123      	bne.n	80022b4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f002 f8f3 	bl	800445c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e167      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022b2:	e139      	b.n	8002528 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d152      	bne.n	8002362 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c2:	2200      	movs	r2, #0
 80022c4:	4906      	ldr	r1, [pc, #24]	; (80022e0 <HAL_I2C_Mem_Read+0x24c>)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f001 ff3e 	bl	8004148 <I2C_WaitOnFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e13c      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
 80022d6:	bf00      	nop
 80022d8:	00100002 	.word	0x00100002
 80022dc:	ffff0000 	.word	0xffff0000
 80022e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80022e4:	b672      	cpsid	i
}
 80022e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800232a:	b662      	cpsie	i
}
 800232c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002360:	e0e2      	b.n	8002528 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	2200      	movs	r2, #0
 800236a:	497b      	ldr	r1, [pc, #492]	; (8002558 <HAL_I2C_Mem_Read+0x4c4>)
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f001 feeb 	bl	8004148 <I2C_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0e9      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800238c:	b672      	cpsid	i
}
 800238e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023c2:	4b66      	ldr	r3, [pc, #408]	; (800255c <HAL_I2C_Mem_Read+0x4c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	08db      	lsrs	r3, r3, #3
 80023c8:	4a65      	ldr	r2, [pc, #404]	; (8002560 <HAL_I2C_Mem_Read+0x4cc>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0a1a      	lsrs	r2, r3, #8
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	00da      	lsls	r2, r3, #3
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	3b01      	subs	r3, #1
 80023e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d118      	bne.n	800241a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f043 0220 	orr.w	r2, r3, #32
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800240a:	b662      	cpsie	i
}
 800240c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e09a      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b04      	cmp	r3, #4
 8002426:	d1d9      	bne.n	80023dc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800246a:	b662      	cpsie	i
}
 800246c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024a0:	e042      	b.n	8002528 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f001 ffd8 	bl	800445c <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e04c      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d118      	bne.n	8002528 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f ae94 	bne.w	800225a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3728      	adds	r7, #40	; 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	00010004 	.word	0x00010004
 800255c:	20000004 	.word	0x20000004
 8002560:	14f8b589 	.word	0x14f8b589

08002564 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002584:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b10      	cmp	r3, #16
 8002592:	d003      	beq.n	800259c <HAL_I2C_EV_IRQHandler+0x38>
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b40      	cmp	r3, #64	; 0x40
 8002598:	f040 80c1 	bne.w	800271e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80025bc:	d003      	beq.n	80025c6 <HAL_I2C_EV_IRQHandler+0x62>
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_EV_IRQHandler+0x66>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_I2C_EV_IRQHandler+0x68>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	f000 8132 	beq.w	8002836 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00c      	beq.n	80025f6 <HAL_I2C_EV_IRQHandler+0x92>
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	0a5b      	lsrs	r3, r3, #9
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f001 ffbb 	bl	8004564 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fd77 	bl	80030e2 <I2C_Master_SB>
 80025f4:	e092      	b.n	800271c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	08db      	lsrs	r3, r3, #3
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_I2C_EV_IRQHandler+0xb2>
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	0a5b      	lsrs	r3, r3, #9
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fdec 	bl	80031ec <I2C_Master_ADD10>
 8002614:	e082      	b.n	800271c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <HAL_I2C_EV_IRQHandler+0xd2>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	0a5b      	lsrs	r3, r3, #9
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fe05 	bl	800323e <I2C_Master_ADDR>
 8002634:	e072      	b.n	800271c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d03b      	beq.n	80026ba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002650:	f000 80f3 	beq.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	09db      	lsrs	r3, r3, #7
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00f      	beq.n	8002680 <HAL_I2C_EV_IRQHandler+0x11c>
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	0a9b      	lsrs	r3, r3, #10
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d009      	beq.n	8002680 <HAL_I2C_EV_IRQHandler+0x11c>
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d103      	bne.n	8002680 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f9f1 	bl	8002a60 <I2C_MasterTransmit_TXE>
 800267e:	e04d      	b.n	800271c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80d6 	beq.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	0a5b      	lsrs	r3, r3, #9
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80cf 	beq.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800269c:	7bbb      	ldrb	r3, [r7, #14]
 800269e:	2b21      	cmp	r3, #33	; 0x21
 80026a0:	d103      	bne.n	80026aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fa78 	bl	8002b98 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026a8:	e0c7      	b.n	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	f040 80c4 	bne.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fae6 	bl	8002c84 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026b8:	e0bf      	b.n	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c8:	f000 80b7 	beq.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	099b      	lsrs	r3, r3, #6
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00f      	beq.n	80026f8 <HAL_I2C_EV_IRQHandler+0x194>
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	0a9b      	lsrs	r3, r3, #10
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_I2C_EV_IRQHandler+0x194>
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fb5b 	bl	8002dac <I2C_MasterReceive_RXNE>
 80026f6:	e011      	b.n	800271c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 809a 	beq.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	0a5b      	lsrs	r3, r3, #9
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8093 	beq.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fbfa 	bl	8002f0e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800271a:	e08e      	b.n	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
 800271c:	e08d      	b.n	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e007      	b.n	8002740 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d012      	beq.n	8002772 <HAL_I2C_EV_IRQHandler+0x20e>
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00c      	beq.n	8002772 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002768:	69b9      	ldr	r1, [r7, #24]
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 ffbe 	bl	80036ec <I2C_Slave_ADDR>
 8002770:	e066      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_I2C_EV_IRQHandler+0x22e>
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	0a5b      	lsrs	r3, r3, #9
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fff8 	bl	8003780 <I2C_Slave_STOPF>
 8002790:	e056      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002792:	7bbb      	ldrb	r3, [r7, #14]
 8002794:	2b21      	cmp	r3, #33	; 0x21
 8002796:	d002      	beq.n	800279e <HAL_I2C_EV_IRQHandler+0x23a>
 8002798:	7bbb      	ldrb	r3, [r7, #14]
 800279a:	2b29      	cmp	r3, #41	; 0x29
 800279c:	d125      	bne.n	80027ea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	09db      	lsrs	r3, r3, #7
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00f      	beq.n	80027ca <HAL_I2C_EV_IRQHandler+0x266>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	0a9b      	lsrs	r3, r3, #10
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_I2C_EV_IRQHandler+0x266>
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fed6 	bl	8003574 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027c8:	e039      	b.n	800283e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d033      	beq.n	800283e <HAL_I2C_EV_IRQHandler+0x2da>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	0a5b      	lsrs	r3, r3, #9
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d02d      	beq.n	800283e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 ff03 	bl	80035ee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027e8:	e029      	b.n	800283e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00f      	beq.n	8002816 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	0a9b      	lsrs	r3, r3, #10
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 ff0d 	bl	800362e <I2C_SlaveReceive_RXNE>
 8002814:	e014      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00e      	beq.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	0a5b      	lsrs	r3, r3, #9
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 ff3b 	bl	80036aa <I2C_SlaveReceive_BTF>
 8002834:	e004      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800283e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b08a      	sub	sp, #40	; 0x28
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002868:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_I2C_ER_IRQHandler+0x5e>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d010      	beq.n	80028a4 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002892:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	0a5b      	lsrs	r3, r3, #9
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00e      	beq.n	80028ce <HAL_I2C_ER_IRQHandler+0x88>
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	f043 0302 	orr.w	r3, r3, #2
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80028cc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	0a9b      	lsrs	r3, r3, #10
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d03f      	beq.n	800295a <HAL_I2C_ER_IRQHandler+0x114>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d039      	beq.n	800295a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80028e6:	7efb      	ldrb	r3, [r7, #27]
 80028e8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002900:	7ebb      	ldrb	r3, [r7, #26]
 8002902:	2b20      	cmp	r3, #32
 8002904:	d112      	bne.n	800292c <HAL_I2C_ER_IRQHandler+0xe6>
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10f      	bne.n	800292c <HAL_I2C_ER_IRQHandler+0xe6>
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	2b21      	cmp	r3, #33	; 0x21
 8002910:	d008      	beq.n	8002924 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002912:	7cfb      	ldrb	r3, [r7, #19]
 8002914:	2b29      	cmp	r3, #41	; 0x29
 8002916:	d005      	beq.n	8002924 <HAL_I2C_ER_IRQHandler+0xde>
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	2b28      	cmp	r3, #40	; 0x28
 800291c:	d106      	bne.n	800292c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b21      	cmp	r3, #33	; 0x21
 8002922:	d103      	bne.n	800292c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f001 f85b 	bl	80039e0 <I2C_Slave_AF>
 800292a:	e016      	b.n	800295a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002934:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800293e:	7efb      	ldrb	r3, [r7, #27]
 8002940:	2b10      	cmp	r3, #16
 8002942:	d002      	beq.n	800294a <HAL_I2C_ER_IRQHandler+0x104>
 8002944:	7efb      	ldrb	r3, [r7, #27]
 8002946:	2b40      	cmp	r3, #64	; 0x40
 8002948:	d107      	bne.n	800295a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002958:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	0adb      	lsrs	r3, r3, #11
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00e      	beq.n	8002984 <HAL_I2C_ER_IRQHandler+0x13e>
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	f043 0308 	orr.w	r3, r3, #8
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002982:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	2b00      	cmp	r3, #0
 8002988:	d008      	beq.n	800299c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f001 f892 	bl	8003ac0 <I2C_ITError>
  }
}
 800299c:	bf00      	nop
 800299e:	3728      	adds	r7, #40	; 0x28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
 80029f8:	4613      	mov	r3, r2
 80029fa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d150      	bne.n	8002b28 <I2C_MasterTransmit_TXE+0xc8>
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	2b21      	cmp	r3, #33	; 0x21
 8002a8a:	d14d      	bne.n	8002b28 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d01d      	beq.n	8002ace <I2C_MasterTransmit_TXE+0x6e>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d01a      	beq.n	8002ace <I2C_MasterTransmit_TXE+0x6e>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a9e:	d016      	beq.n	8002ace <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2211      	movs	r2, #17
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ff6c 	bl	80029a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002acc:	e060      	b.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002adc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d107      	bne.n	8002b18 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff81 	bl	8002a18 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b16:	e03b      	b.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff3f 	bl	80029a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b26:	e033      	b.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b21      	cmp	r3, #33	; 0x21
 8002b2c:	d005      	beq.n	8002b3a <I2C_MasterTransmit_TXE+0xda>
 8002b2e:	7bbb      	ldrb	r3, [r7, #14]
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d12d      	bne.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b22      	cmp	r3, #34	; 0x22
 8002b38:	d12a      	bne.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d108      	bne.n	8002b56 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b52:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002b54:	e01c      	b.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d103      	bne.n	8002b6a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f88e 	bl	8002c84 <I2C_MemoryTransmit_TXE_BTF>
}
 8002b68:	e012      	b.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b8e:	e7ff      	b.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b21      	cmp	r3, #33	; 0x21
 8002bb0:	d164      	bne.n	8002c7c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d012      	beq.n	8002be2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002be0:	e04c      	b.n	8002c7c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d01d      	beq.n	8002c24 <I2C_MasterTransmit_BTF+0x8c>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d01a      	beq.n	8002c24 <I2C_MasterTransmit_BTF+0x8c>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bf4:	d016      	beq.n	8002c24 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c04:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2211      	movs	r2, #17
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff fec1 	bl	80029a4 <HAL_I2C_MasterTxCpltCallback>
}
 8002c22:	e02b      	b.n	8002c7c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c32:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c42:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d107      	bne.n	8002c6e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff fed6 	bl	8002a18 <HAL_I2C_MemTxCpltCallback>
}
 8002c6c:	e006      	b.n	8002c7c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff fe94 	bl	80029a4 <HAL_I2C_MasterTxCpltCallback>
}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d11d      	bne.n	8002cd8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10b      	bne.n	8002cbc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb4:	1c9a      	adds	r2, r3, #2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002cba:	e073      	b.n	8002da4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	121b      	asrs	r3, r3, #8
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cd6:	e065      	b.n	8002da4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d10b      	bne.n	8002cf8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cf6:	e055      	b.n	8002da4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d151      	bne.n	8002da4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b22      	cmp	r3, #34	; 0x22
 8002d04:	d10d      	bne.n	8002d22 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d14:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d20:	e040      	b.n	8002da4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d015      	beq.n	8002d58 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b21      	cmp	r3, #33	; 0x21
 8002d30:	d112      	bne.n	8002d58 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	781a      	ldrb	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d56:	e025      	b.n	8002da4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d120      	bne.n	8002da4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b21      	cmp	r3, #33	; 0x21
 8002d66:	d11d      	bne.n	8002da4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d76:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fe3a 	bl	8002a18 <HAL_I2C_MemTxCpltCallback>
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b22      	cmp	r3, #34	; 0x22
 8002dbe:	f040 80a2 	bne.w	8002f06 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d921      	bls.n	8002e14 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	f040 8082 	bne.w	8002f06 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e10:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002e12:	e078      	b.n	8002f06 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d074      	beq.n	8002f06 <I2C_MasterReceive_RXNE+0x15a>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d002      	beq.n	8002e28 <I2C_MasterReceive_RXNE+0x7c>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d16e      	bne.n	8002f06 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f001 fae5 	bl	80043f8 <I2C_WaitOnSTOPRequestThroughIT>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d142      	bne.n	8002eba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e42:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e52:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b40      	cmp	r3, #64	; 0x40
 8002e8c:	d10a      	bne.n	8002ea4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff fdc4 	bl	8002a2a <HAL_I2C_MemRxCpltCallback>
}
 8002ea2:	e030      	b.n	8002f06 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2212      	movs	r2, #18
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fd7f 	bl	80029b6 <HAL_I2C_MasterRxCpltCallback>
}
 8002eb8:	e025      	b.n	8002f06 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ec8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff fd9b 	bl	8002a3c <HAL_I2C_ErrorCallback>
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d11b      	bne.n	8002f5e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f34:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002f5c:	e0bd      	b.n	80030da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d129      	bne.n	8002fbc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f76:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d00a      	beq.n	8002f94 <I2C_MasterReceive_BTF+0x86>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d007      	beq.n	8002f94 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f92:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fba:	e08e      	b.n	80030da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d176      	bne.n	80030b4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d002      	beq.n	8002fd2 <I2C_MasterReceive_BTF+0xc4>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d108      	bne.n	8002fe4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e019      	b.n	8003018 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d002      	beq.n	8002ff0 <I2C_MasterReceive_BTF+0xe2>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d108      	bne.n	8003002 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e00a      	b.n	8003018 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b10      	cmp	r3, #16
 8003006:	d007      	beq.n	8003018 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003016:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003072:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d10a      	bne.n	800309e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff fcc7 	bl	8002a2a <HAL_I2C_MemRxCpltCallback>
}
 800309c:	e01d      	b.n	80030da <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2212      	movs	r2, #18
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fc82 	bl	80029b6 <HAL_I2C_MasterRxCpltCallback>
}
 80030b2:	e012      	b.n	80030da <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b40      	cmp	r3, #64	; 0x40
 80030f4:	d117      	bne.n	8003126 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800310e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003110:	e067      	b.n	80031e2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	b2da      	uxtb	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]
}
 8003124:	e05d      	b.n	80031e2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800312e:	d133      	bne.n	8003198 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b21      	cmp	r3, #33	; 0x21
 800313a:	d109      	bne.n	8003150 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800314c:	611a      	str	r2, [r3, #16]
 800314e:	e008      	b.n	8003162 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	b2da      	uxtb	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	2b00      	cmp	r3, #0
 8003168:	d004      	beq.n	8003174 <I2C_Master_SB+0x92>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d108      	bne.n	8003186 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	2b00      	cmp	r3, #0
 800317a:	d032      	beq.n	80031e2 <I2C_Master_SB+0x100>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	d02d      	beq.n	80031e2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003194:	605a      	str	r2, [r3, #4]
}
 8003196:	e024      	b.n	80031e2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10e      	bne.n	80031be <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	11db      	asrs	r3, r3, #7
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	f003 0306 	and.w	r3, r3, #6
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f063 030f 	orn	r3, r3, #15
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	611a      	str	r2, [r3, #16]
}
 80031bc:	e011      	b.n	80031e2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10d      	bne.n	80031e2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	11db      	asrs	r3, r3, #7
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f003 0306 	and.w	r3, r3, #6
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f063 030e 	orn	r3, r3, #14
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	611a      	str	r2, [r3, #16]
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <I2C_Master_ADD10+0x26>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	d108      	bne.n	8003224 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00c      	beq.n	8003234 <I2C_Master_ADD10+0x48>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003232:	605a      	str	r2, [r3, #4]
  }
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800323e:	b480      	push	{r7}
 8003240:	b091      	sub	sp, #68	; 0x44
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800324c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b22      	cmp	r3, #34	; 0x22
 8003266:	f040 8174 	bne.w	8003552 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10f      	bne.n	8003292 <I2C_Master_ADDR+0x54>
 8003272:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d10b      	bne.n	8003292 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327a:	2300      	movs	r3, #0
 800327c:	633b      	str	r3, [r7, #48]	; 0x30
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	633b      	str	r3, [r7, #48]	; 0x30
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	e16b      	b.n	800356a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003296:	2b00      	cmp	r3, #0
 8003298:	d11d      	bne.n	80032d6 <I2C_Master_ADDR+0x98>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032a2:	d118      	bne.n	80032d6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a4:	2300      	movs	r3, #0
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	651a      	str	r2, [r3, #80]	; 0x50
 80032d4:	e149      	b.n	800356a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d113      	bne.n	8003308 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e0:	2300      	movs	r3, #0
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e120      	b.n	800354a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	f040 808a 	bne.w	8003428 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800331a:	d137      	bne.n	800338c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333a:	d113      	bne.n	8003364 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	e0f2      	b.n	800354a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003364:	2300      	movs	r3, #0
 8003366:	623b      	str	r3, [r7, #32]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	623b      	str	r3, [r7, #32]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	623b      	str	r3, [r7, #32]
 8003378:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e0de      	b.n	800354a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	2b08      	cmp	r3, #8
 8003390:	d02e      	beq.n	80033f0 <I2C_Master_ADDR+0x1b2>
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003394:	2b20      	cmp	r3, #32
 8003396:	d02b      	beq.n	80033f0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339a:	2b12      	cmp	r3, #18
 800339c:	d102      	bne.n	80033a4 <I2C_Master_ADDR+0x166>
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d125      	bne.n	80033f0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80033a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d00e      	beq.n	80033c8 <I2C_Master_ADDR+0x18a>
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d00b      	beq.n	80033c8 <I2C_Master_ADDR+0x18a>
 80033b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d008      	beq.n	80033c8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e007      	b.n	80033d8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	e0ac      	b.n	800354a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003400:	2300      	movs	r3, #0
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	e090      	b.n	800354a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d158      	bne.n	80034e4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003434:	2b04      	cmp	r3, #4
 8003436:	d021      	beq.n	800347c <I2C_Master_ADDR+0x23e>
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	2b02      	cmp	r3, #2
 800343c:	d01e      	beq.n	800347c <I2C_Master_ADDR+0x23e>
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003440:	2b10      	cmp	r3, #16
 8003442:	d01b      	beq.n	800347c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003452:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	e012      	b.n	80034a2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800348a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b0:	d14b      	bne.n	800354a <I2C_Master_ADDR+0x30c>
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034b8:	d00b      	beq.n	80034d2 <I2C_Master_ADDR+0x294>
 80034ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d008      	beq.n	80034d2 <I2C_Master_ADDR+0x294>
 80034c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d005      	beq.n	80034d2 <I2C_Master_ADDR+0x294>
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d002      	beq.n	80034d2 <I2C_Master_ADDR+0x294>
 80034cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d13b      	bne.n	800354a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	e032      	b.n	800354a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034f2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003502:	d117      	bne.n	8003534 <I2C_Master_ADDR+0x2f6>
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800350a:	d00b      	beq.n	8003524 <I2C_Master_ADDR+0x2e6>
 800350c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350e:	2b01      	cmp	r3, #1
 8003510:	d008      	beq.n	8003524 <I2C_Master_ADDR+0x2e6>
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	2b08      	cmp	r3, #8
 8003516:	d005      	beq.n	8003524 <I2C_Master_ADDR+0x2e6>
 8003518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351a:	2b10      	cmp	r3, #16
 800351c:	d002      	beq.n	8003524 <I2C_Master_ADDR+0x2e6>
 800351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003520:	2b20      	cmp	r3, #32
 8003522:	d107      	bne.n	8003534 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003532:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003550:	e00b      	b.n	800356a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
}
 8003568:	e7ff      	b.n	800356a <I2C_Master_ADDR+0x32c>
 800356a:	bf00      	nop
 800356c:	3744      	adds	r7, #68	; 0x44
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003582:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d02b      	beq.n	80035e6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d114      	bne.n	80035e6 <I2C_SlaveTransmit_TXE+0x72>
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	2b29      	cmp	r3, #41	; 0x29
 80035c0:	d111      	bne.n	80035e6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2221      	movs	r2, #33	; 0x21
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2228      	movs	r2, #40	; 0x28
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff f9f1 	bl	80029c8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d011      	beq.n	8003624 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02c      	beq.n	80036a2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d114      	bne.n	80036a2 <I2C_SlaveReceive_RXNE+0x74>
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b2a      	cmp	r3, #42	; 0x2a
 800367c:	d111      	bne.n	80036a2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2222      	movs	r2, #34	; 0x22
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2228      	movs	r2, #40	; 0x28
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff f99c 	bl	80029da <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d012      	beq.n	80036e2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003706:	2b28      	cmp	r3, #40	; 0x28
 8003708:	d127      	bne.n	800375a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003718:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003726:	2301      	movs	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	09db      	lsrs	r3, r3, #7
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	81bb      	strh	r3, [r7, #12]
 800373c:	e002      	b.n	8003744 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800374c:	89ba      	ldrh	r2, [r7, #12]
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	4619      	mov	r1, r3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff f94a 	bl	80029ec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003758:	e00e      	b.n	8003778 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800379e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80037a0:	2300      	movs	r3, #0
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037dc:	d172      	bne.n	80038c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	2b22      	cmp	r3, #34	; 0x22
 80037e2:	d002      	beq.n	80037ea <I2C_Slave_STOPF+0x6a>
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b2a      	cmp	r3, #42	; 0x2a
 80037e8:	d135      	bne.n	8003856 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f043 0204 	orr.w	r2, r3, #4
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800381c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe f82a 	bl	800187c <HAL_DMA_GetState>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d049      	beq.n	80038c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	4a69      	ldr	r2, [pc, #420]	; (80039d8 <I2C_Slave_STOPF+0x258>)
 8003834:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd ffa8 	bl	8001790 <HAL_DMA_Abort_IT>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d03d      	beq.n	80038c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003850:	4610      	mov	r0, r2
 8003852:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003854:	e035      	b.n	80038c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f043 0204 	orr.w	r2, r3, #4
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003888:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	4618      	mov	r0, r3
 8003890:	f7fd fff4 	bl	800187c <HAL_DMA_GetState>
 8003894:	4603      	mov	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	d014      	beq.n	80038c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	4a4e      	ldr	r2, [pc, #312]	; (80039d8 <I2C_Slave_STOPF+0x258>)
 80038a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd ff72 	bl	8001790 <HAL_DMA_Abort_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038bc:	4610      	mov	r0, r2
 80038be:	4798      	blx	r3
 80038c0:	e000      	b.n	80038c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d03e      	beq.n	800394c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d112      	bne.n	8003902 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b40      	cmp	r3, #64	; 0x40
 800390e:	d112      	bne.n	8003936 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f043 0204 	orr.w	r2, r3, #4
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f8b3 	bl	8003ac0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800395a:	e039      	b.n	80039d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b2a      	cmp	r3, #42	; 0x2a
 8003960:	d109      	bne.n	8003976 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2228      	movs	r2, #40	; 0x28
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff f832 	bl	80029da <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b28      	cmp	r3, #40	; 0x28
 8003980:	d111      	bne.n	80039a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a15      	ldr	r2, [pc, #84]	; (80039dc <I2C_Slave_STOPF+0x25c>)
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff f831 	bl	8002a06 <HAL_I2C_ListenCpltCallback>
}
 80039a4:	e014      	b.n	80039d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	2b22      	cmp	r3, #34	; 0x22
 80039ac:	d002      	beq.n	80039b4 <I2C_Slave_STOPF+0x234>
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	2b22      	cmp	r3, #34	; 0x22
 80039b2:	d10d      	bne.n	80039d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff f805 	bl	80029da <HAL_I2C_SlaveRxCpltCallback>
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	08003ff9 	.word	0x08003ff9
 80039dc:	ffff0000 	.word	0xffff0000

080039e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d002      	beq.n	8003a02 <I2C_Slave_AF+0x22>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d129      	bne.n	8003a56 <I2C_Slave_AF+0x76>
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b28      	cmp	r3, #40	; 0x28
 8003a06:	d126      	bne.n	8003a56 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a2c      	ldr	r2, [pc, #176]	; (8003abc <I2C_Slave_AF+0xdc>)
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a1c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a26:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a36:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fe ffd9 	bl	8002a06 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003a54:	e02e      	b.n	8003ab4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b21      	cmp	r3, #33	; 0x21
 8003a5a:	d126      	bne.n	8003aaa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a17      	ldr	r2, [pc, #92]	; (8003abc <I2C_Slave_AF+0xdc>)
 8003a60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2221      	movs	r2, #33	; 0x21
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a86:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a90:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fe ff90 	bl	80029c8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003aa8:	e004      	b.n	8003ab4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ab2:	615a      	str	r2, [r3, #20]
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	ffff0000 	.word	0xffff0000

08003ac0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ace:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ad6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ad8:	7bbb      	ldrb	r3, [r7, #14]
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d002      	beq.n	8003ae4 <I2C_ITError+0x24>
 8003ade:	7bbb      	ldrb	r3, [r7, #14]
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d10a      	bne.n	8003afa <I2C_ITError+0x3a>
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b22      	cmp	r3, #34	; 0x22
 8003ae8:	d107      	bne.n	8003afa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b00:	2b28      	cmp	r3, #40	; 0x28
 8003b02:	d107      	bne.n	8003b14 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2228      	movs	r2, #40	; 0x28
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b12:	e015      	b.n	8003b40 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b22:	d00a      	beq.n	8003b3a <I2C_ITError+0x7a>
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b60      	cmp	r3, #96	; 0x60
 8003b28:	d007      	beq.n	8003b3a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4e:	d161      	bne.n	8003c14 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b5e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d020      	beq.n	8003bae <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	4a6a      	ldr	r2, [pc, #424]	; (8003d1c <I2C_ITError+0x25c>)
 8003b72:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fd fe09 	bl	8001790 <HAL_DMA_Abort_IT>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8089 	beq.w	8003c98 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4798      	blx	r3
 8003bac:	e074      	b.n	8003c98 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	4a5a      	ldr	r2, [pc, #360]	; (8003d1c <I2C_ITError+0x25c>)
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd fde8 	bl	8001790 <HAL_DMA_Abort_IT>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d068      	beq.n	8003c98 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b40      	cmp	r3, #64	; 0x40
 8003bd2:	d10b      	bne.n	8003bec <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c0e:	4610      	mov	r0, r2
 8003c10:	4798      	blx	r3
 8003c12:	e041      	b.n	8003c98 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b60      	cmp	r3, #96	; 0x60
 8003c1e:	d125      	bne.n	8003c6c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d10b      	bne.n	8003c54 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7fe fef2 	bl	8002a4e <HAL_I2C_AbortCpltCallback>
 8003c6a:	e015      	b.n	8003c98 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d10b      	bne.n	8003c92 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fe fed2 	bl	8002a3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10e      	bne.n	8003cc6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cd4:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d113      	bne.n	8003d12 <I2C_ITError+0x252>
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b28      	cmp	r3, #40	; 0x28
 8003cee:	d110      	bne.n	8003d12 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <I2C_ITError+0x260>)
 8003cf4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7fe fe7a 	bl	8002a06 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	08003ff9 	.word	0x08003ff9
 8003d20:	ffff0000 	.word	0xffff0000

08003d24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	460b      	mov	r3, r1
 8003d32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d006      	beq.n	8003d4e <I2C_MasterRequestWrite+0x2a>
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d003      	beq.n	8003d4e <I2C_MasterRequestWrite+0x2a>
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d4c:	d108      	bne.n	8003d60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e00b      	b.n	8003d78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	2b12      	cmp	r3, #18
 8003d66:	d107      	bne.n	8003d78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f9df 	bl	8004148 <I2C_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9e:	d103      	bne.n	8003da8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e035      	b.n	8003e18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003db4:	d108      	bne.n	8003dc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003db6:	897b      	ldrh	r3, [r7, #10]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dc4:	611a      	str	r2, [r3, #16]
 8003dc6:	e01b      	b.n	8003e00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003dc8:	897b      	ldrh	r3, [r7, #10]
 8003dca:	11db      	asrs	r3, r3, #7
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f003 0306 	and.w	r3, r3, #6
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f063 030f 	orn	r3, r3, #15
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	490e      	ldr	r1, [pc, #56]	; (8003e20 <I2C_MasterRequestWrite+0xfc>)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fa05 	bl	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e010      	b.n	8003e18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003df6:	897b      	ldrh	r3, [r7, #10]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4907      	ldr	r1, [pc, #28]	; (8003e24 <I2C_MasterRequestWrite+0x100>)
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f9f5 	bl	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	00010008 	.word	0x00010008
 8003e24:	00010002 	.word	0x00010002

08003e28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	817b      	strh	r3, [r7, #10]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	813b      	strh	r3, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f96a 	bl	8004148 <I2C_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00d      	beq.n	8003e96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e88:	d103      	bne.n	8003e92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e0aa      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e96:	897b      	ldrh	r3, [r7, #10]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ea4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	6a3a      	ldr	r2, [r7, #32]
 8003eaa:	4952      	ldr	r1, [pc, #328]	; (8003ff4 <I2C_RequestMemoryRead+0x1cc>)
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f9a2 	bl	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e097      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed4:	6a39      	ldr	r1, [r7, #32]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fa0c 	bl	80042f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d107      	bne.n	8003efa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e076      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d105      	bne.n	8003f10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f04:	893b      	ldrh	r3, [r7, #8]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	611a      	str	r2, [r3, #16]
 8003f0e:	e021      	b.n	8003f54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f10:	893b      	ldrh	r3, [r7, #8]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f20:	6a39      	ldr	r1, [r7, #32]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f9e6 	bl	80042f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00d      	beq.n	8003f4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d107      	bne.n	8003f46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e050      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f4a:	893b      	ldrh	r3, [r7, #8]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f56:	6a39      	ldr	r1, [r7, #32]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f9cb 	bl	80042f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00d      	beq.n	8003f80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d107      	bne.n	8003f7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e035      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f8d3 	bl	8004148 <I2C_WaitOnFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00d      	beq.n	8003fc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb6:	d103      	bne.n	8003fc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e013      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fc4:	897b      	ldrh	r3, [r7, #10]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	6a3a      	ldr	r2, [r7, #32]
 8003fd8:	4906      	ldr	r1, [pc, #24]	; (8003ff4 <I2C_RequestMemoryRead+0x1cc>)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f90b 	bl	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	00010002 	.word	0x00010002

08003ff8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004012:	4b4b      	ldr	r3, [pc, #300]	; (8004140 <I2C_DMAAbort+0x148>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	08db      	lsrs	r3, r3, #3
 8004018:	4a4a      	ldr	r2, [pc, #296]	; (8004144 <I2C_DMAAbort+0x14c>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	0a1a      	lsrs	r2, r3, #8
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	00da      	lsls	r2, r3, #3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f043 0220 	orr.w	r2, r3, #32
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800403e:	e00a      	b.n	8004056 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3b01      	subs	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004054:	d0ea      	beq.n	800402c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004062:	2200      	movs	r2, #0
 8004064:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	2200      	movs	r2, #0
 8004074:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004084:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2200      	movs	r2, #0
 800408a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004098:	2200      	movs	r2, #0
 800409a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	2200      	movs	r2, #0
 80040aa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b60      	cmp	r3, #96	; 0x60
 80040c6:	d10e      	bne.n	80040e6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2200      	movs	r2, #0
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040de:	6978      	ldr	r0, [r7, #20]
 80040e0:	f7fe fcb5 	bl	8002a4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040e4:	e027      	b.n	8004136 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040ec:	2b28      	cmp	r3, #40	; 0x28
 80040ee:	d117      	bne.n	8004120 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800410e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2228      	movs	r2, #40	; 0x28
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800411e:	e007      	b.n	8004130 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004130:	6978      	ldr	r0, [r7, #20]
 8004132:	f7fe fc83 	bl	8002a3c <HAL_I2C_ErrorCallback>
}
 8004136:	bf00      	nop
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000004 	.word	0x20000004
 8004144:	14f8b589 	.word	0x14f8b589

08004148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004158:	e025      	b.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d021      	beq.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004162:	f7fd f9d9 	bl	8001518 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d116      	bne.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f043 0220 	orr.w	r2, r3, #32
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e023      	b.n	80041ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	0c1b      	lsrs	r3, r3, #16
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d10d      	bne.n	80041cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	43da      	mvns	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bf0c      	ite	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	2300      	movne	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	e00c      	b.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	43da      	mvns	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bf0c      	ite	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	2300      	movne	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d0b6      	beq.n	800415a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004204:	e051      	b.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004214:	d123      	bne.n	800425e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004224:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800422e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f043 0204 	orr.w	r2, r3, #4
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e046      	b.n	80042ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d021      	beq.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fd f957 	bl	8001518 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d116      	bne.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f043 0220 	orr.w	r2, r3, #32
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e020      	b.n	80042ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d10c      	bne.n	80042ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	43da      	mvns	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4013      	ands	r3, r2
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bf14      	ite	ne
 80042c6:	2301      	movne	r3, #1
 80042c8:	2300      	moveq	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	e00b      	b.n	80042e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	43da      	mvns	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4013      	ands	r3, r2
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d18d      	bne.n	8004206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004300:	e02d      	b.n	800435e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f900 	bl	8004508 <I2C_IsAcknowledgeFailed>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e02d      	b.n	800436e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d021      	beq.n	800435e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431a:	f7fd f8fd 	bl	8001518 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	429a      	cmp	r2, r3
 8004328:	d302      	bcc.n	8004330 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d116      	bne.n	800435e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f043 0220 	orr.w	r2, r3, #32
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e007      	b.n	800436e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d1ca      	bne.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004382:	e02d      	b.n	80043e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f8bf 	bl	8004508 <I2C_IsAcknowledgeFailed>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e02d      	b.n	80043f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439a:	d021      	beq.n	80043e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439c:	f7fd f8bc 	bl	8001518 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d302      	bcc.n	80043b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d116      	bne.n	80043e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	f043 0220 	orr.w	r2, r3, #32
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e007      	b.n	80043f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d1ca      	bne.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004404:	4b13      	ldr	r3, [pc, #76]	; (8004454 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	08db      	lsrs	r3, r3, #3
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800440c:	fba2 2303 	umull	r2, r3, r2, r3
 8004410:	0a1a      	lsrs	r2, r3, #8
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3b01      	subs	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d107      	bne.n	8004436 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e008      	b.n	8004448 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004444:	d0e9      	beq.n	800441a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20000004 	.word	0x20000004
 8004458:	14f8b589 	.word	0x14f8b589

0800445c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004468:	e042      	b.n	80044f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b10      	cmp	r3, #16
 8004476:	d119      	bne.n	80044ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0210 	mvn.w	r2, #16
 8004480:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e029      	b.n	8004500 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7fd f834 	bl	8001518 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d116      	bne.n	80044f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e007      	b.n	8004500 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d1b5      	bne.n	800446a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451e:	d11b      	bne.n	8004558 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004528:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f043 0204 	orr.w	r2, r3, #4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004574:	d103      	bne.n	800457e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800457c:	e007      	b.n	800458e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004586:	d102      	bne.n	800458e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2208      	movs	r2, #8
 800458c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr

08004598 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800459a:	b08b      	sub	sp, #44	; 0x2c
 800459c:	af06      	add	r7, sp, #24
 800459e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0fd      	b.n	80047a6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f006 ff1e 	bl	800b400 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2203      	movs	r2, #3
 80045c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f002 fbf1 	bl	8006db8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	687e      	ldr	r6, [r7, #4]
 80045de:	466d      	mov	r5, sp
 80045e0:	f106 0410 	add.w	r4, r6, #16
 80045e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	1d33      	adds	r3, r6, #4
 80045ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045f0:	6838      	ldr	r0, [r7, #0]
 80045f2:	f002 fbbb 	bl	8006d6c <USB_CoreInit>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0ce      	b.n	80047a6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f002 fbec 	bl	8006dec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004614:	2300      	movs	r3, #0
 8004616:	73fb      	strb	r3, [r7, #15]
 8004618:	e04c      	b.n	80046b4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	440b      	add	r3, r1
 800462a:	3301      	adds	r3, #1
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	440b      	add	r3, r1
 8004640:	7bfa      	ldrb	r2, [r7, #15]
 8004642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	b298      	uxth	r0, r3
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	440b      	add	r3, r1
 8004656:	3336      	adds	r3, #54	; 0x36
 8004658:	4602      	mov	r2, r0
 800465a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	440b      	add	r3, r1
 800466c:	3303      	adds	r3, #3
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004672:	7bfa      	ldrb	r2, [r7, #15]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	440b      	add	r3, r1
 8004680:	3338      	adds	r3, #56	; 0x38
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004686:	7bfa      	ldrb	r2, [r7, #15]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	440b      	add	r3, r1
 8004694:	333c      	adds	r3, #60	; 0x3c
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	440b      	add	r3, r1
 80046a8:	3340      	adds	r3, #64	; 0x40
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	3301      	adds	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d3ad      	bcc.n	800461a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
 80046c2:	e044      	b.n	800474e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046c4:	7bfa      	ldrb	r2, [r7, #15]
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	440b      	add	r3, r1
 80046d2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80046d6:	2200      	movs	r2, #0
 80046d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046da:	7bfa      	ldrb	r2, [r7, #15]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	440b      	add	r3, r1
 80046e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046ec:	7bfa      	ldrb	r2, [r7, #15]
 80046ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	440b      	add	r3, r1
 80046fe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004706:	7bfa      	ldrb	r2, [r7, #15]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	440b      	add	r3, r1
 8004714:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800471c:	7bfa      	ldrb	r2, [r7, #15]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	440b      	add	r3, r1
 800472a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004732:	7bfa      	ldrb	r2, [r7, #15]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	440b      	add	r3, r1
 8004740:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	3301      	adds	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
 800474e:	7bfa      	ldrb	r2, [r7, #15]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	d3b5      	bcc.n	80046c4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	687e      	ldr	r6, [r7, #4]
 8004760:	466d      	mov	r5, sp
 8004762:	f106 0410 	add.w	r4, r6, #16
 8004766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	602b      	str	r3, [r5, #0]
 800476e:	1d33      	adds	r3, r6, #4
 8004770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004772:	6838      	ldr	r0, [r7, #0]
 8004774:	f002 fb46 	bl	8006e04 <USB_DevInit>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e00d      	b.n	80047a6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f004 fff8 	bl	8009794 <USB_DevDisconnect>

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_PCD_Start+0x16>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e016      	b.n	80047f2 <HAL_PCD_Start+0x44>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f002 fadb 	bl	8006d8c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80047d6:	2101      	movs	r1, #1
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f007 f884 	bl	800b8e6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f004 ffcc 	bl	8009780 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b088      	sub	sp, #32
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f004 ffce 	bl	80097a8 <USB_ReadInterrupts>
 800480c:	4603      	mov	r3, r0
 800480e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004816:	d102      	bne.n	800481e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fb5f 	bl	8004edc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f004 ffc0 	bl	80097a8 <USB_ReadInterrupts>
 8004828:	4603      	mov	r3, r0
 800482a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004832:	d112      	bne.n	800485a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800483c:	b29a      	uxth	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004846:	b292      	uxth	r2, r2
 8004848:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f006 fe52 	bl	800b4f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004852:	2100      	movs	r1, #0
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f923 	bl	8004aa0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f004 ffa2 	bl	80097a8 <USB_ReadInterrupts>
 8004864:	4603      	mov	r3, r0
 8004866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800486e:	d10b      	bne.n	8004888 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004878:	b29a      	uxth	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004882:	b292      	uxth	r2, r2
 8004884:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f004 ff8b 	bl	80097a8 <USB_ReadInterrupts>
 8004892:	4603      	mov	r3, r0
 8004894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489c:	d10b      	bne.n	80048b6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b0:	b292      	uxth	r2, r2
 80048b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f004 ff74 	bl	80097a8 <USB_ReadInterrupts>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ca:	d126      	bne.n	800491a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0204 	bic.w	r2, r2, #4
 80048de:	b292      	uxth	r2, r2
 80048e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0208 	bic.w	r2, r2, #8
 80048f6:	b292      	uxth	r2, r2
 80048f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f006 fe33 	bl	800b568 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004914:	b292      	uxth	r2, r2
 8004916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f004 ff42 	bl	80097a8 <USB_ReadInterrupts>
 8004924:	4603      	mov	r3, r0
 8004926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492e:	f040 8082 	bne.w	8004a36 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004932:	2300      	movs	r3, #0
 8004934:	77fb      	strb	r3, [r7, #31]
 8004936:	e010      	b.n	800495a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	7ffb      	ldrb	r3, [r7, #31]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	441a      	add	r2, r3
 8004944:	7ffb      	ldrb	r3, [r7, #31]
 8004946:	8812      	ldrh	r2, [r2, #0]
 8004948:	b292      	uxth	r2, r2
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	3320      	adds	r3, #32
 800494e:	443b      	add	r3, r7
 8004950:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004954:	7ffb      	ldrb	r3, [r7, #31]
 8004956:	3301      	adds	r3, #1
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	7ffb      	ldrb	r3, [r7, #31]
 800495c:	2b07      	cmp	r3, #7
 800495e:	d9eb      	bls.n	8004938 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004968:	b29a      	uxth	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	b292      	uxth	r2, r2
 8004974:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	b292      	uxth	r2, r2
 800498c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004990:	bf00      	nop
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800499a:	b29b      	uxth	r3, r3
 800499c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f6      	beq.n	8004992 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b6:	b292      	uxth	r2, r2
 80049b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80049bc:	2300      	movs	r3, #0
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e00f      	b.n	80049e2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80049c2:	7ffb      	ldrb	r3, [r7, #31]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	4611      	mov	r1, r2
 80049ca:	7ffa      	ldrb	r2, [r7, #31]
 80049cc:	0092      	lsls	r2, r2, #2
 80049ce:	440a      	add	r2, r1
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	3320      	adds	r3, #32
 80049d4:	443b      	add	r3, r7
 80049d6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80049da:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80049dc:	7ffb      	ldrb	r3, [r7, #31]
 80049de:	3301      	adds	r3, #1
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	7ffb      	ldrb	r3, [r7, #31]
 80049e4:	2b07      	cmp	r3, #7
 80049e6:	d9ec      	bls.n	80049c2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0208 	orr.w	r2, r2, #8
 80049fa:	b292      	uxth	r2, r2
 80049fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a12:	b292      	uxth	r2, r2
 8004a14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0204 	orr.w	r2, r2, #4
 8004a2a:	b292      	uxth	r2, r2
 8004a2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f006 fd7f 	bl	800b534 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f004 feb4 	bl	80097a8 <USB_ReadInterrupts>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4a:	d10e      	bne.n	8004a6a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f006 fd38 	bl	800b4da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f004 fe9a 	bl	80097a8 <USB_ReadInterrupts>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7e:	d10b      	bne.n	8004a98 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a92:	b292      	uxth	r2, r2
 8004a94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004a98:	bf00      	nop
 8004a9a:	3720      	adds	r7, #32
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_PCD_SetAddress+0x1a>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e013      	b.n	8004ae2 <HAL_PCD_SetAddress+0x42>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	78fa      	ldrb	r2, [r7, #3]
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f004 fe41 	bl	800975a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	4608      	mov	r0, r1
 8004af4:	4611      	mov	r1, r2
 8004af6:	461a      	mov	r2, r3
 8004af8:	4603      	mov	r3, r0
 8004afa:	70fb      	strb	r3, [r7, #3]
 8004afc:	460b      	mov	r3, r1
 8004afe:	803b      	strh	r3, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	da0e      	bge.n	8004b2e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	4413      	add	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	705a      	strb	r2, [r3, #1]
 8004b2c:	e00e      	b.n	8004b4c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	f003 0207 	and.w	r2, r3, #7
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	4413      	add	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b58:	883a      	ldrh	r2, [r7, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	78ba      	ldrb	r2, [r7, #2]
 8004b62:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	785b      	ldrb	r3, [r3, #1]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b76:	78bb      	ldrb	r3, [r7, #2]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d102      	bne.n	8004b82 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_PCD_EP_Open+0xa6>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e00e      	b.n	8004bae <HAL_PCD_EP_Open+0xc4>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68f9      	ldr	r1, [r7, #12]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f002 f950 	bl	8006e44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004bac:	7afb      	ldrb	r3, [r7, #11]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	da0e      	bge.n	8004be8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	705a      	strb	r2, [r3, #1]
 8004be6:	e00e      	b.n	8004c06 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	f003 0207 	and.w	r2, r3, #7
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_PCD_EP_Close+0x6a>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e00e      	b.n	8004c3e <HAL_PCD_EP_Close+0x88>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68f9      	ldr	r1, [r7, #12]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f002 fc72 	bl	8007518 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b086      	sub	sp, #24
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
 8004c52:	460b      	mov	r3, r1
 8004c54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c56:	7afb      	ldrb	r3, [r7, #11]
 8004c58:	f003 0207 	and.w	r2, r3, #7
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2200      	movs	r2, #0
 8004c84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c86:	7afb      	ldrb	r3, [r7, #11]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c92:	7afb      	ldrb	r3, [r7, #11]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6979      	ldr	r1, [r7, #20]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f002 fe24 	bl	80078f0 <USB_EPStartXfer>
 8004ca8:	e005      	b.n	8004cb6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6979      	ldr	r1, [r7, #20]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f002 fe1d 	bl	80078f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	f003 0207 	and.w	r2, r3, #7
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	440b      	add	r3, r1
 8004cde:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004ce2:	681b      	ldr	r3, [r3, #0]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr

08004cee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b086      	sub	sp, #24
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cfe:	7afb      	ldrb	r3, [r7, #11]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2200      	movs	r2, #0
 8004d32:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2201      	movs	r2, #1
 8004d38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d46:	7afb      	ldrb	r3, [r7, #11]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6979      	ldr	r1, [r7, #20]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f002 fdca 	bl	80078f0 <USB_EPStartXfer>
 8004d5c:	e005      	b.n	8004d6a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6979      	ldr	r1, [r7, #20]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f002 fdc3 	bl	80078f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	f003 0207 	and.w	r2, r3, #7
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d901      	bls.n	8004d92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e04c      	b.n	8004e2c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	da0e      	bge.n	8004db8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	4413      	add	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	705a      	strb	r2, [r3, #1]
 8004db6:	e00c      	b.n	8004dd2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_PCD_EP_SetStall+0x7e>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e01c      	b.n	8004e2c <HAL_PCD_EP_SetStall+0xb8>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68f9      	ldr	r1, [r7, #12]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f004 fbad 	bl	8009560 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d108      	bne.n	8004e22 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	f004 fcd2 	bl	80097c6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	f003 020f 	and.w	r2, r3, #15
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d901      	bls.n	8004e52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e040      	b.n	8004ed4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da0e      	bge.n	8004e78 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	705a      	strb	r2, [r3, #1]
 8004e76:	e00e      	b.n	8004e96 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	f003 0207 	and.w	r2, r3, #7
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_PCD_EP_ClrStall+0x82>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e00e      	b.n	8004ed4 <HAL_PCD_EP_ClrStall+0xa0>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f004 fb9b 	bl	8009600 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08e      	sub	sp, #56	; 0x38
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ee4:	e2ec      	b.n	80054c0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004eee:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004ef0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004efc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f040 8161 	bne.w	80051c8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d152      	bne.n	8004fb6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f20:	81fb      	strh	r3, [r7, #14]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	89fb      	ldrh	r3, [r7, #14]
 8004f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3328      	adds	r3, #40	; 0x28
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3302      	adds	r3, #2
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	441a      	add	r2, r3
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004f74:	2100      	movs	r1, #0
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f006 fa95 	bl	800b4a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 829b 	beq.w	80054c0 <PCD_EP_ISR_Handler+0x5e4>
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 8296 	bne.w	80054c0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	b292      	uxth	r2, r2
 8004fa8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004fb4:	e284      	b.n	80054c0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004fc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d034      	beq.n	800503a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3306      	adds	r3, #6
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800500e:	b29b      	uxth	r3, r3
 8005010:	f004 fc29 	bl	8009866 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29a      	uxth	r2, r3
 800501c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005020:	4013      	ands	r3, r2
 8005022:	823b      	strh	r3, [r7, #16]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	8a3a      	ldrh	r2, [r7, #16]
 800502a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800502e:	b292      	uxth	r2, r2
 8005030:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f006 fa0a 	bl	800b44c <HAL_PCD_SetupStageCallback>
 8005038:	e242      	b.n	80054c0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800503a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800503e:	2b00      	cmp	r3, #0
 8005040:	f280 823e 	bge.w	80054c0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29a      	uxth	r2, r3
 800504c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005050:	4013      	ands	r3, r2
 8005052:	83bb      	strh	r3, [r7, #28]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	8bba      	ldrh	r2, [r7, #28]
 800505a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800505e:	b292      	uxth	r2, r2
 8005060:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506a:	b29b      	uxth	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4413      	add	r3, r2
 8005076:	3306      	adds	r3, #6
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d019      	beq.n	80050ca <PCD_EP_ISR_Handler+0x1ee>
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d015      	beq.n	80050ca <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	6959      	ldr	r1, [r3, #20]
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f004 fbd9 	bl	8009866 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	695a      	ldr	r2, [r3, #20]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	441a      	add	r2, r3
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80050c2:	2100      	movs	r1, #0
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f006 f9d3 	bl	800b470 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 81f2 	bne.w	80054c0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	4413      	add	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d112      	bne.n	800512a <PCD_EP_ISR_Handler+0x24e>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800510e:	b29a      	uxth	r2, r3
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	801a      	strh	r2, [r3, #0]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	b29b      	uxth	r3, r3
 800511a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005122:	b29a      	uxth	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	801a      	strh	r2, [r3, #0]
 8005128:	e02f      	b.n	800518a <PCD_EP_ISR_Handler+0x2ae>
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b3e      	cmp	r3, #62	; 0x3e
 8005130:	d813      	bhi.n	800515a <PCD_EP_ISR_Handler+0x27e>
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	085b      	lsrs	r3, r3, #1
 8005138:	633b      	str	r3, [r7, #48]	; 0x30
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <PCD_EP_ISR_Handler+0x270>
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	3301      	adds	r3, #1
 800514a:	633b      	str	r3, [r7, #48]	; 0x30
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	b29b      	uxth	r3, r3
 8005150:	029b      	lsls	r3, r3, #10
 8005152:	b29a      	uxth	r2, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	801a      	strh	r2, [r3, #0]
 8005158:	e017      	b.n	800518a <PCD_EP_ISR_Handler+0x2ae>
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	633b      	str	r3, [r7, #48]	; 0x30
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	2b00      	cmp	r3, #0
 800516c:	d102      	bne.n	8005174 <PCD_EP_ISR_Handler+0x298>
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	3b01      	subs	r3, #1
 8005172:	633b      	str	r3, [r7, #48]	; 0x30
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	b29b      	uxth	r3, r3
 8005178:	029b      	lsls	r3, r3, #10
 800517a:	b29b      	uxth	r3, r3
 800517c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005184:	b29a      	uxth	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	827b      	strh	r3, [r7, #18]
 800519c:	8a7b      	ldrh	r3, [r7, #18]
 800519e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051a2:	827b      	strh	r3, [r7, #18]
 80051a4:	8a7b      	ldrh	r3, [r7, #18]
 80051a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051aa:	827b      	strh	r3, [r7, #18]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	8a7b      	ldrh	r3, [r7, #18]
 80051b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	8013      	strh	r3, [r2, #0]
 80051c6:	e17b      	b.n	80054c0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80051da:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f280 80ea 	bge.w	80053b8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80051fa:	4013      	ands	r3, r2
 80051fc:	853b      	strh	r3, [r7, #40]	; 0x28
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800520e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005212:	b292      	uxth	r2, r2
 8005214:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005216:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	4413      	add	r3, r2
 800522a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	7b1b      	ldrb	r3, [r3, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d122      	bne.n	800527a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523c:	b29b      	uxth	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4413      	add	r3, r2
 8005248:	3306      	adds	r3, #6
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800525c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800525e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8087 	beq.w	8005374 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	6959      	ldr	r1, [r3, #20]
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	88da      	ldrh	r2, [r3, #6]
 8005272:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005274:	f004 faf7 	bl	8009866 <USB_ReadPMA>
 8005278:	e07c      	b.n	8005374 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	78db      	ldrb	r3, [r3, #3]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d108      	bne.n	8005294 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005282:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005284:	461a      	mov	r2, r3
 8005286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f927 	bl	80054dc <HAL_PCD_EP_DB_Receive>
 800528e:	4603      	mov	r3, r0
 8005290:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005292:	e06f      	b.n	8005374 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	441a      	add	r2, r3
 80052be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d021      	beq.n	8005332 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4413      	add	r3, r2
 8005302:	3302      	adds	r3, #2
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005316:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005318:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02a      	beq.n	8005374 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	6959      	ldr	r1, [r3, #20]
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	891a      	ldrh	r2, [r3, #8]
 800532a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800532c:	f004 fa9b 	bl	8009866 <USB_ReadPMA>
 8005330:	e020      	b.n	8005374 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800533a:	b29b      	uxth	r3, r3
 800533c:	461a      	mov	r2, r3
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	3306      	adds	r3, #6
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800535a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800535c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	6959      	ldr	r1, [r3, #20]
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	895a      	ldrh	r2, [r3, #10]
 800536e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005370:	f004 fa79 	bl	8009866 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800537a:	441a      	add	r2, r3
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	695a      	ldr	r2, [r3, #20]
 8005384:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005386:	441a      	add	r2, r3
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <PCD_EP_ISR_Handler+0x4c2>
 8005394:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	429a      	cmp	r2, r3
 800539c:	d206      	bcs.n	80053ac <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f006 f863 	bl	800b470 <HAL_PCD_DataOutStageCallback>
 80053aa:	e005      	b.n	80053b8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053b2:	4618      	mov	r0, r3
 80053b4:	f002 fa9c 	bl	80078f0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80053b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d07e      	beq.n	80054c0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80053c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4413      	add	r3, r2
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80053ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f0:	843b      	strh	r3, [r7, #32]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	441a      	add	r2, r3
 8005400:	8c3b      	ldrh	r3, [r7, #32]
 8005402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800540a:	b29b      	uxth	r3, r3
 800540c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	78db      	ldrb	r3, [r3, #3]
 8005412:	2b03      	cmp	r3, #3
 8005414:	d00c      	beq.n	8005430 <PCD_EP_ISR_Handler+0x554>
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	78db      	ldrb	r3, [r3, #3]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005422:	2b02      	cmp	r3, #2
 8005424:	d146      	bne.n	80054b4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005426:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d141      	bne.n	80054b4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005438:	b29b      	uxth	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4413      	add	r3, r2
 8005444:	3302      	adds	r3, #2
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6812      	ldr	r2, [r2, #0]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005458:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	8bfb      	ldrh	r3, [r7, #30]
 8005460:	429a      	cmp	r2, r3
 8005462:	d906      	bls.n	8005472 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	8bfb      	ldrh	r3, [r7, #30]
 800546a:	1ad2      	subs	r2, r2, r3
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	619a      	str	r2, [r3, #24]
 8005470:	e002      	b.n	8005478 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	2200      	movs	r2, #0
 8005476:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	4619      	mov	r1, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f006 f80d 	bl	800b4a6 <HAL_PCD_DataInStageCallback>
 800548c:	e018      	b.n	80054c0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	8bfb      	ldrh	r3, [r7, #30]
 8005494:	441a      	add	r2, r3
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	8bfb      	ldrh	r3, [r7, #30]
 80054a0:	441a      	add	r2, r3
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ac:	4618      	mov	r0, r3
 80054ae:	f002 fa1f 	bl	80078f0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80054b2:	e005      	b.n	80054c0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80054b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054b6:	461a      	mov	r2, r3
 80054b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f91b 	bl	80056f6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	b21b      	sxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f6ff ad0a 	blt.w	8004ee6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3738      	adds	r7, #56	; 0x38
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	4613      	mov	r3, r2
 80054e8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80054ea:	88fb      	ldrh	r3, [r7, #6]
 80054ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d07e      	beq.n	80055f2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	461a      	mov	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4413      	add	r3, r2
 8005508:	3302      	adds	r3, #2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800551c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	8b7b      	ldrh	r3, [r7, #26]
 8005524:	429a      	cmp	r2, r3
 8005526:	d306      	bcc.n	8005536 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	8b7b      	ldrh	r3, [r7, #26]
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	619a      	str	r2, [r3, #24]
 8005534:	e002      	b.n	800553c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2200      	movs	r2, #0
 800553a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d123      	bne.n	800558c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	833b      	strh	r3, [r7, #24]
 8005560:	8b3b      	ldrh	r3, [r7, #24]
 8005562:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005566:	833b      	strh	r3, [r7, #24]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	441a      	add	r2, r3
 8005576:	8b3b      	ldrh	r3, [r7, #24]
 8005578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005588:	b29b      	uxth	r3, r3
 800558a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800558c:	88fb      	ldrh	r3, [r7, #6]
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01f      	beq.n	80055d6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b0:	82fb      	strh	r3, [r7, #22]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	441a      	add	r2, r3
 80055c0:	8afb      	ldrh	r3, [r7, #22]
 80055c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80055d6:	8b7b      	ldrh	r3, [r7, #26]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8087 	beq.w	80056ec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6959      	ldr	r1, [r3, #20]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	891a      	ldrh	r2, [r3, #8]
 80055ea:	8b7b      	ldrh	r3, [r7, #26]
 80055ec:	f004 f93b 	bl	8009866 <USB_ReadPMA>
 80055f0:	e07c      	b.n	80056ec <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	4413      	add	r3, r2
 8005606:	3306      	adds	r3, #6
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	6812      	ldr	r2, [r2, #0]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800561a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	8b7b      	ldrh	r3, [r7, #26]
 8005622:	429a      	cmp	r2, r3
 8005624:	d306      	bcc.n	8005634 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	8b7b      	ldrh	r3, [r7, #26]
 800562c:	1ad2      	subs	r2, r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	619a      	str	r2, [r3, #24]
 8005632:	e002      	b.n	800563a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2200      	movs	r2, #0
 8005638:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d123      	bne.n	800568a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565c:	83fb      	strh	r3, [r7, #30]
 800565e:	8bfb      	ldrh	r3, [r7, #30]
 8005660:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005664:	83fb      	strh	r3, [r7, #30]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	441a      	add	r2, r3
 8005674:	8bfb      	ldrh	r3, [r7, #30]
 8005676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800567a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800567e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005686:	b29b      	uxth	r3, r3
 8005688:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	d11f      	bne.n	80056d4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	461a      	mov	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	83bb      	strh	r3, [r7, #28]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	8bbb      	ldrh	r3, [r7, #28]
 80056c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80056d4:	8b7b      	ldrh	r3, [r7, #26]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d008      	beq.n	80056ec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6959      	ldr	r1, [r3, #20]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	895a      	ldrh	r2, [r3, #10]
 80056e6:	8b7b      	ldrh	r3, [r7, #26]
 80056e8:	f004 f8bd 	bl	8009866 <USB_ReadPMA>
    }
  }

  return count;
 80056ec:	8b7b      	ldrh	r3, [r7, #26]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b0a2      	sub	sp, #136	; 0x88
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	4613      	mov	r3, r2
 8005702:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 81c7 	beq.w	8005a9e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005718:	b29b      	uxth	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4413      	add	r3, r2
 8005724:	3302      	adds	r3, #2
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	6812      	ldr	r2, [r2, #0]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005738:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	699a      	ldr	r2, [r3, #24]
 8005740:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005744:	429a      	cmp	r2, r3
 8005746:	d907      	bls.n	8005758 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	699a      	ldr	r2, [r3, #24]
 800574c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005750:	1ad2      	subs	r2, r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	619a      	str	r2, [r3, #24]
 8005756:	e002      	b.n	800575e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2200      	movs	r2, #0
 800575c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f040 80b9 	bne.w	80058da <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d126      	bne.n	80057be <HAL_PCD_EP_DB_Transmit+0xc8>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	62bb      	str	r3, [r7, #40]	; 0x28
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800577e:	b29b      	uxth	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	4413      	add	r3, r2
 8005786:	62bb      	str	r3, [r7, #40]	; 0x28
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	011a      	lsls	r2, r3, #4
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	4413      	add	r3, r2
 8005792:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	801a      	strh	r2, [r3, #0]
 80057bc:	e01a      	b.n	80057f4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d116      	bne.n	80057f4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	633b      	str	r3, [r7, #48]	; 0x30
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	4413      	add	r3, r2
 80057dc:	633b      	str	r3, [r7, #48]	; 0x30
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	011a      	lsls	r2, r3, #4
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	4413      	add	r3, r2
 80057e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	2200      	movs	r2, #0
 80057f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	623b      	str	r3, [r7, #32]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d126      	bne.n	8005850 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005810:	b29b      	uxth	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	4413      	add	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	011a      	lsls	r2, r3, #4
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	4413      	add	r3, r2
 8005824:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005834:	b29a      	uxth	r2, r3
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005848:	b29a      	uxth	r2, r3
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	e017      	b.n	8005880 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d113      	bne.n	8005880 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005860:	b29b      	uxth	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	4413      	add	r3, r2
 8005868:	623b      	str	r3, [r7, #32]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	011a      	lsls	r2, r3, #4
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	4413      	add	r3, r2
 8005874:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005878:	61fb      	str	r3, [r7, #28]
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	2200      	movs	r2, #0
 800587e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	4619      	mov	r1, r3
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f005 fe0d 	bl	800b4a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 82d4 	beq.w	8005e40 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b2:	827b      	strh	r3, [r7, #18]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	8a7b      	ldrh	r3, [r7, #18]
 80058c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	8013      	strh	r3, [r2, #0]
 80058d8:	e2b2      	b.n	8005e40 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d021      	beq.n	8005928 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	441a      	add	r2, r3
 8005910:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005924:	b29b      	uxth	r3, r3
 8005926:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800592e:	2b01      	cmp	r3, #1
 8005930:	f040 8286 	bne.w	8005e40 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800593c:	441a      	add	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	69da      	ldr	r2, [r3, #28]
 8005946:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800594a:	441a      	add	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6a1a      	ldr	r2, [r3, #32]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	429a      	cmp	r2, r3
 800595a:	d309      	bcc.n	8005970 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6a1a      	ldr	r2, [r3, #32]
 8005966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005968:	1ad2      	subs	r2, r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	621a      	str	r2, [r3, #32]
 800596e:	e015      	b.n	800599c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d107      	bne.n	8005988 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005978:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800597c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005986:	e009      	b.n	800599c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2200      	movs	r2, #0
 800599a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d155      	bne.n	8005a50 <HAL_PCD_EP_DB_Transmit+0x35a>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	4413      	add	r3, r2
 80059ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	011a      	lsls	r2, r3, #4
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	4413      	add	r3, r2
 80059c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059ca:	637b      	str	r3, [r7, #52]	; 0x34
 80059cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d112      	bne.n	80059f8 <HAL_PCD_EP_DB_Transmit+0x302>
 80059d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059dc:	b29a      	uxth	r2, r3
 80059de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f4:	801a      	strh	r2, [r3, #0]
 80059f6:	e047      	b.n	8005a88 <HAL_PCD_EP_DB_Transmit+0x392>
 80059f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fa:	2b3e      	cmp	r3, #62	; 0x3e
 80059fc:	d811      	bhi.n	8005a22 <HAL_PCD_EP_DB_Transmit+0x32c>
 80059fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a10:	3301      	adds	r3, #1
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	029b      	lsls	r3, r3, #10
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1e:	801a      	strh	r2, [r3, #0]
 8005a20:	e032      	b.n	8005a88 <HAL_PCD_EP_DB_Transmit+0x392>
 8005a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d102      	bne.n	8005a38 <HAL_PCD_EP_DB_Transmit+0x342>
 8005a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a34:	3b01      	subs	r3, #1
 8005a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	029b      	lsls	r3, r3, #10
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	e01b      	b.n	8005a88 <HAL_PCD_EP_DB_Transmit+0x392>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d117      	bne.n	8005a88 <HAL_PCD_EP_DB_Transmit+0x392>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a6c:	4413      	add	r3, r2
 8005a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	011a      	lsls	r2, r3, #4
 8005a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a78:	4413      	add	r3, r2
 8005a7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a86:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6959      	ldr	r1, [r3, #20]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	891a      	ldrh	r2, [r3, #8]
 8005a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f003 fea0 	bl	80097dc <USB_WritePMA>
 8005a9c:	e1d0      	b.n	8005e40 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3306      	adds	r3, #6
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ac6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d307      	bcc.n	8005ae6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	619a      	str	r2, [r3, #24]
 8005ae4:	e002      	b.n	8005aec <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f040 80c4 	bne.w	8005c7e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d126      	bne.n	8005b4c <HAL_PCD_EP_DB_Transmit+0x456>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b12:	4413      	add	r3, r2
 8005b14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	011a      	lsls	r2, r3, #4
 8005b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1e:	4413      	add	r3, r2
 8005b20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b24:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	e01a      	b.n	8005b82 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d116      	bne.n	8005b82 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	677b      	str	r3, [r7, #116]	; 0x74
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b68:	4413      	add	r3, r2
 8005b6a:	677b      	str	r3, [r7, #116]	; 0x74
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	011a      	lsls	r2, r3, #4
 8005b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b74:	4413      	add	r3, r2
 8005b76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b7a:	673b      	str	r3, [r7, #112]	; 0x70
 8005b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b7e:	2200      	movs	r2, #0
 8005b80:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d12f      	bne.n	8005bf0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ba8:	4413      	add	r3, r2
 8005baa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	011a      	lsls	r2, r3, #4
 8005bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bb8:	4413      	add	r3, r2
 8005bba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	e017      	b.n	8005c20 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d113      	bne.n	8005c20 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c06:	4413      	add	r3, r2
 8005c08:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	011a      	lsls	r2, r3, #4
 8005c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c12:	4413      	add	r3, r2
 8005c14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	4619      	mov	r1, r3
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f005 fc3d 	bl	800b4a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 8104 	bne.w	8005e40 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	441a      	add	r2, r3
 8005c64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	8013      	strh	r3, [r2, #0]
 8005c7c:	e0e0      	b.n	8005e40 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d121      	bne.n	8005ccc <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	441a      	add	r2, r3
 8005cb4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	f040 80b4 	bne.w	8005e40 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	695a      	ldr	r2, [r3, #20]
 8005cdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ce0:	441a      	add	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	69da      	ldr	r2, [r3, #28]
 8005cea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cee:	441a      	add	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	6a1a      	ldr	r2, [r3, #32]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d309      	bcc.n	8005d14 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6a1a      	ldr	r2, [r3, #32]
 8005d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0c:	1ad2      	subs	r2, r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	621a      	str	r2, [r3, #32]
 8005d12:	e015      	b.n	8005d40 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d107      	bne.n	8005d2c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005d1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d20:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d2a:	e009      	b.n	8005d40 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2200      	movs	r2, #0
 8005d36:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	667b      	str	r3, [r7, #100]	; 0x64
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d155      	bne.n	8005dfa <HAL_PCD_EP_DB_Transmit+0x704>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d62:	4413      	add	r3, r2
 8005d64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	011a      	lsls	r2, r3, #4
 8005d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d6e:	4413      	add	r3, r2
 8005d70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d74:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d112      	bne.n	8005da2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d8a:	801a      	strh	r2, [r3, #0]
 8005d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	e044      	b.n	8005e2c <HAL_PCD_EP_DB_Transmit+0x736>
 8005da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da4:	2b3e      	cmp	r3, #62	; 0x3e
 8005da6:	d811      	bhi.n	8005dcc <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	657b      	str	r3, [r7, #84]	; 0x54
 8005dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dba:	3301      	adds	r3, #1
 8005dbc:	657b      	str	r3, [r7, #84]	; 0x54
 8005dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	029b      	lsls	r3, r3, #10
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dc8:	801a      	strh	r2, [r3, #0]
 8005dca:	e02f      	b.n	8005e2c <HAL_PCD_EP_DB_Transmit+0x736>
 8005dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	657b      	str	r3, [r7, #84]	; 0x54
 8005dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dde:	3b01      	subs	r3, #1
 8005de0:	657b      	str	r3, [r7, #84]	; 0x54
 8005de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	029b      	lsls	r3, r3, #10
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005df6:	801a      	strh	r2, [r3, #0]
 8005df8:	e018      	b.n	8005e2c <HAL_PCD_EP_DB_Transmit+0x736>
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d114      	bne.n	8005e2c <HAL_PCD_EP_DB_Transmit+0x736>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e10:	4413      	add	r3, r2
 8005e12:	667b      	str	r3, [r7, #100]	; 0x64
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	011a      	lsls	r2, r3, #4
 8005e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e22:	663b      	str	r3, [r7, #96]	; 0x60
 8005e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e2a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	6959      	ldr	r1, [r3, #20]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	895a      	ldrh	r2, [r3, #10]
 8005e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f003 fcce 	bl	80097dc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5a:	823b      	strh	r3, [r7, #16]
 8005e5c:	8a3b      	ldrh	r3, [r7, #16]
 8005e5e:	f083 0310 	eor.w	r3, r3, #16
 8005e62:	823b      	strh	r3, [r7, #16]
 8005e64:	8a3b      	ldrh	r3, [r7, #16]
 8005e66:	f083 0320 	eor.w	r3, r3, #32
 8005e6a:	823b      	strh	r3, [r7, #16]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	441a      	add	r2, r3
 8005e7a:	8a3b      	ldrh	r3, [r7, #16]
 8005e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3788      	adds	r7, #136	; 0x88
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b087      	sub	sp, #28
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	607b      	str	r3, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	817b      	strh	r3, [r7, #10]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005eac:	897b      	ldrh	r3, [r7, #10]
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eb8:	897b      	ldrh	r3, [r7, #10]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e009      	b.n	8005ee4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ed0:	897a      	ldrh	r2, [r7, #10]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005ee4:	893b      	ldrh	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d107      	bne.n	8005efa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2200      	movs	r2, #0
 8005eee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	80da      	strh	r2, [r3, #6]
 8005ef8:	e00b      	b.n	8005f12 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2201      	movs	r2, #1
 8005efe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0c1b      	lsrs	r3, r3, #16
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr
	...

08005f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e272      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 8087 	beq.w	800604e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f40:	4b92      	ldr	r3, [pc, #584]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 030c 	and.w	r3, r3, #12
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d00c      	beq.n	8005f66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f4c:	4b8f      	ldr	r3, [pc, #572]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 030c 	and.w	r3, r3, #12
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d112      	bne.n	8005f7e <HAL_RCC_OscConfig+0x5e>
 8005f58:	4b8c      	ldr	r3, [pc, #560]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f64:	d10b      	bne.n	8005f7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f66:	4b89      	ldr	r3, [pc, #548]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d06c      	beq.n	800604c <HAL_RCC_OscConfig+0x12c>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d168      	bne.n	800604c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e24c      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f86:	d106      	bne.n	8005f96 <HAL_RCC_OscConfig+0x76>
 8005f88:	4b80      	ldr	r3, [pc, #512]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a7f      	ldr	r2, [pc, #508]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	e02e      	b.n	8005ff4 <HAL_RCC_OscConfig+0xd4>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x98>
 8005f9e:	4b7b      	ldr	r3, [pc, #492]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a7a      	ldr	r2, [pc, #488]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	4b78      	ldr	r3, [pc, #480]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a77      	ldr	r2, [pc, #476]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e01d      	b.n	8005ff4 <HAL_RCC_OscConfig+0xd4>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc0:	d10c      	bne.n	8005fdc <HAL_RCC_OscConfig+0xbc>
 8005fc2:	4b72      	ldr	r3, [pc, #456]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a71      	ldr	r2, [pc, #452]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4b6f      	ldr	r3, [pc, #444]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a6e      	ldr	r2, [pc, #440]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e00b      	b.n	8005ff4 <HAL_RCC_OscConfig+0xd4>
 8005fdc:	4b6b      	ldr	r3, [pc, #428]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a6a      	ldr	r2, [pc, #424]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	4b68      	ldr	r3, [pc, #416]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a67      	ldr	r2, [pc, #412]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d013      	beq.n	8006024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ffc:	f7fb fa8c 	bl	8001518 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006004:	f7fb fa88 	bl	8001518 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	; 0x64
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e200      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006016:	4b5d      	ldr	r3, [pc, #372]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0xe4>
 8006022:	e014      	b.n	800604e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006024:	f7fb fa78 	bl	8001518 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800602c:	f7fb fa74 	bl	8001518 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	; 0x64
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e1ec      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603e:	4b53      	ldr	r3, [pc, #332]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0x10c>
 800604a:	e000      	b.n	800604e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800604c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d063      	beq.n	8006122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800605a:	4b4c      	ldr	r3, [pc, #304]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f003 030c 	and.w	r3, r3, #12
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00b      	beq.n	800607e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006066:	4b49      	ldr	r3, [pc, #292]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f003 030c 	and.w	r3, r3, #12
 800606e:	2b08      	cmp	r3, #8
 8006070:	d11c      	bne.n	80060ac <HAL_RCC_OscConfig+0x18c>
 8006072:	4b46      	ldr	r3, [pc, #280]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d116      	bne.n	80060ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800607e:	4b43      	ldr	r3, [pc, #268]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_RCC_OscConfig+0x176>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d001      	beq.n	8006096 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e1c0      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006096:	4b3d      	ldr	r3, [pc, #244]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4939      	ldr	r1, [pc, #228]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060aa:	e03a      	b.n	8006122 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d020      	beq.n	80060f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060b4:	4b36      	ldr	r3, [pc, #216]	; (8006190 <HAL_RCC_OscConfig+0x270>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ba:	f7fb fa2d 	bl	8001518 <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c2:	f7fb fa29 	bl	8001518 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e1a1      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d4:	4b2d      	ldr	r3, [pc, #180]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e0:	4b2a      	ldr	r3, [pc, #168]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4927      	ldr	r1, [pc, #156]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	600b      	str	r3, [r1, #0]
 80060f4:	e015      	b.n	8006122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060f6:	4b26      	ldr	r3, [pc, #152]	; (8006190 <HAL_RCC_OscConfig+0x270>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fc:	f7fb fa0c 	bl	8001518 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006104:	f7fb fa08 	bl	8001518 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e180      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006116:	4b1d      	ldr	r3, [pc, #116]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d03a      	beq.n	80061a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d019      	beq.n	800616a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006136:	4b17      	ldr	r3, [pc, #92]	; (8006194 <HAL_RCC_OscConfig+0x274>)
 8006138:	2201      	movs	r2, #1
 800613a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800613c:	f7fb f9ec 	bl	8001518 <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006144:	f7fb f9e8 	bl	8001518 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e160      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006156:	4b0d      	ldr	r3, [pc, #52]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0f0      	beq.n	8006144 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006162:	2001      	movs	r0, #1
 8006164:	f000 fac4 	bl	80066f0 <RCC_Delay>
 8006168:	e01c      	b.n	80061a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800616a:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_RCC_OscConfig+0x274>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006170:	f7fb f9d2 	bl	8001518 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006176:	e00f      	b.n	8006198 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006178:	f7fb f9ce 	bl	8001518 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d908      	bls.n	8006198 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e146      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
 800618a:	bf00      	nop
 800618c:	40021000 	.word	0x40021000
 8006190:	42420000 	.word	0x42420000
 8006194:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006198:	4b92      	ldr	r3, [pc, #584]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e9      	bne.n	8006178 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80a6 	beq.w	80062fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061b2:	2300      	movs	r3, #0
 80061b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061b6:	4b8b      	ldr	r3, [pc, #556]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10d      	bne.n	80061de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061c2:	4b88      	ldr	r3, [pc, #544]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	4a87      	ldr	r2, [pc, #540]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80061c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061cc:	61d3      	str	r3, [r2, #28]
 80061ce:	4b85      	ldr	r3, [pc, #532]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d6:	60bb      	str	r3, [r7, #8]
 80061d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061da:	2301      	movs	r3, #1
 80061dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061de:	4b82      	ldr	r3, [pc, #520]	; (80063e8 <HAL_RCC_OscConfig+0x4c8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d118      	bne.n	800621c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ea:	4b7f      	ldr	r3, [pc, #508]	; (80063e8 <HAL_RCC_OscConfig+0x4c8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a7e      	ldr	r2, [pc, #504]	; (80063e8 <HAL_RCC_OscConfig+0x4c8>)
 80061f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061f6:	f7fb f98f 	bl	8001518 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fe:	f7fb f98b 	bl	8001518 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b64      	cmp	r3, #100	; 0x64
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e103      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006210:	4b75      	ldr	r3, [pc, #468]	; (80063e8 <HAL_RCC_OscConfig+0x4c8>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d106      	bne.n	8006232 <HAL_RCC_OscConfig+0x312>
 8006224:	4b6f      	ldr	r3, [pc, #444]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	4a6e      	ldr	r2, [pc, #440]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	6213      	str	r3, [r2, #32]
 8006230:	e02d      	b.n	800628e <HAL_RCC_OscConfig+0x36e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10c      	bne.n	8006254 <HAL_RCC_OscConfig+0x334>
 800623a:	4b6a      	ldr	r3, [pc, #424]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	4a69      	ldr	r2, [pc, #420]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	6213      	str	r3, [r2, #32]
 8006246:	4b67      	ldr	r3, [pc, #412]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	4a66      	ldr	r2, [pc, #408]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800624c:	f023 0304 	bic.w	r3, r3, #4
 8006250:	6213      	str	r3, [r2, #32]
 8006252:	e01c      	b.n	800628e <HAL_RCC_OscConfig+0x36e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	2b05      	cmp	r3, #5
 800625a:	d10c      	bne.n	8006276 <HAL_RCC_OscConfig+0x356>
 800625c:	4b61      	ldr	r3, [pc, #388]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	4a60      	ldr	r2, [pc, #384]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006262:	f043 0304 	orr.w	r3, r3, #4
 8006266:	6213      	str	r3, [r2, #32]
 8006268:	4b5e      	ldr	r3, [pc, #376]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	4a5d      	ldr	r2, [pc, #372]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	6213      	str	r3, [r2, #32]
 8006274:	e00b      	b.n	800628e <HAL_RCC_OscConfig+0x36e>
 8006276:	4b5b      	ldr	r3, [pc, #364]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	4a5a      	ldr	r2, [pc, #360]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800627c:	f023 0301 	bic.w	r3, r3, #1
 8006280:	6213      	str	r3, [r2, #32]
 8006282:	4b58      	ldr	r3, [pc, #352]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	4a57      	ldr	r2, [pc, #348]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006288:	f023 0304 	bic.w	r3, r3, #4
 800628c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d015      	beq.n	80062c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006296:	f7fb f93f 	bl	8001518 <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800629c:	e00a      	b.n	80062b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629e:	f7fb f93b 	bl	8001518 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e0b1      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b4:	4b4b      	ldr	r3, [pc, #300]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0ee      	beq.n	800629e <HAL_RCC_OscConfig+0x37e>
 80062c0:	e014      	b.n	80062ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c2:	f7fb f929 	bl	8001518 <HAL_GetTick>
 80062c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062c8:	e00a      	b.n	80062e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ca:	f7fb f925 	bl	8001518 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d8:	4293      	cmp	r3, r2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e09b      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062e0:	4b40      	ldr	r3, [pc, #256]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1ee      	bne.n	80062ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d105      	bne.n	80062fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f2:	4b3c      	ldr	r3, [pc, #240]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	4a3b      	ldr	r2, [pc, #236]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80062f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8087 	beq.w	8006416 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006308:	4b36      	ldr	r3, [pc, #216]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f003 030c 	and.w	r3, r3, #12
 8006310:	2b08      	cmp	r3, #8
 8006312:	d061      	beq.n	80063d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d146      	bne.n	80063aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631c:	4b33      	ldr	r3, [pc, #204]	; (80063ec <HAL_RCC_OscConfig+0x4cc>)
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006322:	f7fb f8f9 	bl	8001518 <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800632a:	f7fb f8f5 	bl	8001518 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e06d      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800633c:	4b29      	ldr	r3, [pc, #164]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f0      	bne.n	800632a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006350:	d108      	bne.n	8006364 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006352:	4b24      	ldr	r3, [pc, #144]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	4921      	ldr	r1, [pc, #132]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006360:	4313      	orrs	r3, r2
 8006362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006364:	4b1f      	ldr	r3, [pc, #124]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a19      	ldr	r1, [r3, #32]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	430b      	orrs	r3, r1
 8006376:	491b      	ldr	r1, [pc, #108]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006378:	4313      	orrs	r3, r2
 800637a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_RCC_OscConfig+0x4cc>)
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006382:	f7fb f8c9 	bl	8001518 <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638a:	f7fb f8c5 	bl	8001518 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e03d      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800639c:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_RCC_OscConfig+0x46a>
 80063a8:	e035      	b.n	8006416 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <HAL_RCC_OscConfig+0x4cc>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b0:	f7fb f8b2 	bl	8001518 <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063b8:	f7fb f8ae 	bl	8001518 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e026      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x498>
 80063d6:	e01e      	b.n	8006416 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d107      	bne.n	80063f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e019      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
 80063e4:	40021000 	.word	0x40021000
 80063e8:	40007000 	.word	0x40007000
 80063ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063f0:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <HAL_RCC_OscConfig+0x500>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	429a      	cmp	r2, r3
 8006402:	d106      	bne.n	8006412 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800640e:	429a      	cmp	r2, r3
 8006410:	d001      	beq.n	8006416 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40021000 	.word	0x40021000

08006424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0d0      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006438:	4b6a      	ldr	r3, [pc, #424]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d910      	bls.n	8006468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006446:	4b67      	ldr	r3, [pc, #412]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f023 0207 	bic.w	r2, r3, #7
 800644e:	4965      	ldr	r1, [pc, #404]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	4313      	orrs	r3, r2
 8006454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006456:	4b63      	ldr	r3, [pc, #396]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d001      	beq.n	8006468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e0b8      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d020      	beq.n	80064b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	d005      	beq.n	800648c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006480:	4b59      	ldr	r3, [pc, #356]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	4a58      	ldr	r2, [pc, #352]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006486:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800648a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006498:	4b53      	ldr	r3, [pc, #332]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4a52      	ldr	r2, [pc, #328]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 800649e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80064a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064a4:	4b50      	ldr	r3, [pc, #320]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	494d      	ldr	r1, [pc, #308]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d040      	beq.n	8006544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d107      	bne.n	80064da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ca:	4b47      	ldr	r3, [pc, #284]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d115      	bne.n	8006502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e07f      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d107      	bne.n	80064f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064e2:	4b41      	ldr	r3, [pc, #260]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e073      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f2:	4b3d      	ldr	r3, [pc, #244]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e06b      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006502:	4b39      	ldr	r3, [pc, #228]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f023 0203 	bic.w	r2, r3, #3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	4936      	ldr	r1, [pc, #216]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006510:	4313      	orrs	r3, r2
 8006512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006514:	f7fb f800 	bl	8001518 <HAL_GetTick>
 8006518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800651a:	e00a      	b.n	8006532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800651c:	f7fa fffc 	bl	8001518 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	f241 3288 	movw	r2, #5000	; 0x1388
 800652a:	4293      	cmp	r3, r2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e053      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006532:	4b2d      	ldr	r3, [pc, #180]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f003 020c 	and.w	r2, r3, #12
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	429a      	cmp	r2, r3
 8006542:	d1eb      	bne.n	800651c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006544:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d210      	bcs.n	8006574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006552:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f023 0207 	bic.w	r2, r3, #7
 800655a:	4922      	ldr	r1, [pc, #136]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	4313      	orrs	r3, r2
 8006560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006562:	4b20      	ldr	r3, [pc, #128]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d001      	beq.n	8006574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e032      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006580:	4b19      	ldr	r3, [pc, #100]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	4916      	ldr	r1, [pc, #88]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 800658e:	4313      	orrs	r3, r2
 8006590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0308 	and.w	r3, r3, #8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d009      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800659e:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	490e      	ldr	r1, [pc, #56]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065b2:	f000 f821 	bl	80065f8 <HAL_RCC_GetSysClockFreq>
 80065b6:	4602      	mov	r2, r0
 80065b8:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	091b      	lsrs	r3, r3, #4
 80065be:	f003 030f 	and.w	r3, r3, #15
 80065c2:	490a      	ldr	r1, [pc, #40]	; (80065ec <HAL_RCC_ClockConfig+0x1c8>)
 80065c4:	5ccb      	ldrb	r3, [r1, r3]
 80065c6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ca:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <HAL_RCC_ClockConfig+0x1cc>)
 80065cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065ce:	4b09      	ldr	r3, [pc, #36]	; (80065f4 <HAL_RCC_ClockConfig+0x1d0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fa ff5e 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	40022000 	.word	0x40022000
 80065e8:	40021000 	.word	0x40021000
 80065ec:	0800c094 	.word	0x0800c094
 80065f0:	20000004 	.word	0x20000004
 80065f4:	20000008 	.word	0x20000008

080065f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065f8:	b490      	push	{r4, r7}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80065fe:	4b29      	ldr	r3, [pc, #164]	; (80066a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006600:	1d3c      	adds	r4, r7, #4
 8006602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006608:	f240 2301 	movw	r3, #513	; 0x201
 800660c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	61fb      	str	r3, [r7, #28]
 8006612:	2300      	movs	r3, #0
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	2300      	movs	r3, #0
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006622:	4b21      	ldr	r3, [pc, #132]	; (80066a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	f003 030c 	and.w	r3, r3, #12
 800662e:	2b04      	cmp	r3, #4
 8006630:	d002      	beq.n	8006638 <HAL_RCC_GetSysClockFreq+0x40>
 8006632:	2b08      	cmp	r3, #8
 8006634:	d003      	beq.n	800663e <HAL_RCC_GetSysClockFreq+0x46>
 8006636:	e02b      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006638:	4b1c      	ldr	r3, [pc, #112]	; (80066ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800663a:	623b      	str	r3, [r7, #32]
      break;
 800663c:	e02b      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	0c9b      	lsrs	r3, r3, #18
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	3328      	adds	r3, #40	; 0x28
 8006648:	443b      	add	r3, r7
 800664a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800664e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d012      	beq.n	8006680 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800665a:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	0c5b      	lsrs	r3, r3, #17
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	3328      	adds	r3, #40	; 0x28
 8006666:	443b      	add	r3, r7
 8006668:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800666c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	4a0e      	ldr	r2, [pc, #56]	; (80066ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8006672:	fb03 f202 	mul.w	r2, r3, r2
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	fbb2 f3f3 	udiv	r3, r2, r3
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
 800667e:	e004      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	4a0b      	ldr	r2, [pc, #44]	; (80066b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006684:	fb02 f303 	mul.w	r3, r2, r3
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	623b      	str	r3, [r7, #32]
      break;
 800668e:	e002      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8006692:	623b      	str	r3, [r7, #32]
      break;
 8006694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006696:	6a3b      	ldr	r3, [r7, #32]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3728      	adds	r7, #40	; 0x28
 800669c:	46bd      	mov	sp, r7
 800669e:	bc90      	pop	{r4, r7}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	0800c038 	.word	0x0800c038
 80066a8:	40021000 	.word	0x40021000
 80066ac:	007a1200 	.word	0x007a1200
 80066b0:	003d0900 	.word	0x003d0900

080066b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066b8:	4b02      	ldr	r3, [pc, #8]	; (80066c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80066ba:	681b      	ldr	r3, [r3, #0]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr
 80066c4:	20000004 	.word	0x20000004

080066c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066cc:	f7ff fff2 	bl	80066b4 <HAL_RCC_GetHCLKFreq>
 80066d0:	4602      	mov	r2, r0
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	4903      	ldr	r1, [pc, #12]	; (80066ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80066de:	5ccb      	ldrb	r3, [r1, r3]
 80066e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40021000 	.word	0x40021000
 80066ec:	0800c0a4 	.word	0x0800c0a4

080066f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80066f8:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <RCC_Delay+0x34>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a0a      	ldr	r2, [pc, #40]	; (8006728 <RCC_Delay+0x38>)
 80066fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006702:	0a5b      	lsrs	r3, r3, #9
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	fb02 f303 	mul.w	r3, r2, r3
 800670a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800670c:	bf00      	nop
  }
  while (Delay --);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	1e5a      	subs	r2, r3, #1
 8006712:	60fa      	str	r2, [r7, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1f9      	bne.n	800670c <RCC_Delay+0x1c>
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr
 8006724:	20000004 	.word	0x20000004
 8006728:	10624dd3 	.word	0x10624dd3

0800672c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d07d      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006748:	2300      	movs	r3, #0
 800674a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800674c:	4b4f      	ldr	r3, [pc, #316]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10d      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006758:	4b4c      	ldr	r3, [pc, #304]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	4a4b      	ldr	r2, [pc, #300]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800675e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006762:	61d3      	str	r3, [r2, #28]
 8006764:	4b49      	ldr	r3, [pc, #292]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006770:	2301      	movs	r3, #1
 8006772:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006774:	4b46      	ldr	r3, [pc, #280]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d118      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006780:	4b43      	ldr	r3, [pc, #268]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a42      	ldr	r2, [pc, #264]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800678a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800678c:	f7fa fec4 	bl	8001518 <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006792:	e008      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006794:	f7fa fec0 	bl	8001518 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b64      	cmp	r3, #100	; 0x64
 80067a0:	d901      	bls.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e06d      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a6:	4b3a      	ldr	r3, [pc, #232]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067b2:	4b36      	ldr	r3, [pc, #216]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d02e      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d027      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067d0:	4b2e      	ldr	r3, [pc, #184]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067da:	4b2e      	ldr	r3, [pc, #184]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067dc:	2201      	movs	r2, #1
 80067de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067e0:	4b2c      	ldr	r3, [pc, #176]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80067e6:	4a29      	ldr	r2, [pc, #164]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d014      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f6:	f7fa fe8f 	bl	8001518 <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067fc:	e00a      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067fe:	f7fa fe8b 	bl	8001518 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	f241 3288 	movw	r2, #5000	; 0x1388
 800680c:	4293      	cmp	r3, r2
 800680e:	d901      	bls.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e036      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006814:	4b1d      	ldr	r3, [pc, #116]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0ee      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006820:	4b1a      	ldr	r3, [pc, #104]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	4917      	ldr	r1, [pc, #92]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800682e:	4313      	orrs	r3, r2
 8006830:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d105      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006838:	4b14      	ldr	r3, [pc, #80]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	4a13      	ldr	r2, [pc, #76]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800683e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006842:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d008      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006850:	4b0e      	ldr	r3, [pc, #56]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	490b      	ldr	r1, [pc, #44]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685e:	4313      	orrs	r3, r2
 8006860:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b00      	cmp	r3, #0
 800686c:	d008      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800686e:	4b07      	ldr	r3, [pc, #28]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	4904      	ldr	r1, [pc, #16]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800687c:	4313      	orrs	r3, r2
 800687e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40021000 	.word	0x40021000
 8006890:	40007000 	.word	0x40007000
 8006894:	42420440 	.word	0x42420440

08006898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e041      	b.n	800692e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fa fce2 	bl	8001288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4619      	mov	r1, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	f000 f8f2 	bl	8006ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <HAL_TIM_ConfigClockSource+0x18>
 800694a:	2302      	movs	r3, #2
 800694c:	e0b3      	b.n	8006ab6 <HAL_TIM_ConfigClockSource+0x180>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2202      	movs	r2, #2
 800695a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800696c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006974:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006986:	d03e      	beq.n	8006a06 <HAL_TIM_ConfigClockSource+0xd0>
 8006988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698c:	f200 8087 	bhi.w	8006a9e <HAL_TIM_ConfigClockSource+0x168>
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006994:	f000 8085 	beq.w	8006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 8006998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699c:	d87f      	bhi.n	8006a9e <HAL_TIM_ConfigClockSource+0x168>
 800699e:	2b70      	cmp	r3, #112	; 0x70
 80069a0:	d01a      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0xa2>
 80069a2:	2b70      	cmp	r3, #112	; 0x70
 80069a4:	d87b      	bhi.n	8006a9e <HAL_TIM_ConfigClockSource+0x168>
 80069a6:	2b60      	cmp	r3, #96	; 0x60
 80069a8:	d050      	beq.n	8006a4c <HAL_TIM_ConfigClockSource+0x116>
 80069aa:	2b60      	cmp	r3, #96	; 0x60
 80069ac:	d877      	bhi.n	8006a9e <HAL_TIM_ConfigClockSource+0x168>
 80069ae:	2b50      	cmp	r3, #80	; 0x50
 80069b0:	d03c      	beq.n	8006a2c <HAL_TIM_ConfigClockSource+0xf6>
 80069b2:	2b50      	cmp	r3, #80	; 0x50
 80069b4:	d873      	bhi.n	8006a9e <HAL_TIM_ConfigClockSource+0x168>
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d058      	beq.n	8006a6c <HAL_TIM_ConfigClockSource+0x136>
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d86f      	bhi.n	8006a9e <HAL_TIM_ConfigClockSource+0x168>
 80069be:	2b30      	cmp	r3, #48	; 0x30
 80069c0:	d064      	beq.n	8006a8c <HAL_TIM_ConfigClockSource+0x156>
 80069c2:	2b30      	cmp	r3, #48	; 0x30
 80069c4:	d86b      	bhi.n	8006a9e <HAL_TIM_ConfigClockSource+0x168>
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d060      	beq.n	8006a8c <HAL_TIM_ConfigClockSource+0x156>
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d867      	bhi.n	8006a9e <HAL_TIM_ConfigClockSource+0x168>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d05c      	beq.n	8006a8c <HAL_TIM_ConfigClockSource+0x156>
 80069d2:	2b10      	cmp	r3, #16
 80069d4:	d05a      	beq.n	8006a8c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80069d6:	e062      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	6899      	ldr	r1, [r3, #8]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f000 f943 	bl	8006c72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	609a      	str	r2, [r3, #8]
      break;
 8006a04:	e04e      	b.n	8006aa4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6899      	ldr	r1, [r3, #8]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f000 f92c 	bl	8006c72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a28:	609a      	str	r2, [r3, #8]
      break;
 8006a2a:	e03b      	b.n	8006aa4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6818      	ldr	r0, [r3, #0]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	6859      	ldr	r1, [r3, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f000 f8a3 	bl	8006b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2150      	movs	r1, #80	; 0x50
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 f8fa 	bl	8006c3e <TIM_ITRx_SetConfig>
      break;
 8006a4a:	e02b      	b.n	8006aa4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6818      	ldr	r0, [r3, #0]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	6859      	ldr	r1, [r3, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f000 f8c1 	bl	8006be0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2160      	movs	r1, #96	; 0x60
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 f8ea 	bl	8006c3e <TIM_ITRx_SetConfig>
      break;
 8006a6a:	e01b      	b.n	8006aa4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	6859      	ldr	r1, [r3, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f000 f883 	bl	8006b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2140      	movs	r1, #64	; 0x40
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 f8da 	bl	8006c3e <TIM_ITRx_SetConfig>
      break;
 8006a8a:	e00b      	b.n	8006aa4 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4619      	mov	r1, r3
 8006a96:	4610      	mov	r0, r2
 8006a98:	f000 f8d1 	bl	8006c3e <TIM_ITRx_SetConfig>
        break;
 8006a9c:	e002      	b.n	8006aa4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a9e:	bf00      	nop
 8006aa0:	e000      	b.n	8006aa4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006aa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a29      	ldr	r2, [pc, #164]	; (8006b78 <TIM_Base_SetConfig+0xb8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00b      	beq.n	8006af0 <TIM_Base_SetConfig+0x30>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ade:	d007      	beq.n	8006af0 <TIM_Base_SetConfig+0x30>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a26      	ldr	r2, [pc, #152]	; (8006b7c <TIM_Base_SetConfig+0xbc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_Base_SetConfig+0x30>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a25      	ldr	r2, [pc, #148]	; (8006b80 <TIM_Base_SetConfig+0xc0>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d108      	bne.n	8006b02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a1c      	ldr	r2, [pc, #112]	; (8006b78 <TIM_Base_SetConfig+0xb8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00b      	beq.n	8006b22 <TIM_Base_SetConfig+0x62>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b10:	d007      	beq.n	8006b22 <TIM_Base_SetConfig+0x62>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a19      	ldr	r2, [pc, #100]	; (8006b7c <TIM_Base_SetConfig+0xbc>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d003      	beq.n	8006b22 <TIM_Base_SetConfig+0x62>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a18      	ldr	r2, [pc, #96]	; (8006b80 <TIM_Base_SetConfig+0xc0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d108      	bne.n	8006b34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a07      	ldr	r2, [pc, #28]	; (8006b78 <TIM_Base_SetConfig+0xb8>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d103      	bne.n	8006b68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	615a      	str	r2, [r3, #20]
}
 8006b6e:	bf00      	nop
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc80      	pop	{r7}
 8006b76:	4770      	bx	lr
 8006b78:	40012c00 	.word	0x40012c00
 8006b7c:	40000400 	.word	0x40000400
 8006b80:	40000800 	.word	0x40000800

08006b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	f023 0201 	bic.w	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f023 030a 	bic.w	r3, r3, #10
 8006bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	621a      	str	r2, [r3, #32]
}
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr

08006be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	f023 0210 	bic.w	r2, r3, #16
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	031b      	lsls	r3, r3, #12
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	621a      	str	r2, [r3, #32]
}
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr

08006c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f043 0307 	orr.w	r3, r3, #7
 8006c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	609a      	str	r2, [r3, #8]
}
 8006c68:	bf00      	nop
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr

08006c72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b087      	sub	sp, #28
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	607a      	str	r2, [r7, #4]
 8006c7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	021a      	lsls	r2, r3, #8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	431a      	orrs	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	609a      	str	r2, [r3, #8]
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e046      	b.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a16      	ldr	r2, [pc, #88]	; (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00e      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d14:	d009      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a12      	ldr	r2, [pc, #72]	; (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a10      	ldr	r2, [pc, #64]	; (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d10c      	bne.n	8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr
 8006d60:	40012c00 	.word	0x40012c00
 8006d64:	40000400 	.word	0x40000400
 8006d68:	40000800 	.word	0x40000800

08006d6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	f107 0014 	add.w	r0, r7, #20
 8006d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	b004      	add	sp, #16
 8006d8a:	4770      	bx	lr

08006d8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d9c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006da0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr

08006db8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006dc0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006dc4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	43db      	mvns	r3, r3
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr

08006e04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006e04:	b084      	sub	sp, #16
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	f107 0014 	add.w	r0, r7, #20
 8006e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	b004      	add	sp, #16
 8006e42:	4770      	bx	lr

08006e44 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b09b      	sub	sp, #108	; 0x6c
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	78db      	ldrb	r3, [r3, #3]
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d81f      	bhi.n	8006eb6 <USB_ActivateEndpoint+0x72>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <USB_ActivateEndpoint+0x38>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006e8d 	.word	0x08006e8d
 8006e80:	08006ea9 	.word	0x08006ea9
 8006e84:	08006ebf 	.word	0x08006ebf
 8006e88:	08006e9b 	.word	0x08006e9b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006e8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006e90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e94:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006e98:	e012      	b.n	8006ec0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006e9a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006e9e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006ea2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006ea6:	e00b      	b.n	8006ec0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ea8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006eac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006eb0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006eb4:	e004      	b.n	8006ec0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006ebc:	e000      	b.n	8006ec0 <USB_ActivateEndpoint+0x7c>
      break;
 8006ebe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	441a      	add	r2, r3
 8006eca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	4313      	orrs	r3, r2
 8006f02:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	441a      	add	r2, r3
 8006f10:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	7b1b      	ldrb	r3, [r3, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 8149 	bne.w	80071c4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 8084 	beq.w	8007044 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	011a      	lsls	r2, r3, #4
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	88db      	ldrh	r3, [r3, #6]
 8006f64:	085b      	lsrs	r3, r3, #1
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	81fb      	strh	r3, [r7, #14]
 8006f7e:	89fb      	ldrh	r3, [r7, #14]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d01b      	beq.n	8006fc0 <USB_ActivateEndpoint+0x17c>
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9e:	81bb      	strh	r3, [r7, #12]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	441a      	add	r2, r3
 8006faa:	89bb      	ldrh	r3, [r7, #12]
 8006fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	78db      	ldrb	r3, [r3, #3]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d020      	beq.n	800700a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fde:	813b      	strh	r3, [r7, #8]
 8006fe0:	893b      	ldrh	r3, [r7, #8]
 8006fe2:	f083 0320 	eor.w	r3, r3, #32
 8006fe6:	813b      	strh	r3, [r7, #8]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	441a      	add	r2, r3
 8006ff2:	893b      	ldrh	r3, [r7, #8]
 8006ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007004:	b29b      	uxth	r3, r3
 8007006:	8013      	strh	r3, [r2, #0]
 8007008:	e27f      	b.n	800750a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007020:	817b      	strh	r3, [r7, #10]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	441a      	add	r2, r3
 800702c:	897b      	ldrh	r3, [r7, #10]
 800702e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800703a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703e:	b29b      	uxth	r3, r3
 8007040:	8013      	strh	r3, [r2, #0]
 8007042:	e262      	b.n	800750a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800704e:	b29b      	uxth	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	4413      	add	r3, r2
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	011a      	lsls	r2, r3, #4
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	4413      	add	r3, r2
 8007062:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	88db      	ldrh	r3, [r3, #6]
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	b29b      	uxth	r3, r3
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007082:	b29b      	uxth	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	4413      	add	r3, r2
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	011a      	lsls	r2, r3, #4
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	4413      	add	r3, r2
 8007096:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800709a:	623b      	str	r3, [r7, #32]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d112      	bne.n	80070ca <USB_ActivateEndpoint+0x286>
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	801a      	strh	r2, [r3, #0]
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	801a      	strh	r2, [r3, #0]
 80070c8:	e02f      	b.n	800712a <USB_ActivateEndpoint+0x2e6>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b3e      	cmp	r3, #62	; 0x3e
 80070d0:	d813      	bhi.n	80070fa <USB_ActivateEndpoint+0x2b6>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	085b      	lsrs	r3, r3, #1
 80070d8:	663b      	str	r3, [r7, #96]	; 0x60
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <USB_ActivateEndpoint+0x2a8>
 80070e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070e8:	3301      	adds	r3, #1
 80070ea:	663b      	str	r3, [r7, #96]	; 0x60
 80070ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	029b      	lsls	r3, r3, #10
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	801a      	strh	r2, [r3, #0]
 80070f8:	e017      	b.n	800712a <USB_ActivateEndpoint+0x2e6>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	663b      	str	r3, [r7, #96]	; 0x60
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	2b00      	cmp	r3, #0
 800710c:	d102      	bne.n	8007114 <USB_ActivateEndpoint+0x2d0>
 800710e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007110:	3b01      	subs	r3, #1
 8007112:	663b      	str	r3, [r7, #96]	; 0x60
 8007114:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007116:	b29b      	uxth	r3, r3
 8007118:	029b      	lsls	r3, r3, #10
 800711a:	b29b      	uxth	r3, r3
 800711c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007124:	b29a      	uxth	r2, r3
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	83fb      	strh	r3, [r7, #30]
 8007138:	8bfb      	ldrh	r3, [r7, #30]
 800713a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d01b      	beq.n	800717a <USB_ActivateEndpoint+0x336>
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007158:	83bb      	strh	r3, [r7, #28]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	441a      	add	r2, r3
 8007164:	8bbb      	ldrh	r3, [r7, #28]
 8007166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800716a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800716e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007176:	b29b      	uxth	r3, r3
 8007178:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800718c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007190:	837b      	strh	r3, [r7, #26]
 8007192:	8b7b      	ldrh	r3, [r7, #26]
 8007194:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007198:	837b      	strh	r3, [r7, #26]
 800719a:	8b7b      	ldrh	r3, [r7, #26]
 800719c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071a0:	837b      	strh	r3, [r7, #26]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	441a      	add	r2, r3
 80071ac:	8b7b      	ldrh	r3, [r7, #26]
 80071ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071be:	b29b      	uxth	r3, r3
 80071c0:	8013      	strh	r3, [r2, #0]
 80071c2:	e1a2      	b.n	800750a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	441a      	add	r2, r3
 80071e8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80071ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80071f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	65bb      	str	r3, [r7, #88]	; 0x58
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800720a:	b29b      	uxth	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007210:	4413      	add	r3, r2
 8007212:	65bb      	str	r3, [r7, #88]	; 0x58
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	011a      	lsls	r2, r3, #4
 800721a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800721c:	4413      	add	r3, r2
 800721e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007222:	657b      	str	r3, [r7, #84]	; 0x54
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	891b      	ldrh	r3, [r3, #8]
 8007228:	085b      	lsrs	r3, r3, #1
 800722a:	b29b      	uxth	r3, r3
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	b29a      	uxth	r2, r3
 8007230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007232:	801a      	strh	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	653b      	str	r3, [r7, #80]	; 0x50
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007244:	4413      	add	r3, r2
 8007246:	653b      	str	r3, [r7, #80]	; 0x50
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	011a      	lsls	r2, r3, #4
 800724e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007250:	4413      	add	r3, r2
 8007252:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	895b      	ldrh	r3, [r3, #10]
 800725c:	085b      	lsrs	r3, r3, #1
 800725e:	b29b      	uxth	r3, r3
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	b29a      	uxth	r2, r3
 8007264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007266:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	785b      	ldrb	r3, [r3, #1]
 800726c:	2b00      	cmp	r3, #0
 800726e:	f040 8091 	bne.w	8007394 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007280:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01b      	beq.n	80072c2 <USB_ActivateEndpoint+0x47e>
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	b29b      	uxth	r3, r3
 8007298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800729c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	441a      	add	r2, r3
 80072ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80072ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072be:	b29b      	uxth	r3, r3
 80072c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	873b      	strh	r3, [r7, #56]	; 0x38
 80072d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80072d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d01b      	beq.n	8007312 <USB_ActivateEndpoint+0x4ce>
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	441a      	add	r2, r3
 80072fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80072fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800730e:	b29b      	uxth	r3, r3
 8007310:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007328:	86bb      	strh	r3, [r7, #52]	; 0x34
 800732a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800732c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007330:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007332:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007334:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007338:	86bb      	strh	r3, [r7, #52]	; 0x34
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	441a      	add	r2, r3
 8007344:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800734a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800734e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007356:	b29b      	uxth	r3, r3
 8007358:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007370:	867b      	strh	r3, [r7, #50]	; 0x32
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	441a      	add	r2, r3
 800737c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800737e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800738a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738e:	b29b      	uxth	r3, r3
 8007390:	8013      	strh	r3, [r2, #0]
 8007392:	e0ba      	b.n	800750a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80073a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80073a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01d      	beq.n	80073ec <USB_ActivateEndpoint+0x5a8>
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	441a      	add	r2, r3
 80073d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80073d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80073fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01d      	beq.n	8007444 <USB_ActivateEndpoint+0x600>
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b29b      	uxth	r3, r3
 8007416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800741a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	441a      	add	r2, r3
 800742c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800743c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007440:	b29b      	uxth	r3, r3
 8007442:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	78db      	ldrb	r3, [r3, #3]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d024      	beq.n	8007496 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800745e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007462:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007466:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800746a:	f083 0320 	eor.w	r3, r3, #32
 800746e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	441a      	add	r2, r3
 800747c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800748c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007490:	b29b      	uxth	r3, r3
 8007492:	8013      	strh	r3, [r2, #0]
 8007494:	e01d      	b.n	80074d2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	441a      	add	r2, r3
 80074ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80074be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	441a      	add	r2, r3
 80074f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80074f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007506:	b29b      	uxth	r3, r3
 8007508:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800750a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800750e:	4618      	mov	r0, r3
 8007510:	376c      	adds	r7, #108	; 0x6c
 8007512:	46bd      	mov	sp, r7
 8007514:	bc80      	pop	{r7}
 8007516:	4770      	bx	lr

08007518 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007518:	b480      	push	{r7}
 800751a:	b08d      	sub	sp, #52	; 0x34
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	7b1b      	ldrb	r3, [r3, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	f040 808e 	bne.w	8007648 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	785b      	ldrb	r3, [r3, #1]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d044      	beq.n	80075be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	81bb      	strh	r3, [r7, #12]
 8007542:	89bb      	ldrh	r3, [r7, #12]
 8007544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01b      	beq.n	8007584 <USB_DeactivateEndpoint+0x6c>
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29b      	uxth	r3, r3
 800755a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007562:	817b      	strh	r3, [r7, #10]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	441a      	add	r2, r3
 800756e:	897b      	ldrh	r3, [r7, #10]
 8007570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800757c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007580:	b29b      	uxth	r3, r3
 8007582:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	b29b      	uxth	r3, r3
 8007592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800759a:	813b      	strh	r3, [r7, #8]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	441a      	add	r2, r3
 80075a6:	893b      	ldrh	r3, [r7, #8]
 80075a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	8013      	strh	r3, [r2, #0]
 80075bc:	e192      	b.n	80078e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	827b      	strh	r3, [r7, #18]
 80075cc:	8a7b      	ldrh	r3, [r7, #18]
 80075ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01b      	beq.n	800760e <USB_DeactivateEndpoint+0xf6>
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ec:	823b      	strh	r3, [r7, #16]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	441a      	add	r2, r3
 80075f8:	8a3b      	ldrh	r3, [r7, #16]
 80075fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760a:	b29b      	uxth	r3, r3
 800760c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007624:	81fb      	strh	r3, [r7, #14]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	441a      	add	r2, r3
 8007630:	89fb      	ldrh	r3, [r7, #14]
 8007632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007642:	b29b      	uxth	r3, r3
 8007644:	8013      	strh	r3, [r2, #0]
 8007646:	e14d      	b.n	80078e4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f040 80a5 	bne.w	800779c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	843b      	strh	r3, [r7, #32]
 8007660:	8c3b      	ldrh	r3, [r7, #32]
 8007662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d01b      	beq.n	80076a2 <USB_DeactivateEndpoint+0x18a>
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	b29b      	uxth	r3, r3
 8007678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800767c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007680:	83fb      	strh	r3, [r7, #30]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	441a      	add	r2, r3
 800768c:	8bfb      	ldrh	r3, [r7, #30]
 800768e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800769a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769e:	b29b      	uxth	r3, r3
 80076a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	83bb      	strh	r3, [r7, #28]
 80076b0:	8bbb      	ldrh	r3, [r7, #28]
 80076b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01b      	beq.n	80076f2 <USB_DeactivateEndpoint+0x1da>
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d0:	837b      	strh	r3, [r7, #26]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	441a      	add	r2, r3
 80076dc:	8b7b      	ldrh	r3, [r7, #26]
 80076de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007708:	833b      	strh	r3, [r7, #24]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	441a      	add	r2, r3
 8007714:	8b3b      	ldrh	r3, [r7, #24]
 8007716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007722:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007726:	b29b      	uxth	r3, r3
 8007728:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	b29b      	uxth	r3, r3
 8007738:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800773c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007740:	82fb      	strh	r3, [r7, #22]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	441a      	add	r2, r3
 800774c:	8afb      	ldrh	r3, [r7, #22]
 800774e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800775a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775e:	b29b      	uxth	r3, r3
 8007760:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	b29b      	uxth	r3, r3
 8007770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007778:	82bb      	strh	r3, [r7, #20]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	441a      	add	r2, r3
 8007784:	8abb      	ldrh	r3, [r7, #20]
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]
 800779a:	e0a3      	b.n	80078e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80077aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d01b      	beq.n	80077ec <USB_DeactivateEndpoint+0x2d4>
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	441a      	add	r2, r3
 80077d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80077d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80077fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80077fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01b      	beq.n	800783c <USB_DeactivateEndpoint+0x324>
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781a:	853b      	strh	r3, [r7, #40]	; 0x28
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	441a      	add	r2, r3
 8007826:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800782c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007834:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007838:	b29b      	uxth	r3, r3
 800783a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	b29b      	uxth	r3, r3
 800784a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007852:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	441a      	add	r2, r3
 800785e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800786c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007870:	b29b      	uxth	r3, r3
 8007872:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800788a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	441a      	add	r2, r3
 8007896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800789c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	441a      	add	r2, r3
 80078ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80078d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3734      	adds	r7, #52	; 0x34
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr

080078f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b0cc      	sub	sp, #304	; 0x130
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078fe:	6018      	str	r0, [r3, #0]
 8007900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007908:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800790a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	785b      	ldrb	r3, [r3, #1]
 8007916:	2b01      	cmp	r3, #1
 8007918:	f041 817d 	bne.w	8008c16 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800791c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	429a      	cmp	r2, r3
 8007936:	d908      	bls.n	800794a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007948:	e007      	b.n	800795a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800794a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800795a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	7b1b      	ldrb	r3, [r3, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d152      	bne.n	8007a10 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800796a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6959      	ldr	r1, [r3, #20]
 8007976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	88da      	ldrh	r2, [r3, #6]
 8007982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007986:	b29b      	uxth	r3, r3
 8007988:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800798c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007990:	6800      	ldr	r0, [r0, #0]
 8007992:	f001 ff23 	bl	80097dc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800799e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079a2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80079a6:	6812      	ldr	r2, [r2, #0]
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	4619      	mov	r1, r3
 80079bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80079c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079c8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80079cc:	6812      	ldr	r2, [r2, #0]
 80079ce:	440a      	add	r2, r1
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	011a      	lsls	r2, r3, #4
 80079e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4413      	add	r3, r2
 80079ec:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80079f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a04:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	801a      	strh	r2, [r3, #0]
 8007a0c:	f001 b8b5 	b.w	8008b7a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	78db      	ldrb	r3, [r3, #3]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	f040 84c6 	bne.w	80083ae <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6a1a      	ldr	r2, [r3, #32]
 8007a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	f240 8443 	bls.w	80082c6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a66:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	441a      	add	r2, r3
 8007a84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a90:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6a1a      	ldr	r2, [r3, #32]
 8007aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aac:	1ad2      	subs	r2, r2, r3
 8007aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 823e 	beq.w	8007f5e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007aea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007aee:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f040 809a 	bne.w	8007c3c <USB_EPStartXfer+0x34c>
 8007b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b14:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007b18:	6812      	ldr	r2, [r2, #0]
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b3a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007b3e:	6812      	ldr	r2, [r2, #0]
 8007b40:	440a      	add	r2, r1
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	011a      	lsls	r2, r3, #4
 8007b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d122      	bne.n	8007bba <USB_EPStartXfer+0x2ca>
 8007b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	801a      	strh	r2, [r3, #0]
 8007b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	801a      	strh	r2, [r3, #0]
 8007bb8:	e079      	b.n	8007cae <USB_EPStartXfer+0x3be>
 8007bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bbe:	2b3e      	cmp	r3, #62	; 0x3e
 8007bc0:	d81b      	bhi.n	8007bfa <USB_EPStartXfer+0x30a>
 8007bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc6:	085b      	lsrs	r3, r3, #1
 8007bc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d004      	beq.n	8007be2 <USB_EPStartXfer+0x2f2>
 8007bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bdc:	3301      	adds	r3, #1
 8007bde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007be2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	029b      	lsls	r3, r3, #10
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	801a      	strh	r2, [r3, #0]
 8007bf8:	e059      	b.n	8007cae <USB_EPStartXfer+0x3be>
 8007bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c08:	f003 031f 	and.w	r3, r3, #31
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d104      	bne.n	8007c1a <USB_EPStartXfer+0x32a>
 8007c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c14:	3b01      	subs	r3, #1
 8007c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	029b      	lsls	r3, r3, #10
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	801a      	strh	r2, [r3, #0]
 8007c3a:	e038      	b.n	8007cae <USB_EPStartXfer+0x3be>
 8007c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	785b      	ldrb	r3, [r3, #1]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d130      	bne.n	8007cae <USB_EPStartXfer+0x3be>
 8007c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c62:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007c66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c6a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007c6e:	6812      	ldr	r2, [r2, #0]
 8007c70:	440a      	add	r2, r1
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	011a      	lsls	r2, r3, #4
 8007c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c86:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	895b      	ldrh	r3, [r3, #10]
 8007cba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6959      	ldr	r1, [r3, #20]
 8007cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007cd4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007cd8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007cdc:	6800      	ldr	r0, [r0, #0]
 8007cde:	f001 fd7d 	bl	80097dc <USB_WritePMA>
            ep->xfer_buff += len;
 8007ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	695a      	ldr	r2, [r3, #20]
 8007cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf2:	441a      	add	r2, r3
 8007cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a1a      	ldr	r2, [r3, #32]
 8007d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d90f      	bls.n	8007d3c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6a1a      	ldr	r2, [r3, #32]
 8007d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d2c:	1ad2      	subs	r2, r2, r3
 8007d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	621a      	str	r2, [r3, #32]
 8007d3a:	e00e      	b.n	8007d5a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2200      	movs	r2, #0
 8007d58:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f040 809a 	bne.w	8007ea0 <USB_EPStartXfer+0x5b0>
 8007d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007d74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d78:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007d7c:	6812      	ldr	r2, [r2, #0]
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	4619      	mov	r1, r3
 8007d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d96:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007d9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d9e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007da2:	6812      	ldr	r2, [r2, #0]
 8007da4:	440a      	add	r2, r1
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	011a      	lsls	r2, r3, #4
 8007db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d122      	bne.n	8007e1e <USB_EPStartXfer+0x52e>
 8007dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ddc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	801a      	strh	r2, [r3, #0]
 8007df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dfc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	801a      	strh	r2, [r3, #0]
 8007e1c:	e083      	b.n	8007f26 <USB_EPStartXfer+0x636>
 8007e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e22:	2b3e      	cmp	r3, #62	; 0x3e
 8007e24:	d81b      	bhi.n	8007e5e <USB_EPStartXfer+0x56e>
 8007e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e2a:	085b      	lsrs	r3, r3, #1
 8007e2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d004      	beq.n	8007e46 <USB_EPStartXfer+0x556>
 8007e3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007e40:	3301      	adds	r3, #1
 8007e42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007e46:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	029b      	lsls	r3, r3, #10
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e54:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	801a      	strh	r2, [r3, #0]
 8007e5c:	e063      	b.n	8007f26 <USB_EPStartXfer+0x636>
 8007e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6c:	f003 031f 	and.w	r3, r3, #31
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <USB_EPStartXfer+0x58e>
 8007e74:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007e7e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	029b      	lsls	r3, r3, #10
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	801a      	strh	r2, [r3, #0]
 8007e9e:	e042      	b.n	8007f26 <USB_EPStartXfer+0x636>
 8007ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d13a      	bne.n	8007f26 <USB_EPStartXfer+0x636>
 8007eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007eb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ebc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007ec0:	6812      	ldr	r2, [r2, #0]
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007ede:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ee2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	440a      	add	r2, r1
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	011a      	lsls	r2, r3, #4
 8007efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4413      	add	r3, r2
 8007f06:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	891b      	ldrh	r3, [r3, #8]
 8007f32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6959      	ldr	r1, [r3, #20]
 8007f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f4c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f50:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f54:	6800      	ldr	r0, [r0, #0]
 8007f56:	f001 fc41 	bl	80097dc <USB_WritePMA>
 8007f5a:	f000 be0e 	b.w	8008b7a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	785b      	ldrb	r3, [r3, #1]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d16d      	bne.n	800804a <USB_EPStartXfer+0x75a>
 8007f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f8e:	4413      	add	r3, r2
 8007f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	011a      	lsls	r2, r3, #4
 8007fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8007faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d112      	bne.n	8007fd8 <USB_EPStartXfer+0x6e8>
 8007fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fc0:	801a      	strh	r2, [r3, #0]
 8007fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fd4:	801a      	strh	r2, [r3, #0]
 8007fd6:	e063      	b.n	80080a0 <USB_EPStartXfer+0x7b0>
 8007fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8007fde:	d817      	bhi.n	8008010 <USB_EPStartXfer+0x720>
 8007fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe4:	085b      	lsrs	r3, r3, #1
 8007fe6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d004      	beq.n	8008000 <USB_EPStartXfer+0x710>
 8007ff6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008000:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008004:	b29b      	uxth	r3, r3
 8008006:	029b      	lsls	r3, r3, #10
 8008008:	b29a      	uxth	r2, r3
 800800a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800800c:	801a      	strh	r2, [r3, #0]
 800800e:	e047      	b.n	80080a0 <USB_EPStartXfer+0x7b0>
 8008010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800801a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801e:	f003 031f 	and.w	r3, r3, #31
 8008022:	2b00      	cmp	r3, #0
 8008024:	d104      	bne.n	8008030 <USB_EPStartXfer+0x740>
 8008026:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800802a:	3b01      	subs	r3, #1
 800802c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008030:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008034:	b29b      	uxth	r3, r3
 8008036:	029b      	lsls	r3, r3, #10
 8008038:	b29b      	uxth	r3, r3
 800803a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008042:	b29a      	uxth	r2, r3
 8008044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008046:	801a      	strh	r2, [r3, #0]
 8008048:	e02a      	b.n	80080a0 <USB_EPStartXfer+0x7b0>
 800804a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	785b      	ldrb	r3, [r3, #1]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d122      	bne.n	80080a0 <USB_EPStartXfer+0x7b0>
 800805a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	653b      	str	r3, [r7, #80]	; 0x50
 8008066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008074:	b29b      	uxth	r3, r3
 8008076:	461a      	mov	r2, r3
 8008078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800807a:	4413      	add	r3, r2
 800807c:	653b      	str	r3, [r7, #80]	; 0x50
 800807e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	011a      	lsls	r2, r3, #4
 800808c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800808e:	4413      	add	r3, r2
 8008090:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008094:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800809a:	b29a      	uxth	r2, r3
 800809c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800809e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80080a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	891b      	ldrh	r3, [r3, #8]
 80080ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6959      	ldr	r1, [r3, #20]
 80080bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80080c6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80080ca:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80080ce:	6800      	ldr	r0, [r0, #0]
 80080d0:	f001 fb84 	bl	80097dc <USB_WritePMA>
            ep->xfer_buff += len;
 80080d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	695a      	ldr	r2, [r3, #20]
 80080e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e4:	441a      	add	r2, r3
 80080e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80080f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6a1a      	ldr	r2, [r3, #32]
 80080fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	429a      	cmp	r2, r3
 800810c:	d90f      	bls.n	800812e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800810e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6a1a      	ldr	r2, [r3, #32]
 800811a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800811e:	1ad2      	subs	r2, r2, r3
 8008120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	621a      	str	r2, [r3, #32]
 800812c:	e00e      	b.n	800814c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800812e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800813e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2200      	movs	r2, #0
 800814a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800814c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008150:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	643b      	str	r3, [r7, #64]	; 0x40
 8008158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	785b      	ldrb	r3, [r3, #1]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d16d      	bne.n	8008244 <USB_EPStartXfer+0x954>
 8008168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	63bb      	str	r3, [r7, #56]	; 0x38
 8008174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008178:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008182:	b29b      	uxth	r3, r3
 8008184:	461a      	mov	r2, r3
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	4413      	add	r3, r2
 800818a:	63bb      	str	r3, [r7, #56]	; 0x38
 800818c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	011a      	lsls	r2, r3, #4
 800819a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819c:	4413      	add	r3, r2
 800819e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081a2:	637b      	str	r3, [r7, #52]	; 0x34
 80081a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d112      	bne.n	80081d2 <USB_EPStartXfer+0x8e2>
 80081ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ba:	801a      	strh	r2, [r3, #0]
 80081bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ce:	801a      	strh	r2, [r3, #0]
 80081d0:	e05d      	b.n	800828e <USB_EPStartXfer+0x99e>
 80081d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081d6:	2b3e      	cmp	r3, #62	; 0x3e
 80081d8:	d817      	bhi.n	800820a <USB_EPStartXfer+0x91a>
 80081da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081de:	085b      	lsrs	r3, r3, #1
 80081e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80081e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d004      	beq.n	80081fa <USB_EPStartXfer+0x90a>
 80081f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80081f4:	3301      	adds	r3, #1
 80081f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80081fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80081fe:	b29b      	uxth	r3, r3
 8008200:	029b      	lsls	r3, r3, #10
 8008202:	b29a      	uxth	r2, r3
 8008204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008206:	801a      	strh	r2, [r3, #0]
 8008208:	e041      	b.n	800828e <USB_EPStartXfer+0x99e>
 800820a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800820e:	095b      	lsrs	r3, r3, #5
 8008210:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008218:	f003 031f 	and.w	r3, r3, #31
 800821c:	2b00      	cmp	r3, #0
 800821e:	d104      	bne.n	800822a <USB_EPStartXfer+0x93a>
 8008220:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008224:	3b01      	subs	r3, #1
 8008226:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800822a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800822e:	b29b      	uxth	r3, r3
 8008230:	029b      	lsls	r3, r3, #10
 8008232:	b29b      	uxth	r3, r3
 8008234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800823c:	b29a      	uxth	r2, r3
 800823e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008240:	801a      	strh	r2, [r3, #0]
 8008242:	e024      	b.n	800828e <USB_EPStartXfer+0x99e>
 8008244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	785b      	ldrb	r3, [r3, #1]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d11c      	bne.n	800828e <USB_EPStartXfer+0x99e>
 8008254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008258:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008262:	b29b      	uxth	r3, r3
 8008264:	461a      	mov	r2, r3
 8008266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008268:	4413      	add	r3, r2
 800826a:	643b      	str	r3, [r7, #64]	; 0x40
 800826c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	011a      	lsls	r2, r3, #4
 800827a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827c:	4413      	add	r3, r2
 800827e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008288:	b29a      	uxth	r2, r3
 800828a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800828e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	895b      	ldrh	r3, [r3, #10]
 800829a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800829e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6959      	ldr	r1, [r3, #20]
 80082aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80082b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80082b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80082bc:	6800      	ldr	r0, [r0, #0]
 80082be:	f001 fa8d 	bl	80097dc <USB_WritePMA>
 80082c2:	f000 bc5a 	b.w	8008b7a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80082c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80082d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80082f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008304:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800830e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	441a      	add	r2, r3
 800831a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800831e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800832a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800832e:	b29b      	uxth	r3, r3
 8008330:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008336:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800833e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008342:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800834c:	b29b      	uxth	r3, r3
 800834e:	461a      	mov	r2, r3
 8008350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008352:	4413      	add	r3, r2
 8008354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800835a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	011a      	lsls	r2, r3, #4
 8008364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008366:	4413      	add	r3, r2
 8008368:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800836c:	65bb      	str	r3, [r7, #88]	; 0x58
 800836e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008372:	b29a      	uxth	r2, r3
 8008374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008376:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	891b      	ldrh	r3, [r3, #8]
 8008384:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800838c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6959      	ldr	r1, [r3, #20]
 8008394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008398:	b29b      	uxth	r3, r3
 800839a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800839e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80083a2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80083a6:	6800      	ldr	r0, [r0, #0]
 80083a8:	f001 fa18 	bl	80097dc <USB_WritePMA>
 80083ac:	e3e5      	b.n	8008b7a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80083ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80083d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	441a      	add	r2, r3
 80083f2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80083f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008406:	b29b      	uxth	r3, r3
 8008408:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800840a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800840e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6a1a      	ldr	r2, [r3, #32]
 8008416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800841a:	1ad2      	subs	r2, r2, r3
 800841c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 81bc 	beq.w	80087c8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008454:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800845e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d16d      	bne.n	800854a <USB_EPStartXfer+0xc5a>
 800846e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008472:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	67bb      	str	r3, [r7, #120]	; 0x78
 800847a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008488:	b29b      	uxth	r3, r3
 800848a:	461a      	mov	r2, r3
 800848c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800848e:	4413      	add	r3, r2
 8008490:	67bb      	str	r3, [r7, #120]	; 0x78
 8008492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	011a      	lsls	r2, r3, #4
 80084a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084a2:	4413      	add	r3, r2
 80084a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084a8:	677b      	str	r3, [r7, #116]	; 0x74
 80084aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d112      	bne.n	80084d8 <USB_EPStartXfer+0xbe8>
 80084b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084bc:	b29a      	uxth	r2, r3
 80084be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084c0:	801a      	strh	r2, [r3, #0]
 80084c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084d4:	801a      	strh	r2, [r3, #0]
 80084d6:	e060      	b.n	800859a <USB_EPStartXfer+0xcaa>
 80084d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084dc:	2b3e      	cmp	r3, #62	; 0x3e
 80084de:	d817      	bhi.n	8008510 <USB_EPStartXfer+0xc20>
 80084e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e4:	085b      	lsrs	r3, r3, #1
 80084e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80084ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d004      	beq.n	8008500 <USB_EPStartXfer+0xc10>
 80084f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80084fa:	3301      	adds	r3, #1
 80084fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008500:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008504:	b29b      	uxth	r3, r3
 8008506:	029b      	lsls	r3, r3, #10
 8008508:	b29a      	uxth	r2, r3
 800850a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800850c:	801a      	strh	r2, [r3, #0]
 800850e:	e044      	b.n	800859a <USB_EPStartXfer+0xcaa>
 8008510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008514:	095b      	lsrs	r3, r3, #5
 8008516:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800851a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800851e:	f003 031f 	and.w	r3, r3, #31
 8008522:	2b00      	cmp	r3, #0
 8008524:	d104      	bne.n	8008530 <USB_EPStartXfer+0xc40>
 8008526:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800852a:	3b01      	subs	r3, #1
 800852c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008530:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008534:	b29b      	uxth	r3, r3
 8008536:	029b      	lsls	r3, r3, #10
 8008538:	b29b      	uxth	r3, r3
 800853a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800853e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008542:	b29a      	uxth	r2, r3
 8008544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008546:	801a      	strh	r2, [r3, #0]
 8008548:	e027      	b.n	800859a <USB_EPStartXfer+0xcaa>
 800854a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800854e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d11f      	bne.n	800859a <USB_EPStartXfer+0xcaa>
 800855a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800855e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008568:	b29b      	uxth	r3, r3
 800856a:	461a      	mov	r2, r3
 800856c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008570:	4413      	add	r3, r2
 8008572:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800857a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	011a      	lsls	r2, r3, #4
 8008584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008588:	4413      	add	r3, r2
 800858a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800858e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008594:	b29a      	uxth	r2, r3
 8008596:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008598:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800859a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800859e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	895b      	ldrh	r3, [r3, #10]
 80085a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6959      	ldr	r1, [r3, #20]
 80085b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80085c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80085c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80085c8:	6800      	ldr	r0, [r0, #0]
 80085ca:	f001 f907 	bl	80097dc <USB_WritePMA>
          ep->xfer_buff += len;
 80085ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695a      	ldr	r2, [r3, #20]
 80085da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085de:	441a      	add	r2, r3
 80085e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80085ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6a1a      	ldr	r2, [r3, #32]
 80085f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	429a      	cmp	r2, r3
 8008606:	d90f      	bls.n	8008628 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8008608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6a1a      	ldr	r2, [r3, #32]
 8008614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008618:	1ad2      	subs	r2, r2, r3
 800861a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	621a      	str	r2, [r3, #32]
 8008626:	e00e      	b.n	8008646 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8008628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2200      	movs	r2, #0
 8008644:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 8295 	beq.w	8008b7a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	785b      	ldrb	r3, [r3, #1]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d16d      	bne.n	800873c <USB_EPStartXfer+0xe4c>
 8008660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	66bb      	str	r3, [r7, #104]	; 0x68
 800866c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008670:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800867a:	b29b      	uxth	r3, r3
 800867c:	461a      	mov	r2, r3
 800867e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008680:	4413      	add	r3, r2
 8008682:	66bb      	str	r3, [r7, #104]	; 0x68
 8008684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	011a      	lsls	r2, r3, #4
 8008692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008694:	4413      	add	r3, r2
 8008696:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800869a:	667b      	str	r3, [r7, #100]	; 0x64
 800869c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d112      	bne.n	80086ca <USB_EPStartXfer+0xdda>
 80086a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086b2:	801a      	strh	r2, [r3, #0]
 80086b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086c6:	801a      	strh	r2, [r3, #0]
 80086c8:	e063      	b.n	8008792 <USB_EPStartXfer+0xea2>
 80086ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ce:	2b3e      	cmp	r3, #62	; 0x3e
 80086d0:	d817      	bhi.n	8008702 <USB_EPStartXfer+0xe12>
 80086d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d6:	085b      	lsrs	r3, r3, #1
 80086d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80086dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <USB_EPStartXfer+0xe02>
 80086e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ec:	3301      	adds	r3, #1
 80086ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	029b      	lsls	r3, r3, #10
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086fe:	801a      	strh	r2, [r3, #0]
 8008700:	e047      	b.n	8008792 <USB_EPStartXfer+0xea2>
 8008702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008706:	095b      	lsrs	r3, r3, #5
 8008708:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800870c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008710:	f003 031f 	and.w	r3, r3, #31
 8008714:	2b00      	cmp	r3, #0
 8008716:	d104      	bne.n	8008722 <USB_EPStartXfer+0xe32>
 8008718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800871c:	3b01      	subs	r3, #1
 800871e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008726:	b29b      	uxth	r3, r3
 8008728:	029b      	lsls	r3, r3, #10
 800872a:	b29b      	uxth	r3, r3
 800872c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008734:	b29a      	uxth	r2, r3
 8008736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008738:	801a      	strh	r2, [r3, #0]
 800873a:	e02a      	b.n	8008792 <USB_EPStartXfer+0xea2>
 800873c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d122      	bne.n	8008792 <USB_EPStartXfer+0xea2>
 800874c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	673b      	str	r3, [r7, #112]	; 0x70
 8008758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008766:	b29b      	uxth	r3, r3
 8008768:	461a      	mov	r2, r3
 800876a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800876c:	4413      	add	r3, r2
 800876e:	673b      	str	r3, [r7, #112]	; 0x70
 8008770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	011a      	lsls	r2, r3, #4
 800877e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008780:	4413      	add	r3, r2
 8008782:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008786:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800878c:	b29a      	uxth	r2, r3
 800878e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008790:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	891b      	ldrh	r3, [r3, #8]
 800879e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6959      	ldr	r1, [r3, #20]
 80087ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80087b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80087bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80087c0:	6800      	ldr	r0, [r0, #0]
 80087c2:	f001 f80b 	bl	80097dc <USB_WritePMA>
 80087c6:	e1d8      	b.n	8008b7a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80087c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	785b      	ldrb	r3, [r3, #1]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d178      	bne.n	80088ca <USB_EPStartXfer+0xfda>
 80087d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	461a      	mov	r2, r3
 80087f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087fc:	4413      	add	r3, r2
 80087fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	011a      	lsls	r2, r3, #4
 8008810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008814:	4413      	add	r3, r2
 8008816:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800881a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800881e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d116      	bne.n	8008854 <USB_EPStartXfer+0xf64>
 8008826:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	b29b      	uxth	r3, r3
 800882e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008832:	b29a      	uxth	r2, r3
 8008834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008838:	801a      	strh	r2, [r3, #0]
 800883a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800883e:	881b      	ldrh	r3, [r3, #0]
 8008840:	b29b      	uxth	r3, r3
 8008842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800884a:	b29a      	uxth	r2, r3
 800884c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008850:	801a      	strh	r2, [r3, #0]
 8008852:	e06b      	b.n	800892c <USB_EPStartXfer+0x103c>
 8008854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008858:	2b3e      	cmp	r3, #62	; 0x3e
 800885a:	d818      	bhi.n	800888e <USB_EPStartXfer+0xf9e>
 800885c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008860:	085b      	lsrs	r3, r3, #1
 8008862:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d004      	beq.n	800887c <USB_EPStartXfer+0xf8c>
 8008872:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008876:	3301      	adds	r3, #1
 8008878:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800887c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008880:	b29b      	uxth	r3, r3
 8008882:	029b      	lsls	r3, r3, #10
 8008884:	b29a      	uxth	r2, r3
 8008886:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800888a:	801a      	strh	r2, [r3, #0]
 800888c:	e04e      	b.n	800892c <USB_EPStartXfer+0x103c>
 800888e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008892:	095b      	lsrs	r3, r3, #5
 8008894:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800889c:	f003 031f 	and.w	r3, r3, #31
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d104      	bne.n	80088ae <USB_EPStartXfer+0xfbe>
 80088a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80088a8:	3b01      	subs	r3, #1
 80088aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80088ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	029b      	lsls	r3, r3, #10
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088c6:	801a      	strh	r2, [r3, #0]
 80088c8:	e030      	b.n	800892c <USB_EPStartXfer+0x103c>
 80088ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d128      	bne.n	800892c <USB_EPStartXfer+0x103c>
 80088da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80088e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088fe:	4413      	add	r3, r2
 8008900:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	011a      	lsls	r2, r3, #4
 8008912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008916:	4413      	add	r3, r2
 8008918:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800891c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008924:	b29a      	uxth	r2, r3
 8008926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800892a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800892c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	891b      	ldrh	r3, [r3, #8]
 8008938:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800893c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008940:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6959      	ldr	r1, [r3, #20]
 8008948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894c:	b29b      	uxth	r3, r3
 800894e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008952:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008956:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800895a:	6800      	ldr	r0, [r0, #0]
 800895c:	f000 ff3e 	bl	80097dc <USB_WritePMA>
          ep->xfer_buff += len;
 8008960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	695a      	ldr	r2, [r3, #20]
 800896c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008970:	441a      	add	r2, r3
 8008972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800897e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6a1a      	ldr	r2, [r3, #32]
 800898a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800898e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	429a      	cmp	r2, r3
 8008998:	d90f      	bls.n	80089ba <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800899a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800899e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6a1a      	ldr	r2, [r3, #32]
 80089a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089aa:	1ad2      	subs	r2, r2, r3
 80089ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	621a      	str	r2, [r3, #32]
 80089b8:	e00e      	b.n	80089d8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80089ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80089ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2200      	movs	r2, #0
 80089d6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80089d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 80cc 	beq.w	8008b7a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80089e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	785b      	ldrb	r3, [r3, #1]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d178      	bne.n	8008af2 <USB_EPStartXfer+0x1202>
 8008a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a24:	4413      	add	r3, r2
 8008a26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	011a      	lsls	r2, r3, #4
 8008a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d116      	bne.n	8008a7c <USB_EPStartXfer+0x118c>
 8008a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a60:	801a      	strh	r2, [r3, #0]
 8008a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a66:	881b      	ldrh	r3, [r3, #0]
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a78:	801a      	strh	r2, [r3, #0]
 8008a7a:	e064      	b.n	8008b46 <USB_EPStartXfer+0x1256>
 8008a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a80:	2b3e      	cmp	r3, #62	; 0x3e
 8008a82:	d818      	bhi.n	8008ab6 <USB_EPStartXfer+0x11c6>
 8008a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a88:	085b      	lsrs	r3, r3, #1
 8008a8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d004      	beq.n	8008aa4 <USB_EPStartXfer+0x11b4>
 8008a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	029b      	lsls	r3, r3, #10
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ab2:	801a      	strh	r2, [r3, #0]
 8008ab4:	e047      	b.n	8008b46 <USB_EPStartXfer+0x1256>
 8008ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aba:	095b      	lsrs	r3, r3, #5
 8008abc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac4:	f003 031f 	and.w	r3, r3, #31
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d104      	bne.n	8008ad6 <USB_EPStartXfer+0x11e6>
 8008acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	029b      	lsls	r3, r3, #10
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aee:	801a      	strh	r2, [r3, #0]
 8008af0:	e029      	b.n	8008b46 <USB_EPStartXfer+0x1256>
 8008af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d121      	bne.n	8008b46 <USB_EPStartXfer+0x1256>
 8008b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	461a      	mov	r2, r3
 8008b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b18:	4413      	add	r3, r2
 8008b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	011a      	lsls	r2, r3, #4
 8008b2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b30:	4413      	add	r3, r2
 8008b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	895b      	ldrh	r3, [r3, #10]
 8008b52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6959      	ldr	r1, [r3, #20]
 8008b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b6c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008b70:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008b74:	6800      	ldr	r0, [r0, #0]
 8008b76:	f000 fe31 	bl	80097dc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b9c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ba8:	8013      	strh	r3, [r2, #0]
 8008baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bae:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008bb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008bb6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008bba:	8812      	ldrh	r2, [r2, #0]
 8008bbc:	f082 0210 	eor.w	r2, r2, #16
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008bca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008bce:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008bd2:	8812      	ldrh	r2, [r2, #0]
 8008bd4:	f082 0220 	eor.w	r2, r2, #32
 8008bd8:	801a      	strh	r2, [r3, #0]
 8008bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	441a      	add	r2, r3
 8008bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	8013      	strh	r3, [r2, #0]
 8008c12:	f000 bc9f 	b.w	8009554 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	7b1b      	ldrb	r3, [r3, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f040 80ae 	bne.w	8008d84 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	699a      	ldr	r2, [r3, #24]
 8008c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d917      	bls.n	8008c74 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	699a      	ldr	r2, [r3, #24]
 8008c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c64:	1ad2      	subs	r2, r2, r3
 8008c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	619a      	str	r2, [r3, #24]
 8008c72:	e00e      	b.n	8008c92 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	011a      	lsls	r2, r3, #4
 8008cca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008cce:	4413      	add	r3, r2
 8008cd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d116      	bne.n	8008d0e <USB_EPStartXfer+0x141e>
 8008ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cf2:	801a      	strh	r2, [r3, #0]
 8008cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d0a:	801a      	strh	r2, [r3, #0]
 8008d0c:	e3e8      	b.n	80094e0 <USB_EPStartXfer+0x1bf0>
 8008d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d12:	2b3e      	cmp	r3, #62	; 0x3e
 8008d14:	d818      	bhi.n	8008d48 <USB_EPStartXfer+0x1458>
 8008d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1a:	085b      	lsrs	r3, r3, #1
 8008d1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d004      	beq.n	8008d36 <USB_EPStartXfer+0x1446>
 8008d2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d30:	3301      	adds	r3, #1
 8008d32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008d36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	029b      	lsls	r3, r3, #10
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d44:	801a      	strh	r2, [r3, #0]
 8008d46:	e3cb      	b.n	80094e0 <USB_EPStartXfer+0x1bf0>
 8008d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d4c:	095b      	lsrs	r3, r3, #5
 8008d4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d56:	f003 031f 	and.w	r3, r3, #31
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <USB_EPStartXfer+0x1478>
 8008d5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d62:	3b01      	subs	r3, #1
 8008d64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008d68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	029b      	lsls	r3, r3, #10
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d80:	801a      	strh	r2, [r3, #0]
 8008d82:	e3ad      	b.n	80094e0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	78db      	ldrb	r3, [r3, #3]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	f040 8200 	bne.w	8009196 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f040 8091 	bne.w	8008eca <USB_EPStartXfer+0x15da>
 8008da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008dcc:	4413      	add	r3, r2
 8008dce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	011a      	lsls	r2, r3, #4
 8008de0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008de4:	4413      	add	r3, r2
 8008de6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d116      	bne.n	8008e2c <USB_EPStartXfer+0x153c>
 8008dfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e10:	801a      	strh	r2, [r3, #0]
 8008e12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e28:	801a      	strh	r2, [r3, #0]
 8008e2a:	e083      	b.n	8008f34 <USB_EPStartXfer+0x1644>
 8008e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	2b3e      	cmp	r3, #62	; 0x3e
 8008e3a:	d820      	bhi.n	8008e7e <USB_EPStartXfer+0x158e>
 8008e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	085b      	lsrs	r3, r3, #1
 8008e4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d004      	beq.n	8008e6c <USB_EPStartXfer+0x157c>
 8008e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e66:	3301      	adds	r3, #1
 8008e68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	029b      	lsls	r3, r3, #10
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e7a:	801a      	strh	r2, [r3, #0]
 8008e7c:	e05a      	b.n	8008f34 <USB_EPStartXfer+0x1644>
 8008e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	095b      	lsrs	r3, r3, #5
 8008e8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	f003 031f 	and.w	r3, r3, #31
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <USB_EPStartXfer+0x15be>
 8008ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	029b      	lsls	r3, r3, #10
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ec6:	801a      	strh	r2, [r3, #0]
 8008ec8:	e034      	b.n	8008f34 <USB_EPStartXfer+0x1644>
 8008eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	785b      	ldrb	r3, [r3, #1]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d12c      	bne.n	8008f34 <USB_EPStartXfer+0x1644>
 8008eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008efe:	4413      	add	r3, r2
 8008f00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	011a      	lsls	r2, r3, #4
 8008f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f16:	4413      	add	r3, r2
 8008f18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008f32:	801a      	strh	r2, [r3, #0]
 8008f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	785b      	ldrb	r3, [r3, #1]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f040 8091 	bne.w	8009076 <USB_EPStartXfer+0x1786>
 8008f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	461a      	mov	r2, r3
 8008f74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008f78:	4413      	add	r3, r2
 8008f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	011a      	lsls	r2, r3, #4
 8008f8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008f90:	4413      	add	r3, r2
 8008f92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d116      	bne.n	8008fd8 <USB_EPStartXfer+0x16e8>
 8008faa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fd4:	801a      	strh	r2, [r3, #0]
 8008fd6:	e07c      	b.n	80090d2 <USB_EPStartXfer+0x17e2>
 8008fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8008fe6:	d820      	bhi.n	800902a <USB_EPStartXfer+0x173a>
 8008fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	085b      	lsrs	r3, r3, #1
 8008ff6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <USB_EPStartXfer+0x1728>
 800900e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009012:	3301      	adds	r3, #1
 8009014:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009018:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800901c:	b29b      	uxth	r3, r3
 800901e:	029b      	lsls	r3, r3, #10
 8009020:	b29a      	uxth	r2, r3
 8009022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009026:	801a      	strh	r2, [r3, #0]
 8009028:	e053      	b.n	80090d2 <USB_EPStartXfer+0x17e2>
 800902a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800902e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	095b      	lsrs	r3, r3, #5
 8009038:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800903c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	f003 031f 	and.w	r3, r3, #31
 800904c:	2b00      	cmp	r3, #0
 800904e:	d104      	bne.n	800905a <USB_EPStartXfer+0x176a>
 8009050:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009054:	3b01      	subs	r3, #1
 8009056:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800905a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800905e:	b29b      	uxth	r3, r3
 8009060:	029b      	lsls	r3, r3, #10
 8009062:	b29b      	uxth	r3, r3
 8009064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800906c:	b29a      	uxth	r2, r3
 800906e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009072:	801a      	strh	r2, [r3, #0]
 8009074:	e02d      	b.n	80090d2 <USB_EPStartXfer+0x17e2>
 8009076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800907a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	785b      	ldrb	r3, [r3, #1]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d125      	bne.n	80090d2 <USB_EPStartXfer+0x17e2>
 8009086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800908a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009094:	b29b      	uxth	r3, r3
 8009096:	461a      	mov	r2, r3
 8009098:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800909c:	4413      	add	r3, r2
 800909e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	011a      	lsls	r2, r3, #4
 80090b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80090b4:	4413      	add	r3, r2
 80090b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090d0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80090d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 81fe 	beq.w	80094e0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80090e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009104:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <USB_EPStartXfer+0x182c>
 8009110:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10d      	bne.n	8009138 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800911c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009124:	2b00      	cmp	r3, #0
 8009126:	f040 81db 	bne.w	80094e0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800912a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800912e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009132:	2b00      	cmp	r3, #0
 8009134:	f040 81d4 	bne.w	80094e0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800913c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	b29b      	uxth	r3, r3
 8009156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800915a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800915e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009166:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	441a      	add	r2, r3
 800917c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800918c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009190:	b29b      	uxth	r3, r3
 8009192:	8013      	strh	r3, [r2, #0]
 8009194:	e1a4      	b.n	80094e0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800919a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	78db      	ldrb	r3, [r3, #3]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	f040 819a 	bne.w	80094dc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80091a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	699a      	ldr	r2, [r3, #24]
 80091b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d917      	bls.n	80091f4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80091c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80091d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	699a      	ldr	r2, [r3, #24]
 80091e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091e4:	1ad2      	subs	r2, r2, r3
 80091e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	619a      	str	r2, [r3, #24]
 80091f2:	e00e      	b.n	8009212 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80091f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2200      	movs	r2, #0
 8009210:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	785b      	ldrb	r3, [r3, #1]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d178      	bne.n	8009314 <USB_EPStartXfer+0x1a24>
 8009222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800923e:	b29b      	uxth	r3, r3
 8009240:	461a      	mov	r2, r3
 8009242:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009246:	4413      	add	r3, r2
 8009248:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800924c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	011a      	lsls	r2, r3, #4
 800925a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800925e:	4413      	add	r3, r2
 8009260:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009264:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800926c:	2b00      	cmp	r3, #0
 800926e:	d116      	bne.n	800929e <USB_EPStartXfer+0x19ae>
 8009270:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009274:	881b      	ldrh	r3, [r3, #0]
 8009276:	b29b      	uxth	r3, r3
 8009278:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800927c:	b29a      	uxth	r2, r3
 800927e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009282:	801a      	strh	r2, [r3, #0]
 8009284:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	b29b      	uxth	r3, r3
 800928c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009294:	b29a      	uxth	r2, r3
 8009296:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800929a:	801a      	strh	r2, [r3, #0]
 800929c:	e06b      	b.n	8009376 <USB_EPStartXfer+0x1a86>
 800929e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a2:	2b3e      	cmp	r3, #62	; 0x3e
 80092a4:	d818      	bhi.n	80092d8 <USB_EPStartXfer+0x19e8>
 80092a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092aa:	085b      	lsrs	r3, r3, #1
 80092ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80092b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d004      	beq.n	80092c6 <USB_EPStartXfer+0x19d6>
 80092bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092c0:	3301      	adds	r3, #1
 80092c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80092c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	029b      	lsls	r3, r3, #10
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092d4:	801a      	strh	r2, [r3, #0]
 80092d6:	e04e      	b.n	8009376 <USB_EPStartXfer+0x1a86>
 80092d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092dc:	095b      	lsrs	r3, r3, #5
 80092de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80092e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092e6:	f003 031f 	and.w	r3, r3, #31
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d104      	bne.n	80092f8 <USB_EPStartXfer+0x1a08>
 80092ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092f2:	3b01      	subs	r3, #1
 80092f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80092f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	029b      	lsls	r3, r3, #10
 8009300:	b29b      	uxth	r3, r3
 8009302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800930a:	b29a      	uxth	r2, r3
 800930c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009310:	801a      	strh	r2, [r3, #0]
 8009312:	e030      	b.n	8009376 <USB_EPStartXfer+0x1a86>
 8009314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009318:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	785b      	ldrb	r3, [r3, #1]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d128      	bne.n	8009376 <USB_EPStartXfer+0x1a86>
 8009324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009328:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009336:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009340:	b29b      	uxth	r3, r3
 8009342:	461a      	mov	r2, r3
 8009344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009348:	4413      	add	r3, r2
 800934a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800934e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	011a      	lsls	r2, r3, #4
 800935c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009360:	4413      	add	r3, r2
 8009362:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009366:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800936a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800936e:	b29a      	uxth	r2, r3
 8009370:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009374:	801a      	strh	r2, [r3, #0]
 8009376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800937a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	785b      	ldrb	r3, [r3, #1]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d178      	bne.n	8009486 <USB_EPStartXfer+0x1b96>
 8009394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80093a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	461a      	mov	r2, r3
 80093b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093b8:	4413      	add	r3, r2
 80093ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80093be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	011a      	lsls	r2, r3, #4
 80093cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093d0:	4413      	add	r3, r2
 80093d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80093da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d116      	bne.n	8009410 <USB_EPStartXfer+0x1b20>
 80093e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093f4:	801a      	strh	r2, [r3, #0]
 80093f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009406:	b29a      	uxth	r2, r3
 8009408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800940c:	801a      	strh	r2, [r3, #0]
 800940e:	e067      	b.n	80094e0 <USB_EPStartXfer+0x1bf0>
 8009410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009414:	2b3e      	cmp	r3, #62	; 0x3e
 8009416:	d818      	bhi.n	800944a <USB_EPStartXfer+0x1b5a>
 8009418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800941c:	085b      	lsrs	r3, r3, #1
 800941e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d004      	beq.n	8009438 <USB_EPStartXfer+0x1b48>
 800942e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009432:	3301      	adds	r3, #1
 8009434:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009438:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800943c:	b29b      	uxth	r3, r3
 800943e:	029b      	lsls	r3, r3, #10
 8009440:	b29a      	uxth	r2, r3
 8009442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009446:	801a      	strh	r2, [r3, #0]
 8009448:	e04a      	b.n	80094e0 <USB_EPStartXfer+0x1bf0>
 800944a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800944e:	095b      	lsrs	r3, r3, #5
 8009450:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009458:	f003 031f 	and.w	r3, r3, #31
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <USB_EPStartXfer+0x1b7a>
 8009460:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009464:	3b01      	subs	r3, #1
 8009466:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800946a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800946e:	b29b      	uxth	r3, r3
 8009470:	029b      	lsls	r3, r3, #10
 8009472:	b29b      	uxth	r3, r3
 8009474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800947c:	b29a      	uxth	r2, r3
 800947e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009482:	801a      	strh	r2, [r3, #0]
 8009484:	e02c      	b.n	80094e0 <USB_EPStartXfer+0x1bf0>
 8009486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800948a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	785b      	ldrb	r3, [r3, #1]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d124      	bne.n	80094e0 <USB_EPStartXfer+0x1bf0>
 8009496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800949a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	461a      	mov	r2, r3
 80094a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ac:	4413      	add	r3, r2
 80094ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80094b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	011a      	lsls	r2, r3, #4
 80094c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094c4:	4413      	add	r3, r2
 80094c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80094ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094d8:	801a      	strh	r2, [r3, #0]
 80094da:	e001      	b.n	80094e0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e03a      	b.n	8009556 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009506:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800950a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800950e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009512:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009516:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800951a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800951e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009526:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	441a      	add	r2, r3
 800953c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800954c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009550:	b29b      	uxth	r3, r3
 8009552:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d020      	beq.n	80095b4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	b29b      	uxth	r3, r3
 8009580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009588:	81bb      	strh	r3, [r7, #12]
 800958a:	89bb      	ldrh	r3, [r7, #12]
 800958c:	f083 0310 	eor.w	r3, r3, #16
 8009590:	81bb      	strh	r3, [r7, #12]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	441a      	add	r2, r3
 800959c:	89bb      	ldrh	r3, [r7, #12]
 800959e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	8013      	strh	r3, [r2, #0]
 80095b2:	e01f      	b.n	80095f4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ca:	81fb      	strh	r3, [r7, #14]
 80095cc:	89fb      	ldrh	r3, [r7, #14]
 80095ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80095d2:	81fb      	strh	r3, [r7, #14]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	441a      	add	r2, r3
 80095de:	89fb      	ldrh	r3, [r7, #14]
 80095e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bc80      	pop	{r7}
 80095fe:	4770      	bx	lr

08009600 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	7b1b      	ldrb	r3, [r3, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	f040 809d 	bne.w	800974e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	785b      	ldrb	r3, [r3, #1]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d04c      	beq.n	80096b6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	823b      	strh	r3, [r7, #16]
 800962a:	8a3b      	ldrh	r3, [r7, #16]
 800962c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009630:	2b00      	cmp	r3, #0
 8009632:	d01b      	beq.n	800966c <USB_EPClearStall+0x6c>
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	b29b      	uxth	r3, r3
 8009642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800964a:	81fb      	strh	r3, [r7, #14]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	441a      	add	r2, r3
 8009656:	89fb      	ldrh	r3, [r7, #14]
 8009658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800965c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009664:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009668:	b29b      	uxth	r3, r3
 800966a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	78db      	ldrb	r3, [r3, #3]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d06c      	beq.n	800974e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	b29b      	uxth	r3, r3
 8009682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800968a:	81bb      	strh	r3, [r7, #12]
 800968c:	89bb      	ldrh	r3, [r7, #12]
 800968e:	f083 0320 	eor.w	r3, r3, #32
 8009692:	81bb      	strh	r3, [r7, #12]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	441a      	add	r2, r3
 800969e:	89bb      	ldrh	r3, [r7, #12]
 80096a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	8013      	strh	r3, [r2, #0]
 80096b4:	e04b      	b.n	800974e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	82fb      	strh	r3, [r7, #22]
 80096c4:	8afb      	ldrh	r3, [r7, #22]
 80096c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d01b      	beq.n	8009706 <USB_EPClearStall+0x106>
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e4:	82bb      	strh	r3, [r7, #20]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	441a      	add	r2, r3
 80096f0:	8abb      	ldrh	r3, [r7, #20]
 80096f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009702:	b29b      	uxth	r3, r3
 8009704:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	b29b      	uxth	r3, r3
 8009714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971c:	827b      	strh	r3, [r7, #18]
 800971e:	8a7b      	ldrh	r3, [r7, #18]
 8009720:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009724:	827b      	strh	r3, [r7, #18]
 8009726:	8a7b      	ldrh	r3, [r7, #18]
 8009728:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800972c:	827b      	strh	r3, [r7, #18]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	441a      	add	r2, r3
 8009738:	8a7b      	ldrh	r3, [r7, #18]
 800973a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800973e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974a:	b29b      	uxth	r3, r3
 800974c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	371c      	adds	r7, #28
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr

0800975a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	460b      	mov	r3, r1
 8009764:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009766:	78fb      	ldrb	r3, [r7, #3]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d103      	bne.n	8009774 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2280      	movs	r2, #128	; 0x80
 8009770:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	bc80      	pop	{r7}
 800977e:	4770      	bx	lr

08009780 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	bc80      	pop	{r7}
 8009792:	4770      	bx	lr

08009794 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bc80      	pop	{r7}
 80097a6:	4770      	bx	lr

080097a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80097ba:	68fb      	ldr	r3, [r7, #12]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bc80      	pop	{r7}
 80097c4:	4770      	bx	lr

080097c6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	370c      	adds	r7, #12
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bc80      	pop	{r7}
 80097da:	4770      	bx	lr

080097dc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80097dc:	b480      	push	{r7}
 80097de:	b08d      	sub	sp, #52	; 0x34
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	4611      	mov	r1, r2
 80097e8:	461a      	mov	r2, r3
 80097ea:	460b      	mov	r3, r1
 80097ec:	80fb      	strh	r3, [r7, #6]
 80097ee:	4613      	mov	r3, r2
 80097f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80097f2:	88bb      	ldrh	r3, [r7, #4]
 80097f4:	3301      	adds	r3, #1
 80097f6:	085b      	lsrs	r3, r3, #1
 80097f8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009802:	88fb      	ldrh	r3, [r7, #6]
 8009804:	005a      	lsls	r2, r3, #1
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800980e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009810:	6a3b      	ldr	r3, [r7, #32]
 8009812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009814:	e01e      	b.n	8009854 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	3301      	adds	r3, #1
 8009820:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	b29b      	uxth	r3, r3
 8009828:	021b      	lsls	r3, r3, #8
 800982a:	b29b      	uxth	r3, r3
 800982c:	461a      	mov	r2, r3
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	4313      	orrs	r3, r2
 8009832:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	b29a      	uxth	r2, r3
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	3302      	adds	r3, #2
 8009840:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009844:	3302      	adds	r3, #2
 8009846:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	3301      	adds	r3, #1
 800984c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800984e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009850:	3b01      	subs	r3, #1
 8009852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1dd      	bne.n	8009816 <USB_WritePMA+0x3a>
  }
}
 800985a:	bf00      	nop
 800985c:	bf00      	nop
 800985e:	3734      	adds	r7, #52	; 0x34
 8009860:	46bd      	mov	sp, r7
 8009862:	bc80      	pop	{r7}
 8009864:	4770      	bx	lr

08009866 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009866:	b480      	push	{r7}
 8009868:	b08b      	sub	sp, #44	; 0x2c
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	4611      	mov	r1, r2
 8009872:	461a      	mov	r2, r3
 8009874:	460b      	mov	r3, r1
 8009876:	80fb      	strh	r3, [r7, #6]
 8009878:	4613      	mov	r3, r2
 800987a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800987c:	88bb      	ldrh	r3, [r7, #4]
 800987e:	085b      	lsrs	r3, r3, #1
 8009880:	b29b      	uxth	r3, r3
 8009882:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800988c:	88fb      	ldrh	r3, [r7, #6]
 800988e:	005a      	lsls	r2, r3, #1
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009898:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	627b      	str	r3, [r7, #36]	; 0x24
 800989e:	e01b      	b.n	80098d8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	881b      	ldrh	r3, [r3, #0]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	3302      	adds	r3, #2
 80098ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	3301      	adds	r3, #1
 80098ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	0a1b      	lsrs	r3, r3, #8
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	3301      	adds	r3, #1
 80098ca:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	3302      	adds	r3, #2
 80098d0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	3b01      	subs	r3, #1
 80098d6:	627b      	str	r3, [r7, #36]	; 0x24
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1e0      	bne.n	80098a0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80098de:	88bb      	ldrh	r3, [r7, #4]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d007      	beq.n	80098fa <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80098ea:	6a3b      	ldr	r3, [r7, #32]
 80098ec:	881b      	ldrh	r3, [r3, #0]
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	701a      	strb	r2, [r3, #0]
  }
}
 80098fa:	bf00      	nop
 80098fc:	372c      	adds	r7, #44	; 0x2c
 80098fe:	46bd      	mov	sp, r7
 8009900:	bc80      	pop	{r7}
 8009902:	4770      	bx	lr

08009904 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	7c1b      	ldrb	r3, [r3, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d115      	bne.n	8009948 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800991c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009920:	2202      	movs	r2, #2
 8009922:	2181      	movs	r1, #129	; 0x81
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f001 fea2 	bl	800b66e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009934:	2202      	movs	r2, #2
 8009936:	2101      	movs	r1, #1
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f001 fe98 	bl	800b66e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009946:	e012      	b.n	800996e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009948:	2340      	movs	r3, #64	; 0x40
 800994a:	2202      	movs	r2, #2
 800994c:	2181      	movs	r1, #129	; 0x81
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f001 fe8d 	bl	800b66e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800995a:	2340      	movs	r3, #64	; 0x40
 800995c:	2202      	movs	r2, #2
 800995e:	2101      	movs	r1, #1
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f001 fe84 	bl	800b66e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800996e:	2308      	movs	r3, #8
 8009970:	2203      	movs	r2, #3
 8009972:	2182      	movs	r1, #130	; 0x82
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f001 fe7a 	bl	800b66e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009980:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009984:	f001 ff9a 	bl	800b8bc <USBD_static_malloc>
 8009988:	4602      	mov	r2, r0
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009996:	2b00      	cmp	r3, #0
 8009998:	d102      	bne.n	80099a0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800999a:	2301      	movs	r3, #1
 800999c:	73fb      	strb	r3, [r7, #15]
 800999e:	e026      	b.n	80099ee <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099a6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	2200      	movs	r2, #0
 80099be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	7c1b      	ldrb	r3, [r3, #16]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d109      	bne.n	80099de <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099d4:	2101      	movs	r1, #1
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f001 ff3a 	bl	800b850 <USBD_LL_PrepareReceive>
 80099dc:	e007      	b.n	80099ee <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099e4:	2340      	movs	r3, #64	; 0x40
 80099e6:	2101      	movs	r1, #1
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f001 ff31 	bl	800b850 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009a08:	2181      	movs	r1, #129	; 0x81
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 fe55 	bl	800b6ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009a16:	2101      	movs	r1, #1
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 fe4e 	bl	800b6ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009a26:	2182      	movs	r1, #130	; 0x82
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 fe46 	bl	800b6ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00e      	beq.n	8009a5c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 ff40 	bl	800b8d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b086      	sub	sp, #24
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a76:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d039      	beq.n	8009b04 <USBD_CDC_Setup+0x9e>
 8009a90:	2b20      	cmp	r3, #32
 8009a92:	d17f      	bne.n	8009b94 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	88db      	ldrh	r3, [r3, #6]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d029      	beq.n	8009af0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	b25b      	sxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	da11      	bge.n	8009aca <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009ab2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	88d2      	ldrh	r2, [r2, #6]
 8009ab8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009aba:	6939      	ldr	r1, [r7, #16]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	88db      	ldrh	r3, [r3, #6]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f001 fa09 	bl	800aeda <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009ac8:	e06b      	b.n	8009ba2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	785a      	ldrb	r2, [r3, #1]
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	88db      	ldrh	r3, [r3, #6]
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009ae0:	6939      	ldr	r1, [r7, #16]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	88db      	ldrh	r3, [r3, #6]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 fa24 	bl	800af36 <USBD_CtlPrepareRx>
      break;
 8009aee:	e058      	b.n	8009ba2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	7850      	ldrb	r0, [r2, #1]
 8009afc:	2200      	movs	r2, #0
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	4798      	blx	r3
      break;
 8009b02:	e04e      	b.n	8009ba2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	785b      	ldrb	r3, [r3, #1]
 8009b08:	2b0b      	cmp	r3, #11
 8009b0a:	d02e      	beq.n	8009b6a <USBD_CDC_Setup+0x104>
 8009b0c:	2b0b      	cmp	r3, #11
 8009b0e:	dc38      	bgt.n	8009b82 <USBD_CDC_Setup+0x11c>
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d002      	beq.n	8009b1a <USBD_CDC_Setup+0xb4>
 8009b14:	2b0a      	cmp	r3, #10
 8009b16:	d014      	beq.n	8009b42 <USBD_CDC_Setup+0xdc>
 8009b18:	e033      	b.n	8009b82 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d107      	bne.n	8009b34 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009b24:	f107 030c 	add.w	r3, r7, #12
 8009b28:	2202      	movs	r2, #2
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f001 f9d4 	bl	800aeda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b32:	e02e      	b.n	8009b92 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 f965 	bl	800ae06 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	75fb      	strb	r3, [r7, #23]
          break;
 8009b40:	e027      	b.n	8009b92 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d107      	bne.n	8009b5c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009b4c:	f107 030f 	add.w	r3, r7, #15
 8009b50:	2201      	movs	r2, #1
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f001 f9c0 	bl	800aeda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b5a:	e01a      	b.n	8009b92 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 f951 	bl	800ae06 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b64:	2302      	movs	r3, #2
 8009b66:	75fb      	strb	r3, [r7, #23]
          break;
 8009b68:	e013      	b.n	8009b92 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d00d      	beq.n	8009b90 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f001 f945 	bl	800ae06 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009b80:	e006      	b.n	8009b90 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f001 f93e 	bl	800ae06 <USBD_CtlError>
          ret = USBD_FAIL;
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	75fb      	strb	r3, [r7, #23]
          break;
 8009b8e:	e000      	b.n	8009b92 <USBD_CDC_Setup+0x12c>
          break;
 8009b90:	bf00      	nop
      }
      break;
 8009b92:	e006      	b.n	8009ba2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f001 f935 	bl	800ae06 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba0:	bf00      	nop
  }

  return ret;
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bbe:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bc6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d03a      	beq.n	8009c48 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009bd2:	78fa      	ldrb	r2, [r7, #3]
 8009bd4:	6879      	ldr	r1, [r7, #4]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	440b      	add	r3, r1
 8009be0:	331c      	adds	r3, #28
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d029      	beq.n	8009c3c <USBD_CDC_DataIn+0x90>
 8009be8:	78fa      	ldrb	r2, [r7, #3]
 8009bea:	6879      	ldr	r1, [r7, #4]
 8009bec:	4613      	mov	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	440b      	add	r3, r1
 8009bf6:	331c      	adds	r3, #28
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	78f9      	ldrb	r1, [r7, #3]
 8009bfc:	68b8      	ldr	r0, [r7, #8]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	440b      	add	r3, r1
 8009c04:	00db      	lsls	r3, r3, #3
 8009c06:	4403      	add	r3, r0
 8009c08:	3338      	adds	r3, #56	; 0x38
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c10:	fb01 f303 	mul.w	r3, r1, r3
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d110      	bne.n	8009c3c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009c1a:	78fa      	ldrb	r2, [r7, #3]
 8009c1c:	6879      	ldr	r1, [r7, #4]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	440b      	add	r3, r1
 8009c28:	331c      	adds	r3, #28
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c2e:	78f9      	ldrb	r1, [r7, #3]
 8009c30:	2300      	movs	r3, #0
 8009c32:	2200      	movs	r2, #0
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f001 fde8 	bl	800b80a <USBD_LL_Transmit>
 8009c3a:	e003      	b.n	8009c44 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	e000      	b.n	8009c4a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009c48:	2302      	movs	r3, #2
  }
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c64:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c66:	78fb      	ldrb	r3, [r7, #3]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 fe13 	bl	800b896 <USBD_LL_GetRxDataSize>
 8009c70:	4602      	mov	r2, r0
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00d      	beq.n	8009c9e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009c96:	4611      	mov	r1, r2
 8009c98:	4798      	blx	r3

    return USBD_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	e000      	b.n	8009ca0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009c9e:	2302      	movs	r3, #2
  }
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d015      	beq.n	8009cee <USBD_CDC_EP0_RxReady+0x46>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009cc8:	2bff      	cmp	r3, #255	; 0xff
 8009cca:	d010      	beq.n	8009cee <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009cda:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ce2:	b292      	uxth	r2, r2
 8009ce4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	22ff      	movs	r2, #255	; 0xff
 8009cea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2243      	movs	r2, #67	; 0x43
 8009d04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009d06:	4b03      	ldr	r3, [pc, #12]	; (8009d14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bc80      	pop	{r7}
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	20000098 	.word	0x20000098

08009d18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2243      	movs	r2, #67	; 0x43
 8009d24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009d26:	4b03      	ldr	r3, [pc, #12]	; (8009d34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bc80      	pop	{r7}
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	20000054 	.word	0x20000054

08009d38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2243      	movs	r2, #67	; 0x43
 8009d44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009d46:	4b03      	ldr	r3, [pc, #12]	; (8009d54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bc80      	pop	{r7}
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	200000dc 	.word	0x200000dc

08009d58 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	220a      	movs	r2, #10
 8009d64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009d66:	4b03      	ldr	r3, [pc, #12]	; (8009d74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bc80      	pop	{r7}
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	20000010 	.word	0x20000010

08009d78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009d82:	2302      	movs	r3, #2
 8009d84:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d005      	beq.n	8009d98 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3714      	adds	r7, #20
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bc80      	pop	{r7}
 8009da2:	4770      	bx	lr

08009da4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	4613      	mov	r3, r2
 8009db0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009dc2:	88fa      	ldrh	r2, [r7, #6]
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	371c      	adds	r7, #28
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bc80      	pop	{r7}
 8009dd4:	4770      	bx	lr

08009dd6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b085      	sub	sp, #20
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
 8009dde:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bc80      	pop	{r7}
 8009dfa:	4770      	bx	lr

08009dfc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d01c      	beq.n	8009e50 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d115      	bne.n	8009e4c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	2181      	movs	r1, #129	; 0x81
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f001 fce1 	bl	800b80a <USBD_LL_Transmit>

      return USBD_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	e002      	b.n	8009e52 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e000      	b.n	8009e52 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009e50:	2302      	movs	r3, #2
  }
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e68:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d017      	beq.n	8009ea4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	7c1b      	ldrb	r3, [r3, #16]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d109      	bne.n	8009e90 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e86:	2101      	movs	r1, #1
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 fce1 	bl	800b850 <USBD_LL_PrepareReceive>
 8009e8e:	e007      	b.n	8009ea0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e96:	2340      	movs	r3, #64	; 0x40
 8009e98:	2101      	movs	r1, #1
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f001 fcd8 	bl	800b850 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	e000      	b.n	8009ea6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009ea4:	2302      	movs	r3, #2
  }
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	60f8      	str	r0, [r7, #12]
 8009eb6:	60b9      	str	r1, [r7, #8]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e01a      	b.n	8009efc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d003      	beq.n	8009ed8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	79fa      	ldrb	r2, [r7, #7]
 8009ef2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f001 fb45 	bl	800b584 <USBD_LL_Init>

  return USBD_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d006      	beq.n	8009f26 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]
 8009f24:	e001      	b.n	8009f2a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009f26:	2302      	movs	r3, #2
 8009f28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bc80      	pop	{r7}
 8009f34:	4770      	bx	lr

08009f36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f001 fb7a 	bl	800b638 <USBD_LL_Start>

  return USBD_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b083      	sub	sp, #12
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bc80      	pop	{r7}
 8009f60:	4770      	bx	lr

08009f62 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009f6e:	2302      	movs	r3, #2
 8009f70:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00c      	beq.n	8009f96 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	78fa      	ldrb	r2, [r7, #3]
 8009f86:	4611      	mov	r1, r2
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	4798      	blx	r3
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	78fa      	ldrb	r2, [r7, #3]
 8009fb6:	4611      	mov	r1, r2
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	4798      	blx	r3

  return USBD_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b082      	sub	sp, #8
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 fed8 	bl	800ad8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009fec:	461a      	mov	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009ffa:	f003 031f 	and.w	r3, r3, #31
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d016      	beq.n	800a030 <USBD_LL_SetupStage+0x6a>
 800a002:	2b02      	cmp	r3, #2
 800a004:	d81c      	bhi.n	800a040 <USBD_LL_SetupStage+0x7a>
 800a006:	2b00      	cmp	r3, #0
 800a008:	d002      	beq.n	800a010 <USBD_LL_SetupStage+0x4a>
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d008      	beq.n	800a020 <USBD_LL_SetupStage+0x5a>
 800a00e:	e017      	b.n	800a040 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f9cb 	bl	800a3b4 <USBD_StdDevReq>
      break;
 800a01e:	e01a      	b.n	800a056 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fa2d 	bl	800a488 <USBD_StdItfReq>
      break;
 800a02e:	e012      	b.n	800a056 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fa6d 	bl	800a518 <USBD_StdEPReq>
      break;
 800a03e:	e00a      	b.n	800a056 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a046:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f001 fb52 	bl	800b6f8 <USBD_LL_StallEP>
      break;
 800a054:	bf00      	nop
  }

  return USBD_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	460b      	mov	r3, r1
 800a06a:	607a      	str	r2, [r7, #4]
 800a06c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a06e:	7afb      	ldrb	r3, [r7, #11]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d14b      	bne.n	800a10c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a07a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a082:	2b03      	cmp	r3, #3
 800a084:	d134      	bne.n	800a0f0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	68da      	ldr	r2, [r3, #12]
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d919      	bls.n	800a0c6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	68da      	ldr	r2, [r3, #12]
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	1ad2      	subs	r2, r2, r3
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	68da      	ldr	r2, [r3, #12]
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d203      	bcs.n	800a0b4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	e002      	b.n	800a0ba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	6879      	ldr	r1, [r7, #4]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 ff57 	bl	800af72 <USBD_CtlContinueRx>
 800a0c4:	e038      	b.n	800a138 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00a      	beq.n	800a0e8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a0d8:	2b03      	cmp	r3, #3
 800a0da:	d105      	bne.n	800a0e8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 ff54 	bl	800af96 <USBD_CtlSendStatus>
 800a0ee:	e023      	b.n	800a138 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0f6:	2b05      	cmp	r3, #5
 800a0f8:	d11e      	bne.n	800a138 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a102:	2100      	movs	r1, #0
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f001 faf7 	bl	800b6f8 <USBD_LL_StallEP>
 800a10a:	e015      	b.n	800a138 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00d      	beq.n	800a134 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a11e:	2b03      	cmp	r3, #3
 800a120:	d108      	bne.n	800a134 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	7afa      	ldrb	r2, [r7, #11]
 800a12c:	4611      	mov	r1, r2
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	4798      	blx	r3
 800a132:	e001      	b.n	800a138 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a134:	2302      	movs	r3, #2
 800a136:	e000      	b.n	800a13a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b086      	sub	sp, #24
 800a146:	af00      	add	r7, sp, #0
 800a148:	60f8      	str	r0, [r7, #12]
 800a14a:	460b      	mov	r3, r1
 800a14c:	607a      	str	r2, [r7, #4]
 800a14e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a150:	7afb      	ldrb	r3, [r7, #11]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d17f      	bne.n	800a256 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3314      	adds	r3, #20
 800a15a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a162:	2b02      	cmp	r3, #2
 800a164:	d15c      	bne.n	800a220 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d915      	bls.n	800a19e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	68da      	ldr	r2, [r3, #12]
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	1ad2      	subs	r2, r2, r3
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	b29b      	uxth	r3, r3
 800a186:	461a      	mov	r2, r3
 800a188:	6879      	ldr	r1, [r7, #4]
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f000 fec1 	bl	800af12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a190:	2300      	movs	r3, #0
 800a192:	2200      	movs	r2, #0
 800a194:	2100      	movs	r1, #0
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f001 fb5a 	bl	800b850 <USBD_LL_PrepareReceive>
 800a19c:	e04e      	b.n	800a23c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	6912      	ldr	r2, [r2, #16]
 800a1a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1aa:	fb01 f202 	mul.w	r2, r1, r2
 800a1ae:	1a9b      	subs	r3, r3, r2
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d11c      	bne.n	800a1ee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	689a      	ldr	r2, [r3, #8]
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d316      	bcc.n	800a1ee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d20f      	bcs.n	800a1ee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f000 fe9d 	bl	800af12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f001 fb32 	bl	800b850 <USBD_LL_PrepareReceive>
 800a1ec:	e026      	b.n	800a23c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00a      	beq.n	800a210 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a200:	2b03      	cmp	r3, #3
 800a202:	d105      	bne.n	800a210 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a210:	2180      	movs	r1, #128	; 0x80
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f001 fa70 	bl	800b6f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 fecf 	bl	800afbc <USBD_CtlReceiveStatus>
 800a21e:	e00d      	b.n	800a23c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a226:	2b04      	cmp	r3, #4
 800a228:	d004      	beq.n	800a234 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a230:	2b00      	cmp	r3, #0
 800a232:	d103      	bne.n	800a23c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a234:	2180      	movs	r1, #128	; 0x80
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f001 fa5e 	bl	800b6f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a242:	2b01      	cmp	r3, #1
 800a244:	d11d      	bne.n	800a282 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7ff fe81 	bl	8009f4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a254:	e015      	b.n	800a282 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00d      	beq.n	800a27e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a268:	2b03      	cmp	r3, #3
 800a26a:	d108      	bne.n	800a27e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a272:	695b      	ldr	r3, [r3, #20]
 800a274:	7afa      	ldrb	r2, [r7, #11]
 800a276:	4611      	mov	r1, r2
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	4798      	blx	r3
 800a27c:	e001      	b.n	800a282 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a27e:	2302      	movs	r3, #2
 800a280:	e000      	b.n	800a284 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a294:	2340      	movs	r3, #64	; 0x40
 800a296:	2200      	movs	r2, #0
 800a298:	2100      	movs	r1, #0
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f001 f9e7 	bl	800b66e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2240      	movs	r2, #64	; 0x40
 800a2ac:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2b0:	2340      	movs	r3, #64	; 0x40
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2180      	movs	r1, #128	; 0x80
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 f9d9 	bl	800b66e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2240      	movs	r2, #64	; 0x40
 800a2c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d009      	beq.n	800a304 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	6852      	ldr	r2, [r2, #4]
 800a2fc:	b2d2      	uxtb	r2, r2
 800a2fe:	4611      	mov	r1, r2
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	4798      	blx	r3
  }

  return USBD_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	78fa      	ldrb	r2, [r7, #3]
 800a31e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	bc80      	pop	{r7}
 800a32a:	4770      	bx	lr

0800a32c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2204      	movs	r2, #4
 800a344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	bc80      	pop	{r7}
 800a352:	4770      	bx	lr

0800a354 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a362:	2b04      	cmp	r3, #4
 800a364:	d105      	bne.n	800a372 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	bc80      	pop	{r7}
 800a37c:	4770      	bx	lr

0800a37e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	d10b      	bne.n	800a3a8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a396:	69db      	ldr	r3, [r3, #28]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d005      	beq.n	800a3a8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3ca:	2b40      	cmp	r3, #64	; 0x40
 800a3cc:	d005      	beq.n	800a3da <USBD_StdDevReq+0x26>
 800a3ce:	2b40      	cmp	r3, #64	; 0x40
 800a3d0:	d84f      	bhi.n	800a472 <USBD_StdDevReq+0xbe>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d009      	beq.n	800a3ea <USBD_StdDevReq+0x36>
 800a3d6:	2b20      	cmp	r3, #32
 800a3d8:	d14b      	bne.n	800a472 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	4798      	blx	r3
      break;
 800a3e8:	e048      	b.n	800a47c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	785b      	ldrb	r3, [r3, #1]
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	d839      	bhi.n	800a466 <USBD_StdDevReq+0xb2>
 800a3f2:	a201      	add	r2, pc, #4	; (adr r2, 800a3f8 <USBD_StdDevReq+0x44>)
 800a3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f8:	0800a449 	.word	0x0800a449
 800a3fc:	0800a45d 	.word	0x0800a45d
 800a400:	0800a467 	.word	0x0800a467
 800a404:	0800a453 	.word	0x0800a453
 800a408:	0800a467 	.word	0x0800a467
 800a40c:	0800a42b 	.word	0x0800a42b
 800a410:	0800a421 	.word	0x0800a421
 800a414:	0800a467 	.word	0x0800a467
 800a418:	0800a43f 	.word	0x0800a43f
 800a41c:	0800a435 	.word	0x0800a435
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f9dc 	bl	800a7e0 <USBD_GetDescriptor>
          break;
 800a428:	e022      	b.n	800a470 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fb3f 	bl	800aab0 <USBD_SetAddress>
          break;
 800a432:	e01d      	b.n	800a470 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fb7e 	bl	800ab38 <USBD_SetConfig>
          break;
 800a43c:	e018      	b.n	800a470 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fc07 	bl	800ac54 <USBD_GetConfig>
          break;
 800a446:	e013      	b.n	800a470 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fc37 	bl	800acbe <USBD_GetStatus>
          break;
 800a450:	e00e      	b.n	800a470 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fc65 	bl	800ad24 <USBD_SetFeature>
          break;
 800a45a:	e009      	b.n	800a470 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a45c:	6839      	ldr	r1, [r7, #0]
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fc74 	bl	800ad4c <USBD_ClrFeature>
          break;
 800a464:	e004      	b.n	800a470 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fccc 	bl	800ae06 <USBD_CtlError>
          break;
 800a46e:	bf00      	nop
      }
      break;
 800a470:	e004      	b.n	800a47c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a472:	6839      	ldr	r1, [r7, #0]
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fcc6 	bl	800ae06 <USBD_CtlError>
      break;
 800a47a:	bf00      	nop
  }

  return ret;
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop

0800a488 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a49e:	2b40      	cmp	r3, #64	; 0x40
 800a4a0:	d005      	beq.n	800a4ae <USBD_StdItfReq+0x26>
 800a4a2:	2b40      	cmp	r3, #64	; 0x40
 800a4a4:	d82e      	bhi.n	800a504 <USBD_StdItfReq+0x7c>
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <USBD_StdItfReq+0x26>
 800a4aa:	2b20      	cmp	r3, #32
 800a4ac:	d12a      	bne.n	800a504 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d81d      	bhi.n	800a4f6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	889b      	ldrh	r3, [r3, #4]
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d813      	bhi.n	800a4ec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	6839      	ldr	r1, [r7, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	4798      	blx	r3
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	88db      	ldrh	r3, [r3, #6]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d110      	bne.n	800a500 <USBD_StdItfReq+0x78>
 800a4de:	7bfb      	ldrb	r3, [r7, #15]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10d      	bne.n	800a500 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fd56 	bl	800af96 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a4ea:	e009      	b.n	800a500 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fc89 	bl	800ae06 <USBD_CtlError>
          break;
 800a4f4:	e004      	b.n	800a500 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fc84 	bl	800ae06 <USBD_CtlError>
          break;
 800a4fe:	e000      	b.n	800a502 <USBD_StdItfReq+0x7a>
          break;
 800a500:	bf00      	nop
      }
      break;
 800a502:	e004      	b.n	800a50e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a504:	6839      	ldr	r1, [r7, #0]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fc7d 	bl	800ae06 <USBD_CtlError>
      break;
 800a50c:	bf00      	nop
  }

  return USBD_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	889b      	ldrh	r3, [r3, #4]
 800a52a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a534:	2b40      	cmp	r3, #64	; 0x40
 800a536:	d007      	beq.n	800a548 <USBD_StdEPReq+0x30>
 800a538:	2b40      	cmp	r3, #64	; 0x40
 800a53a:	f200 8146 	bhi.w	800a7ca <USBD_StdEPReq+0x2b2>
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00a      	beq.n	800a558 <USBD_StdEPReq+0x40>
 800a542:	2b20      	cmp	r3, #32
 800a544:	f040 8141 	bne.w	800a7ca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	4798      	blx	r3
      break;
 800a556:	e13d      	b.n	800a7d4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a560:	2b20      	cmp	r3, #32
 800a562:	d10a      	bne.n	800a57a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	4798      	blx	r3
 800a572:	4603      	mov	r3, r0
 800a574:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	e12d      	b.n	800a7d6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	785b      	ldrb	r3, [r3, #1]
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d007      	beq.n	800a592 <USBD_StdEPReq+0x7a>
 800a582:	2b03      	cmp	r3, #3
 800a584:	f300 811b 	bgt.w	800a7be <USBD_StdEPReq+0x2a6>
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d072      	beq.n	800a672 <USBD_StdEPReq+0x15a>
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d03a      	beq.n	800a606 <USBD_StdEPReq+0xee>
 800a590:	e115      	b.n	800a7be <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d002      	beq.n	800a5a2 <USBD_StdEPReq+0x8a>
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d015      	beq.n	800a5cc <USBD_StdEPReq+0xb4>
 800a5a0:	e02b      	b.n	800a5fa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5a2:	7bbb      	ldrb	r3, [r7, #14]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00c      	beq.n	800a5c2 <USBD_StdEPReq+0xaa>
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
 800a5aa:	2b80      	cmp	r3, #128	; 0x80
 800a5ac:	d009      	beq.n	800a5c2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f001 f8a0 	bl	800b6f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a5b8:	2180      	movs	r1, #128	; 0x80
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f001 f89c 	bl	800b6f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5c0:	e020      	b.n	800a604 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fc1e 	bl	800ae06 <USBD_CtlError>
              break;
 800a5ca:	e01b      	b.n	800a604 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	885b      	ldrh	r3, [r3, #2]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10e      	bne.n	800a5f2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a5d4:	7bbb      	ldrb	r3, [r7, #14]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00b      	beq.n	800a5f2 <USBD_StdEPReq+0xda>
 800a5da:	7bbb      	ldrb	r3, [r7, #14]
 800a5dc:	2b80      	cmp	r3, #128	; 0x80
 800a5de:	d008      	beq.n	800a5f2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	88db      	ldrh	r3, [r3, #6]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d104      	bne.n	800a5f2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f001 f883 	bl	800b6f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fccf 	bl	800af96 <USBD_CtlSendStatus>

              break;
 800a5f8:	e004      	b.n	800a604 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fc02 	bl	800ae06 <USBD_CtlError>
              break;
 800a602:	bf00      	nop
          }
          break;
 800a604:	e0e0      	b.n	800a7c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d002      	beq.n	800a616 <USBD_StdEPReq+0xfe>
 800a610:	2b03      	cmp	r3, #3
 800a612:	d015      	beq.n	800a640 <USBD_StdEPReq+0x128>
 800a614:	e026      	b.n	800a664 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a616:	7bbb      	ldrb	r3, [r7, #14]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00c      	beq.n	800a636 <USBD_StdEPReq+0x11e>
 800a61c:	7bbb      	ldrb	r3, [r7, #14]
 800a61e:	2b80      	cmp	r3, #128	; 0x80
 800a620:	d009      	beq.n	800a636 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a622:	7bbb      	ldrb	r3, [r7, #14]
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f001 f866 	bl	800b6f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a62c:	2180      	movs	r1, #128	; 0x80
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f001 f862 	bl	800b6f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a634:	e01c      	b.n	800a670 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a636:	6839      	ldr	r1, [r7, #0]
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 fbe4 	bl	800ae06 <USBD_CtlError>
              break;
 800a63e:	e017      	b.n	800a670 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	885b      	ldrh	r3, [r3, #2]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d112      	bne.n	800a66e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a648:	7bbb      	ldrb	r3, [r7, #14]
 800a64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d004      	beq.n	800a65c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a652:	7bbb      	ldrb	r3, [r7, #14]
 800a654:	4619      	mov	r1, r3
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f001 f86d 	bl	800b736 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fc9a 	bl	800af96 <USBD_CtlSendStatus>
              }
              break;
 800a662:	e004      	b.n	800a66e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fbcd 	bl	800ae06 <USBD_CtlError>
              break;
 800a66c:	e000      	b.n	800a670 <USBD_StdEPReq+0x158>
              break;
 800a66e:	bf00      	nop
          }
          break;
 800a670:	e0aa      	b.n	800a7c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d002      	beq.n	800a682 <USBD_StdEPReq+0x16a>
 800a67c:	2b03      	cmp	r3, #3
 800a67e:	d032      	beq.n	800a6e6 <USBD_StdEPReq+0x1ce>
 800a680:	e097      	b.n	800a7b2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a682:	7bbb      	ldrb	r3, [r7, #14]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d007      	beq.n	800a698 <USBD_StdEPReq+0x180>
 800a688:	7bbb      	ldrb	r3, [r7, #14]
 800a68a:	2b80      	cmp	r3, #128	; 0x80
 800a68c:	d004      	beq.n	800a698 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fbb8 	bl	800ae06 <USBD_CtlError>
                break;
 800a696:	e091      	b.n	800a7bc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da0b      	bge.n	800a6b8 <USBD_StdEPReq+0x1a0>
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
 800a6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	3310      	adds	r3, #16
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	e00b      	b.n	800a6d0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6b8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fbfb 	bl	800aeda <USBD_CtlSendData>
              break;
 800a6e4:	e06a      	b.n	800a7bc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a6e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	da11      	bge.n	800a712 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
 800a6f0:	f003 020f 	and.w	r2, r3, #15
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	440b      	add	r3, r1
 800a700:	3318      	adds	r3, #24
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d117      	bne.n	800a738 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a708:	6839      	ldr	r1, [r7, #0]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fb7b 	bl	800ae06 <USBD_CtlError>
                  break;
 800a710:	e054      	b.n	800a7bc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a712:	7bbb      	ldrb	r3, [r7, #14]
 800a714:	f003 020f 	and.w	r2, r3, #15
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	4613      	mov	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	440b      	add	r3, r1
 800a724:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d104      	bne.n	800a738 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fb68 	bl	800ae06 <USBD_CtlError>
                  break;
 800a736:	e041      	b.n	800a7bc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	da0b      	bge.n	800a758 <USBD_StdEPReq+0x240>
 800a740:	7bbb      	ldrb	r3, [r7, #14]
 800a742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a746:	4613      	mov	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	3310      	adds	r3, #16
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	4413      	add	r3, r2
 800a754:	3304      	adds	r3, #4
 800a756:	e00b      	b.n	800a770 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a758:	7bbb      	ldrb	r3, [r7, #14]
 800a75a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a75e:	4613      	mov	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	4413      	add	r3, r2
 800a76e:	3304      	adds	r3, #4
 800a770:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a772:	7bbb      	ldrb	r3, [r7, #14]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <USBD_StdEPReq+0x266>
 800a778:	7bbb      	ldrb	r3, [r7, #14]
 800a77a:	2b80      	cmp	r3, #128	; 0x80
 800a77c:	d103      	bne.n	800a786 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	e00e      	b.n	800a7a4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a786:	7bbb      	ldrb	r3, [r7, #14]
 800a788:	4619      	mov	r1, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fff2 	bl	800b774 <USBD_LL_IsStallEP>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	2201      	movs	r2, #1
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	e002      	b.n	800a7a4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fb95 	bl	800aeda <USBD_CtlSendData>
              break;
 800a7b0:	e004      	b.n	800a7bc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fb26 	bl	800ae06 <USBD_CtlError>
              break;
 800a7ba:	bf00      	nop
          }
          break;
 800a7bc:	e004      	b.n	800a7c8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fb20 	bl	800ae06 <USBD_CtlError>
          break;
 800a7c6:	bf00      	nop
      }
      break;
 800a7c8:	e004      	b.n	800a7d4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fb1a 	bl	800ae06 <USBD_CtlError>
      break;
 800a7d2:	bf00      	nop
  }

  return ret;
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
	...

0800a7e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	885b      	ldrh	r3, [r3, #2]
 800a7fa:	0a1b      	lsrs	r3, r3, #8
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	3b01      	subs	r3, #1
 800a800:	2b06      	cmp	r3, #6
 800a802:	f200 8128 	bhi.w	800aa56 <USBD_GetDescriptor+0x276>
 800a806:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <USBD_GetDescriptor+0x2c>)
 800a808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80c:	0800a829 	.word	0x0800a829
 800a810:	0800a841 	.word	0x0800a841
 800a814:	0800a881 	.word	0x0800a881
 800a818:	0800aa57 	.word	0x0800aa57
 800a81c:	0800aa57 	.word	0x0800aa57
 800a820:	0800a9f7 	.word	0x0800a9f7
 800a824:	0800aa23 	.word	0x0800aa23
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	7c12      	ldrb	r2, [r2, #16]
 800a834:	f107 0108 	add.w	r1, r7, #8
 800a838:	4610      	mov	r0, r2
 800a83a:	4798      	blx	r3
 800a83c:	60f8      	str	r0, [r7, #12]
      break;
 800a83e:	e112      	b.n	800aa66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	7c1b      	ldrb	r3, [r3, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10d      	bne.n	800a864 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a850:	f107 0208 	add.w	r2, r7, #8
 800a854:	4610      	mov	r0, r2
 800a856:	4798      	blx	r3
 800a858:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	3301      	adds	r3, #1
 800a85e:	2202      	movs	r2, #2
 800a860:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a862:	e100      	b.n	800aa66 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86c:	f107 0208 	add.w	r2, r7, #8
 800a870:	4610      	mov	r0, r2
 800a872:	4798      	blx	r3
 800a874:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	3301      	adds	r3, #1
 800a87a:	2202      	movs	r2, #2
 800a87c:	701a      	strb	r2, [r3, #0]
      break;
 800a87e:	e0f2      	b.n	800aa66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	885b      	ldrh	r3, [r3, #2]
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b05      	cmp	r3, #5
 800a888:	f200 80ac 	bhi.w	800a9e4 <USBD_GetDescriptor+0x204>
 800a88c:	a201      	add	r2, pc, #4	; (adr r2, 800a894 <USBD_GetDescriptor+0xb4>)
 800a88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a892:	bf00      	nop
 800a894:	0800a8ad 	.word	0x0800a8ad
 800a898:	0800a8e1 	.word	0x0800a8e1
 800a89c:	0800a915 	.word	0x0800a915
 800a8a0:	0800a949 	.word	0x0800a949
 800a8a4:	0800a97d 	.word	0x0800a97d
 800a8a8:	0800a9b1 	.word	0x0800a9b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00b      	beq.n	800a8d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	7c12      	ldrb	r2, [r2, #16]
 800a8c4:	f107 0108 	add.w	r1, r7, #8
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	4798      	blx	r3
 800a8cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8ce:	e091      	b.n	800a9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fa97 	bl	800ae06 <USBD_CtlError>
            err++;
 800a8d8:	7afb      	ldrb	r3, [r7, #11]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a8de:	e089      	b.n	800a9f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00b      	beq.n	800a904 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	7c12      	ldrb	r2, [r2, #16]
 800a8f8:	f107 0108 	add.w	r1, r7, #8
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	4798      	blx	r3
 800a900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a902:	e077      	b.n	800a9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fa7d 	bl	800ae06 <USBD_CtlError>
            err++;
 800a90c:	7afb      	ldrb	r3, [r7, #11]
 800a90e:	3301      	adds	r3, #1
 800a910:	72fb      	strb	r3, [r7, #11]
          break;
 800a912:	e06f      	b.n	800a9f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00b      	beq.n	800a938 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	7c12      	ldrb	r2, [r2, #16]
 800a92c:	f107 0108 	add.w	r1, r7, #8
 800a930:	4610      	mov	r0, r2
 800a932:	4798      	blx	r3
 800a934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a936:	e05d      	b.n	800a9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fa63 	bl	800ae06 <USBD_CtlError>
            err++;
 800a940:	7afb      	ldrb	r3, [r7, #11]
 800a942:	3301      	adds	r3, #1
 800a944:	72fb      	strb	r3, [r7, #11]
          break;
 800a946:	e055      	b.n	800a9f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	7c12      	ldrb	r2, [r2, #16]
 800a960:	f107 0108 	add.w	r1, r7, #8
 800a964:	4610      	mov	r0, r2
 800a966:	4798      	blx	r3
 800a968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a96a:	e043      	b.n	800a9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fa49 	bl	800ae06 <USBD_CtlError>
            err++;
 800a974:	7afb      	ldrb	r3, [r7, #11]
 800a976:	3301      	adds	r3, #1
 800a978:	72fb      	strb	r3, [r7, #11]
          break;
 800a97a:	e03b      	b.n	800a9f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a982:	695b      	ldr	r3, [r3, #20]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00b      	beq.n	800a9a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	7c12      	ldrb	r2, [r2, #16]
 800a994:	f107 0108 	add.w	r1, r7, #8
 800a998:	4610      	mov	r0, r2
 800a99a:	4798      	blx	r3
 800a99c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a99e:	e029      	b.n	800a9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fa2f 	bl	800ae06 <USBD_CtlError>
            err++;
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a9ae:	e021      	b.n	800a9f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00b      	beq.n	800a9d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	7c12      	ldrb	r2, [r2, #16]
 800a9c8:	f107 0108 	add.w	r1, r7, #8
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4798      	blx	r3
 800a9d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9d2:	e00f      	b.n	800a9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fa15 	bl	800ae06 <USBD_CtlError>
            err++;
 800a9dc:	7afb      	ldrb	r3, [r7, #11]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9e2:	e007      	b.n	800a9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fa0d 	bl	800ae06 <USBD_CtlError>
          err++;
 800a9ec:	7afb      	ldrb	r3, [r7, #11]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a9f2:	e038      	b.n	800aa66 <USBD_GetDescriptor+0x286>
 800a9f4:	e037      	b.n	800aa66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	7c1b      	ldrb	r3, [r3, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d109      	bne.n	800aa12 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa06:	f107 0208 	add.w	r2, r7, #8
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	4798      	blx	r3
 800aa0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa10:	e029      	b.n	800aa66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f9f6 	bl	800ae06 <USBD_CtlError>
        err++;
 800aa1a:	7afb      	ldrb	r3, [r7, #11]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	72fb      	strb	r3, [r7, #11]
      break;
 800aa20:	e021      	b.n	800aa66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	7c1b      	ldrb	r3, [r3, #16]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10d      	bne.n	800aa46 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa32:	f107 0208 	add.w	r2, r7, #8
 800aa36:	4610      	mov	r0, r2
 800aa38:	4798      	blx	r3
 800aa3a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	2207      	movs	r2, #7
 800aa42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa44:	e00f      	b.n	800aa66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f9dc 	bl	800ae06 <USBD_CtlError>
        err++;
 800aa4e:	7afb      	ldrb	r3, [r7, #11]
 800aa50:	3301      	adds	r3, #1
 800aa52:	72fb      	strb	r3, [r7, #11]
      break;
 800aa54:	e007      	b.n	800aa66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f9d4 	bl	800ae06 <USBD_CtlError>
      err++;
 800aa5e:	7afb      	ldrb	r3, [r7, #11]
 800aa60:	3301      	adds	r3, #1
 800aa62:	72fb      	strb	r3, [r7, #11]
      break;
 800aa64:	bf00      	nop
  }

  if (err != 0U)
 800aa66:	7afb      	ldrb	r3, [r7, #11]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d11c      	bne.n	800aaa6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800aa6c:	893b      	ldrh	r3, [r7, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d011      	beq.n	800aa96 <USBD_GetDescriptor+0x2b6>
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	88db      	ldrh	r3, [r3, #6]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00d      	beq.n	800aa96 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	88da      	ldrh	r2, [r3, #6]
 800aa7e:	893b      	ldrh	r3, [r7, #8]
 800aa80:	4293      	cmp	r3, r2
 800aa82:	bf28      	it	cs
 800aa84:	4613      	movcs	r3, r2
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa8a:	893b      	ldrh	r3, [r7, #8]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	68f9      	ldr	r1, [r7, #12]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fa22 	bl	800aeda <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	88db      	ldrh	r3, [r3, #6]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d104      	bne.n	800aaa8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fa79 	bl	800af96 <USBD_CtlSendStatus>
 800aaa4:	e000      	b.n	800aaa8 <USBD_GetDescriptor+0x2c8>
    return;
 800aaa6:	bf00      	nop
    }
  }
}
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop

0800aab0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	889b      	ldrh	r3, [r3, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d130      	bne.n	800ab24 <USBD_SetAddress+0x74>
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	88db      	ldrh	r3, [r3, #6]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d12c      	bne.n	800ab24 <USBD_SetAddress+0x74>
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	885b      	ldrh	r3, [r3, #2]
 800aace:	2b7f      	cmp	r3, #127	; 0x7f
 800aad0:	d828      	bhi.n	800ab24 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	885b      	ldrh	r3, [r3, #2]
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aadc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aae4:	2b03      	cmp	r3, #3
 800aae6:	d104      	bne.n	800aaf2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f98b 	bl	800ae06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf0:	e01d      	b.n	800ab2e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	7bfa      	ldrb	r2, [r7, #15]
 800aaf6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fe64 	bl	800b7cc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fa46 	bl	800af96 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d004      	beq.n	800ab1a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2202      	movs	r2, #2
 800ab14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab18:	e009      	b.n	800ab2e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab22:	e004      	b.n	800ab2e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f96d 	bl	800ae06 <USBD_CtlError>
  }
}
 800ab2c:	bf00      	nop
 800ab2e:	bf00      	nop
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
	...

0800ab38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	885b      	ldrh	r3, [r3, #2]
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	4b41      	ldr	r3, [pc, #260]	; (800ac50 <USBD_SetConfig+0x118>)
 800ab4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab4c:	4b40      	ldr	r3, [pc, #256]	; (800ac50 <USBD_SetConfig+0x118>)
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d904      	bls.n	800ab5e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ab54:	6839      	ldr	r1, [r7, #0]
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f955 	bl	800ae06 <USBD_CtlError>
 800ab5c:	e075      	b.n	800ac4a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d002      	beq.n	800ab6e <USBD_SetConfig+0x36>
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d023      	beq.n	800abb4 <USBD_SetConfig+0x7c>
 800ab6c:	e062      	b.n	800ac34 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ab6e:	4b38      	ldr	r3, [pc, #224]	; (800ac50 <USBD_SetConfig+0x118>)
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d01a      	beq.n	800abac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ab76:	4b36      	ldr	r3, [pc, #216]	; (800ac50 <USBD_SetConfig+0x118>)
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2203      	movs	r2, #3
 800ab84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ab88:	4b31      	ldr	r3, [pc, #196]	; (800ac50 <USBD_SetConfig+0x118>)
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7ff f9e7 	bl	8009f62 <USBD_SetClassConfig>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d104      	bne.n	800aba4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f932 	bl	800ae06 <USBD_CtlError>
            return;
 800aba2:	e052      	b.n	800ac4a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f9f6 	bl	800af96 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800abaa:	e04e      	b.n	800ac4a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f9f2 	bl	800af96 <USBD_CtlSendStatus>
        break;
 800abb2:	e04a      	b.n	800ac4a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800abb4:	4b26      	ldr	r3, [pc, #152]	; (800ac50 <USBD_SetConfig+0x118>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d112      	bne.n	800abe2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2202      	movs	r2, #2
 800abc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800abc4:	4b22      	ldr	r3, [pc, #136]	; (800ac50 <USBD_SetConfig+0x118>)
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	461a      	mov	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800abce:	4b20      	ldr	r3, [pc, #128]	; (800ac50 <USBD_SetConfig+0x118>)
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	4619      	mov	r1, r3
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff f9e3 	bl	8009fa0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f9db 	bl	800af96 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800abe0:	e033      	b.n	800ac4a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800abe2:	4b1b      	ldr	r3, [pc, #108]	; (800ac50 <USBD_SetConfig+0x118>)
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	429a      	cmp	r2, r3
 800abee:	d01d      	beq.n	800ac2c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	4619      	mov	r1, r3
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7ff f9d1 	bl	8009fa0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800abfe:	4b14      	ldr	r3, [pc, #80]	; (800ac50 <USBD_SetConfig+0x118>)
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ac08:	4b11      	ldr	r3, [pc, #68]	; (800ac50 <USBD_SetConfig+0x118>)
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7ff f9a7 	bl	8009f62 <USBD_SetClassConfig>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d104      	bne.n	800ac24 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f8f2 	bl	800ae06 <USBD_CtlError>
            return;
 800ac22:	e012      	b.n	800ac4a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f9b6 	bl	800af96 <USBD_CtlSendStatus>
        break;
 800ac2a:	e00e      	b.n	800ac4a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f9b2 	bl	800af96 <USBD_CtlSendStatus>
        break;
 800ac32:	e00a      	b.n	800ac4a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f8e5 	bl	800ae06 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ac3c:	4b04      	ldr	r3, [pc, #16]	; (800ac50 <USBD_SetConfig+0x118>)
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7ff f9ac 	bl	8009fa0 <USBD_ClrClassConfig>
        break;
 800ac48:	bf00      	nop
    }
  }
}
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20000358 	.word	0x20000358

0800ac54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	88db      	ldrh	r3, [r3, #6]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d004      	beq.n	800ac70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 f8cc 	bl	800ae06 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ac6e:	e022      	b.n	800acb6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	dc02      	bgt.n	800ac80 <USBD_GetConfig+0x2c>
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	dc03      	bgt.n	800ac86 <USBD_GetConfig+0x32>
 800ac7e:	e015      	b.n	800acac <USBD_GetConfig+0x58>
 800ac80:	2b03      	cmp	r3, #3
 800ac82:	d00b      	beq.n	800ac9c <USBD_GetConfig+0x48>
 800ac84:	e012      	b.n	800acac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3308      	adds	r3, #8
 800ac90:	2201      	movs	r2, #1
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f920 	bl	800aeda <USBD_CtlSendData>
        break;
 800ac9a:	e00c      	b.n	800acb6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	2201      	movs	r2, #1
 800aca2:	4619      	mov	r1, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 f918 	bl	800aeda <USBD_CtlSendData>
        break;
 800acaa:	e004      	b.n	800acb6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f8a9 	bl	800ae06 <USBD_CtlError>
        break;
 800acb4:	bf00      	nop
}
 800acb6:	bf00      	nop
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b082      	sub	sp, #8
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acce:	3b01      	subs	r3, #1
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d81e      	bhi.n	800ad12 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	88db      	ldrh	r3, [r3, #6]
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d004      	beq.n	800ace6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 f891 	bl	800ae06 <USBD_CtlError>
        break;
 800ace4:	e01a      	b.n	800ad1c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d005      	beq.n	800ad02 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	f043 0202 	orr.w	r2, r3, #2
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	330c      	adds	r3, #12
 800ad06:	2202      	movs	r2, #2
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f8e5 	bl	800aeda <USBD_CtlSendData>
      break;
 800ad10:	e004      	b.n	800ad1c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ad12:	6839      	ldr	r1, [r7, #0]
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 f876 	bl	800ae06 <USBD_CtlError>
      break;
 800ad1a:	bf00      	nop
  }
}
 800ad1c:	bf00      	nop
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	885b      	ldrh	r3, [r3, #2]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d106      	bne.n	800ad44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f929 	bl	800af96 <USBD_CtlSendStatus>
  }
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d80b      	bhi.n	800ad7a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	885b      	ldrh	r3, [r3, #2]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d10c      	bne.n	800ad84 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f90f 	bl	800af96 <USBD_CtlSendStatus>
      }
      break;
 800ad78:	e004      	b.n	800ad84 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f842 	bl	800ae06 <USBD_CtlError>
      break;
 800ad82:	e000      	b.n	800ad86 <USBD_ClrFeature+0x3a>
      break;
 800ad84:	bf00      	nop
  }
}
 800ad86:	bf00      	nop
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	785a      	ldrb	r2, [r3, #1]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	3302      	adds	r3, #2
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	b29a      	uxth	r2, r3
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	3303      	adds	r3, #3
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	021b      	lsls	r3, r3, #8
 800adba:	b29b      	uxth	r3, r3
 800adbc:	4413      	add	r3, r2
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	3304      	adds	r3, #4
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	b29a      	uxth	r2, r3
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	3305      	adds	r3, #5
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	b29b      	uxth	r3, r3
 800add4:	021b      	lsls	r3, r3, #8
 800add6:	b29b      	uxth	r3, r3
 800add8:	4413      	add	r3, r2
 800adda:	b29a      	uxth	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	3306      	adds	r3, #6
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	3307      	adds	r3, #7
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	b29b      	uxth	r3, r3
 800adf0:	021b      	lsls	r3, r3, #8
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	4413      	add	r3, r2
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	80da      	strh	r2, [r3, #6]

}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bc80      	pop	{r7}
 800ae04:	4770      	bx	lr

0800ae06 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b082      	sub	sp, #8
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ae10:	2180      	movs	r1, #128	; 0x80
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fc70 	bl	800b6f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ae18:	2100      	movs	r1, #0
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fc6c 	bl	800b6f8 <USBD_LL_StallEP>
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae34:	2300      	movs	r3, #0
 800ae36:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d032      	beq.n	800aea4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f000 f834 	bl	800aeac <USBD_GetLen>
 800ae44:	4603      	mov	r3, r0
 800ae46:	3301      	adds	r3, #1
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	005b      	lsls	r3, r3, #1
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ae52:	7dfb      	ldrb	r3, [r7, #23]
 800ae54:	1c5a      	adds	r2, r3, #1
 800ae56:	75fa      	strb	r2, [r7, #23]
 800ae58:	461a      	mov	r2, r3
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	7812      	ldrb	r2, [r2, #0]
 800ae62:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	75fa      	strb	r2, [r7, #23]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	4413      	add	r3, r2
 800ae70:	2203      	movs	r2, #3
 800ae72:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ae74:	e012      	b.n	800ae9c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	60fa      	str	r2, [r7, #12]
 800ae7c:	7dfa      	ldrb	r2, [r7, #23]
 800ae7e:	1c51      	adds	r1, r2, #1
 800ae80:	75f9      	strb	r1, [r7, #23]
 800ae82:	4611      	mov	r1, r2
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	440a      	add	r2, r1
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ae8c:	7dfb      	ldrb	r3, [r7, #23]
 800ae8e:	1c5a      	adds	r2, r3, #1
 800ae90:	75fa      	strb	r2, [r7, #23]
 800ae92:	461a      	mov	r2, r3
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	4413      	add	r3, r2
 800ae98:	2200      	movs	r2, #0
 800ae9a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1e8      	bne.n	800ae76 <USBD_GetString+0x4e>
    }
  }
}
 800aea4:	bf00      	nop
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800aeb8:	e005      	b.n	800aec6 <USBD_GetLen+0x1a>
  {
    len++;
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	3301      	adds	r3, #1
 800aebe:	73fb      	strb	r3, [r7, #15]
    buf++;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3301      	adds	r3, #1
 800aec4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1f5      	bne.n	800aeba <USBD_GetLen+0xe>
  }

  return len;
 800aece:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bc80      	pop	{r7}
 800aed8:	4770      	bx	lr

0800aeda <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	60f8      	str	r0, [r7, #12]
 800aee2:	60b9      	str	r1, [r7, #8]
 800aee4:	4613      	mov	r3, r2
 800aee6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2202      	movs	r2, #2
 800aeec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aef0:	88fa      	ldrh	r2, [r7, #6]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800aef6:	88fa      	ldrh	r2, [r7, #6]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aefc:	88fb      	ldrh	r3, [r7, #6]
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	2100      	movs	r1, #0
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f000 fc81 	bl	800b80a <USBD_LL_Transmit>

  return USBD_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b084      	sub	sp, #16
 800af16:	af00      	add	r7, sp, #0
 800af18:	60f8      	str	r0, [r7, #12]
 800af1a:	60b9      	str	r1, [r7, #8]
 800af1c:	4613      	mov	r3, r2
 800af1e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af20:	88fb      	ldrh	r3, [r7, #6]
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	2100      	movs	r1, #0
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f000 fc6f 	bl	800b80a <USBD_LL_Transmit>

  return USBD_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b084      	sub	sp, #16
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	4613      	mov	r3, r2
 800af42:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2203      	movs	r2, #3
 800af48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800af4c:	88fa      	ldrh	r2, [r7, #6]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800af54:	88fa      	ldrh	r2, [r7, #6]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af5c:	88fb      	ldrh	r3, [r7, #6]
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	2100      	movs	r1, #0
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f000 fc74 	bl	800b850 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	60f8      	str	r0, [r7, #12]
 800af7a:	60b9      	str	r1, [r7, #8]
 800af7c:	4613      	mov	r3, r2
 800af7e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af80:	88fb      	ldrh	r3, [r7, #6]
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	2100      	movs	r1, #0
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 fc62 	bl	800b850 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b082      	sub	sp, #8
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2204      	movs	r2, #4
 800afa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800afa6:	2300      	movs	r3, #0
 800afa8:	2200      	movs	r2, #0
 800afaa:	2100      	movs	r1, #0
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fc2c 	bl	800b80a <USBD_LL_Transmit>

  return USBD_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2205      	movs	r2, #5
 800afc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afcc:	2300      	movs	r3, #0
 800afce:	2200      	movs	r2, #0
 800afd0:	2100      	movs	r1, #0
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fc3c 	bl	800b850 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800afe8:	2200      	movs	r2, #0
 800afea:	4912      	ldr	r1, [pc, #72]	; (800b034 <MX_USB_DEVICE_Init+0x50>)
 800afec:	4812      	ldr	r0, [pc, #72]	; (800b038 <MX_USB_DEVICE_Init+0x54>)
 800afee:	f7fe ff5e 	bl	8009eae <USBD_Init>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aff8:	f7f6 f882 	bl	8001100 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800affc:	490f      	ldr	r1, [pc, #60]	; (800b03c <MX_USB_DEVICE_Init+0x58>)
 800affe:	480e      	ldr	r0, [pc, #56]	; (800b038 <MX_USB_DEVICE_Init+0x54>)
 800b000:	f7fe ff80 	bl	8009f04 <USBD_RegisterClass>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b00a:	f7f6 f879 	bl	8001100 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b00e:	490c      	ldr	r1, [pc, #48]	; (800b040 <MX_USB_DEVICE_Init+0x5c>)
 800b010:	4809      	ldr	r0, [pc, #36]	; (800b038 <MX_USB_DEVICE_Init+0x54>)
 800b012:	f7fe feb1 	bl	8009d78 <USBD_CDC_RegisterInterface>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d001      	beq.n	800b020 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b01c:	f7f6 f870 	bl	8001100 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b020:	4805      	ldr	r0, [pc, #20]	; (800b038 <MX_USB_DEVICE_Init+0x54>)
 800b022:	f7fe ff88 	bl	8009f36 <USBD_Start>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b02c:	f7f6 f868 	bl	8001100 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b030:	bf00      	nop
 800b032:	bd80      	pop	{r7, pc}
 800b034:	20000130 	.word	0x20000130
 800b038:	2000035c 	.word	0x2000035c
 800b03c:	2000001c 	.word	0x2000001c
 800b040:	20000120 	.word	0x20000120

0800b044 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b048:	2200      	movs	r2, #0
 800b04a:	4905      	ldr	r1, [pc, #20]	; (800b060 <CDC_Init_FS+0x1c>)
 800b04c:	4805      	ldr	r0, [pc, #20]	; (800b064 <CDC_Init_FS+0x20>)
 800b04e:	f7fe fea9 	bl	8009da4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b052:	4905      	ldr	r1, [pc, #20]	; (800b068 <CDC_Init_FS+0x24>)
 800b054:	4803      	ldr	r0, [pc, #12]	; (800b064 <CDC_Init_FS+0x20>)
 800b056:	f7fe febe 	bl	8009dd6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b05a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	20000a20 	.word	0x20000a20
 800b064:	2000035c 	.word	0x2000035c
 800b068:	20000620 	.word	0x20000620

0800b06c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b06c:	b480      	push	{r7}
 800b06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b070:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b072:	4618      	mov	r0, r3
 800b074:	46bd      	mov	sp, r7
 800b076:	bc80      	pop	{r7}
 800b078:	4770      	bx	lr
	...

0800b07c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	4603      	mov	r3, r0
 800b084:	6039      	str	r1, [r7, #0]
 800b086:	71fb      	strb	r3, [r7, #7]
 800b088:	4613      	mov	r3, r2
 800b08a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b08c:	79fb      	ldrb	r3, [r7, #7]
 800b08e:	2b23      	cmp	r3, #35	; 0x23
 800b090:	d84a      	bhi.n	800b128 <CDC_Control_FS+0xac>
 800b092:	a201      	add	r2, pc, #4	; (adr r2, 800b098 <CDC_Control_FS+0x1c>)
 800b094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b098:	0800b129 	.word	0x0800b129
 800b09c:	0800b129 	.word	0x0800b129
 800b0a0:	0800b129 	.word	0x0800b129
 800b0a4:	0800b129 	.word	0x0800b129
 800b0a8:	0800b129 	.word	0x0800b129
 800b0ac:	0800b129 	.word	0x0800b129
 800b0b0:	0800b129 	.word	0x0800b129
 800b0b4:	0800b129 	.word	0x0800b129
 800b0b8:	0800b129 	.word	0x0800b129
 800b0bc:	0800b129 	.word	0x0800b129
 800b0c0:	0800b129 	.word	0x0800b129
 800b0c4:	0800b129 	.word	0x0800b129
 800b0c8:	0800b129 	.word	0x0800b129
 800b0cc:	0800b129 	.word	0x0800b129
 800b0d0:	0800b129 	.word	0x0800b129
 800b0d4:	0800b129 	.word	0x0800b129
 800b0d8:	0800b129 	.word	0x0800b129
 800b0dc:	0800b129 	.word	0x0800b129
 800b0e0:	0800b129 	.word	0x0800b129
 800b0e4:	0800b129 	.word	0x0800b129
 800b0e8:	0800b129 	.word	0x0800b129
 800b0ec:	0800b129 	.word	0x0800b129
 800b0f0:	0800b129 	.word	0x0800b129
 800b0f4:	0800b129 	.word	0x0800b129
 800b0f8:	0800b129 	.word	0x0800b129
 800b0fc:	0800b129 	.word	0x0800b129
 800b100:	0800b129 	.word	0x0800b129
 800b104:	0800b129 	.word	0x0800b129
 800b108:	0800b129 	.word	0x0800b129
 800b10c:	0800b129 	.word	0x0800b129
 800b110:	0800b129 	.word	0x0800b129
 800b114:	0800b129 	.word	0x0800b129
 800b118:	0800b129 	.word	0x0800b129
 800b11c:	0800b129 	.word	0x0800b129
 800b120:	0800b129 	.word	0x0800b129
 800b124:	0800b129 	.word	0x0800b129
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b128:	bf00      	nop
  }

  return (USBD_OK);
 800b12a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	bc80      	pop	{r7}
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop

0800b138 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; ++i)
 800b142:	2300      	movs	r3, #0
 800b144:	60fb      	str	r3, [r7, #12]
 800b146:	e00b      	b.n	800b160 <CDC_Receive_FS+0x28>
  {
	  Buffer_Write(FIFO_buf, Buf[i]);
 800b148:	4b11      	ldr	r3, [pc, #68]	; (800b190 <CDC_Receive_FS+0x58>)
 800b14a:	6818      	ldr	r0, [r3, #0]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	4413      	add	r3, r2
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	4619      	mov	r1, r3
 800b156:	f7f5 fcf3 	bl	8000b40 <Buffer_Write>
  for (int i = 0; i < *Len; ++i)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	3301      	adds	r3, #1
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	429a      	cmp	r2, r3
 800b168:	d8ee      	bhi.n	800b148 <CDC_Receive_FS+0x10>
  }
  memset(Buf, 0, *Len);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	461a      	mov	r2, r3
 800b170:	2100      	movs	r1, #0
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fe9a 	bl	800beac <memset>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b178:	6879      	ldr	r1, [r7, #4]
 800b17a:	4806      	ldr	r0, [pc, #24]	; (800b194 <CDC_Receive_FS+0x5c>)
 800b17c:	f7fe fe2b 	bl	8009dd6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b180:	4804      	ldr	r0, [pc, #16]	; (800b194 <CDC_Receive_FS+0x5c>)
 800b182:	f7fe fe6a 	bl	8009e5a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b186:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	200002f4 	.word	0x200002f4
 800b194:	2000035c 	.word	0x2000035c

0800b198 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b1a8:	4b0d      	ldr	r3, [pc, #52]	; (800b1e0 <CDC_Transmit_FS+0x48>)
 800b1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e00b      	b.n	800b1d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b1be:	887b      	ldrh	r3, [r7, #2]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	6879      	ldr	r1, [r7, #4]
 800b1c4:	4806      	ldr	r0, [pc, #24]	; (800b1e0 <CDC_Transmit_FS+0x48>)
 800b1c6:	f7fe fded 	bl	8009da4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b1ca:	4805      	ldr	r0, [pc, #20]	; (800b1e0 <CDC_Transmit_FS+0x48>)
 800b1cc:	f7fe fe16 	bl	8009dfc <USBD_CDC_TransmitPacket>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	2000035c 	.word	0x2000035c

0800b1e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	6039      	str	r1, [r7, #0]
 800b1ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	2212      	movs	r2, #18
 800b1f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b1f6:	4b03      	ldr	r3, [pc, #12]	; (800b204 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bc80      	pop	{r7}
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	2000014c 	.word	0x2000014c

0800b208 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	4603      	mov	r3, r0
 800b210:	6039      	str	r1, [r7, #0]
 800b212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	2204      	movs	r2, #4
 800b218:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b21a:	4b03      	ldr	r3, [pc, #12]	; (800b228 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	bc80      	pop	{r7}
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop
 800b228:	20000160 	.word	0x20000160

0800b22c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	4603      	mov	r3, r0
 800b234:	6039      	str	r1, [r7, #0]
 800b236:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b238:	79fb      	ldrb	r3, [r7, #7]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d105      	bne.n	800b24a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	4907      	ldr	r1, [pc, #28]	; (800b260 <USBD_FS_ProductStrDescriptor+0x34>)
 800b242:	4808      	ldr	r0, [pc, #32]	; (800b264 <USBD_FS_ProductStrDescriptor+0x38>)
 800b244:	f7ff fdf0 	bl	800ae28 <USBD_GetString>
 800b248:	e004      	b.n	800b254 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	4904      	ldr	r1, [pc, #16]	; (800b260 <USBD_FS_ProductStrDescriptor+0x34>)
 800b24e:	4805      	ldr	r0, [pc, #20]	; (800b264 <USBD_FS_ProductStrDescriptor+0x38>)
 800b250:	f7ff fdea 	bl	800ae28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b254:	4b02      	ldr	r3, [pc, #8]	; (800b260 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b256:	4618      	mov	r0, r3
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	20000e20 	.word	0x20000e20
 800b264:	0800c048 	.word	0x0800c048

0800b268 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	4603      	mov	r3, r0
 800b270:	6039      	str	r1, [r7, #0]
 800b272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	4904      	ldr	r1, [pc, #16]	; (800b288 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b278:	4804      	ldr	r0, [pc, #16]	; (800b28c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b27a:	f7ff fdd5 	bl	800ae28 <USBD_GetString>
  return USBD_StrDesc;
 800b27e:	4b02      	ldr	r3, [pc, #8]	; (800b288 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b280:	4618      	mov	r0, r3
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	20000e20 	.word	0x20000e20
 800b28c:	0800c060 	.word	0x0800c060

0800b290 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	4603      	mov	r3, r0
 800b298:	6039      	str	r1, [r7, #0]
 800b29a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	221a      	movs	r2, #26
 800b2a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b2a2:	f000 f843 	bl	800b32c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b2a6:	4b02      	ldr	r3, [pc, #8]	; (800b2b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	20000164 	.word	0x20000164

0800b2b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	6039      	str	r1, [r7, #0]
 800b2be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b2c0:	79fb      	ldrb	r3, [r7, #7]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d105      	bne.n	800b2d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	4907      	ldr	r1, [pc, #28]	; (800b2e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b2ca:	4808      	ldr	r0, [pc, #32]	; (800b2ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800b2cc:	f7ff fdac 	bl	800ae28 <USBD_GetString>
 800b2d0:	e004      	b.n	800b2dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b2d2:	683a      	ldr	r2, [r7, #0]
 800b2d4:	4904      	ldr	r1, [pc, #16]	; (800b2e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b2d6:	4805      	ldr	r0, [pc, #20]	; (800b2ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800b2d8:	f7ff fda6 	bl	800ae28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2dc:	4b02      	ldr	r3, [pc, #8]	; (800b2e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20000e20 	.word	0x20000e20
 800b2ec:	0800c074 	.word	0x0800c074

0800b2f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	6039      	str	r1, [r7, #0]
 800b2fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d105      	bne.n	800b30e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	4907      	ldr	r1, [pc, #28]	; (800b324 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b306:	4808      	ldr	r0, [pc, #32]	; (800b328 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b308:	f7ff fd8e 	bl	800ae28 <USBD_GetString>
 800b30c:	e004      	b.n	800b318 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	4904      	ldr	r1, [pc, #16]	; (800b324 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b312:	4805      	ldr	r0, [pc, #20]	; (800b328 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b314:	f7ff fd88 	bl	800ae28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b318:	4b02      	ldr	r3, [pc, #8]	; (800b324 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20000e20 	.word	0x20000e20
 800b328:	0800c080 	.word	0x0800c080

0800b32c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b332:	4b0f      	ldr	r3, [pc, #60]	; (800b370 <Get_SerialNum+0x44>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b338:	4b0e      	ldr	r3, [pc, #56]	; (800b374 <Get_SerialNum+0x48>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b33e:	4b0e      	ldr	r3, [pc, #56]	; (800b378 <Get_SerialNum+0x4c>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4413      	add	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d009      	beq.n	800b366 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b352:	2208      	movs	r2, #8
 800b354:	4909      	ldr	r1, [pc, #36]	; (800b37c <Get_SerialNum+0x50>)
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f000 f814 	bl	800b384 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b35c:	2204      	movs	r2, #4
 800b35e:	4908      	ldr	r1, [pc, #32]	; (800b380 <Get_SerialNum+0x54>)
 800b360:	68b8      	ldr	r0, [r7, #8]
 800b362:	f000 f80f 	bl	800b384 <IntToUnicode>
  }
}
 800b366:	bf00      	nop
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	1ffff7e8 	.word	0x1ffff7e8
 800b374:	1ffff7ec 	.word	0x1ffff7ec
 800b378:	1ffff7f0 	.word	0x1ffff7f0
 800b37c:	20000166 	.word	0x20000166
 800b380:	20000176 	.word	0x20000176

0800b384 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b384:	b480      	push	{r7}
 800b386:	b087      	sub	sp, #28
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	4613      	mov	r3, r2
 800b390:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b396:	2300      	movs	r3, #0
 800b398:	75fb      	strb	r3, [r7, #23]
 800b39a:	e027      	b.n	800b3ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	0f1b      	lsrs	r3, r3, #28
 800b3a0:	2b09      	cmp	r3, #9
 800b3a2:	d80b      	bhi.n	800b3bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	0f1b      	lsrs	r3, r3, #28
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	7dfb      	ldrb	r3, [r7, #23]
 800b3ac:	005b      	lsls	r3, r3, #1
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	440b      	add	r3, r1
 800b3b4:	3230      	adds	r2, #48	; 0x30
 800b3b6:	b2d2      	uxtb	r2, r2
 800b3b8:	701a      	strb	r2, [r3, #0]
 800b3ba:	e00a      	b.n	800b3d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	0f1b      	lsrs	r3, r3, #28
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	7dfb      	ldrb	r3, [r7, #23]
 800b3c4:	005b      	lsls	r3, r3, #1
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	440b      	add	r3, r1
 800b3cc:	3237      	adds	r2, #55	; 0x37
 800b3ce:	b2d2      	uxtb	r2, r2
 800b3d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	011b      	lsls	r3, r3, #4
 800b3d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b3d8:	7dfb      	ldrb	r3, [r7, #23]
 800b3da:	005b      	lsls	r3, r3, #1
 800b3dc:	3301      	adds	r3, #1
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b3e6:	7dfb      	ldrb	r3, [r7, #23]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	75fb      	strb	r3, [r7, #23]
 800b3ec:	7dfa      	ldrb	r2, [r7, #23]
 800b3ee:	79fb      	ldrb	r3, [r7, #7]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d3d3      	bcc.n	800b39c <IntToUnicode+0x18>
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop
 800b3f8:	371c      	adds	r7, #28
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bc80      	pop	{r7}
 800b3fe:	4770      	bx	lr

0800b400 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a0d      	ldr	r2, [pc, #52]	; (800b444 <HAL_PCD_MspInit+0x44>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d113      	bne.n	800b43a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b412:	4b0d      	ldr	r3, [pc, #52]	; (800b448 <HAL_PCD_MspInit+0x48>)
 800b414:	69db      	ldr	r3, [r3, #28]
 800b416:	4a0c      	ldr	r2, [pc, #48]	; (800b448 <HAL_PCD_MspInit+0x48>)
 800b418:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b41c:	61d3      	str	r3, [r2, #28]
 800b41e:	4b0a      	ldr	r3, [pc, #40]	; (800b448 <HAL_PCD_MspInit+0x48>)
 800b420:	69db      	ldr	r3, [r3, #28]
 800b422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b426:	60fb      	str	r3, [r7, #12]
 800b428:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b42a:	2200      	movs	r2, #0
 800b42c:	2100      	movs	r1, #0
 800b42e:	2014      	movs	r0, #20
 800b430:	f7f6 f977 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b434:	2014      	movs	r0, #20
 800b436:	f7f6 f990 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b43a:	bf00      	nop
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	40005c00 	.word	0x40005c00
 800b448:	40021000 	.word	0x40021000

0800b44c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b460:	4619      	mov	r1, r3
 800b462:	4610      	mov	r0, r2
 800b464:	f7fe fdaf 	bl	8009fc6 <USBD_LL_SetupStage>
}
 800b468:	bf00      	nop
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b482:	78fa      	ldrb	r2, [r7, #3]
 800b484:	6879      	ldr	r1, [r7, #4]
 800b486:	4613      	mov	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	00db      	lsls	r3, r3, #3
 800b48e:	440b      	add	r3, r1
 800b490:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	78fb      	ldrb	r3, [r7, #3]
 800b498:	4619      	mov	r1, r3
 800b49a:	f7fe fde1 	bl	800a060 <USBD_LL_DataOutStage>
}
 800b49e:	bf00      	nop
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b082      	sub	sp, #8
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b4b8:	78fa      	ldrb	r2, [r7, #3]
 800b4ba:	6879      	ldr	r1, [r7, #4]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	00db      	lsls	r3, r3, #3
 800b4c4:	440b      	add	r3, r1
 800b4c6:	333c      	adds	r3, #60	; 0x3c
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	78fb      	ldrb	r3, [r7, #3]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	f7fe fe38 	bl	800a142 <USBD_LL_DataInStage>
}
 800b4d2:	bf00      	nop
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b082      	sub	sp, #8
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fe ff48 	bl	800a37e <USBD_LL_SOF>
}
 800b4ee:	bf00      	nop
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b4fe:	2301      	movs	r3, #1
 800b500:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	2b02      	cmp	r3, #2
 800b508:	d001      	beq.n	800b50e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b50a:	f7f5 fdf9 	bl	8001100 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b514:	7bfa      	ldrb	r2, [r7, #15]
 800b516:	4611      	mov	r1, r2
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fe fef8 	bl	800a30e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b524:	4618      	mov	r0, r3
 800b526:	f7fe feb1 	bl	800a28c <USBD_LL_Reset>
}
 800b52a:	bf00      	nop
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
	...

0800b534 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b542:	4618      	mov	r0, r3
 800b544:	f7fe fef2 	bl	800a32c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	699b      	ldr	r3, [r3, #24]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d005      	beq.n	800b55c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b550:	4b04      	ldr	r3, [pc, #16]	; (800b564 <HAL_PCD_SuspendCallback+0x30>)
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	4a03      	ldr	r2, [pc, #12]	; (800b564 <HAL_PCD_SuspendCallback+0x30>)
 800b556:	f043 0306 	orr.w	r3, r3, #6
 800b55a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b55c:	bf00      	nop
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	e000ed00 	.word	0xe000ed00

0800b568 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b576:	4618      	mov	r0, r3
 800b578:	f7fe feec 	bl	800a354 <USBD_LL_Resume>
}
 800b57c:	bf00      	nop
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b58c:	4a28      	ldr	r2, [pc, #160]	; (800b630 <USBD_LL_Init+0xac>)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a26      	ldr	r2, [pc, #152]	; (800b630 <USBD_LL_Init+0xac>)
 800b598:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b59c:	4b24      	ldr	r3, [pc, #144]	; (800b630 <USBD_LL_Init+0xac>)
 800b59e:	4a25      	ldr	r2, [pc, #148]	; (800b634 <USBD_LL_Init+0xb0>)
 800b5a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b5a2:	4b23      	ldr	r3, [pc, #140]	; (800b630 <USBD_LL_Init+0xac>)
 800b5a4:	2208      	movs	r2, #8
 800b5a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b5a8:	4b21      	ldr	r3, [pc, #132]	; (800b630 <USBD_LL_Init+0xac>)
 800b5aa:	2202      	movs	r2, #2
 800b5ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b5ae:	4b20      	ldr	r3, [pc, #128]	; (800b630 <USBD_LL_Init+0xac>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b5b4:	4b1e      	ldr	r3, [pc, #120]	; (800b630 <USBD_LL_Init+0xac>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b5ba:	4b1d      	ldr	r3, [pc, #116]	; (800b630 <USBD_LL_Init+0xac>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b5c0:	481b      	ldr	r0, [pc, #108]	; (800b630 <USBD_LL_Init+0xac>)
 800b5c2:	f7f8 ffe9 	bl	8004598 <HAL_PCD_Init>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b5cc:	f7f5 fd98 	bl	8001100 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b5d6:	2318      	movs	r3, #24
 800b5d8:	2200      	movs	r2, #0
 800b5da:	2100      	movs	r1, #0
 800b5dc:	f7fa fc5d 	bl	8005e9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b5e6:	2358      	movs	r3, #88	; 0x58
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	2180      	movs	r1, #128	; 0x80
 800b5ec:	f7fa fc55 	bl	8005e9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b5f6:	23c0      	movs	r3, #192	; 0xc0
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	2181      	movs	r1, #129	; 0x81
 800b5fc:	f7fa fc4d 	bl	8005e9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b606:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b60a:	2200      	movs	r2, #0
 800b60c:	2101      	movs	r1, #1
 800b60e:	f7fa fc44 	bl	8005e9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b61c:	2200      	movs	r2, #0
 800b61e:	2182      	movs	r1, #130	; 0x82
 800b620:	f7fa fc3b 	bl	8005e9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	20001020 	.word	0x20001020
 800b634:	40005c00 	.word	0x40005c00

0800b638 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b64e:	4618      	mov	r0, r3
 800b650:	f7f9 f8ad 	bl	80047ae <HAL_PCD_Start>
 800b654:	4603      	mov	r3, r0
 800b656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b658:	7bfb      	ldrb	r3, [r7, #15]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 f94e 	bl	800b8fc <USBD_Get_USB_Status>
 800b660:	4603      	mov	r3, r0
 800b662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b664:	7bbb      	ldrb	r3, [r7, #14]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	4608      	mov	r0, r1
 800b678:	4611      	mov	r1, r2
 800b67a:	461a      	mov	r2, r3
 800b67c:	4603      	mov	r3, r0
 800b67e:	70fb      	strb	r3, [r7, #3]
 800b680:	460b      	mov	r3, r1
 800b682:	70bb      	strb	r3, [r7, #2]
 800b684:	4613      	mov	r3, r2
 800b686:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b696:	78bb      	ldrb	r3, [r7, #2]
 800b698:	883a      	ldrh	r2, [r7, #0]
 800b69a:	78f9      	ldrb	r1, [r7, #3]
 800b69c:	f7f9 fa25 	bl	8004aea <HAL_PCD_EP_Open>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6a4:	7bfb      	ldrb	r3, [r7, #15]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f000 f928 	bl	800b8fc <USBD_Get_USB_Status>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b084      	sub	sp, #16
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6d4:	78fa      	ldrb	r2, [r7, #3]
 800b6d6:	4611      	mov	r1, r2
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7f9 fa6c 	bl	8004bb6 <HAL_PCD_EP_Close>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 f909 	bl	800b8fc <USBD_Get_USB_Status>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	460b      	mov	r3, r1
 800b702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b704:	2300      	movs	r3, #0
 800b706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b712:	78fa      	ldrb	r2, [r7, #3]
 800b714:	4611      	mov	r1, r2
 800b716:	4618      	mov	r0, r3
 800b718:	f7f9 fb2c 	bl	8004d74 <HAL_PCD_EP_SetStall>
 800b71c:	4603      	mov	r3, r0
 800b71e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b720:	7bfb      	ldrb	r3, [r7, #15]
 800b722:	4618      	mov	r0, r3
 800b724:	f000 f8ea 	bl	800b8fc <USBD_Get_USB_Status>
 800b728:	4603      	mov	r3, r0
 800b72a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	460b      	mov	r3, r1
 800b740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b742:	2300      	movs	r3, #0
 800b744:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b746:	2300      	movs	r3, #0
 800b748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b750:	78fa      	ldrb	r2, [r7, #3]
 800b752:	4611      	mov	r1, r2
 800b754:	4618      	mov	r0, r3
 800b756:	f7f9 fb6d 	bl	8004e34 <HAL_PCD_EP_ClrStall>
 800b75a:	4603      	mov	r3, r0
 800b75c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
 800b760:	4618      	mov	r0, r3
 800b762:	f000 f8cb 	bl	800b8fc <USBD_Get_USB_Status>
 800b766:	4603      	mov	r3, r0
 800b768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b76a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b786:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	da0c      	bge.n	800b7aa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b790:	78fb      	ldrb	r3, [r7, #3]
 800b792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b796:	68f9      	ldr	r1, [r7, #12]
 800b798:	1c5a      	adds	r2, r3, #1
 800b79a:	4613      	mov	r3, r2
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	4413      	add	r3, r2
 800b7a0:	00db      	lsls	r3, r3, #3
 800b7a2:	440b      	add	r3, r1
 800b7a4:	3302      	adds	r3, #2
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	e00b      	b.n	800b7c2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b7aa:	78fb      	ldrb	r3, [r7, #3]
 800b7ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7b0:	68f9      	ldr	r1, [r7, #12]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	00db      	lsls	r3, r3, #3
 800b7ba:	440b      	add	r3, r1
 800b7bc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b7c0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3714      	adds	r7, #20
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bc80      	pop	{r7}
 800b7ca:	4770      	bx	lr

0800b7cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7e6:	78fa      	ldrb	r2, [r7, #3]
 800b7e8:	4611      	mov	r1, r2
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7f9 f958 	bl	8004aa0 <HAL_PCD_SetAddress>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f000 f880 	bl	800b8fc <USBD_Get_USB_Status>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b800:	7bbb      	ldrb	r3, [r7, #14]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b086      	sub	sp, #24
 800b80e:	af00      	add	r7, sp, #0
 800b810:	60f8      	str	r0, [r7, #12]
 800b812:	607a      	str	r2, [r7, #4]
 800b814:	461a      	mov	r2, r3
 800b816:	460b      	mov	r3, r1
 800b818:	72fb      	strb	r3, [r7, #11]
 800b81a:	4613      	mov	r3, r2
 800b81c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b82c:	893b      	ldrh	r3, [r7, #8]
 800b82e:	7af9      	ldrb	r1, [r7, #11]
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	f7f9 fa5c 	bl	8004cee <HAL_PCD_EP_Transmit>
 800b836:	4603      	mov	r3, r0
 800b838:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b83a:	7dfb      	ldrb	r3, [r7, #23]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f000 f85d 	bl	800b8fc <USBD_Get_USB_Status>
 800b842:	4603      	mov	r3, r0
 800b844:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b846:	7dbb      	ldrb	r3, [r7, #22]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3718      	adds	r7, #24
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	607a      	str	r2, [r7, #4]
 800b85a:	461a      	mov	r2, r3
 800b85c:	460b      	mov	r3, r1
 800b85e:	72fb      	strb	r3, [r7, #11]
 800b860:	4613      	mov	r3, r2
 800b862:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b864:	2300      	movs	r3, #0
 800b866:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b868:	2300      	movs	r3, #0
 800b86a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b872:	893b      	ldrh	r3, [r7, #8]
 800b874:	7af9      	ldrb	r1, [r7, #11]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	f7f9 f9e5 	bl	8004c46 <HAL_PCD_EP_Receive>
 800b87c:	4603      	mov	r3, r0
 800b87e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b880:	7dfb      	ldrb	r3, [r7, #23]
 800b882:	4618      	mov	r0, r3
 800b884:	f000 f83a 	bl	800b8fc <USBD_Get_USB_Status>
 800b888:	4603      	mov	r3, r0
 800b88a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b88c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	460b      	mov	r3, r1
 800b8a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8a8:	78fa      	ldrb	r2, [r7, #3]
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7f9 fa07 	bl	8004cc0 <HAL_PCD_EP_GetRxCount>
 800b8b2:	4603      	mov	r3, r0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b8c4:	4b02      	ldr	r3, [pc, #8]	; (800b8d0 <USBD_static_malloc+0x14>)
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	370c      	adds	r7, #12
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bc80      	pop	{r7}
 800b8ce:	4770      	bx	lr
 800b8d0:	2000130c 	.word	0x2000130c

0800b8d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]

}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bc80      	pop	{r7}
 800b8e4:	4770      	bx	lr

0800b8e6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b8f2:	bf00      	nop
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bc80      	pop	{r7}
 800b8fa:	4770      	bx	lr

0800b8fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	4603      	mov	r3, r0
 800b904:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b90a:	79fb      	ldrb	r3, [r7, #7]
 800b90c:	2b03      	cmp	r3, #3
 800b90e:	d817      	bhi.n	800b940 <USBD_Get_USB_Status+0x44>
 800b910:	a201      	add	r2, pc, #4	; (adr r2, 800b918 <USBD_Get_USB_Status+0x1c>)
 800b912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b916:	bf00      	nop
 800b918:	0800b929 	.word	0x0800b929
 800b91c:	0800b92f 	.word	0x0800b92f
 800b920:	0800b935 	.word	0x0800b935
 800b924:	0800b93b 	.word	0x0800b93b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b928:	2300      	movs	r3, #0
 800b92a:	73fb      	strb	r3, [r7, #15]
    break;
 800b92c:	e00b      	b.n	800b946 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b92e:	2302      	movs	r3, #2
 800b930:	73fb      	strb	r3, [r7, #15]
    break;
 800b932:	e008      	b.n	800b946 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b934:	2301      	movs	r3, #1
 800b936:	73fb      	strb	r3, [r7, #15]
    break;
 800b938:	e005      	b.n	800b946 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b93a:	2302      	movs	r3, #2
 800b93c:	73fb      	strb	r3, [r7, #15]
    break;
 800b93e:	e002      	b.n	800b946 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b940:	2302      	movs	r3, #2
 800b942:	73fb      	strb	r3, [r7, #15]
    break;
 800b944:	bf00      	nop
  }
  return usb_status;
 800b946:	7bfb      	ldrb	r3, [r7, #15]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bc80      	pop	{r7}
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop

0800b954 <ob1203_I2C_Write>:
{
	HAL_GPIO_WritePin(ob1203_RST_GPIO_PORT, ob1203_RST_PIN, RESET);
}

HAL_StatusTypeDef ob1203_I2C_Write(uint8_t address, uint8_t * data, uint8_t count)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af02      	add	r7, sp, #8
 800b95a:	4603      	mov	r3, r0
 800b95c:	6039      	str	r1, [r7, #0]
 800b95e:	71fb      	strb	r3, [r7, #7]
 800b960:	4613      	mov	r3, r2
 800b962:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Master_Transmit(&cur_i2c, address << 1, data, count, 10);
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	b29b      	uxth	r3, r3
 800b968:	005b      	lsls	r3, r3, #1
 800b96a:	b299      	uxth	r1, r3
 800b96c:	79bb      	ldrb	r3, [r7, #6]
 800b96e:	b29b      	uxth	r3, r3
 800b970:	220a      	movs	r2, #10
 800b972:	9200      	str	r2, [sp, #0]
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	4804      	ldr	r0, [pc, #16]	; (800b988 <ob1203_I2C_Write+0x34>)
 800b978:	f7f6 fa8e 	bl	8001e98 <HAL_I2C_Master_Transmit>
 800b97c:	4603      	mov	r3, r0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	200002fc 	.word	0x200002fc

0800b98c <ob1203_I2C_Read>:

HAL_StatusTypeDef ob1203_I2C_Read(uint8_t address, uint8_t * reg, uint8_t * buffer, uint8_t cmd_size, uint8_t count)
{
 800b98c:	b590      	push	{r4, r7, lr}
 800b98e:	b089      	sub	sp, #36	; 0x24
 800b990:	af04      	add	r7, sp, #16
 800b992:	60b9      	str	r1, [r7, #8]
 800b994:	607a      	str	r2, [r7, #4]
 800b996:	461a      	mov	r2, r3
 800b998:	4603      	mov	r3, r0
 800b99a:	73fb      	strb	r3, [r7, #15]
 800b99c:	4613      	mov	r3, r2
 800b99e:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Mem_Read(&cur_i2c, address << 1, *reg, cmd_size, buffer, count, 10);
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	005b      	lsls	r3, r3, #1
 800b9a6:	b299      	uxth	r1, r3
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	b29a      	uxth	r2, r3
 800b9ae:	7bbb      	ldrb	r3, [r7, #14]
 800b9b0:	b298      	uxth	r0, r3
 800b9b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	240a      	movs	r4, #10
 800b9ba:	9402      	str	r4, [sp, #8]
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	4803      	ldr	r0, [pc, #12]	; (800b9d4 <ob1203_I2C_Read+0x48>)
 800b9c6:	f7f6 fb65 	bl	8002094 <HAL_I2C_Mem_Read>
 800b9ca:	4603      	mov	r3, r0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd90      	pop	{r4, r7, pc}
 800b9d4:	200002fc 	.word	0x200002fc

0800b9d8 <ob1203_Delay_ms>:

void ob1203_Delay_ms(uint32_t ms)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7f5 fda3 	bl	800152c <HAL_Delay>
}
 800b9e6:	bf00      	nop
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <ob1203_send_results>:

void ob1203_send_results(uint32_t ppg, unsigned char channel_num)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b084      	sub	sp, #16
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	70fb      	strb	r3, [r7, #3]
	unsigned char* send_buf;
	send_buf = &ppg;
 800b9fa:	1d3b      	adds	r3, r7, #4
 800b9fc:	60fb      	str	r3, [r7, #12]
	ob1203_send_preambula();
 800b9fe:	f000 f813 	bl	800ba28 <ob1203_send_preambula>
	ob1203_Delay_ms(5);
 800ba02:	2005      	movs	r0, #5
 800ba04:	f7ff ffe8 	bl	800b9d8 <ob1203_Delay_ms>
	CDC_Transmit_FS((unsigned char*) &channel_num, 1);
 800ba08:	1cfb      	adds	r3, r7, #3
 800ba0a:	2101      	movs	r1, #1
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7ff fbc3 	bl	800b198 <CDC_Transmit_FS>
	ob1203_Delay_ms(5);
 800ba12:	2005      	movs	r0, #5
 800ba14:	f7ff ffe0 	bl	800b9d8 <ob1203_Delay_ms>
	CDC_Transmit_FS((unsigned char*) send_buf, 4);
 800ba18:	2104      	movs	r1, #4
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f7ff fbbc 	bl	800b198 <CDC_Transmit_FS>
}
 800ba20:	bf00      	nop
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <ob1203_send_preambula>:

void ob1203_send_preambula()
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
	char preambula[4];
	preambula[0] = 0xAA;
 800ba2e:	23aa      	movs	r3, #170	; 0xaa
 800ba30:	713b      	strb	r3, [r7, #4]
	preambula[1] = 0x55;
 800ba32:	2355      	movs	r3, #85	; 0x55
 800ba34:	717b      	strb	r3, [r7, #5]
	preambula[2] = 0xAA;
 800ba36:	23aa      	movs	r3, #170	; 0xaa
 800ba38:	71bb      	strb	r3, [r7, #6]
	preambula[3] = 0x55;
 800ba3a:	2355      	movs	r3, #85	; 0x55
 800ba3c:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((unsigned char*) &preambula, 4);
 800ba3e:	1d3b      	adds	r3, r7, #4
 800ba40:	2104      	movs	r1, #4
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7ff fba8 	bl	800b198 <CDC_Transmit_FS>
}
 800ba48:	bf00      	nop
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <ob1203_send_info>:

void ob1203_send_info(uint8_t rate)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	4603      	mov	r3, r0
 800ba58:	71fb      	strb	r3, [r7, #7]
	uint8_t size = 1;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	73fb      	strb	r3, [r7, #15]
	uint8_t channel_num = 1;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	73bb      	strb	r3, [r7, #14]
	CDC_Transmit_FS((unsigned char*) &rate, 1);
 800ba62:	1dfb      	adds	r3, r7, #7
 800ba64:	2101      	movs	r1, #1
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff fb96 	bl	800b198 <CDC_Transmit_FS>
	ob1203_Delay_ms(5);
 800ba6c:	2005      	movs	r0, #5
 800ba6e:	f7ff ffb3 	bl	800b9d8 <ob1203_Delay_ms>
	CDC_Transmit_FS((unsigned char*) &size, 1);
 800ba72:	f107 030f 	add.w	r3, r7, #15
 800ba76:	2101      	movs	r1, #1
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7ff fb8d 	bl	800b198 <CDC_Transmit_FS>
	ob1203_Delay_ms(5);
 800ba7e:	2005      	movs	r0, #5
 800ba80:	f7ff ffaa 	bl	800b9d8 <ob1203_Delay_ms>
	CDC_Transmit_FS((unsigned char*) &channel_num, 1);
 800ba84:	f107 030e 	add.w	r3, r7, #14
 800ba88:	2101      	movs	r1, #1
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7ff fb84 	bl	800b198 <CDC_Transmit_FS>
}
 800ba90:	bf00      	nop
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <heartrate11_default_cfg>:
    return I2C_MASTER_SUCCESS;
}
#endif

err_t heartrate11_default_cfg(heartrate11_t *ctx)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
    err_t error_flag = HEARTRATE11_OK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	73fb      	strb	r3, [r7, #15]
    error_flag |= heartrate11_reset_device(ctx);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f8f1 	bl	800bc8c <heartrate11_reset_device>
 800baaa:	4603      	mov	r3, r0
 800baac:	461a      	mov	r2, r3
 800baae:	7bfb      	ldrb	r3, [r7, #15]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	73fb      	strb	r3, [r7, #15]
#if defined(__MIKROC_PRO_FOR_ARM__)
    Delay_100ms();
#endif
#if defined(HAL_STM32F103)
    ob1203_Delay_ms(100);
 800bab4:	2064      	movs	r0, #100	; 0x64
 800bab6:	f7ff ff8f 	bl	800b9d8 <ob1203_Delay_ms>
#endif
    error_flag |= heartrate11_write_register ( ctx, HEARTRATE11_REG_MAIN_CTRL_1, HEARTRATE11_PS_SAI_OFF |
 800baba:	2203      	movs	r2, #3
 800babc:	2116      	movs	r1, #22
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f8d1 	bl	800bc66 <heartrate11_write_register>
 800bac4:	4603      	mov	r3, r0
 800bac6:	461a      	mov	r2, r3
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
 800baca:	4313      	orrs	r3, r2
 800bacc:	73fb      	strb	r3, [r7, #15]
                                                                                     HEARTRATE11_HR_MODE |
                                                                                     HEARTRATE11_PPG_PS_ON );
	error_flag |= heartrate11_write_register ( ctx, HEARTRATE11_REG_INT_CFG_1, HEARTRATE11_PPG_INT_ON );
 800bace:	2210      	movs	r2, #16
 800bad0:	212c      	movs	r1, #44	; 0x2c
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f8c7 	bl	800bc66 <heartrate11_write_register>
 800bad8:	4603      	mov	r3, r0
 800bada:	461a      	mov	r2, r3
 800badc:	7bfb      	ldrb	r3, [r7, #15]
 800bade:	4313      	orrs	r3, r2
 800bae0:	73fb      	strb	r3, [r7, #15]
	error_flag |= heartrate11_set_led_current ( ctx, HEARTRATE11_IR_LED, HEARTRATE11_IR_LED_DEFAULT_CURRENT );
 800bae2:	4a19      	ldr	r2, [pc, #100]	; (800bb48 <heartrate11_default_cfg+0xb0>)
 800bae4:	2101      	movs	r1, #1
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f8de 	bl	800bca8 <heartrate11_set_led_current>
 800baec:	4603      	mov	r3, r0
 800baee:	461a      	mov	r2, r3
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	73fb      	strb	r3, [r7, #15]
	error_flag |= heartrate11_write_register ( ctx, HEARTRATE11_REG_PPG_PS_GAIN, HEARTRATE11_PPG_PS_GAIN_1 |
 800baf6:	2209      	movs	r2, #9
 800baf8:	212e      	movs	r1, #46	; 0x2e
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 f8b3 	bl	800bc66 <heartrate11_write_register>
 800bb00:	4603      	mov	r3, r0
 800bb02:	461a      	mov	r2, r3
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	73fb      	strb	r3, [r7, #15]
																				 HEARTRATE11_PPG_PS_GAIN_RESERVED );
	error_flag |= heartrate11_write_register ( ctx, HEARTRATE11_REG_PPG_AVG, HEARTRATE11_PPG_AVG_32 |
 800bb0a:	225a      	movs	r2, #90	; 0x5a
 800bb0c:	2135      	movs	r1, #53	; 0x35
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f8a9 	bl	800bc66 <heartrate11_write_register>
 800bb14:	4603      	mov	r3, r0
 800bb16:	461a      	mov	r2, r3
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	73fb      	strb	r3, [r7, #15]
																			 HEARTRATE11_PPG_AVG_RESERVED );
	error_flag |= heartrate11_write_register ( ctx, HEARTRATE11_REG_PPG_PWIDTH_PERIOD, HEARTRATE11_PPG_PWIDTH_247US |
 800bb1e:	4b0b      	ldr	r3, [pc, #44]	; (800bb4c <heartrate11_default_cfg+0xb4>)
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	461a      	mov	r2, r3
 800bb2a:	2136      	movs	r1, #54	; 0x36
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f89a 	bl	800bc66 <heartrate11_write_register>
 800bb32:	4603      	mov	r3, r0
 800bb34:	461a      	mov	r2, r3
 800bb36:	7bfb      	ldrb	r3, [r7, #15]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	73fb      	strb	r3, [r7, #15]
																					   rate);
    return error_flag;
 800bb3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	42480000 	.word	0x42480000
 800bb4c:	200002f8 	.word	0x200002f8

0800bb50 <heartrate11_generic_write>:

err_t heartrate11_generic_write(heartrate11_t *ctx, uint8_t reg, uint8_t *data_in, uint8_t len)
{
 800bb50:	b590      	push	{r4, r7, lr}
 800bb52:	b0c7      	sub	sp, #284	; 0x11c
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	f507 748c 	add.w	r4, r7, #280	; 0x118
 800bb5a:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800bb5e:	6020      	str	r0, [r4, #0]
 800bb60:	4608      	mov	r0, r1
 800bb62:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800bb66:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800bb6a:	600a      	str	r2, [r1, #0]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bb72:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800bb76:	4602      	mov	r2, r0
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bb7e:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800bb82:	460a      	mov	r2, r1
 800bb84:	701a      	strb	r2, [r3, #0]
    uint8_t data_buf[256] = { 0 };
 800bb86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bb8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb8e:	2200      	movs	r2, #0
 800bb90:	601a      	str	r2, [r3, #0]
 800bb92:	3304      	adds	r3, #4
 800bb94:	22fc      	movs	r2, #252	; 0xfc
 800bb96:	2100      	movs	r1, #0
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f000 f987 	bl	800beac <memset>
    data_buf[0] = reg;
 800bb9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bba6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800bbaa:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 800bbae:	7812      	ldrb	r2, [r2, #0]
 800bbb0:	701a      	strb	r2, [r3, #0]
    for(uint8_t cnt = 0; cnt < len; cnt++)
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800bbb8:	e015      	b.n	800bbe6 <heartrate11_generic_write+0x96>
    {
        data_buf[cnt + 1] = data_in[cnt];
 800bbba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbbe:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800bbc2:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800bbc6:	6812      	ldr	r2, [r2, #0]
 800bbc8:	441a      	add	r2, r3
 800bbca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbce:	3301      	adds	r3, #1
 800bbd0:	7811      	ldrb	r1, [r2, #0]
 800bbd2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800bbd6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800bbda:	54d1      	strb	r1, [r2, r3]
    for(uint8_t cnt = 0; cnt < len; cnt++)
 800bbdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800bbe6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bbea:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800bbee:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d3e0      	bcc.n	800bbba <heartrate11_generic_write+0x6a>
    }
#if defined(__MIKROC_PRO_FOR_ARM__)
    return i2c_master_write(&ctx->i2c, data_buf, len + 1);
#endif
#if defined(HAL_STM32F103)
    if(HEARTRATE11_OK == ob1203_I2C_Write(HEARTRATE11_DEVICE_ADDRESS, data_buf, len + 1))
 800bbf8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bbfc:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	3301      	adds	r3, #1
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	f107 0314 	add.w	r3, r7, #20
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	2053      	movs	r0, #83	; 0x53
 800bc0e:	f7ff fea1 	bl	800b954 <ob1203_I2C_Write>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d101      	bne.n	800bc1c <heartrate11_generic_write+0xcc>
    	return HEARTRATE11_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	e000      	b.n	800bc1e <heartrate11_generic_write+0xce>
#endif
    return HEARTRATE11_ERROR;
 800bc1c:	23ff      	movs	r3, #255	; 0xff
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd90      	pop	{r4, r7, pc}

0800bc28 <heartrate11_generic_read>:

err_t heartrate11_generic_read(heartrate11_t *ctx, uint8_t reg, uint8_t *data_out, uint8_t len)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af02      	add	r7, sp, #8
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	607a      	str	r2, [r7, #4]
 800bc32:	461a      	mov	r2, r3
 800bc34:	460b      	mov	r3, r1
 800bc36:	72fb      	strb	r3, [r7, #11]
 800bc38:	4613      	mov	r3, r2
 800bc3a:	72bb      	strb	r3, [r7, #10]
#if defined(__MIKROC_PRO_FOR_ARM__)
    return i2c_master_write_then_read(&ctx->i2c, &reg, 1, data_out, len);
#endif
#if defined(HAL_STM32F103)
    if(HEARTRATE11_OK == ob1203_I2C_Read(HEARTRATE11_DEVICE_ADDRESS, &reg, data_out, 1, len + 1))
 800bc3c:	7abb      	ldrb	r3, [r7, #10]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	f107 010b 	add.w	r1, r7, #11
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	2301      	movs	r3, #1
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	2053      	movs	r0, #83	; 0x53
 800bc4e:	f7ff fe9d 	bl	800b98c <ob1203_I2C_Read>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d101      	bne.n	800bc5c <heartrate11_generic_read+0x34>
    	return HEARTRATE11_OK;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	e000      	b.n	800bc5e <heartrate11_generic_read+0x36>
#endif
    return HEARTRATE11_ERROR;
 800bc5c:	23ff      	movs	r3, #255	; 0xff
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <heartrate11_write_register>:

err_t heartrate11_write_register(heartrate11_t *ctx, uint8_t reg, uint8_t data_in)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b082      	sub	sp, #8
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	460b      	mov	r3, r1
 800bc70:	70fb      	strb	r3, [r7, #3]
 800bc72:	4613      	mov	r3, r2
 800bc74:	70bb      	strb	r3, [r7, #2]
    return heartrate11_generic_write(ctx, reg, &data_in, 1);
 800bc76:	1cba      	adds	r2, r7, #2
 800bc78:	78f9      	ldrb	r1, [r7, #3]
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7ff ff67 	bl	800bb50 <heartrate11_generic_write>
 800bc82:	4603      	mov	r3, r0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <heartrate11_reset_device>:
    return digital_in_read(&ctx->int_pin);
}
#endif

err_t heartrate11_reset_device(heartrate11_t *ctx)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
    return heartrate11_write_register(ctx, HEARTRATE11_REG_MAIN_CTRL_0, HEARTRATE11_SW_RESET);
 800bc94:	2280      	movs	r2, #128	; 0x80
 800bc96:	2115      	movs	r1, #21
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f7ff ffe4 	bl	800bc66 <heartrate11_write_register>
 800bc9e:	4603      	mov	r3, r0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <heartrate11_set_led_current>:

err_t heartrate11_set_led_current(heartrate11_t *ctx, uint8_t led, float current)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	72fb      	strb	r3, [r7, #11]
    if(((HEARTRATE11_RED_LED == led) &&(current > HEARTRATE11_RED_LED_MAX_CURRENT)) ||
 800bcb6:	7afb      	ldrb	r3, [r7, #11]
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d106      	bne.n	800bcca <heartrate11_set_led_current+0x22>
 800bcbc:	4944      	ldr	r1, [pc, #272]	; (800bdd0 <heartrate11_set_led_current+0x128>)
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7f4 fea0 	bl	8000a04 <__aeabi_fcmpgt>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d109      	bne.n	800bcde <heartrate11_set_led_current+0x36>
 800bcca:	7afb      	ldrb	r3, [r7, #11]
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d806      	bhi.n	800bcde <heartrate11_set_led_current+0x36>
        (led > HEARTRATE11_RED_LED) || (current > HEARTRATE11_PS_IR_LED_MAX_CURRENT))
 800bcd0:	4940      	ldr	r1, [pc, #256]	; (800bdd4 <heartrate11_set_led_current+0x12c>)
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7f4 fe96 	bl	8000a04 <__aeabi_fcmpgt>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d001      	beq.n	800bce2 <heartrate11_set_led_current+0x3a>
    {
        return HEARTRATE11_ERROR;
 800bcde:	23ff      	movs	r3, #255	; 0xff
 800bce0:	e069      	b.n	800bdb6 <heartrate11_set_led_current+0x10e>
    }
    uint16_t raw_curr;
    uint8_t reg;
    if(HEARTRATE11_RED_LED == led)
 800bce2:	7afb      	ldrb	r3, [r7, #11]
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	d128      	bne.n	800bd3a <heartrate11_set_led_current+0x92>
    {
        raw_curr =(uint16_t)((current / HEARTRATE11_RED_LED_MAX_CURRENT) * HEARTRATE11_RED_LED_CURRENT_RES +
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7f4 fb95 	bl	8000418 <__aeabi_f2d>
 800bcee:	f04f 0200 	mov.w	r2, #0
 800bcf2:	4b39      	ldr	r3, [pc, #228]	; (800bdd8 <heartrate11_set_led_current+0x130>)
 800bcf4:	f7f4 fd12 	bl	800071c <__aeabi_ddiv>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4610      	mov	r0, r2
 800bcfe:	4619      	mov	r1, r3
 800bd00:	a32f      	add	r3, pc, #188	; (adr r3, 800bdc0 <heartrate11_set_led_current+0x118>)
 800bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd06:	f7f4 fbdf 	bl	80004c8 <__aeabi_dmul>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	4610      	mov	r0, r2
 800bd10:	4619      	mov	r1, r3
 800bd12:	f04f 0200 	mov.w	r2, #0
 800bd16:	4b31      	ldr	r3, [pc, #196]	; (800bddc <heartrate11_set_led_current+0x134>)
 800bd18:	f7f4 fa20 	bl	800015c <__adddf3>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4610      	mov	r0, r2
 800bd22:	4619      	mov	r1, r3
 800bd24:	f7f4 fde2 	bl	80008ec <__aeabi_d2uiz>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	82fb      	strh	r3, [r7, #22]
                                  HEARTRATE11_ROUND_TO_NEAREST_INT);
        raw_curr &= HEARTRATE11_RED_LED_CURRENT_RES;
 800bd2c:	8afb      	ldrh	r3, [r7, #22]
 800bd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd32:	82fb      	strh	r3, [r7, #22]
        reg = HEARTRATE11_REG_PPG_RLED_CURR_0;
 800bd34:	2332      	movs	r3, #50	; 0x32
 800bd36:	757b      	strb	r3, [r7, #21]
 800bd38:	e02d      	b.n	800bd96 <heartrate11_set_led_current+0xee>
    }
    else
    {
        raw_curr =(uint16_t)((current / HEARTRATE11_PS_IR_LED_MAX_CURRENT) * HEARTRATE11_PS_IR_LED_CURRENT_RES +
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f7f4 fb6c 	bl	8000418 <__aeabi_f2d>
 800bd40:	f04f 0200 	mov.w	r2, #0
 800bd44:	4b26      	ldr	r3, [pc, #152]	; (800bde0 <heartrate11_set_led_current+0x138>)
 800bd46:	f7f4 fce9 	bl	800071c <__aeabi_ddiv>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	4610      	mov	r0, r2
 800bd50:	4619      	mov	r1, r3
 800bd52:	a31d      	add	r3, pc, #116	; (adr r3, 800bdc8 <heartrate11_set_led_current+0x120>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	f7f4 fbb6 	bl	80004c8 <__aeabi_dmul>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4610      	mov	r0, r2
 800bd62:	4619      	mov	r1, r3
 800bd64:	f04f 0200 	mov.w	r2, #0
 800bd68:	4b1c      	ldr	r3, [pc, #112]	; (800bddc <heartrate11_set_led_current+0x134>)
 800bd6a:	f7f4 f9f7 	bl	800015c <__adddf3>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	4610      	mov	r0, r2
 800bd74:	4619      	mov	r1, r3
 800bd76:	f7f4 fdb9 	bl	80008ec <__aeabi_d2uiz>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	82fb      	strh	r3, [r7, #22]
                                  HEARTRATE11_ROUND_TO_NEAREST_INT);
        raw_curr &= HEARTRATE11_PS_IR_LED_CURRENT_RES;
 800bd7e:	8afb      	ldrh	r3, [r7, #22]
 800bd80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd84:	82fb      	strh	r3, [r7, #22]
        if(HEARTRATE11_PS_LED == led)
 800bd86:	7afb      	ldrb	r3, [r7, #11]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d102      	bne.n	800bd92 <heartrate11_set_led_current+0xea>
        {
            reg = HEARTRATE11_REG_PS_LED_CURR_0;
 800bd8c:	2317      	movs	r3, #23
 800bd8e:	757b      	strb	r3, [r7, #21]
 800bd90:	e001      	b.n	800bd96 <heartrate11_set_led_current+0xee>
        }
        else
        {
            reg = HEARTRATE11_REG_PPG_IRLED_CURR_0;
 800bd92:	2330      	movs	r3, #48	; 0x30
 800bd94:	757b      	strb	r3, [r7, #21]
        }
    }
    uint8_t data_buf[2];
    data_buf[0] =(uint8_t)(raw_curr & 0xFF);
 800bd96:	8afb      	ldrh	r3, [r7, #22]
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	743b      	strb	r3, [r7, #16]
    data_buf[1] =(uint8_t)((raw_curr >> 8) & 0xFF);
 800bd9c:	8afb      	ldrh	r3, [r7, #22]
 800bd9e:	0a1b      	lsrs	r3, r3, #8
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	747b      	strb	r3, [r7, #17]
    return heartrate11_generic_write(ctx, reg, data_buf, 2);
 800bda6:	f107 0210 	add.w	r2, r7, #16
 800bdaa:	7d79      	ldrb	r1, [r7, #21]
 800bdac:	2302      	movs	r3, #2
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f7ff fece 	bl	800bb50 <heartrate11_generic_write>
 800bdb4:	4603      	mov	r3, r0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3718      	adds	r7, #24
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	00000000 	.word	0x00000000
 800bdc4:	407ff000 	.word	0x407ff000
 800bdc8:	00000000 	.word	0x00000000
 800bdcc:	408ff800 	.word	0x408ff800
 800bdd0:	42fa0000 	.word	0x42fa0000
 800bdd4:	437a0000 	.word	0x437a0000
 800bdd8:	405f4000 	.word	0x405f4000
 800bddc:	3fe00000 	.word	0x3fe00000
 800bde0:	406f4000 	.word	0x406f4000

0800bde4 <heartrate11_read_fifo>:
    *proximity =((uint16_t) data_buf[1] << 8) | data_buf[0];
    return error_flag;
}

err_t heartrate11_read_fifo(heartrate11_t *ctx, uint32_t *fifo_data)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
    uint8_t data_buf[3] = { 0 };
 800bdee:	4b0e      	ldr	r3, [pc, #56]	; (800be28 <heartrate11_read_fifo+0x44>)
 800bdf0:	881b      	ldrh	r3, [r3, #0]
 800bdf2:	81bb      	strh	r3, [r7, #12]
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	73bb      	strb	r3, [r7, #14]
    err_t error_flag = heartrate11_generic_read(ctx, HEARTRATE11_REG_FIFO_DATA, data_buf, 3);
 800bdf8:	f107 020c 	add.w	r2, r7, #12
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	213b      	movs	r1, #59	; 0x3b
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f7ff ff11 	bl	800bc28 <heartrate11_generic_read>
 800be06:	4603      	mov	r3, r0
 800be08:	73fb      	strb	r3, [r7, #15]
    *fifo_data =((uint32_t) data_buf[2] << 16) | ((uint16_t) data_buf[1] << 8) | data_buf[0];
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	041b      	lsls	r3, r3, #16
 800be0e:	7b7a      	ldrb	r2, [r7, #13]
 800be10:	0212      	lsls	r2, r2, #8
 800be12:	4313      	orrs	r3, r2
 800be14:	7b3a      	ldrb	r2, [r7, #12]
 800be16:	431a      	orrs	r2, r3
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	601a      	str	r2, [r3, #0]
    return error_flag;
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	0800c090 	.word	0x0800c090

0800be2c <__errno>:
 800be2c:	4b01      	ldr	r3, [pc, #4]	; (800be34 <__errno+0x8>)
 800be2e:	6818      	ldr	r0, [r3, #0]
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	20000180 	.word	0x20000180

0800be38 <__libc_init_array>:
 800be38:	b570      	push	{r4, r5, r6, lr}
 800be3a:	2600      	movs	r6, #0
 800be3c:	4d0c      	ldr	r5, [pc, #48]	; (800be70 <__libc_init_array+0x38>)
 800be3e:	4c0d      	ldr	r4, [pc, #52]	; (800be74 <__libc_init_array+0x3c>)
 800be40:	1b64      	subs	r4, r4, r5
 800be42:	10a4      	asrs	r4, r4, #2
 800be44:	42a6      	cmp	r6, r4
 800be46:	d109      	bne.n	800be5c <__libc_init_array+0x24>
 800be48:	f000 f8ea 	bl	800c020 <_init>
 800be4c:	2600      	movs	r6, #0
 800be4e:	4d0a      	ldr	r5, [pc, #40]	; (800be78 <__libc_init_array+0x40>)
 800be50:	4c0a      	ldr	r4, [pc, #40]	; (800be7c <__libc_init_array+0x44>)
 800be52:	1b64      	subs	r4, r4, r5
 800be54:	10a4      	asrs	r4, r4, #2
 800be56:	42a6      	cmp	r6, r4
 800be58:	d105      	bne.n	800be66 <__libc_init_array+0x2e>
 800be5a:	bd70      	pop	{r4, r5, r6, pc}
 800be5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be60:	4798      	blx	r3
 800be62:	3601      	adds	r6, #1
 800be64:	e7ee      	b.n	800be44 <__libc_init_array+0xc>
 800be66:	f855 3b04 	ldr.w	r3, [r5], #4
 800be6a:	4798      	blx	r3
 800be6c:	3601      	adds	r6, #1
 800be6e:	e7f2      	b.n	800be56 <__libc_init_array+0x1e>
 800be70:	0800c0ac 	.word	0x0800c0ac
 800be74:	0800c0ac 	.word	0x0800c0ac
 800be78:	0800c0ac 	.word	0x0800c0ac
 800be7c:	0800c0b0 	.word	0x0800c0b0

0800be80 <malloc>:
 800be80:	4b02      	ldr	r3, [pc, #8]	; (800be8c <malloc+0xc>)
 800be82:	4601      	mov	r1, r0
 800be84:	6818      	ldr	r0, [r3, #0]
 800be86:	f000 b839 	b.w	800befc <_malloc_r>
 800be8a:	bf00      	nop
 800be8c:	20000180 	.word	0x20000180

0800be90 <memcpy>:
 800be90:	440a      	add	r2, r1
 800be92:	4291      	cmp	r1, r2
 800be94:	f100 33ff 	add.w	r3, r0, #4294967295
 800be98:	d100      	bne.n	800be9c <memcpy+0xc>
 800be9a:	4770      	bx	lr
 800be9c:	b510      	push	{r4, lr}
 800be9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bea2:	4291      	cmp	r1, r2
 800bea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bea8:	d1f9      	bne.n	800be9e <memcpy+0xe>
 800beaa:	bd10      	pop	{r4, pc}

0800beac <memset>:
 800beac:	4603      	mov	r3, r0
 800beae:	4402      	add	r2, r0
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d100      	bne.n	800beb6 <memset+0xa>
 800beb4:	4770      	bx	lr
 800beb6:	f803 1b01 	strb.w	r1, [r3], #1
 800beba:	e7f9      	b.n	800beb0 <memset+0x4>

0800bebc <sbrk_aligned>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	4e0e      	ldr	r6, [pc, #56]	; (800bef8 <sbrk_aligned+0x3c>)
 800bec0:	460c      	mov	r4, r1
 800bec2:	6831      	ldr	r1, [r6, #0]
 800bec4:	4605      	mov	r5, r0
 800bec6:	b911      	cbnz	r1, 800bece <sbrk_aligned+0x12>
 800bec8:	f000 f88c 	bl	800bfe4 <_sbrk_r>
 800becc:	6030      	str	r0, [r6, #0]
 800bece:	4621      	mov	r1, r4
 800bed0:	4628      	mov	r0, r5
 800bed2:	f000 f887 	bl	800bfe4 <_sbrk_r>
 800bed6:	1c43      	adds	r3, r0, #1
 800bed8:	d00a      	beq.n	800bef0 <sbrk_aligned+0x34>
 800beda:	1cc4      	adds	r4, r0, #3
 800bedc:	f024 0403 	bic.w	r4, r4, #3
 800bee0:	42a0      	cmp	r0, r4
 800bee2:	d007      	beq.n	800bef4 <sbrk_aligned+0x38>
 800bee4:	1a21      	subs	r1, r4, r0
 800bee6:	4628      	mov	r0, r5
 800bee8:	f000 f87c 	bl	800bfe4 <_sbrk_r>
 800beec:	3001      	adds	r0, #1
 800beee:	d101      	bne.n	800bef4 <sbrk_aligned+0x38>
 800bef0:	f04f 34ff 	mov.w	r4, #4294967295
 800bef4:	4620      	mov	r0, r4
 800bef6:	bd70      	pop	{r4, r5, r6, pc}
 800bef8:	20001530 	.word	0x20001530

0800befc <_malloc_r>:
 800befc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf00:	1ccd      	adds	r5, r1, #3
 800bf02:	f025 0503 	bic.w	r5, r5, #3
 800bf06:	3508      	adds	r5, #8
 800bf08:	2d0c      	cmp	r5, #12
 800bf0a:	bf38      	it	cc
 800bf0c:	250c      	movcc	r5, #12
 800bf0e:	2d00      	cmp	r5, #0
 800bf10:	4607      	mov	r7, r0
 800bf12:	db01      	blt.n	800bf18 <_malloc_r+0x1c>
 800bf14:	42a9      	cmp	r1, r5
 800bf16:	d905      	bls.n	800bf24 <_malloc_r+0x28>
 800bf18:	230c      	movs	r3, #12
 800bf1a:	2600      	movs	r6, #0
 800bf1c:	603b      	str	r3, [r7, #0]
 800bf1e:	4630      	mov	r0, r6
 800bf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf24:	4e2e      	ldr	r6, [pc, #184]	; (800bfe0 <_malloc_r+0xe4>)
 800bf26:	f000 f86d 	bl	800c004 <__malloc_lock>
 800bf2a:	6833      	ldr	r3, [r6, #0]
 800bf2c:	461c      	mov	r4, r3
 800bf2e:	bb34      	cbnz	r4, 800bf7e <_malloc_r+0x82>
 800bf30:	4629      	mov	r1, r5
 800bf32:	4638      	mov	r0, r7
 800bf34:	f7ff ffc2 	bl	800bebc <sbrk_aligned>
 800bf38:	1c43      	adds	r3, r0, #1
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	d14d      	bne.n	800bfda <_malloc_r+0xde>
 800bf3e:	6834      	ldr	r4, [r6, #0]
 800bf40:	4626      	mov	r6, r4
 800bf42:	2e00      	cmp	r6, #0
 800bf44:	d140      	bne.n	800bfc8 <_malloc_r+0xcc>
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	4631      	mov	r1, r6
 800bf4a:	4638      	mov	r0, r7
 800bf4c:	eb04 0803 	add.w	r8, r4, r3
 800bf50:	f000 f848 	bl	800bfe4 <_sbrk_r>
 800bf54:	4580      	cmp	r8, r0
 800bf56:	d13a      	bne.n	800bfce <_malloc_r+0xd2>
 800bf58:	6821      	ldr	r1, [r4, #0]
 800bf5a:	3503      	adds	r5, #3
 800bf5c:	1a6d      	subs	r5, r5, r1
 800bf5e:	f025 0503 	bic.w	r5, r5, #3
 800bf62:	3508      	adds	r5, #8
 800bf64:	2d0c      	cmp	r5, #12
 800bf66:	bf38      	it	cc
 800bf68:	250c      	movcc	r5, #12
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	f7ff ffa5 	bl	800bebc <sbrk_aligned>
 800bf72:	3001      	adds	r0, #1
 800bf74:	d02b      	beq.n	800bfce <_malloc_r+0xd2>
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	442b      	add	r3, r5
 800bf7a:	6023      	str	r3, [r4, #0]
 800bf7c:	e00e      	b.n	800bf9c <_malloc_r+0xa0>
 800bf7e:	6822      	ldr	r2, [r4, #0]
 800bf80:	1b52      	subs	r2, r2, r5
 800bf82:	d41e      	bmi.n	800bfc2 <_malloc_r+0xc6>
 800bf84:	2a0b      	cmp	r2, #11
 800bf86:	d916      	bls.n	800bfb6 <_malloc_r+0xba>
 800bf88:	1961      	adds	r1, r4, r5
 800bf8a:	42a3      	cmp	r3, r4
 800bf8c:	6025      	str	r5, [r4, #0]
 800bf8e:	bf18      	it	ne
 800bf90:	6059      	strne	r1, [r3, #4]
 800bf92:	6863      	ldr	r3, [r4, #4]
 800bf94:	bf08      	it	eq
 800bf96:	6031      	streq	r1, [r6, #0]
 800bf98:	5162      	str	r2, [r4, r5]
 800bf9a:	604b      	str	r3, [r1, #4]
 800bf9c:	4638      	mov	r0, r7
 800bf9e:	f104 060b 	add.w	r6, r4, #11
 800bfa2:	f000 f835 	bl	800c010 <__malloc_unlock>
 800bfa6:	f026 0607 	bic.w	r6, r6, #7
 800bfaa:	1d23      	adds	r3, r4, #4
 800bfac:	1af2      	subs	r2, r6, r3
 800bfae:	d0b6      	beq.n	800bf1e <_malloc_r+0x22>
 800bfb0:	1b9b      	subs	r3, r3, r6
 800bfb2:	50a3      	str	r3, [r4, r2]
 800bfb4:	e7b3      	b.n	800bf1e <_malloc_r+0x22>
 800bfb6:	6862      	ldr	r2, [r4, #4]
 800bfb8:	42a3      	cmp	r3, r4
 800bfba:	bf0c      	ite	eq
 800bfbc:	6032      	streq	r2, [r6, #0]
 800bfbe:	605a      	strne	r2, [r3, #4]
 800bfc0:	e7ec      	b.n	800bf9c <_malloc_r+0xa0>
 800bfc2:	4623      	mov	r3, r4
 800bfc4:	6864      	ldr	r4, [r4, #4]
 800bfc6:	e7b2      	b.n	800bf2e <_malloc_r+0x32>
 800bfc8:	4634      	mov	r4, r6
 800bfca:	6876      	ldr	r6, [r6, #4]
 800bfcc:	e7b9      	b.n	800bf42 <_malloc_r+0x46>
 800bfce:	230c      	movs	r3, #12
 800bfd0:	4638      	mov	r0, r7
 800bfd2:	603b      	str	r3, [r7, #0]
 800bfd4:	f000 f81c 	bl	800c010 <__malloc_unlock>
 800bfd8:	e7a1      	b.n	800bf1e <_malloc_r+0x22>
 800bfda:	6025      	str	r5, [r4, #0]
 800bfdc:	e7de      	b.n	800bf9c <_malloc_r+0xa0>
 800bfde:	bf00      	nop
 800bfe0:	2000152c 	.word	0x2000152c

0800bfe4 <_sbrk_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	4d05      	ldr	r5, [pc, #20]	; (800c000 <_sbrk_r+0x1c>)
 800bfea:	4604      	mov	r4, r0
 800bfec:	4608      	mov	r0, r1
 800bfee:	602b      	str	r3, [r5, #0]
 800bff0:	f7f5 f9d8 	bl	80013a4 <_sbrk>
 800bff4:	1c43      	adds	r3, r0, #1
 800bff6:	d102      	bne.n	800bffe <_sbrk_r+0x1a>
 800bff8:	682b      	ldr	r3, [r5, #0]
 800bffa:	b103      	cbz	r3, 800bffe <_sbrk_r+0x1a>
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	bd38      	pop	{r3, r4, r5, pc}
 800c000:	20001534 	.word	0x20001534

0800c004 <__malloc_lock>:
 800c004:	4801      	ldr	r0, [pc, #4]	; (800c00c <__malloc_lock+0x8>)
 800c006:	f000 b809 	b.w	800c01c <__retarget_lock_acquire_recursive>
 800c00a:	bf00      	nop
 800c00c:	20001538 	.word	0x20001538

0800c010 <__malloc_unlock>:
 800c010:	4801      	ldr	r0, [pc, #4]	; (800c018 <__malloc_unlock+0x8>)
 800c012:	f000 b804 	b.w	800c01e <__retarget_lock_release_recursive>
 800c016:	bf00      	nop
 800c018:	20001538 	.word	0x20001538

0800c01c <__retarget_lock_acquire_recursive>:
 800c01c:	4770      	bx	lr

0800c01e <__retarget_lock_release_recursive>:
 800c01e:	4770      	bx	lr

0800c020 <_init>:
 800c020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c022:	bf00      	nop
 800c024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c026:	bc08      	pop	{r3}
 800c028:	469e      	mov	lr, r3
 800c02a:	4770      	bx	lr

0800c02c <_fini>:
 800c02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02e:	bf00      	nop
 800c030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c032:	bc08      	pop	{r3}
 800c034:	469e      	mov	lr, r3
 800c036:	4770      	bx	lr
