
ob1203.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800de98  0800de98  0001de98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df0c  0800df0c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800df0c  0800df0c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df0c  0800df0c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df0c  0800df0c  0001df0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df10  0800df10  0001df10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800df14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001468  200001e4  0800e0f8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000164c  0800e0f8  0002164c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001801f  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d01  00000000  00000000  0003822c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  0003bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003d478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d239  00000000  00000000  0003e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b734  00000000  00000000  0005ba49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933ef  00000000  00000000  0007717d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a56c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf8  00000000  00000000  0010a5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800de80 	.word	0x0800de80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800de80 	.word	0x0800de80

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_frsub>:
 800092c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000930:	e002      	b.n	8000938 <__addsf3>
 8000932:	bf00      	nop

08000934 <__aeabi_fsub>:
 8000934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000938 <__addsf3>:
 8000938:	0042      	lsls	r2, r0, #1
 800093a:	bf1f      	itttt	ne
 800093c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000940:	ea92 0f03 	teqne	r2, r3
 8000944:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000948:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094c:	d06a      	beq.n	8000a24 <__addsf3+0xec>
 800094e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000952:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000956:	bfc1      	itttt	gt
 8000958:	18d2      	addgt	r2, r2, r3
 800095a:	4041      	eorgt	r1, r0
 800095c:	4048      	eorgt	r0, r1
 800095e:	4041      	eorgt	r1, r0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	2b19      	cmp	r3, #25
 8000966:	bf88      	it	hi
 8000968:	4770      	bxhi	lr
 800096a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000982:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4249      	negne	r1, r1
 800098a:	ea92 0f03 	teq	r2, r3
 800098e:	d03f      	beq.n	8000a10 <__addsf3+0xd8>
 8000990:	f1a2 0201 	sub.w	r2, r2, #1
 8000994:	fa41 fc03 	asr.w	ip, r1, r3
 8000998:	eb10 000c 	adds.w	r0, r0, ip
 800099c:	f1c3 0320 	rsb	r3, r3, #32
 80009a0:	fa01 f103 	lsl.w	r1, r1, r3
 80009a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__addsf3+0x78>
 80009aa:	4249      	negs	r1, r1
 80009ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b4:	d313      	bcc.n	80009de <__addsf3+0xa6>
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ba:	d306      	bcc.n	80009ca <__addsf3+0x92>
 80009bc:	0840      	lsrs	r0, r0, #1
 80009be:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c2:	f102 0201 	add.w	r2, r2, #1
 80009c6:	2afe      	cmp	r2, #254	; 0xfe
 80009c8:	d251      	bcs.n	8000a6e <__addsf3+0x136>
 80009ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d2:	bf08      	it	eq
 80009d4:	f020 0001 	biceq.w	r0, r0, #1
 80009d8:	ea40 0003 	orr.w	r0, r0, r3
 80009dc:	4770      	bx	lr
 80009de:	0049      	lsls	r1, r1, #1
 80009e0:	eb40 0000 	adc.w	r0, r0, r0
 80009e4:	3a01      	subs	r2, #1
 80009e6:	bf28      	it	cs
 80009e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009ec:	d2ed      	bcs.n	80009ca <__addsf3+0x92>
 80009ee:	fab0 fc80 	clz	ip, r0
 80009f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f6:	ebb2 020c 	subs.w	r2, r2, ip
 80009fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fe:	bfaa      	itet	ge
 8000a00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a04:	4252      	neglt	r2, r2
 8000a06:	4318      	orrge	r0, r3
 8000a08:	bfbc      	itt	lt
 8000a0a:	40d0      	lsrlt	r0, r2
 8000a0c:	4318      	orrlt	r0, r3
 8000a0e:	4770      	bx	lr
 8000a10:	f092 0f00 	teq	r2, #0
 8000a14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a18:	bf06      	itte	eq
 8000a1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1e:	3201      	addeq	r2, #1
 8000a20:	3b01      	subne	r3, #1
 8000a22:	e7b5      	b.n	8000990 <__addsf3+0x58>
 8000a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	bf18      	it	ne
 8000a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a32:	d021      	beq.n	8000a78 <__addsf3+0x140>
 8000a34:	ea92 0f03 	teq	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__addsf3+0x10c>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	bf08      	it	eq
 8000a40:	4608      	moveq	r0, r1
 8000a42:	4770      	bx	lr
 8000a44:	ea90 0f01 	teq	r0, r1
 8000a48:	bf1c      	itt	ne
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	4770      	bxne	lr
 8000a4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a52:	d104      	bne.n	8000a5e <__addsf3+0x126>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	bf28      	it	cs
 8000a58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a5c:	4770      	bx	lr
 8000a5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a62:	bf3c      	itt	cc
 8000a64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bxcc	lr
 8000a6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a76:	4770      	bx	lr
 8000a78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a7c:	bf16      	itet	ne
 8000a7e:	4608      	movne	r0, r1
 8000a80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a84:	4601      	movne	r1, r0
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	bf06      	itte	eq
 8000a8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8e:	ea90 0f01 	teqeq	r0, r1
 8000a92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_ui2f>:
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e004      	b.n	8000aa8 <__aeabi_i2f+0x8>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_i2f>:
 8000aa0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	ea5f 0c00 	movs.w	ip, r0
 8000aac:	bf08      	it	eq
 8000aae:	4770      	bxeq	lr
 8000ab0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	e01c      	b.n	8000af6 <__aeabi_l2f+0x2a>

08000abc <__aeabi_ul2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e00a      	b.n	8000ae0 <__aeabi_l2f+0x14>
 8000aca:	bf00      	nop

08000acc <__aeabi_l2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_l2f+0x14>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	ea5f 0c01 	movs.w	ip, r1
 8000ae4:	bf02      	ittt	eq
 8000ae6:	4684      	moveq	ip, r0
 8000ae8:	4601      	moveq	r1, r0
 8000aea:	2000      	moveq	r0, #0
 8000aec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af0:	bf08      	it	eq
 8000af2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afa:	fabc f28c 	clz	r2, ip
 8000afe:	3a08      	subs	r2, #8
 8000b00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b04:	db10      	blt.n	8000b28 <__aeabi_l2f+0x5c>
 8000b06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f102 0220 	add.w	r2, r2, #32
 8000b2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b38:	fa21 f202 	lsr.w	r2, r1, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_fmul>:
 8000b48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b50:	bf1e      	ittt	ne
 8000b52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b56:	ea92 0f0c 	teqne	r2, ip
 8000b5a:	ea93 0f0c 	teqne	r3, ip
 8000b5e:	d06f      	beq.n	8000c40 <__aeabi_fmul+0xf8>
 8000b60:	441a      	add	r2, r3
 8000b62:	ea80 0c01 	eor.w	ip, r0, r1
 8000b66:	0240      	lsls	r0, r0, #9
 8000b68:	bf18      	it	ne
 8000b6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b6e:	d01e      	beq.n	8000bae <__aeabi_fmul+0x66>
 8000b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b88:	bf3e      	ittt	cc
 8000b8a:	0049      	lslcc	r1, r1, #1
 8000b8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b90:	005b      	lslcc	r3, r3, #1
 8000b92:	ea40 0001 	orr.w	r0, r0, r1
 8000b96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b9a:	2afd      	cmp	r2, #253	; 0xfd
 8000b9c:	d81d      	bhi.n	8000bda <__aeabi_fmul+0x92>
 8000b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	4770      	bx	lr
 8000bae:	f090 0f00 	teq	r0, #0
 8000bb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bb6:	bf08      	it	eq
 8000bb8:	0249      	lsleq	r1, r1, #9
 8000bba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bc2:	3a7f      	subs	r2, #127	; 0x7f
 8000bc4:	bfc2      	ittt	gt
 8000bc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bce:	4770      	bxgt	lr
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	dc5d      	bgt.n	8000c98 <__aeabi_fmul+0x150>
 8000bdc:	f112 0f19 	cmn.w	r2, #25
 8000be0:	bfdc      	itt	le
 8000be2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000be6:	4770      	bxle	lr
 8000be8:	f1c2 0200 	rsb	r2, r2, #0
 8000bec:	0041      	lsls	r1, r0, #1
 8000bee:	fa21 f102 	lsr.w	r1, r1, r2
 8000bf2:	f1c2 0220 	rsb	r2, r2, #32
 8000bf6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bfe:	f140 0000 	adc.w	r0, r0, #0
 8000c02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c06:	bf08      	it	eq
 8000c08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c0c:	4770      	bx	lr
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c16:	bf02      	ittt	eq
 8000c18:	0040      	lsleq	r0, r0, #1
 8000c1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c1e:	3a01      	subeq	r2, #1
 8000c20:	d0f9      	beq.n	8000c16 <__aeabi_fmul+0xce>
 8000c22:	ea40 000c 	orr.w	r0, r0, ip
 8000c26:	f093 0f00 	teq	r3, #0
 8000c2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0049      	lsleq	r1, r1, #1
 8000c32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c36:	3b01      	subeq	r3, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c3a:	ea41 010c 	orr.w	r1, r1, ip
 8000c3e:	e78f      	b.n	8000b60 <__aeabi_fmul+0x18>
 8000c40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c44:	ea92 0f0c 	teq	r2, ip
 8000c48:	bf18      	it	ne
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d00a      	beq.n	8000c66 <__aeabi_fmul+0x11e>
 8000c50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c54:	bf18      	it	ne
 8000c56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	d1d8      	bne.n	8000c0e <__aeabi_fmul+0xc6>
 8000c5c:	ea80 0001 	eor.w	r0, r0, r1
 8000c60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f090 0f00 	teq	r0, #0
 8000c6a:	bf17      	itett	ne
 8000c6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c70:	4608      	moveq	r0, r1
 8000c72:	f091 0f00 	teqne	r1, #0
 8000c76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c7a:	d014      	beq.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c7c:	ea92 0f0c 	teq	r2, ip
 8000c80:	d101      	bne.n	8000c86 <__aeabi_fmul+0x13e>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d10f      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c86:	ea93 0f0c 	teq	r3, ip
 8000c8a:	d103      	bne.n	8000c94 <__aeabi_fmul+0x14c>
 8000c8c:	024b      	lsls	r3, r1, #9
 8000c8e:	bf18      	it	ne
 8000c90:	4608      	movne	r0, r1
 8000c92:	d108      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c94:	ea80 0001 	eor.w	r0, r0, r1
 8000c98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fdiv>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d069      	beq.n	8000d9c <__aeabi_fdiv+0xec>
 8000cc8:	eba2 0203 	sub.w	r2, r2, r3
 8000ccc:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd0:	0249      	lsls	r1, r1, #9
 8000cd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cd6:	d037      	beq.n	8000d48 <__aeabi_fdiv+0x98>
 8000cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cdc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ce0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	bf38      	it	cc
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cf2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	bf24      	itt	cs
 8000cfa:	1a5b      	subcs	r3, r3, r1
 8000cfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d04:	bf24      	itt	cs
 8000d06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d12:	bf24      	itt	cs
 8000d14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d20:	bf24      	itt	cs
 8000d22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	bf18      	it	ne
 8000d2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d32:	d1e0      	bne.n	8000cf6 <__aeabi_fdiv+0x46>
 8000d34:	2afd      	cmp	r2, #253	; 0xfd
 8000d36:	f63f af50 	bhi.w	8000bda <__aeabi_fmul+0x92>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d50:	327f      	adds	r2, #127	; 0x7f
 8000d52:	bfc2      	ittt	gt
 8000d54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5c:	4770      	bxgt	lr
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	3a01      	subs	r2, #1
 8000d68:	e737      	b.n	8000bda <__aeabi_fmul+0x92>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fdiv+0xc2>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xda>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e795      	b.n	8000cc8 <__aeabi_fdiv+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	d108      	bne.n	8000db8 <__aeabi_fdiv+0x108>
 8000da6:	0242      	lsls	r2, r0, #9
 8000da8:	f47f af7d 	bne.w	8000ca6 <__aeabi_fmul+0x15e>
 8000dac:	ea93 0f0c 	teq	r3, ip
 8000db0:	f47f af70 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e776      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	d104      	bne.n	8000dc8 <__aeabi_fdiv+0x118>
 8000dbe:	024b      	lsls	r3, r1, #9
 8000dc0:	f43f af4c 	beq.w	8000c5c <__aeabi_fmul+0x114>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e76e      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000dc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dcc:	bf18      	it	ne
 8000dce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd2:	d1ca      	bne.n	8000d6a <__aeabi_fdiv+0xba>
 8000dd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dd8:	f47f af5c 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000ddc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000de0:	f47f af3c 	bne.w	8000c5c <__aeabi_fmul+0x114>
 8000de4:	e75f      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000de6:	bf00      	nop

08000de8 <__gesf2>:
 8000de8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dec:	e006      	b.n	8000dfc <__cmpsf2+0x4>
 8000dee:	bf00      	nop

08000df0 <__lesf2>:
 8000df0:	f04f 0c01 	mov.w	ip, #1
 8000df4:	e002      	b.n	8000dfc <__cmpsf2+0x4>
 8000df6:	bf00      	nop

08000df8 <__cmpsf2>:
 8000df8:	f04f 0c01 	mov.w	ip, #1
 8000dfc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e0c:	bf18      	it	ne
 8000e0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e12:	d011      	beq.n	8000e38 <__cmpsf2+0x40>
 8000e14:	b001      	add	sp, #4
 8000e16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e1a:	bf18      	it	ne
 8000e1c:	ea90 0f01 	teqne	r0, r1
 8000e20:	bf58      	it	pl
 8000e22:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e26:	bf88      	it	hi
 8000e28:	17c8      	asrhi	r0, r1, #31
 8000e2a:	bf38      	it	cc
 8000e2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e30:	bf18      	it	ne
 8000e32:	f040 0001 	orrne.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e3c:	d102      	bne.n	8000e44 <__cmpsf2+0x4c>
 8000e3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e42:	d105      	bne.n	8000e50 <__cmpsf2+0x58>
 8000e44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e48:	d1e4      	bne.n	8000e14 <__cmpsf2+0x1c>
 8000e4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e4e:	d0e1      	beq.n	8000e14 <__cmpsf2+0x1c>
 8000e50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <__aeabi_cfrcmple>:
 8000e58:	4684      	mov	ip, r0
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	4661      	mov	r1, ip
 8000e5e:	e7ff      	b.n	8000e60 <__aeabi_cfcmpeq>

08000e60 <__aeabi_cfcmpeq>:
 8000e60:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e62:	f7ff ffc9 	bl	8000df8 <__cmpsf2>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	bf48      	it	mi
 8000e6a:	f110 0f00 	cmnmi.w	r0, #0
 8000e6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e70 <__aeabi_fcmpeq>:
 8000e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e74:	f7ff fff4 	bl	8000e60 <__aeabi_cfcmpeq>
 8000e78:	bf0c      	ite	eq
 8000e7a:	2001      	moveq	r0, #1
 8000e7c:	2000      	movne	r0, #0
 8000e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e82:	bf00      	nop

08000e84 <__aeabi_fcmplt>:
 8000e84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e88:	f7ff ffea 	bl	8000e60 <__aeabi_cfcmpeq>
 8000e8c:	bf34      	ite	cc
 8000e8e:	2001      	movcc	r0, #1
 8000e90:	2000      	movcs	r0, #0
 8000e92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e96:	bf00      	nop

08000e98 <__aeabi_fcmple>:
 8000e98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e9c:	f7ff ffe0 	bl	8000e60 <__aeabi_cfcmpeq>
 8000ea0:	bf94      	ite	ls
 8000ea2:	2001      	movls	r0, #1
 8000ea4:	2000      	movhi	r0, #0
 8000ea6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eaa:	bf00      	nop

08000eac <__aeabi_fcmpge>:
 8000eac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb0:	f7ff ffd2 	bl	8000e58 <__aeabi_cfrcmple>
 8000eb4:	bf94      	ite	ls
 8000eb6:	2001      	movls	r0, #1
 8000eb8:	2000      	movhi	r0, #0
 8000eba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_fcmpgt>:
 8000ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec4:	f7ff ffc8 	bl	8000e58 <__aeabi_cfrcmple>
 8000ec8:	bf34      	ite	cc
 8000eca:	2001      	movcc	r0, #1
 8000ecc:	2000      	movcs	r0, #0
 8000ece:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed2:	bf00      	nop

08000ed4 <Buffer_Init>:

/* Private variables ---------------------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
BUF_HandleTypeDef Buffer_Init(size_t size)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	BUF_HandleTypeDef circular_buffer = malloc(sizeof(circular_buf));
 8000edc:	2010      	movs	r0, #16
 8000ede:	f00c feff 	bl	800dce0 <malloc>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60fb      	str	r3, [r7, #12]
	// If size is 1024, capacity will be 1025, and indices' range is [0..1024]
	circular_buffer->buffer = (uint8_t*)malloc(size + 1);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4618      	mov	r0, r3
 8000eec:	f00c fef8 	bl	800dce0 <malloc>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	601a      	str	r2, [r3, #0]
	circular_buffer->capacity = size + 1;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	60da      	str	r2, [r3, #12]
	Buffer_Clear(circular_buffer);
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f000 f830 	bl	8000f66 <Buffer_Clear>
	return circular_buffer;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <Buffer_Size>:

size_t Buffer_Size(BUF_HandleTypeDef buf)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	size_t size = (buf->capacity + buf->write_index - buf->read_index) % buf->capacity;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	441a      	add	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	68d2      	ldr	r2, [r2, #12]
 8000f2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f30:	fb01 f202 	mul.w	r2, r1, r2
 8000f34:	1a9b      	subs	r3, r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]
	return size;
 8000f38:	68fb      	ldr	r3, [r7, #12]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <Buffer_IsEmpty>:

int Buffer_IsEmpty(BUF_HandleTypeDef buf)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == 0;
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffdf 	bl	8000f10 <Buffer_Size>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf0c      	ite	eq
 8000f58:	2301      	moveq	r3, #1
 8000f5a:	2300      	movne	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <Buffer_Clear>:

void Buffer_Clear(BUF_HandleTypeDef buf)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
	buf->write_index = 0;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
	buf->read_index = 0;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <Buffer_IsFull>:

int Buffer_IsFull(BUF_HandleTypeDef buf)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == buf->capacity - 1;
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ffbf 	bl	8000f10 <Buffer_Size>
 8000f92:	4602      	mov	r2, r0
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	bf0c      	ite	eq
 8000f9e:	2301      	moveq	r3, #1
 8000fa0:	2300      	movne	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <Buffer_Read>:

uint8_t Buffer_Read(BUF_HandleTypeDef buf)
 {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
	if(!Buffer_IsEmpty(buf))
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffc3 	bl	8000f44 <Buffer_IsEmpty>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d116      	bne.n	8000ff2 <Buffer_Read+0x46>
	{
		data = buf->buffer[buf->read_index];
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	73fb      	strb	r3, [r7, #15]
		buf->read_index++;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	609a      	str	r2, [r3, #8]
		buf->read_index %= buf->capacity;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	68d2      	ldr	r2, [r2, #12]
 8000fe4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fe8:	fb01 f202 	mul.w	r2, r1, r2
 8000fec:	1a9a      	subs	r2, r3, r2
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
	}
	return data;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <Buffer_Write>:

void Buffer_Write(BUF_HandleTypeDef buf, uint8_t data)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
	if(Buffer_IsFull(buf))
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ffbb 	bl	8000f84 <Buffer_IsFull>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <Buffer_Write+0x1e>
	{
	    Buffer_Read(buf);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ffc9 	bl	8000fac <Buffer_Read>
	}
	buf->buffer[buf->write_index] = data;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	4413      	add	r3, r2
 8001024:	78fa      	ldrb	r2, [r7, #3]
 8001026:	701a      	strb	r2, [r3, #0]
	buf->write_index++;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	605a      	str	r2, [r3, #4]
	buf->write_index %= buf->capacity;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68d2      	ldr	r2, [r2, #12]
 800103a:	fbb3 f1f2 	udiv	r1, r3, r2
 800103e:	fb01 f202 	mul.w	r2, r1, r2
 8001042:	1a9a      	subs	r2, r3, r2
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	605a      	str	r2, [r3, #4]
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <Command_Check>:
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	2301      	movs	r3, #1
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	e037      	b.n	80010d0 <Command_Check+0x80>
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <Command_Check+0xa0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ffa1 	bl	8000fac <Buffer_Read>
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d021      	beq.n	80010b8 <Command_Check+0x68>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b02      	cmp	r3, #2
 8001078:	dc2a      	bgt.n	80010d0 <Command_Check+0x80>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <Command_Check+0x38>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d00c      	beq.n	80010a0 <Command_Check+0x50>
 8001086:	e023      	b.n	80010d0 <Command_Check+0x80>
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <Command_Check+0x44>
 800108e:	2301      	movs	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e01d      	b.n	80010d0 <Command_Check+0x80>
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2bff      	cmp	r3, #255	; 0xff
 8001098:	d11a      	bne.n	80010d0 <Command_Check+0x80>
 800109a:	2302      	movs	r3, #2
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e017      	b.n	80010d0 <Command_Check+0x80>
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	d105      	bne.n	80010b2 <Command_Check+0x62>
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <Command_Check+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e00e      	b.n	80010d0 <Command_Check+0x80>
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	e00b      	b.n	80010d0 <Command_Check+0x80>
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d105      	bne.n	80010ca <Command_Check+0x7a>
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <Command_Check+0xa4>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e001      	b.n	80010ce <Command_Check+0x7e>
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	bf00      	nop
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <Command_Check+0xa0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff35 	bl	8000f44 <Buffer_IsEmpty>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <Command_Check+0x96>
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d0bc      	beq.n	8001060 <Command_Check+0x10>
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000384 	.word	0x20000384
 80010f4:	20000000 	.word	0x20000000

080010f8 <rate_case>:
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	2300      	movs	r3, #0
 8001104:	81fb      	strh	r3, [r7, #14]
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	3b02      	subs	r3, #2
 800110a:	2b05      	cmp	r3, #5
 800110c:	d823      	bhi.n	8001156 <rate_case+0x5e>
 800110e:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <rate_case+0x1c>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	0800112d 	.word	0x0800112d
 8001118:	08001135 	.word	0x08001135
 800111c:	0800113d 	.word	0x0800113d
 8001120:	08001145 	.word	0x08001145
 8001124:	0800114b 	.word	0x0800114b
 8001128:	08001151 	.word	0x08001151
 800112c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001130:	81fb      	strh	r3, [r7, #14]
 8001132:	e010      	b.n	8001156 <rate_case+0x5e>
 8001134:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001138:	81fb      	strh	r3, [r7, #14]
 800113a:	e00c      	b.n	8001156 <rate_case+0x5e>
 800113c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001140:	81fb      	strh	r3, [r7, #14]
 8001142:	e008      	b.n	8001156 <rate_case+0x5e>
 8001144:	23c8      	movs	r3, #200	; 0xc8
 8001146:	81fb      	strh	r3, [r7, #14]
 8001148:	e005      	b.n	8001156 <rate_case+0x5e>
 800114a:	2364      	movs	r3, #100	; 0x64
 800114c:	81fb      	strh	r3, [r7, #14]
 800114e:	e002      	b.n	8001156 <rate_case+0x5e>
 8001150:	2332      	movs	r3, #50	; 0x32
 8001152:	81fb      	strh	r3, [r7, #14]
 8001154:	bf00      	nop
 8001156:	89fb      	ldrh	r3, [r7, #14]
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <main>:
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	2080      	movs	r0, #128	; 0x80
 800116c:	f7ff feb2 	bl	8000ed4 <Buffer_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	4a72      	ldr	r2, [pc, #456]	; (800133c <main+0x1d8>)
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	f000 fd55 	bl	8001c24 <HAL_Init>
 800117a:	f000 f8f9 	bl	8001370 <SystemClock_Config>
 800117e:	f000 fa95 	bl	80016ac <MX_GPIO_Init>
 8001182:	f000 f94f 	bl	8001424 <MX_I2C1_Init>
 8001186:	f000 f9a9 	bl	80014dc <MX_TIM2_Init>
 800118a:	f00a ffe9 	bl	800c160 <MX_USB_DEVICE_Init>
 800118e:	f000 f977 	bl	8001480 <MX_I2C2_Init>
 8001192:	f000 fa3d 	bl	8001610 <MX_TIM4_Init>
 8001196:	f000 f9ed 	bl	8001574 <MX_TIM3_Init>
 800119a:	4b69      	ldr	r3, [pc, #420]	; (8001340 <main+0x1dc>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	4b67      	ldr	r3, [pc, #412]	; (8001344 <main+0x1e0>)
 80011a6:	2202      	movs	r2, #2
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	4a67      	ldr	r2, [pc, #412]	; (8001348 <main+0x1e4>)
 80011ac:	4b67      	ldr	r3, [pc, #412]	; (800134c <main+0x1e8>)
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	2354      	movs	r3, #84	; 0x54
 80011b4:	461a      	mov	r2, r3
 80011b6:	f00c fd9b 	bl	800dcf0 <memcpy>
 80011ba:	4865      	ldr	r0, [pc, #404]	; (8001350 <main+0x1ec>)
 80011bc:	f006 fae0 	bl	8007780 <HAL_TIM_Base_Start_IT>
 80011c0:	f7ff ff46 	bl	8001050 <Command_Check>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <main+0x6c>
 80011ca:	4b62      	ldr	r3, [pc, #392]	; (8001354 <main+0x1f0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	4b60      	ldr	r3, [pc, #384]	; (8001354 <main+0x1f0>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	f000 80a7 	beq.w	8001328 <main+0x1c4>
 80011da:	2b02      	cmp	r3, #2
 80011dc:	dcf0      	bgt.n	80011c0 <main+0x5c>
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <main+0x84>
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d010      	beq.n	8001208 <main+0xa4>
 80011e6:	e0a7      	b.n	8001338 <main+0x1d4>
 80011e8:	4b56      	ldr	r3, [pc, #344]	; (8001344 <main+0x1e0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <main+0x92>
 80011f0:	4b58      	ldr	r3, [pc, #352]	; (8001354 <main+0x1f0>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <main+0x1e0>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	f040 8099 	bne.w	8001332 <main+0x1ce>
 8001200:	4b54      	ldr	r3, [pc, #336]	; (8001354 <main+0x1f0>)
 8001202:	2202      	movs	r2, #2
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e094      	b.n	8001332 <main+0x1ce>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d123      	bne.n	8001256 <main+0xf2>
 800120e:	4b52      	ldr	r3, [pc, #328]	; (8001358 <main+0x1f4>)
 8001210:	2206      	movs	r2, #6
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	2000      	movs	r0, #0
 8001216:	f00c fa57 	bl	800d6c8 <tca9544a_I2C_SetX>
 800121a:	f000 faee 	bl	80017fa <OB1203_Setup>
 800121e:	2001      	movs	r0, #1
 8001220:	f00c fa52 	bl	800d6c8 <tca9544a_I2C_SetX>
 8001224:	f000 fae9 	bl	80017fa <OB1203_Setup>
 8001228:	2002      	movs	r0, #2
 800122a:	f00c fa4d 	bl	800d6c8 <tca9544a_I2C_SetX>
 800122e:	f000 fae4 	bl	80017fa <OB1203_Setup>
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b48      	ldr	r3, [pc, #288]	; (8001358 <main+0x1f4>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff5c 	bl	80010f8 <rate_case>
 8001240:	4603      	mov	r3, r0
 8001242:	4618      	mov	r0, r3
 8001244:	f00c faf2 	bl	800d82c <ob1203_send_info>
 8001248:	f00b fc42 	bl	800cad0 <BMX055_init_globals>
 800124c:	f00b fcaa 	bl	800cba4 <BMX055_setup>
 8001250:	2064      	movs	r0, #100	; 0x64
 8001252:	f00c fb14 	bl	800d87e <bmx055_send_info>
 8001256:	2108      	movs	r1, #8
 8001258:	4840      	ldr	r0, [pc, #256]	; (800135c <main+0x1f8>)
 800125a:	f001 f87d 	bl	8002358 <HAL_GPIO_ReadPin>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d14b      	bne.n	80012fc <main+0x198>
 8001264:	4a38      	ldr	r2, [pc, #224]	; (8001348 <main+0x1e4>)
 8001266:	4b39      	ldr	r3, [pc, #228]	; (800134c <main+0x1e8>)
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	2354      	movs	r3, #84	; 0x54
 800126e:	461a      	mov	r2, r3
 8001270:	f00c fd3e 	bl	800dcf0 <memcpy>
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	4618      	mov	r0, r3
 8001278:	f00c fa3e 	bl	800d6f8 <tca9544a_I2C_ReadX>
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	b2db      	uxtb	r3, r3
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00f      	beq.n	80012aa <main+0x146>
 800128a:	2000      	movs	r0, #0
 800128c:	f00c fa1c 	bl	800d6c8 <tca9544a_I2C_SetX>
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	4619      	mov	r1, r3
 800129a:	2000      	movs	r0, #0
 800129c:	f00c fcd2 	bl	800dc44 <heartrate11_read_fifo>
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2101      	movs	r1, #1
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00c fa45 	bl	800d734 <ob1203_send_results>
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00f      	beq.n	80012d0 <main+0x16c>
 80012b0:	2001      	movs	r0, #1
 80012b2:	f00c fa09 	bl	800d6c8 <tca9544a_I2C_SetX>
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	4619      	mov	r1, r3
 80012c0:	2000      	movs	r0, #0
 80012c2:	f00c fcbf 	bl	800dc44 <heartrate11_read_fifo>
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00c fa32 	bl	800d734 <ob1203_send_results>
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00f      	beq.n	80012f6 <main+0x192>
 80012d6:	2002      	movs	r0, #2
 80012d8:	f00c f9f6 	bl	800d6c8 <tca9544a_I2C_SetX>
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	4619      	mov	r1, r3
 80012e6:	2000      	movs	r0, #0
 80012e8:	f00c fcac 	bl	800dc44 <heartrate11_read_fifo>
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2103      	movs	r1, #3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00c fa1f 	bl	800d734 <ob1203_send_results>
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <main+0x1dc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <main+0x1fc>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d018      	beq.n	8001336 <main+0x1d2>
 8001304:	4817      	ldr	r0, [pc, #92]	; (8001364 <main+0x200>)
 8001306:	f00b fd1b 	bl	800cd40 <readAccelData>
 800130a:	4817      	ldr	r0, [pc, #92]	; (8001368 <main+0x204>)
 800130c:	f00b fd59 	bl	800cdc2 <readGyroData>
 8001310:	4816      	ldr	r0, [pc, #88]	; (800136c <main+0x208>)
 8001312:	f00b fd83 	bl	800ce1c <readMagData>
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <main+0x208>)
 8001318:	4913      	ldr	r1, [pc, #76]	; (8001368 <main+0x204>)
 800131a:	4812      	ldr	r0, [pc, #72]	; (8001364 <main+0x200>)
 800131c:	f00c fa30 	bl	800d780 <BMX_send_result>
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <main+0x1fc>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	e006      	b.n	8001336 <main+0x1d2>
 8001328:	f000 fa5c 	bl	80017e4 <OB1203_RST>
 800132c:	2301      	movs	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	e002      	b.n	8001338 <main+0x1d4>
 8001332:	bf00      	nop
 8001334:	e744      	b.n	80011c0 <main+0x5c>
 8001336:	bf00      	nop
 8001338:	e742      	b.n	80011c0 <main+0x5c>
 800133a:	bf00      	nop
 800133c:	20000384 	.word	0x20000384
 8001340:	200003dd 	.word	0x200003dd
 8001344:	20000000 	.word	0x20000000
 8001348:	20000388 	.word	0x20000388
 800134c:	20000254 	.word	0x20000254
 8001350:	200002f0 	.word	0x200002f0
 8001354:	20000380 	.word	0x20000380
 8001358:	200003dc 	.word	0x200003dc
 800135c:	40010c00 	.word	0x40010c00
 8001360:	200003de 	.word	0x200003de
 8001364:	200015fc 	.word	0x200015fc
 8001368:	20001604 	.word	0x20001604
 800136c:	2000160c 	.word	0x2000160c

08001370 <SystemClock_Config>:
 8001370:	b580      	push	{r7, lr}
 8001372:	b094      	sub	sp, #80	; 0x50
 8001374:	af00      	add	r7, sp, #0
 8001376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137a:	2228      	movs	r2, #40	; 0x28
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f00c fcc4 	bl	800dd0c <memset>
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	2301      	movs	r3, #1
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
 80013ae:	2301      	movs	r3, #1
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80013b2:	2302      	movs	r3, #2
 80013b4:	647b      	str	r3, [r7, #68]	; 0x44
 80013b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80013bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	4618      	mov	r0, r3
 80013c8:	f005 fcce 	bl	8006d68 <HAL_RCC_OscConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0x66>
 80013d2:	f000 fa28 	bl	8001826 <Error_Handler>
 80013d6:	230f      	movs	r3, #15
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e6:	623b      	str	r3, [r7, #32]
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2102      	movs	r1, #2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 ff3a 	bl	800726c <HAL_RCC_ClockConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x92>
 80013fe:	f000 fa12 	bl	8001826 <Error_Handler>
 8001402:	2310      	movs	r3, #16
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4618      	mov	r0, r3
 800140e:	f006 f8b1 	bl	8007574 <HAL_RCCEx_PeriphCLKConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0xac>
 8001418:	f000 fa05 	bl	8001826 <Error_Handler>
 800141c:	bf00      	nop
 800141e:	3750      	adds	r7, #80	; 0x50
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <MX_I2C1_Init>:
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_I2C1_Init+0x50>)
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <MX_I2C1_Init+0x54>)
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_I2C1_Init+0x50>)
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_I2C1_Init+0x58>)
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_I2C1_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_I2C1_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_I2C1_Init+0x50>)
 8001442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001446:	611a      	str	r2, [r3, #16]
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <MX_I2C1_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_I2C1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_I2C1_Init+0x50>)
 8001462:	f000 ffcb 	bl	80023fc <HAL_I2C_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_I2C1_Init+0x4c>
 800146c:	f000 f9db 	bl	8001826 <Error_Handler>
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000200 	.word	0x20000200
 8001478:	40005400 	.word	0x40005400
 800147c:	00061a80 	.word	0x00061a80

08001480 <MX_I2C2_Init>:
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C2_Init+0x50>)
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <MX_I2C2_Init+0x54>)
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_I2C2_Init+0x50>)
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_I2C2_Init+0x58>)
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_I2C2_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_I2C2_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_I2C2_Init+0x50>)
 800149e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <MX_I2C2_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_I2C2_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MX_I2C2_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_I2C2_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_I2C2_Init+0x50>)
 80014be:	f000 ff9d 	bl	80023fc <HAL_I2C_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_I2C2_Init+0x4c>
 80014c8:	f000 f9ad 	bl	8001826 <Error_Handler>
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000254 	.word	0x20000254
 80014d4:	40005800 	.word	0x40005800
 80014d8:	00061a80 	.word	0x00061a80

080014dc <MX_TIM2_Init>:
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	463b      	mov	r3, r7
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_TIM2_Init+0x94>)
 80014fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_TIM2_Init+0x94>)
 8001502:	2200      	movs	r2, #0
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_TIM2_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_TIM2_Init+0x94>)
 800150e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_TIM2_Init+0x94>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_TIM2_Init+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
 8001520:	4813      	ldr	r0, [pc, #76]	; (8001570 <MX_TIM2_Init+0x94>)
 8001522:	f006 f8dd 	bl	80076e0 <HAL_TIM_Base_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM2_Init+0x54>
 800152c:	f000 f97b 	bl	8001826 <Error_Handler>
 8001530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	4619      	mov	r1, r3
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <MX_TIM2_Init+0x94>)
 800153e:	f006 fa79 	bl	8007a34 <HAL_TIM_ConfigClockSource>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM2_Init+0x70>
 8001548:	f000 f96d 	bl	8001826 <Error_Handler>
 800154c:	2300      	movs	r3, #0
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	463b      	mov	r3, r7
 8001556:	4619      	mov	r1, r3
 8001558:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_TIM2_Init+0x94>)
 800155a:	f006 fc55 	bl	8007e08 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0x8c>
 8001564:	f000 f95f 	bl	8001826 <Error_Handler>
 8001568:	bf00      	nop
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200002a8 	.word	0x200002a8

08001574 <MX_TIM3_Init>:
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_TIM3_Init+0x94>)
 8001592:	4a1e      	ldr	r2, [pc, #120]	; (800160c <MX_TIM3_Init+0x98>)
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_TIM3_Init+0x94>)
 8001598:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_TIM3_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_TIM3_Init+0x94>)
 80015a6:	2263      	movs	r2, #99	; 0x63
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_TIM3_Init+0x94>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_TIM3_Init+0x94>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
 80015b6:	4814      	ldr	r0, [pc, #80]	; (8001608 <MX_TIM3_Init+0x94>)
 80015b8:	f006 f892 	bl	80076e0 <HAL_TIM_Base_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0x52>
 80015c2:	f000 f930 	bl	8001826 <Error_Handler>
 80015c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4619      	mov	r1, r3
 80015d2:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_TIM3_Init+0x94>)
 80015d4:	f006 fa2e 	bl	8007a34 <HAL_TIM_ConfigClockSource>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM3_Init+0x6e>
 80015de:	f000 f922 	bl	8001826 <Error_Handler>
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	463b      	mov	r3, r7
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <MX_TIM3_Init+0x94>)
 80015f0:	f006 fc0a 	bl	8007e08 <HAL_TIMEx_MasterConfigSynchronization>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM3_Init+0x8a>
 80015fa:	f000 f914 	bl	8001826 <Error_Handler>
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200002f0 	.word	0x200002f0
 800160c:	40000400 	.word	0x40000400

08001610 <MX_TIM4_Init>:
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_TIM4_Init+0x94>)
 800162e:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <MX_TIM4_Init+0x98>)
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001634:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_TIM4_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001642:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_TIM4_Init+0x94>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
 8001654:	4813      	ldr	r0, [pc, #76]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001656:	f006 f843 	bl	80076e0 <HAL_TIM_Base_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM4_Init+0x54>
 8001660:	f000 f8e1 	bl	8001826 <Error_Handler>
 8001664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001672:	f006 f9df 	bl	8007a34 <HAL_TIM_ConfigClockSource>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM4_Init+0x70>
 800167c:	f000 f8d3 	bl	8001826 <Error_Handler>
 8001680:	2300      	movs	r3, #0
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	463b      	mov	r3, r7
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_TIM4_Init+0x94>)
 800168e:	f006 fbbb 	bl	8007e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM4_Init+0x8c>
 8001698:	f000 f8c5 	bl	8001826 <Error_Handler>
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000338 	.word	0x20000338
 80016a8:	40000800 	.word	0x40000800

080016ac <MX_GPIO_Init>:
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	4b42      	ldr	r3, [pc, #264]	; (80017cc <MX_GPIO_Init+0x120>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a41      	ldr	r2, [pc, #260]	; (80017cc <MX_GPIO_Init+0x120>)
 80016c6:	f043 0310 	orr.w	r3, r3, #16
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <MX_GPIO_Init+0x120>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <MX_GPIO_Init+0x120>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a3b      	ldr	r2, [pc, #236]	; (80017cc <MX_GPIO_Init+0x120>)
 80016de:	f043 0320 	orr.w	r3, r3, #32
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b39      	ldr	r3, [pc, #228]	; (80017cc <MX_GPIO_Init+0x120>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0320 	and.w	r3, r3, #32
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	4b36      	ldr	r3, [pc, #216]	; (80017cc <MX_GPIO_Init+0x120>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a35      	ldr	r2, [pc, #212]	; (80017cc <MX_GPIO_Init+0x120>)
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <MX_GPIO_Init+0x120>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <MX_GPIO_Init+0x120>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a2f      	ldr	r2, [pc, #188]	; (80017cc <MX_GPIO_Init+0x120>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <MX_GPIO_Init+0x120>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001726:	482a      	ldr	r0, [pc, #168]	; (80017d0 <MX_GPIO_Init+0x124>)
 8001728:	f000 fe2d 	bl	8002386 <HAL_GPIO_WritePin>
 800172c:	2200      	movs	r2, #0
 800172e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001732:	4828      	ldr	r0, [pc, #160]	; (80017d4 <MX_GPIO_Init+0x128>)
 8001734:	f000 fe27 	bl	8002386 <HAL_GPIO_WritePin>
 8001738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	2301      	movs	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	2302      	movs	r3, #2
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	4619      	mov	r1, r3
 8001750:	481f      	ldr	r0, [pc, #124]	; (80017d0 <MX_GPIO_Init+0x124>)
 8001752:	f000 fc7d 	bl	8002050 <HAL_GPIO_Init>
 8001756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	2301      	movs	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	2302      	movs	r3, #2
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4619      	mov	r1, r3
 800176e:	4819      	ldr	r0, [pc, #100]	; (80017d4 <MX_GPIO_Init+0x128>)
 8001770:	f000 fc6e 	bl	8002050 <HAL_GPIO_Init>
 8001774:	2308      	movs	r3, #8
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_GPIO_Init+0x12c>)
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	4815      	ldr	r0, [pc, #84]	; (80017dc <MX_GPIO_Init+0x130>)
 8001788:	f000 fc62 	bl	8002050 <HAL_GPIO_Init>
 800178c:	2320      	movs	r3, #32
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <MX_GPIO_Init+0x134>)
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	2301      	movs	r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4619      	mov	r1, r3
 800179e:	480f      	ldr	r0, [pc, #60]	; (80017dc <MX_GPIO_Init+0x130>)
 80017a0:	f000 fc56 	bl	8002050 <HAL_GPIO_Init>
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2009      	movs	r0, #9
 80017aa:	f000 fb98 	bl	8001ede <HAL_NVIC_SetPriority>
 80017ae:	2009      	movs	r0, #9
 80017b0:	f000 fbb1 	bl	8001f16 <HAL_NVIC_EnableIRQ>
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	2017      	movs	r0, #23
 80017ba:	f000 fb90 	bl	8001ede <HAL_NVIC_SetPriority>
 80017be:	2017      	movs	r0, #23
 80017c0:	f000 fba9 	bl	8001f16 <HAL_NVIC_EnableIRQ>
 80017c4:	bf00      	nop
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40011000 	.word	0x40011000
 80017d4:	40010800 	.word	0x40010800
 80017d8:	10110000 	.word	0x10110000
 80017dc:	40010c00 	.word	0x40010c00
 80017e0:	10210000 	.word	0x10210000

080017e4 <OB1203_RST>:
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00c f97b 	bl	800dae8 <heartrate11_reset_device>
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <OB1203_Setup>:
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	2300      	movs	r3, #0
 8001802:	70fb      	strb	r3, [r7, #3]
 8001804:	1cfb      	adds	r3, r7, #3
 8001806:	461a      	mov	r2, r3
 8001808:	213d      	movs	r1, #61	; 0x3d
 800180a:	2000      	movs	r0, #0
 800180c:	f00c f95a 	bl	800dac4 <heartrate11_read_register>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d103      	bne.n	800181e <OB1203_Setup+0x24>
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	4618      	mov	r0, r3
 800181a:	f00c f859 	bl	800d8d0 <heartrate11_default_cfg>
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <Error_Handler>:
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
 800182a:	b672      	cpsid	i
 800182c:	bf00      	nop
 800182e:	e7fe      	b.n	800182e <Error_Handler+0x8>

08001830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_MspInit+0x5c>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	4a14      	ldr	r2, [pc, #80]	; (800188c <HAL_MspInit+0x5c>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6193      	str	r3, [r2, #24]
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_MspInit+0x5c>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_MspInit+0x5c>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a0e      	ldr	r2, [pc, #56]	; (800188c <HAL_MspInit+0x5c>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_MspInit+0x5c>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_MspInit+0x60>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_MspInit+0x60>)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	40021000 	.word	0x40021000
 8001890:	40010000 	.word	0x40010000

08001894 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0318 	add.w	r3, r7, #24
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a3b      	ldr	r2, [pc, #236]	; (800199c <HAL_I2C_MspInit+0x108>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d134      	bne.n	800191e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <HAL_I2C_MspInit+0x10c>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a39      	ldr	r2, [pc, #228]	; (80019a0 <HAL_I2C_MspInit+0x10c>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <HAL_I2C_MspInit+0x10c>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018cc:	23c0      	movs	r3, #192	; 0xc0
 80018ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d0:	2312      	movs	r3, #18
 80018d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	4619      	mov	r1, r3
 80018de:	4831      	ldr	r0, [pc, #196]	; (80019a4 <HAL_I2C_MspInit+0x110>)
 80018e0:	f000 fbb6 	bl	8002050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018e4:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_I2C_MspInit+0x10c>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	4a2d      	ldr	r2, [pc, #180]	; (80019a0 <HAL_I2C_MspInit+0x10c>)
 80018ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ee:	61d3      	str	r3, [r2, #28]
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <HAL_I2C_MspInit+0x10c>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	201f      	movs	r0, #31
 8001902:	f000 faec 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001906:	201f      	movs	r0, #31
 8001908:	f000 fb05 	bl	8001f16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	2020      	movs	r0, #32
 8001912:	f000 fae4 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001916:	2020      	movs	r0, #32
 8001918:	f000 fafd 	bl	8001f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800191c:	e039      	b.n	8001992 <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a21      	ldr	r2, [pc, #132]	; (80019a8 <HAL_I2C_MspInit+0x114>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d134      	bne.n	8001992 <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_I2C_MspInit+0x10c>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a1c      	ldr	r2, [pc, #112]	; (80019a0 <HAL_I2C_MspInit+0x10c>)
 800192e:	f043 0308 	orr.w	r3, r3, #8
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_I2C_MspInit+0x10c>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001940:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001946:	2312      	movs	r3, #18
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f107 0318 	add.w	r3, r7, #24
 8001952:	4619      	mov	r1, r3
 8001954:	4813      	ldr	r0, [pc, #76]	; (80019a4 <HAL_I2C_MspInit+0x110>)
 8001956:	f000 fb7b 	bl	8002050 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_I2C_MspInit+0x10c>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_I2C_MspInit+0x10c>)
 8001960:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001964:	61d3      	str	r3, [r2, #28]
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_I2C_MspInit+0x10c>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	2021      	movs	r0, #33	; 0x21
 8001978:	f000 fab1 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800197c:	2021      	movs	r0, #33	; 0x21
 800197e:	f000 faca 	bl	8001f16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	2022      	movs	r0, #34	; 0x22
 8001988:	f000 faa9 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800198c:	2022      	movs	r0, #34	; 0x22
 800198e:	f000 fac2 	bl	8001f16 <HAL_NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3728      	adds	r7, #40	; 0x28
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40005400 	.word	0x40005400
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	40005800 	.word	0x40005800

080019ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019bc:	d10c      	bne.n	80019d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_TIM_Base_MspInit+0x9c>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <HAL_TIM_Base_MspInit+0x9c>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <HAL_TIM_Base_MspInit+0x9c>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019d6:	e032      	b.n	8001a3e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <HAL_TIM_Base_MspInit+0xa0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d114      	bne.n	8001a0c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_TIM_Base_MspInit+0x9c>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_TIM_Base_MspInit+0x9c>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_TIM_Base_MspInit+0x9c>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	201d      	movs	r0, #29
 8001a00:	f000 fa6d 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a04:	201d      	movs	r0, #29
 8001a06:	f000 fa86 	bl	8001f16 <HAL_NVIC_EnableIRQ>
}
 8001a0a:	e018      	b.n	8001a3e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_TIM_Base_MspInit+0xa4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d113      	bne.n	8001a3e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_TIM_Base_MspInit+0x9c>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <HAL_TIM_Base_MspInit+0x9c>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_TIM_Base_MspInit+0x9c>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	201e      	movs	r0, #30
 8001a34:	f000 fa53 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a38:	201e      	movs	r0, #30
 8001a3a:	f000 fa6c 	bl	8001f16 <HAL_NVIC_EnableIRQ>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40000800 	.word	0x40000800

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <NMI_Handler+0x4>

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9a:	f000 f909 	bl	8001cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  adc_rdy = 1;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <EXTI3_IRQHandler+0x14>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001aae:	2008      	movs	r0, #8
 8001ab0:	f000 fc82 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200003dd 	.word	0x200003dd

08001abc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ac2:	f003 fdbe 	bl	8005642 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200010b0 	.word	0x200010b0

08001ad0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001ad4:	2020      	movs	r0, #32
 8001ad6:	f000 fc6f 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	BMX_rdy = 1;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <TIM3_IRQHandler+0x14>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aea:	4803      	ldr	r0, [pc, #12]	; (8001af8 <TIM3_IRQHandler+0x18>)
 8001aec:	f005 fe9a 	bl	8007824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200003de 	.word	0x200003de
 8001af8:	200002f0 	.word	0x200002f0

08001afc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM4_IRQHandler+0x10>)
 8001b02:	f005 fe8f 	bl	8007824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000338 	.word	0x20000338

08001b10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <I2C1_EV_IRQHandler+0x10>)
 8001b16:	f001 fb7b 	bl	8003210 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000200 	.word	0x20000200

08001b24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <I2C1_ER_IRQHandler+0x10>)
 8001b2a:	f001 fce2 	bl	80034f2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000200 	.word	0x20000200

08001b38 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <I2C2_EV_IRQHandler+0x10>)
 8001b3e:	f001 fb67 	bl	8003210 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000254 	.word	0x20000254

08001b4c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <I2C2_ER_IRQHandler+0x10>)
 8001b52:	f001 fcce 	bl	80034f2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000254 	.word	0x20000254

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f00c f87c 	bl	800dc8c <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20005000 	.word	0x20005000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	200003e0 	.word	0x200003e0
 8001bc8:	20001650 	.word	0x20001650

08001bcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd8:	480c      	ldr	r0, [pc, #48]	; (8001c0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bda:	490d      	ldr	r1, [pc, #52]	; (8001c10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be0:	e002      	b.n	8001be8 <LoopCopyDataInit>

08001be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be6:	3304      	adds	r3, #4

08001be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bec:	d3f9      	bcc.n	8001be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bf0:	4c0a      	ldr	r4, [pc, #40]	; (8001c1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf4:	e001      	b.n	8001bfa <LoopFillZerobss>

08001bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf8:	3204      	adds	r2, #4

08001bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bfc:	d3fb      	bcc.n	8001bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bfe:	f7ff ffe5 	bl	8001bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c02:	f00c f849 	bl	800dc98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c06:	f7ff faad 	bl	8001164 <main>
  bx lr
 8001c0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c10:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001c14:	0800df14 	.word	0x0800df14
  ldr r2, =_sbss
 8001c18:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001c1c:	2000164c 	.word	0x2000164c

08001c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC1_2_IRQHandler>
	...

08001c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_Init+0x28>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_Init+0x28>)
 8001c2e:	f043 0310 	orr.w	r3, r3, #16
 8001c32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f000 f947 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3a:	200f      	movs	r0, #15
 8001c3c:	f000 f808 	bl	8001c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c40:	f7ff fdf6 	bl	8001830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40022000 	.word	0x40022000

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_InitTick+0x54>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x58>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f95f 	bl	8001f32 <HAL_SYSTICK_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00e      	b.n	8001c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d80a      	bhi.n	8001c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f000 f927 	bl	8001ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <HAL_InitTick+0x5c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000004 	.word	0x20000004
 8001ca8:	2000000c 	.word	0x2000000c
 8001cac:	20000008 	.word	0x20000008

08001cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_IncTick+0x1c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	2000000c 	.word	0x2000000c
 8001cd0:	200003e4 	.word	0x200003e4

08001cd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <HAL_GetTick+0x10>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	200003e4 	.word	0x200003e4

08001ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff fff0 	bl	8001cd4 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d005      	beq.n	8001d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_Delay+0x44>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0e:	bf00      	nop
 8001d10:	f7ff ffe0 	bl	8001cd4 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d8f7      	bhi.n	8001d10 <HAL_Delay+0x28>
  {
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000000c 	.word	0x2000000c

08001d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d62:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60d3      	str	r3, [r2, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4906      	ldr	r1, [pc, #24]	; (8001dc8 <__NVIC_EnableIRQ+0x34>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e94:	d301      	bcc.n	8001e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00f      	b.n	8001eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <SysTick_Config+0x40>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f7ff ff90 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <SysTick_Config+0x40>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <SysTick_Config+0x40>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010

08001ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff2d 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef0:	f7ff ff42 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff90 	bl	8001e20 <NVIC_EncodePriority>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff5f 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff35 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffa2 	bl	8001e84 <SysTick_Config>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d005      	beq.n	8001f6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2204      	movs	r2, #4
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e051      	b.n	8002012 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 020e 	bic.w	r2, r2, #14
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a22      	ldr	r2, [pc, #136]	; (800201c <HAL_DMA_Abort_IT+0xd0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d029      	beq.n	8001fec <HAL_DMA_Abort_IT+0xa0>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a20      	ldr	r2, [pc, #128]	; (8002020 <HAL_DMA_Abort_IT+0xd4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d022      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0x9c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1f      	ldr	r2, [pc, #124]	; (8002024 <HAL_DMA_Abort_IT+0xd8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d01a      	beq.n	8001fe2 <HAL_DMA_Abort_IT+0x96>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <HAL_DMA_Abort_IT+0xdc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d012      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x90>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1c      	ldr	r2, [pc, #112]	; (800202c <HAL_DMA_Abort_IT+0xe0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_DMA_Abort_IT+0x8a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <HAL_DMA_Abort_IT+0xe4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d102      	bne.n	8001fd0 <HAL_DMA_Abort_IT+0x84>
 8001fca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fce:	e00e      	b.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd4:	e00b      	b.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001fd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fda:	e008      	b.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe0:	e005      	b.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe6:	e002      	b.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001fe8:	2310      	movs	r3, #16
 8001fea:	e000      	b.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001fec:	2301      	movs	r3, #1
 8001fee:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_DMA_Abort_IT+0xe8>)
 8001ff0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
    } 
  }
  return status;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40020008 	.word	0x40020008
 8002020:	4002001c 	.word	0x4002001c
 8002024:	40020030 	.word	0x40020030
 8002028:	40020044 	.word	0x40020044
 800202c:	40020058 	.word	0x40020058
 8002030:	4002006c 	.word	0x4002006c
 8002034:	40020000 	.word	0x40020000

08002038 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b08b      	sub	sp, #44	; 0x2c
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002062:	e169      	b.n	8002338 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002064:	2201      	movs	r2, #1
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	429a      	cmp	r2, r3
 800207e:	f040 8158 	bne.w	8002332 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a9a      	ldr	r2, [pc, #616]	; (80022f0 <HAL_GPIO_Init+0x2a0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d05e      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 800208c:	4a98      	ldr	r2, [pc, #608]	; (80022f0 <HAL_GPIO_Init+0x2a0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d875      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 8002092:	4a98      	ldr	r2, [pc, #608]	; (80022f4 <HAL_GPIO_Init+0x2a4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d058      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 8002098:	4a96      	ldr	r2, [pc, #600]	; (80022f4 <HAL_GPIO_Init+0x2a4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d86f      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 800209e:	4a96      	ldr	r2, [pc, #600]	; (80022f8 <HAL_GPIO_Init+0x2a8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d052      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 80020a4:	4a94      	ldr	r2, [pc, #592]	; (80022f8 <HAL_GPIO_Init+0x2a8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d869      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020aa:	4a94      	ldr	r2, [pc, #592]	; (80022fc <HAL_GPIO_Init+0x2ac>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d04c      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 80020b0:	4a92      	ldr	r2, [pc, #584]	; (80022fc <HAL_GPIO_Init+0x2ac>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d863      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020b6:	4a92      	ldr	r2, [pc, #584]	; (8002300 <HAL_GPIO_Init+0x2b0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d046      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 80020bc:	4a90      	ldr	r2, [pc, #576]	; (8002300 <HAL_GPIO_Init+0x2b0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d85d      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020c2:	2b12      	cmp	r3, #18
 80020c4:	d82a      	bhi.n	800211c <HAL_GPIO_Init+0xcc>
 80020c6:	2b12      	cmp	r3, #18
 80020c8:	d859      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020ca:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <HAL_GPIO_Init+0x80>)
 80020cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d0:	0800214b 	.word	0x0800214b
 80020d4:	08002125 	.word	0x08002125
 80020d8:	08002137 	.word	0x08002137
 80020dc:	08002179 	.word	0x08002179
 80020e0:	0800217f 	.word	0x0800217f
 80020e4:	0800217f 	.word	0x0800217f
 80020e8:	0800217f 	.word	0x0800217f
 80020ec:	0800217f 	.word	0x0800217f
 80020f0:	0800217f 	.word	0x0800217f
 80020f4:	0800217f 	.word	0x0800217f
 80020f8:	0800217f 	.word	0x0800217f
 80020fc:	0800217f 	.word	0x0800217f
 8002100:	0800217f 	.word	0x0800217f
 8002104:	0800217f 	.word	0x0800217f
 8002108:	0800217f 	.word	0x0800217f
 800210c:	0800217f 	.word	0x0800217f
 8002110:	0800217f 	.word	0x0800217f
 8002114:	0800212d 	.word	0x0800212d
 8002118:	08002141 	.word	0x08002141
 800211c:	4a79      	ldr	r2, [pc, #484]	; (8002304 <HAL_GPIO_Init+0x2b4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002122:	e02c      	b.n	800217e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	623b      	str	r3, [r7, #32]
          break;
 800212a:	e029      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	3304      	adds	r3, #4
 8002132:	623b      	str	r3, [r7, #32]
          break;
 8002134:	e024      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	3308      	adds	r3, #8
 800213c:	623b      	str	r3, [r7, #32]
          break;
 800213e:	e01f      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	330c      	adds	r3, #12
 8002146:	623b      	str	r3, [r7, #32]
          break;
 8002148:	e01a      	b.n	8002180 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002152:	2304      	movs	r3, #4
 8002154:	623b      	str	r3, [r7, #32]
          break;
 8002156:	e013      	b.n	8002180 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002160:	2308      	movs	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	611a      	str	r2, [r3, #16]
          break;
 800216a:	e009      	b.n	8002180 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800216c:	2308      	movs	r3, #8
 800216e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	615a      	str	r2, [r3, #20]
          break;
 8002176:	e003      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
          break;
 800217c:	e000      	b.n	8002180 <HAL_GPIO_Init+0x130>
          break;
 800217e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2bff      	cmp	r3, #255	; 0xff
 8002184:	d801      	bhi.n	800218a <HAL_GPIO_Init+0x13a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	e001      	b.n	800218e <HAL_GPIO_Init+0x13e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2bff      	cmp	r3, #255	; 0xff
 8002194:	d802      	bhi.n	800219c <HAL_GPIO_Init+0x14c>
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	e002      	b.n	80021a2 <HAL_GPIO_Init+0x152>
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	3b08      	subs	r3, #8
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	210f      	movs	r1, #15
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	401a      	ands	r2, r3
 80021b4:	6a39      	ldr	r1, [r7, #32]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	431a      	orrs	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80b1 	beq.w	8002332 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d0:	4b4d      	ldr	r3, [pc, #308]	; (8002308 <HAL_GPIO_Init+0x2b8>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a4c      	ldr	r2, [pc, #304]	; (8002308 <HAL_GPIO_Init+0x2b8>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <HAL_GPIO_Init+0x2b8>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021e8:	4a48      	ldr	r2, [pc, #288]	; (800230c <HAL_GPIO_Init+0x2bc>)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4013      	ands	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a40      	ldr	r2, [pc, #256]	; (8002310 <HAL_GPIO_Init+0x2c0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d013      	beq.n	800223c <HAL_GPIO_Init+0x1ec>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3f      	ldr	r2, [pc, #252]	; (8002314 <HAL_GPIO_Init+0x2c4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00d      	beq.n	8002238 <HAL_GPIO_Init+0x1e8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3e      	ldr	r2, [pc, #248]	; (8002318 <HAL_GPIO_Init+0x2c8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d007      	beq.n	8002234 <HAL_GPIO_Init+0x1e4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3d      	ldr	r2, [pc, #244]	; (800231c <HAL_GPIO_Init+0x2cc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d101      	bne.n	8002230 <HAL_GPIO_Init+0x1e0>
 800222c:	2303      	movs	r3, #3
 800222e:	e006      	b.n	800223e <HAL_GPIO_Init+0x1ee>
 8002230:	2304      	movs	r3, #4
 8002232:	e004      	b.n	800223e <HAL_GPIO_Init+0x1ee>
 8002234:	2302      	movs	r3, #2
 8002236:	e002      	b.n	800223e <HAL_GPIO_Init+0x1ee>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_GPIO_Init+0x1ee>
 800223c:	2300      	movs	r3, #0
 800223e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002240:	f002 0203 	and.w	r2, r2, #3
 8002244:	0092      	lsls	r2, r2, #2
 8002246:	4093      	lsls	r3, r2
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800224e:	492f      	ldr	r1, [pc, #188]	; (800230c <HAL_GPIO_Init+0x2bc>)
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	3302      	adds	r3, #2
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	492c      	ldr	r1, [pc, #176]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002276:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	43db      	mvns	r3, r3
 800227e:	4928      	ldr	r1, [pc, #160]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 8002280:	4013      	ands	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	4922      	ldr	r1, [pc, #136]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	491e      	ldr	r1, [pc, #120]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	4918      	ldr	r1, [pc, #96]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	4914      	ldr	r1, [pc, #80]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d021      	beq.n	8002324 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	490e      	ldr	r1, [pc, #56]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60cb      	str	r3, [r1, #12]
 80022ec:	e021      	b.n	8002332 <HAL_GPIO_Init+0x2e2>
 80022ee:	bf00      	nop
 80022f0:	10320000 	.word	0x10320000
 80022f4:	10310000 	.word	0x10310000
 80022f8:	10220000 	.word	0x10220000
 80022fc:	10210000 	.word	0x10210000
 8002300:	10120000 	.word	0x10120000
 8002304:	10110000 	.word	0x10110000
 8002308:	40021000 	.word	0x40021000
 800230c:	40010000 	.word	0x40010000
 8002310:	40010800 	.word	0x40010800
 8002314:	40010c00 	.word	0x40010c00
 8002318:	40011000 	.word	0x40011000
 800231c:	40011400 	.word	0x40011400
 8002320:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_GPIO_Init+0x304>)
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	43db      	mvns	r3, r3
 800232c:	4909      	ldr	r1, [pc, #36]	; (8002354 <HAL_GPIO_Init+0x304>)
 800232e:	4013      	ands	r3, r2
 8002330:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	3301      	adds	r3, #1
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	fa22 f303 	lsr.w	r3, r2, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	f47f ae8e 	bne.w	8002064 <HAL_GPIO_Init+0x14>
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	372c      	adds	r7, #44	; 0x2c
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	40010400 	.word	0x40010400

08002358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	e001      	b.n	800237a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	807b      	strh	r3, [r7, #2]
 8002392:	4613      	mov	r3, r2
 8002394:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002396:	787b      	ldrb	r3, [r7, #1]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800239c:	887a      	ldrh	r2, [r7, #2]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023a2:	e003      	b.n	80023ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023a4:	887b      	ldrh	r3, [r7, #2]
 80023a6:	041a      	lsls	r2, r3, #16
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	611a      	str	r2, [r3, #16]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f806 	bl	80023e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40010400 	.word	0x40010400

080023e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e12b      	b.n	8002666 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fa36 	bl	8001894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	; 0x24
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800244e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800245e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002460:	f005 f856 	bl	8007510 <HAL_RCC_GetPCLK1Freq>
 8002464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4a81      	ldr	r2, [pc, #516]	; (8002670 <HAL_I2C_Init+0x274>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d807      	bhi.n	8002480 <HAL_I2C_Init+0x84>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4a80      	ldr	r2, [pc, #512]	; (8002674 <HAL_I2C_Init+0x278>)
 8002474:	4293      	cmp	r3, r2
 8002476:	bf94      	ite	ls
 8002478:	2301      	movls	r3, #1
 800247a:	2300      	movhi	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	e006      	b.n	800248e <HAL_I2C_Init+0x92>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a7d      	ldr	r2, [pc, #500]	; (8002678 <HAL_I2C_Init+0x27c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	bf94      	ite	ls
 8002488:	2301      	movls	r3, #1
 800248a:	2300      	movhi	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0e7      	b.n	8002666 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4a78      	ldr	r2, [pc, #480]	; (800267c <HAL_I2C_Init+0x280>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0c9b      	lsrs	r3, r3, #18
 80024a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a6a      	ldr	r2, [pc, #424]	; (8002670 <HAL_I2C_Init+0x274>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d802      	bhi.n	80024d0 <HAL_I2C_Init+0xd4>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3301      	adds	r3, #1
 80024ce:	e009      	b.n	80024e4 <HAL_I2C_Init+0xe8>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	4a69      	ldr	r2, [pc, #420]	; (8002680 <HAL_I2C_Init+0x284>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	099b      	lsrs	r3, r3, #6
 80024e2:	3301      	adds	r3, #1
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	495c      	ldr	r1, [pc, #368]	; (8002670 <HAL_I2C_Init+0x274>)
 8002500:	428b      	cmp	r3, r1
 8002502:	d819      	bhi.n	8002538 <HAL_I2C_Init+0x13c>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e59      	subs	r1, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002512:	1c59      	adds	r1, r3, #1
 8002514:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002518:	400b      	ands	r3, r1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_I2C_Init+0x138>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1e59      	subs	r1, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fbb1 f3f3 	udiv	r3, r1, r3
 800252c:	3301      	adds	r3, #1
 800252e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002532:	e051      	b.n	80025d8 <HAL_I2C_Init+0x1dc>
 8002534:	2304      	movs	r3, #4
 8002536:	e04f      	b.n	80025d8 <HAL_I2C_Init+0x1dc>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d111      	bne.n	8002564 <HAL_I2C_Init+0x168>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1e58      	subs	r0, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	440b      	add	r3, r1
 800254e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002552:	3301      	adds	r3, #1
 8002554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e012      	b.n	800258a <HAL_I2C_Init+0x18e>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1e58      	subs	r0, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	0099      	lsls	r1, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	fbb0 f3f3 	udiv	r3, r0, r3
 800257a:	3301      	adds	r3, #1
 800257c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_Init+0x196>
 800258e:	2301      	movs	r3, #1
 8002590:	e022      	b.n	80025d8 <HAL_I2C_Init+0x1dc>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10e      	bne.n	80025b8 <HAL_I2C_Init+0x1bc>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1e58      	subs	r0, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	440b      	add	r3, r1
 80025a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b6:	e00f      	b.n	80025d8 <HAL_I2C_Init+0x1dc>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	0099      	lsls	r1, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	6809      	ldr	r1, [r1, #0]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69da      	ldr	r2, [r3, #28]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6911      	ldr	r1, [r2, #16]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68d2      	ldr	r2, [r2, #12]
 8002612:	4311      	orrs	r1, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	430b      	orrs	r3, r1
 800261a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	000186a0 	.word	0x000186a0
 8002674:	001e847f 	.word	0x001e847f
 8002678:	003d08ff 	.word	0x003d08ff
 800267c:	431bde83 	.word	0x431bde83
 8002680:	10624dd3 	.word	0x10624dd3

08002684 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	461a      	mov	r2, r3
 8002690:	460b      	mov	r3, r1
 8002692:	817b      	strh	r3, [r7, #10]
 8002694:	4613      	mov	r3, r2
 8002696:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff fb1c 	bl	8001cd4 <HAL_GetTick>
 800269c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	f040 80e0 	bne.w	800286c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2319      	movs	r3, #25
 80026b2:	2201      	movs	r2, #1
 80026b4:	4970      	ldr	r1, [pc, #448]	; (8002878 <HAL_I2C_Master_Transmit+0x1f4>)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f002 fc6a 	bl	8004f90 <I2C_WaitOnFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
 80026c4:	e0d3      	b.n	800286e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_I2C_Master_Transmit+0x50>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e0cc      	b.n	800286e <HAL_I2C_Master_Transmit+0x1ea>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d007      	beq.n	80026fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002708:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2221      	movs	r2, #33	; 0x21
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2210      	movs	r2, #16
 8002716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	893a      	ldrh	r2, [r7, #8]
 800272a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4a50      	ldr	r2, [pc, #320]	; (800287c <HAL_I2C_Master_Transmit+0x1f8>)
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800273c:	8979      	ldrh	r1, [r7, #10]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	6a3a      	ldr	r2, [r7, #32]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f002 f944 	bl	80049d0 <I2C_MasterRequestWrite>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e08d      	b.n	800286e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002768:	e066      	b.n	8002838 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	6a39      	ldr	r1, [r7, #32]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f002 fce4 	bl	800513c <I2C_WaitOnTXEFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00d      	beq.n	8002796 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2b04      	cmp	r3, #4
 8002780:	d107      	bne.n	8002792 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002790:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06b      	b.n	800286e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	781a      	ldrb	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d11b      	bne.n	800280c <HAL_I2C_Master_Transmit+0x188>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d017      	beq.n	800280c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	781a      	ldrb	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	6a39      	ldr	r1, [r7, #32]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f002 fcd4 	bl	80051be <I2C_WaitOnBTFFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00d      	beq.n	8002838 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	2b04      	cmp	r3, #4
 8002822:	d107      	bne.n	8002834 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002832:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e01a      	b.n	800286e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d194      	bne.n	800276a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	00100002 	.word	0x00100002
 800287c:	ffff0000 	.word	0xffff0000

08002880 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08c      	sub	sp, #48	; 0x30
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	461a      	mov	r2, r3
 800288c:	460b      	mov	r3, r1
 800288e:	817b      	strh	r3, [r7, #10]
 8002890:	4613      	mov	r3, r2
 8002892:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff fa1c 	bl	8001cd4 <HAL_GetTick>
 800289c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	f040 823f 	bne.w	8002d2a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2319      	movs	r3, #25
 80028b2:	2201      	movs	r2, #1
 80028b4:	497f      	ldr	r1, [pc, #508]	; (8002ab4 <HAL_I2C_Master_Receive+0x234>)
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f002 fb6a 	bl	8004f90 <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	e232      	b.n	8002d2c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_I2C_Master_Receive+0x54>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e22b      	b.n	8002d2c <HAL_I2C_Master_Receive+0x4ac>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d007      	beq.n	80028fa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002908:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2222      	movs	r2, #34	; 0x22
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2210      	movs	r2, #16
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	893a      	ldrh	r2, [r7, #8]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a5f      	ldr	r2, [pc, #380]	; (8002ab8 <HAL_I2C_Master_Receive+0x238>)
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800293c:	8979      	ldrh	r1, [r7, #10]
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f002 f8c6 	bl	8004ad4 <I2C_MasterRequestRead>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e1ec      	b.n	8002d2c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	2b00      	cmp	r3, #0
 8002958:	d113      	bne.n	8002982 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	61fb      	str	r3, [r7, #28]
 800296e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e1c0      	b.n	8002d04 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	2b01      	cmp	r3, #1
 8002988:	d11e      	bne.n	80029c8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002998:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800299a:	b672      	cpsid	i
}
 800299c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029c4:	b662      	cpsie	i
}
 80029c6:	e035      	b.n	8002a34 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d11e      	bne.n	8002a0e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029e0:	b672      	cpsid	i
}
 80029e2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a0a:	b662      	cpsie	i
}
 8002a0c:	e012      	b.n	8002a34 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002a34:	e166      	b.n	8002d04 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	f200 811f 	bhi.w	8002c7e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d123      	bne.n	8002a90 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f002 fc29 	bl	80052a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e167      	b.n	8002d2c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a8e:	e139      	b.n	8002d04 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d152      	bne.n	8002b3e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4906      	ldr	r1, [pc, #24]	; (8002abc <HAL_I2C_Master_Receive+0x23c>)
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f002 fa74 	bl	8004f90 <I2C_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e13c      	b.n	8002d2c <HAL_I2C_Master_Receive+0x4ac>
 8002ab2:	bf00      	nop
 8002ab4:	00100002 	.word	0x00100002
 8002ab8:	ffff0000 	.word	0xffff0000
 8002abc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac0:	b672      	cpsid	i
}
 8002ac2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b06:	b662      	cpsie	i
}
 8002b08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b3c:	e0e2      	b.n	8002d04 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	2200      	movs	r2, #0
 8002b46:	497b      	ldr	r1, [pc, #492]	; (8002d34 <HAL_I2C_Master_Receive+0x4b4>)
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f002 fa21 	bl	8004f90 <I2C_WaitOnFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0e9      	b.n	8002d2c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b68:	b672      	cpsid	i
}
 8002b6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b9e:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <HAL_I2C_Master_Receive+0x4b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	08db      	lsrs	r3, r3, #3
 8002ba4:	4a65      	ldr	r2, [pc, #404]	; (8002d3c <HAL_I2C_Master_Receive+0x4bc>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	0a1a      	lsrs	r2, r3, #8
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00da      	lsls	r2, r3, #3
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d118      	bne.n	8002bf6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f043 0220 	orr.w	r2, r3, #32
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002be6:	b662      	cpsie	i
}
 8002be8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e09a      	b.n	8002d2c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d1d9      	bne.n	8002bb8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c46:	b662      	cpsie	i
}
 8002c48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c7c:	e042      	b.n	8002d04 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f002 fb0e 	bl	80052a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e04c      	b.n	8002d2c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d118      	bne.n	8002d04 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f47f ae94 	bne.w	8002a36 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002d2a:	2302      	movs	r3, #2
  }
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3728      	adds	r7, #40	; 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	00010004 	.word	0x00010004
 8002d38:	20000004 	.word	0x20000004
 8002d3c:	14f8b589 	.word	0x14f8b589

08002d40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08c      	sub	sp, #48	; 0x30
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	4608      	mov	r0, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	817b      	strh	r3, [r7, #10]
 8002d52:	460b      	mov	r3, r1
 8002d54:	813b      	strh	r3, [r7, #8]
 8002d56:	4613      	mov	r3, r2
 8002d58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d5e:	f7fe ffb9 	bl	8001cd4 <HAL_GetTick>
 8002d62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	f040 8244 	bne.w	80031fa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2319      	movs	r3, #25
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4982      	ldr	r1, [pc, #520]	; (8002f84 <HAL_I2C_Mem_Read+0x244>)
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f002 f907 	bl	8004f90 <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e237      	b.n	80031fc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_I2C_Mem_Read+0x5a>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e230      	b.n	80031fc <HAL_I2C_Mem_Read+0x4bc>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d007      	beq.n	8002dc0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2222      	movs	r2, #34	; 0x22
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2240      	movs	r2, #64	; 0x40
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a62      	ldr	r2, [pc, #392]	; (8002f88 <HAL_I2C_Mem_Read+0x248>)
 8002e00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e02:	88f8      	ldrh	r0, [r7, #6]
 8002e04:	893a      	ldrh	r2, [r7, #8]
 8002e06:	8979      	ldrh	r1, [r7, #10]
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	9301      	str	r3, [sp, #4]
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	4603      	mov	r3, r0
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f001 ff2c 	bl	8004c70 <I2C_RequestMemoryRead>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e1ec      	b.n	80031fc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d113      	bne.n	8002e52 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e1c0      	b.n	80031d4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d11e      	bne.n	8002e98 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6a:	b672      	cpsid	i
}
 8002e6c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e94:	b662      	cpsie	i
}
 8002e96:	e035      	b.n	8002f04 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d11e      	bne.n	8002ede <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb0:	b672      	cpsid	i
}
 8002eb2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002eda:	b662      	cpsie	i
}
 8002edc:	e012      	b.n	8002f04 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f04:	e166      	b.n	80031d4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	f200 811f 	bhi.w	800314e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d123      	bne.n	8002f60 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f002 f9c1 	bl	80052a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e167      	b.n	80031fc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f5e:	e139      	b.n	80031d4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d152      	bne.n	800300e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	2200      	movs	r2, #0
 8002f70:	4906      	ldr	r1, [pc, #24]	; (8002f8c <HAL_I2C_Mem_Read+0x24c>)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f002 f80c 	bl	8004f90 <I2C_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e13c      	b.n	80031fc <HAL_I2C_Mem_Read+0x4bc>
 8002f82:	bf00      	nop
 8002f84:	00100002 	.word	0x00100002
 8002f88:	ffff0000 	.word	0xffff0000
 8002f8c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f90:	b672      	cpsid	i
}
 8002f92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fd6:	b662      	cpsie	i
}
 8002fd8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800300c:	e0e2      	b.n	80031d4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	2200      	movs	r2, #0
 8003016:	497b      	ldr	r1, [pc, #492]	; (8003204 <HAL_I2C_Mem_Read+0x4c4>)
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f001 ffb9 	bl	8004f90 <I2C_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0e9      	b.n	80031fc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003036:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003038:	b672      	cpsid	i
}
 800303a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800306e:	4b66      	ldr	r3, [pc, #408]	; (8003208 <HAL_I2C_Mem_Read+0x4c8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	08db      	lsrs	r3, r3, #3
 8003074:	4a65      	ldr	r2, [pc, #404]	; (800320c <HAL_I2C_Mem_Read+0x4cc>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0a1a      	lsrs	r2, r3, #8
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00da      	lsls	r2, r3, #3
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	3b01      	subs	r3, #1
 800308c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d118      	bne.n	80030c6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f043 0220 	orr.w	r2, r3, #32
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030b6:	b662      	cpsie	i
}
 80030b8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e09a      	b.n	80031fc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d1d9      	bne.n	8003088 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003116:	b662      	cpsie	i
}
 8003118:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800314c:	e042      	b.n	80031d4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f002 f8a6 	bl	80052a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e04c      	b.n	80031fc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d118      	bne.n	80031d4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f47f ae94 	bne.w	8002f06 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3728      	adds	r7, #40	; 0x28
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00010004 	.word	0x00010004
 8003208:	20000004 	.word	0x20000004
 800320c:	14f8b589 	.word	0x14f8b589

08003210 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003230:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003238:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b10      	cmp	r3, #16
 800323e:	d003      	beq.n	8003248 <HAL_I2C_EV_IRQHandler+0x38>
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b40      	cmp	r3, #64	; 0x40
 8003244:	f040 80c1 	bne.w	80033ca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10d      	bne.n	800327e <HAL_I2C_EV_IRQHandler+0x6e>
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003268:	d003      	beq.n	8003272 <HAL_I2C_EV_IRQHandler+0x62>
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003270:	d101      	bne.n	8003276 <HAL_I2C_EV_IRQHandler+0x66>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x68>
 8003276:	2300      	movs	r3, #0
 8003278:	2b01      	cmp	r3, #1
 800327a:	f000 8132 	beq.w	80034e2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00c      	beq.n	80032a2 <HAL_I2C_EV_IRQHandler+0x92>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	0a5b      	lsrs	r3, r3, #9
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f002 f889 	bl	80053ac <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fd77 	bl	8003d8e <I2C_Master_SB>
 80032a0:	e092      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_I2C_EV_IRQHandler+0xb2>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	0a5b      	lsrs	r3, r3, #9
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fdec 	bl	8003e98 <I2C_Master_ADD10>
 80032c0:	e082      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_I2C_EV_IRQHandler+0xd2>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	0a5b      	lsrs	r3, r3, #9
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fe05 	bl	8003eea <I2C_Master_ADDR>
 80032e0:	e072      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d03b      	beq.n	8003366 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032fc:	f000 80f3 	beq.w	80034e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	09db      	lsrs	r3, r3, #7
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00f      	beq.n	800332c <HAL_I2C_EV_IRQHandler+0x11c>
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	0a9b      	lsrs	r3, r3, #10
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_I2C_EV_IRQHandler+0x11c>
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d103      	bne.n	800332c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f9f1 	bl	800370c <I2C_MasterTransmit_TXE>
 800332a:	e04d      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80d6 	beq.w	80034e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	0a5b      	lsrs	r3, r3, #9
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80cf 	beq.w	80034e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003348:	7bbb      	ldrb	r3, [r7, #14]
 800334a:	2b21      	cmp	r3, #33	; 0x21
 800334c:	d103      	bne.n	8003356 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fa78 	bl	8003844 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003354:	e0c7      	b.n	80034e6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	f040 80c4 	bne.w	80034e6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fae6 	bl	8003930 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003364:	e0bf      	b.n	80034e6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003374:	f000 80b7 	beq.w	80034e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	099b      	lsrs	r3, r3, #6
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00f      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0x194>
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0x194>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fb5b 	bl	8003a58 <I2C_MasterReceive_RXNE>
 80033a2:	e011      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 809a 	beq.w	80034e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	0a5b      	lsrs	r3, r3, #9
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 8093 	beq.w	80034e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fbfa 	bl	8003bba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c6:	e08e      	b.n	80034e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033c8:	e08d      	b.n	80034e6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e007      	b.n	80033ec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d012      	beq.n	800341e <HAL_I2C_EV_IRQHandler+0x20e>
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	0a5b      	lsrs	r3, r3, #9
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00c      	beq.n	800341e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003414:	69b9      	ldr	r1, [r7, #24]
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 ffbe 	bl	8004398 <I2C_Slave_ADDR>
 800341c:	e066      	b.n	80034ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0x22e>
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	0a5b      	lsrs	r3, r3, #9
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fff8 	bl	800442c <I2C_Slave_STOPF>
 800343c:	e056      	b.n	80034ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800343e:	7bbb      	ldrb	r3, [r7, #14]
 8003440:	2b21      	cmp	r3, #33	; 0x21
 8003442:	d002      	beq.n	800344a <HAL_I2C_EV_IRQHandler+0x23a>
 8003444:	7bbb      	ldrb	r3, [r7, #14]
 8003446:	2b29      	cmp	r3, #41	; 0x29
 8003448:	d125      	bne.n	8003496 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	09db      	lsrs	r3, r3, #7
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00f      	beq.n	8003476 <HAL_I2C_EV_IRQHandler+0x266>
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	0a9b      	lsrs	r3, r3, #10
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_I2C_EV_IRQHandler+0x266>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d103      	bne.n	8003476 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fed6 	bl	8004220 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003474:	e039      	b.n	80034ea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d033      	beq.n	80034ea <HAL_I2C_EV_IRQHandler+0x2da>
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	0a5b      	lsrs	r3, r3, #9
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d02d      	beq.n	80034ea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 ff03 	bl	800429a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003494:	e029      	b.n	80034ea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	099b      	lsrs	r3, r3, #6
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00f      	beq.n	80034c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	0a9b      	lsrs	r3, r3, #10
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d103      	bne.n	80034c2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 ff0d 	bl	80042da <I2C_SlaveReceive_RXNE>
 80034c0:	e014      	b.n	80034ec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00e      	beq.n	80034ec <HAL_I2C_EV_IRQHandler+0x2dc>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	0a5b      	lsrs	r3, r3, #9
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 ff3b 	bl	8004356 <I2C_SlaveReceive_BTF>
 80034e0:	e004      	b.n	80034ec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80034e2:	bf00      	nop
 80034e4:	e002      	b.n	80034ec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e6:	bf00      	nop
 80034e8:	e000      	b.n	80034ec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b08a      	sub	sp, #40	; 0x28
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003514:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	0a1b      	lsrs	r3, r3, #8
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d016      	beq.n	8003550 <HAL_I2C_ER_IRQHandler+0x5e>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800353e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	0a5b      	lsrs	r3, r3, #9
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00e      	beq.n	800357a <HAL_I2C_ER_IRQHandler+0x88>
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	f043 0302 	orr.w	r3, r3, #2
 800356e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003578:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	0a9b      	lsrs	r3, r3, #10
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d03f      	beq.n	8003606 <HAL_I2C_ER_IRQHandler+0x114>
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d039      	beq.n	8003606 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003592:	7efb      	ldrb	r3, [r7, #27]
 8003594:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80035ac:	7ebb      	ldrb	r3, [r7, #26]
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d112      	bne.n	80035d8 <HAL_I2C_ER_IRQHandler+0xe6>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10f      	bne.n	80035d8 <HAL_I2C_ER_IRQHandler+0xe6>
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	2b21      	cmp	r3, #33	; 0x21
 80035bc:	d008      	beq.n	80035d0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	2b29      	cmp	r3, #41	; 0x29
 80035c2:	d005      	beq.n	80035d0 <HAL_I2C_ER_IRQHandler+0xde>
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	2b28      	cmp	r3, #40	; 0x28
 80035c8:	d106      	bne.n	80035d8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b21      	cmp	r3, #33	; 0x21
 80035ce:	d103      	bne.n	80035d8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f001 f85b 	bl	800468c <I2C_Slave_AF>
 80035d6:	e016      	b.n	8003606 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035e0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	f043 0304 	orr.w	r3, r3, #4
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035ea:	7efb      	ldrb	r3, [r7, #27]
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d002      	beq.n	80035f6 <HAL_I2C_ER_IRQHandler+0x104>
 80035f0:	7efb      	ldrb	r3, [r7, #27]
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d107      	bne.n	8003606 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003604:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	0adb      	lsrs	r3, r3, #11
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00e      	beq.n	8003630 <HAL_I2C_ER_IRQHandler+0x13e>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	f043 0308 	orr.w	r3, r3, #8
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800362e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f001 f892 	bl	800476c <I2C_ITError>
  }
}
 8003648:	bf00      	nop
 800364a:	3728      	adds	r7, #40	; 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr

08003686 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
 80036a4:	4613      	mov	r3, r2
 80036a6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003722:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	2b00      	cmp	r3, #0
 8003730:	d150      	bne.n	80037d4 <I2C_MasterTransmit_TXE+0xc8>
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b21      	cmp	r3, #33	; 0x21
 8003736:	d14d      	bne.n	80037d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b08      	cmp	r3, #8
 800373c:	d01d      	beq.n	800377a <I2C_MasterTransmit_TXE+0x6e>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b20      	cmp	r3, #32
 8003742:	d01a      	beq.n	800377a <I2C_MasterTransmit_TXE+0x6e>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800374a:	d016      	beq.n	800377a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800375a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2211      	movs	r2, #17
 8003760:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ff6c 	bl	8003650 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003778:	e060      	b.n	800383c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003788:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003798:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d107      	bne.n	80037c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ff81 	bl	80036c4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037c2:	e03b      	b.n	800383c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ff3f 	bl	8003650 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037d2:	e033      	b.n	800383c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b21      	cmp	r3, #33	; 0x21
 80037d8:	d005      	beq.n	80037e6 <I2C_MasterTransmit_TXE+0xda>
 80037da:	7bbb      	ldrb	r3, [r7, #14]
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d12d      	bne.n	800383c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	2b22      	cmp	r3, #34	; 0x22
 80037e4:	d12a      	bne.n	800383c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d108      	bne.n	8003802 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003800:	e01c      	b.n	800383c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d103      	bne.n	8003816 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f88e 	bl	8003930 <I2C_MemoryTransmit_TXE_BTF>
}
 8003814:	e012      	b.n	800383c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	781a      	ldrb	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800383a:	e7ff      	b.n	800383c <I2C_MasterTransmit_TXE+0x130>
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b21      	cmp	r3, #33	; 0x21
 800385c:	d164      	bne.n	8003928 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d012      	beq.n	800388e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800388c:	e04c      	b.n	8003928 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d01d      	beq.n	80038d0 <I2C_MasterTransmit_BTF+0x8c>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b20      	cmp	r3, #32
 8003898:	d01a      	beq.n	80038d0 <I2C_MasterTransmit_BTF+0x8c>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038a0:	d016      	beq.n	80038d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2211      	movs	r2, #17
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fec1 	bl	8003650 <HAL_I2C_MasterTxCpltCallback>
}
 80038ce:	e02b      	b.n	8003928 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	d107      	bne.n	800391a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff fed6 	bl	80036c4 <HAL_I2C_MemTxCpltCallback>
}
 8003918:	e006      	b.n	8003928 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff fe94 	bl	8003650 <HAL_I2C_MasterTxCpltCallback>
}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003944:	2b00      	cmp	r3, #0
 8003946:	d11d      	bne.n	8003984 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d10b      	bne.n	8003968 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003954:	b2da      	uxtb	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003960:	1c9a      	adds	r2, r3, #2
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003966:	e073      	b.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396c:	b29b      	uxth	r3, r3
 800396e:	121b      	asrs	r3, r3, #8
 8003970:	b2da      	uxtb	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003982:	e065      	b.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003988:	2b01      	cmp	r3, #1
 800398a:	d10b      	bne.n	80039a4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	b2da      	uxtb	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039a2:	e055      	b.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d151      	bne.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b22      	cmp	r3, #34	; 0x22
 80039b0:	d10d      	bne.n	80039ce <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039c0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039cc:	e040      	b.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d015      	beq.n	8003a04 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b21      	cmp	r3, #33	; 0x21
 80039dc:	d112      	bne.n	8003a04 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	781a      	ldrb	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a02:	e025      	b.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d120      	bne.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b21      	cmp	r3, #33	; 0x21
 8003a12:	d11d      	bne.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a22:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fe3a 	bl	80036c4 <HAL_I2C_MemTxCpltCallback>
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b22      	cmp	r3, #34	; 0x22
 8003a6a:	f040 80a2 	bne.w	8003bb2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d921      	bls.n	8003ac0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	f040 8082 	bne.w	8003bb2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003abe:	e078      	b.n	8003bb2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d074      	beq.n	8003bb2 <I2C_MasterReceive_RXNE+0x15a>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d002      	beq.n	8003ad4 <I2C_MasterReceive_RXNE+0x7c>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d16e      	bne.n	8003bb2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f001 fbb3 	bl	8005240 <I2C_WaitOnSTOPRequestThroughIT>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d142      	bne.n	8003b66 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aee:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003afe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d10a      	bne.n	8003b50 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff fdc4 	bl	80036d6 <HAL_I2C_MemRxCpltCallback>
}
 8003b4e:	e030      	b.n	8003bb2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2212      	movs	r2, #18
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fd7f 	bl	8003662 <HAL_I2C_MasterRxCpltCallback>
}
 8003b64:	e025      	b.n	8003bb2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b74:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff fd9b 	bl	80036e8 <HAL_I2C_ErrorCallback>
}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d11b      	bne.n	8003c0a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c08:	e0bd      	b.n	8003d86 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d129      	bne.n	8003c68 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c22:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d00a      	beq.n	8003c40 <I2C_MasterReceive_BTF+0x86>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d007      	beq.n	8003c40 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c66:	e08e      	b.n	8003d86 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d176      	bne.n	8003d60 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d002      	beq.n	8003c7e <I2C_MasterReceive_BTF+0xc4>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d108      	bne.n	8003c90 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e019      	b.n	8003cc4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d002      	beq.n	8003c9c <I2C_MasterReceive_BTF+0xe2>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d108      	bne.n	8003cae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e00a      	b.n	8003cc4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d007      	beq.n	8003cc4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d1e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	d10a      	bne.n	8003d4a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fcc7 	bl	80036d6 <HAL_I2C_MemRxCpltCallback>
}
 8003d48:	e01d      	b.n	8003d86 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2212      	movs	r2, #18
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fc82 	bl	8003662 <HAL_I2C_MasterRxCpltCallback>
}
 8003d5e:	e012      	b.n	8003d86 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d117      	bne.n	8003dd2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003dbc:	e067      	b.n	8003e8e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]
}
 8003dd0:	e05d      	b.n	8003e8e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dda:	d133      	bne.n	8003e44 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b21      	cmp	r3, #33	; 0x21
 8003de6:	d109      	bne.n	8003dfc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003df8:	611a      	str	r2, [r3, #16]
 8003dfa:	e008      	b.n	8003e0e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <I2C_Master_SB+0x92>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d032      	beq.n	8003e8e <I2C_Master_SB+0x100>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d02d      	beq.n	8003e8e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e40:	605a      	str	r2, [r3, #4]
}
 8003e42:	e024      	b.n	8003e8e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10e      	bne.n	8003e6a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	11db      	asrs	r3, r3, #7
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 0306 	and.w	r3, r3, #6
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f063 030f 	orn	r3, r3, #15
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]
}
 8003e68:	e011      	b.n	8003e8e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10d      	bne.n	8003e8e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	11db      	asrs	r3, r3, #7
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f003 0306 	and.w	r3, r3, #6
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f063 030e 	orn	r3, r3, #14
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	611a      	str	r2, [r3, #16]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <I2C_Master_ADD10+0x26>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d108      	bne.n	8003ed0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00c      	beq.n	8003ee0 <I2C_Master_ADD10+0x48>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ede:	605a      	str	r2, [r3, #4]
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b091      	sub	sp, #68	; 0x44
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ef8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b22      	cmp	r3, #34	; 0x22
 8003f12:	f040 8174 	bne.w	80041fe <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <I2C_Master_ADDR+0x54>
 8003f1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f22:	2b40      	cmp	r3, #64	; 0x40
 8003f24:	d10b      	bne.n	8003f3e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f26:	2300      	movs	r3, #0
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	633b      	str	r3, [r7, #48]	; 0x30
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	633b      	str	r3, [r7, #48]	; 0x30
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	e16b      	b.n	8004216 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d11d      	bne.n	8003f82 <I2C_Master_ADDR+0x98>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f4e:	d118      	bne.n	8003f82 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f50:	2300      	movs	r3, #0
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f74:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	651a      	str	r2, [r3, #80]	; 0x50
 8003f80:	e149      	b.n	8004216 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d113      	bne.n	8003fb4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e120      	b.n	80041f6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	f040 808a 	bne.w	80040d4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fc6:	d137      	bne.n	8004038 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe6:	d113      	bne.n	8004010 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	e0f2      	b.n	80041f6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004010:	2300      	movs	r3, #0
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	623b      	str	r3, [r7, #32]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	623b      	str	r3, [r7, #32]
 8004024:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e0de      	b.n	80041f6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	2b08      	cmp	r3, #8
 800403c:	d02e      	beq.n	800409c <I2C_Master_ADDR+0x1b2>
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	2b20      	cmp	r3, #32
 8004042:	d02b      	beq.n	800409c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004046:	2b12      	cmp	r3, #18
 8004048:	d102      	bne.n	8004050 <I2C_Master_ADDR+0x166>
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	2b01      	cmp	r3, #1
 800404e:	d125      	bne.n	800409c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004052:	2b04      	cmp	r3, #4
 8004054:	d00e      	beq.n	8004074 <I2C_Master_ADDR+0x18a>
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	2b02      	cmp	r3, #2
 800405a:	d00b      	beq.n	8004074 <I2C_Master_ADDR+0x18a>
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	2b10      	cmp	r3, #16
 8004060:	d008      	beq.n	8004074 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	e007      	b.n	8004084 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004082:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	e0ac      	b.n	80041f6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e090      	b.n	80041f6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d158      	bne.n	8004190 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d021      	beq.n	8004128 <I2C_Master_ADDR+0x23e>
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d01e      	beq.n	8004128 <I2C_Master_ADDR+0x23e>
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d01b      	beq.n	8004128 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e012      	b.n	800414e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004136:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415c:	d14b      	bne.n	80041f6 <I2C_Master_ADDR+0x30c>
 800415e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004164:	d00b      	beq.n	800417e <I2C_Master_ADDR+0x294>
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	2b01      	cmp	r3, #1
 800416a:	d008      	beq.n	800417e <I2C_Master_ADDR+0x294>
 800416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416e:	2b08      	cmp	r3, #8
 8004170:	d005      	beq.n	800417e <I2C_Master_ADDR+0x294>
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	2b10      	cmp	r3, #16
 8004176:	d002      	beq.n	800417e <I2C_Master_ADDR+0x294>
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	2b20      	cmp	r3, #32
 800417c:	d13b      	bne.n	80041f6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800418c:	605a      	str	r2, [r3, #4]
 800418e:	e032      	b.n	80041f6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800419e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ae:	d117      	bne.n	80041e0 <I2C_Master_ADDR+0x2f6>
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041b6:	d00b      	beq.n	80041d0 <I2C_Master_ADDR+0x2e6>
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d008      	beq.n	80041d0 <I2C_Master_ADDR+0x2e6>
 80041be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d005      	beq.n	80041d0 <I2C_Master_ADDR+0x2e6>
 80041c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d002      	beq.n	80041d0 <I2C_Master_ADDR+0x2e6>
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d107      	bne.n	80041e0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80041fc:	e00b      	b.n	8004216 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
}
 8004214:	e7ff      	b.n	8004216 <I2C_Master_ADDR+0x32c>
 8004216:	bf00      	nop
 8004218:	3744      	adds	r7, #68	; 0x44
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d02b      	beq.n	8004292 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d114      	bne.n	8004292 <I2C_SlaveTransmit_TXE+0x72>
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b29      	cmp	r3, #41	; 0x29
 800426c:	d111      	bne.n	8004292 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2221      	movs	r2, #33	; 0x21
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2228      	movs	r2, #40	; 0x28
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff f9f1 	bl	8003674 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d011      	beq.n	80042d0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr

080042da <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02c      	beq.n	800434e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d114      	bne.n	800434e <I2C_SlaveReceive_RXNE+0x74>
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b2a      	cmp	r3, #42	; 0x2a
 8004328:	d111      	bne.n	800434e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004338:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2222      	movs	r2, #34	; 0x22
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2228      	movs	r2, #40	; 0x28
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff f99c 	bl	8003686 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d012      	beq.n	800438e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043b2:	2b28      	cmp	r3, #40	; 0x28
 80043b4:	d127      	bne.n	8004406 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	089b      	lsrs	r3, r3, #2
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	09db      	lsrs	r3, r3, #7
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	81bb      	strh	r3, [r7, #12]
 80043e8:	e002      	b.n	80043f0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80043f8:	89ba      	ldrh	r2, [r7, #12]
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff f94a 	bl	8003698 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004404:	e00e      	b.n	8004424 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800444a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800444c:	2300      	movs	r3, #0
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004478:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004488:	d172      	bne.n	8004570 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	2b22      	cmp	r3, #34	; 0x22
 800448e:	d002      	beq.n	8004496 <I2C_Slave_STOPF+0x6a>
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b2a      	cmp	r3, #42	; 0x2a
 8004494:	d135      	bne.n	8004502 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f043 0204 	orr.w	r2, r3, #4
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fd fdb2 	bl	8002038 <HAL_DMA_GetState>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d049      	beq.n	800456e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	4a69      	ldr	r2, [pc, #420]	; (8004684 <I2C_Slave_STOPF+0x258>)
 80044e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd fd30 	bl	8001f4c <HAL_DMA_Abort_IT>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d03d      	beq.n	800456e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044fc:	4610      	mov	r0, r2
 80044fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004500:	e035      	b.n	800456e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b29a      	uxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f043 0204 	orr.w	r2, r3, #4
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004534:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	4618      	mov	r0, r3
 800453c:	f7fd fd7c 	bl	8002038 <HAL_DMA_GetState>
 8004540:	4603      	mov	r3, r0
 8004542:	2b01      	cmp	r3, #1
 8004544:	d014      	beq.n	8004570 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	4a4e      	ldr	r2, [pc, #312]	; (8004684 <I2C_Slave_STOPF+0x258>)
 800454c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd fcfa 	bl	8001f4c <HAL_DMA_Abort_IT>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004568:	4610      	mov	r0, r2
 800456a:	4798      	blx	r3
 800456c:	e000      	b.n	8004570 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800456e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d03e      	beq.n	80045f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b04      	cmp	r3, #4
 8004586:	d112      	bne.n	80045ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d112      	bne.n	80045e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	f043 0204 	orr.w	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f8b3 	bl	800476c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004606:	e039      	b.n	800467c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b2a      	cmp	r3, #42	; 0x2a
 800460c:	d109      	bne.n	8004622 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2228      	movs	r2, #40	; 0x28
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff f832 	bl	8003686 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b28      	cmp	r3, #40	; 0x28
 800462c:	d111      	bne.n	8004652 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a15      	ldr	r2, [pc, #84]	; (8004688 <I2C_Slave_STOPF+0x25c>)
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff f831 	bl	80036b2 <HAL_I2C_ListenCpltCallback>
}
 8004650:	e014      	b.n	800467c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	2b22      	cmp	r3, #34	; 0x22
 8004658:	d002      	beq.n	8004660 <I2C_Slave_STOPF+0x234>
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b22      	cmp	r3, #34	; 0x22
 800465e:	d10d      	bne.n	800467c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff f805 	bl	8003686 <HAL_I2C_SlaveRxCpltCallback>
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	08004e41 	.word	0x08004e41
 8004688:	ffff0000 	.word	0xffff0000

0800468c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d002      	beq.n	80046ae <I2C_Slave_AF+0x22>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d129      	bne.n	8004702 <I2C_Slave_AF+0x76>
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b28      	cmp	r3, #40	; 0x28
 80046b2:	d126      	bne.n	8004702 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a2c      	ldr	r2, [pc, #176]	; (8004768 <I2C_Slave_AF+0xdc>)
 80046b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fe ffd9 	bl	80036b2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004700:	e02e      	b.n	8004760 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	2b21      	cmp	r3, #33	; 0x21
 8004706:	d126      	bne.n	8004756 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a17      	ldr	r2, [pc, #92]	; (8004768 <I2C_Slave_AF+0xdc>)
 800470c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2221      	movs	r2, #33	; 0x21
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004732:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800473c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fe ff90 	bl	8003674 <HAL_I2C_SlaveTxCpltCallback>
}
 8004754:	e004      	b.n	8004760 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800475e:	615a      	str	r2, [r3, #20]
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	ffff0000 	.word	0xffff0000

0800476c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004782:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004784:	7bbb      	ldrb	r3, [r7, #14]
 8004786:	2b10      	cmp	r3, #16
 8004788:	d002      	beq.n	8004790 <I2C_ITError+0x24>
 800478a:	7bbb      	ldrb	r3, [r7, #14]
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d10a      	bne.n	80047a6 <I2C_ITError+0x3a>
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b22      	cmp	r3, #34	; 0x22
 8004794:	d107      	bne.n	80047a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047ac:	2b28      	cmp	r3, #40	; 0x28
 80047ae:	d107      	bne.n	80047c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2228      	movs	r2, #40	; 0x28
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047be:	e015      	b.n	80047ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ce:	d00a      	beq.n	80047e6 <I2C_ITError+0x7a>
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b60      	cmp	r3, #96	; 0x60
 80047d4:	d007      	beq.n	80047e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fa:	d161      	bne.n	80048c0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004814:	2b01      	cmp	r3, #1
 8004816:	d020      	beq.n	800485a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481c:	4a6a      	ldr	r2, [pc, #424]	; (80049c8 <I2C_ITError+0x25c>)
 800481e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004824:	4618      	mov	r0, r3
 8004826:	f7fd fb91 	bl	8001f4c <HAL_DMA_Abort_IT>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8089 	beq.w	8004944 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004854:	4610      	mov	r0, r2
 8004856:	4798      	blx	r3
 8004858:	e074      	b.n	8004944 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	4a5a      	ldr	r2, [pc, #360]	; (80049c8 <I2C_ITError+0x25c>)
 8004860:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd fb70 	bl	8001f4c <HAL_DMA_Abort_IT>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d068      	beq.n	8004944 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	d10b      	bne.n	8004898 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048ba:	4610      	mov	r0, r2
 80048bc:	4798      	blx	r3
 80048be:	e041      	b.n	8004944 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b60      	cmp	r3, #96	; 0x60
 80048ca:	d125      	bne.n	8004918 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d10b      	bne.n	8004900 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7fe fef2 	bl	80036fa <HAL_I2C_AbortCpltCallback>
 8004916:	e015      	b.n	8004944 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d10b      	bne.n	800493e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fe fed2 	bl	80036e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10e      	bne.n	8004972 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004980:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d113      	bne.n	80049be <I2C_ITError+0x252>
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b28      	cmp	r3, #40	; 0x28
 800499a:	d110      	bne.n	80049be <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a0b      	ldr	r2, [pc, #44]	; (80049cc <I2C_ITError+0x260>)
 80049a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7fe fe7a 	bl	80036b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	08004e41 	.word	0x08004e41
 80049cc:	ffff0000 	.word	0xffff0000

080049d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	607a      	str	r2, [r7, #4]
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	460b      	mov	r3, r1
 80049de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d006      	beq.n	80049fa <I2C_MasterRequestWrite+0x2a>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d003      	beq.n	80049fa <I2C_MasterRequestWrite+0x2a>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049f8:	d108      	bne.n	8004a0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e00b      	b.n	8004a24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	2b12      	cmp	r3, #18
 8004a12:	d107      	bne.n	8004a24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 faad 	bl	8004f90 <I2C_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00d      	beq.n	8004a58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4a:	d103      	bne.n	8004a54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e035      	b.n	8004ac4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a60:	d108      	bne.n	8004a74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a62:	897b      	ldrh	r3, [r7, #10]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a70:	611a      	str	r2, [r3, #16]
 8004a72:	e01b      	b.n	8004aac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a74:	897b      	ldrh	r3, [r7, #10]
 8004a76:	11db      	asrs	r3, r3, #7
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	f003 0306 	and.w	r3, r3, #6
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	f063 030f 	orn	r3, r3, #15
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	490e      	ldr	r1, [pc, #56]	; (8004acc <I2C_MasterRequestWrite+0xfc>)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fad3 	bl	800503e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e010      	b.n	8004ac4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004aa2:	897b      	ldrh	r3, [r7, #10]
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	4907      	ldr	r1, [pc, #28]	; (8004ad0 <I2C_MasterRequestWrite+0x100>)
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fac3 	bl	800503e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	00010008 	.word	0x00010008
 8004ad0:	00010002 	.word	0x00010002

08004ad4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004af8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d006      	beq.n	8004b0e <I2C_MasterRequestRead+0x3a>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d003      	beq.n	8004b0e <I2C_MasterRequestRead+0x3a>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b0c:	d108      	bne.n	8004b20 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e00b      	b.n	8004b38 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	2b11      	cmp	r3, #17
 8004b26:	d107      	bne.n	8004b38 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fa23 	bl	8004f90 <I2C_WaitOnFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00d      	beq.n	8004b6c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b5e:	d103      	bne.n	8004b68 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e079      	b.n	8004c60 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b74:	d108      	bne.n	8004b88 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b76:	897b      	ldrh	r3, [r7, #10]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	611a      	str	r2, [r3, #16]
 8004b86:	e05f      	b.n	8004c48 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b88:	897b      	ldrh	r3, [r7, #10]
 8004b8a:	11db      	asrs	r3, r3, #7
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 0306 	and.w	r3, r3, #6
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f063 030f 	orn	r3, r3, #15
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	4930      	ldr	r1, [pc, #192]	; (8004c68 <I2C_MasterRequestRead+0x194>)
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 fa49 	bl	800503e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e054      	b.n	8004c60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bb6:	897b      	ldrh	r3, [r7, #10]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4929      	ldr	r1, [pc, #164]	; (8004c6c <I2C_MasterRequestRead+0x198>)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fa39 	bl	800503e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e044      	b.n	8004c60 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bfa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f9c1 	bl	8004f90 <I2C_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c22:	d103      	bne.n	8004c2c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e017      	b.n	8004c60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c30:	897b      	ldrh	r3, [r7, #10]
 8004c32:	11db      	asrs	r3, r3, #7
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	f003 0306 	and.w	r3, r3, #6
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f063 030e 	orn	r3, r3, #14
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	4907      	ldr	r1, [pc, #28]	; (8004c6c <I2C_MasterRequestRead+0x198>)
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f9f5 	bl	800503e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	00010008 	.word	0x00010008
 8004c6c:	00010002 	.word	0x00010002

08004c70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	817b      	strh	r3, [r7, #10]
 8004c82:	460b      	mov	r3, r1
 8004c84:	813b      	strh	r3, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f96a 	bl	8004f90 <I2C_WaitOnFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00d      	beq.n	8004cde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd0:	d103      	bne.n	8004cda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e0aa      	b.n	8004e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cde:	897b      	ldrh	r3, [r7, #10]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	6a3a      	ldr	r2, [r7, #32]
 8004cf2:	4952      	ldr	r1, [pc, #328]	; (8004e3c <I2C_RequestMemoryRead+0x1cc>)
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f9a2 	bl	800503e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e097      	b.n	8004e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1c:	6a39      	ldr	r1, [r7, #32]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 fa0c 	bl	800513c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d107      	bne.n	8004d42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e076      	b.n	8004e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d105      	bne.n	8004d58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d4c:	893b      	ldrh	r3, [r7, #8]
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	611a      	str	r2, [r3, #16]
 8004d56:	e021      	b.n	8004d9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d58:	893b      	ldrh	r3, [r7, #8]
 8004d5a:	0a1b      	lsrs	r3, r3, #8
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d68:	6a39      	ldr	r1, [r7, #32]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f9e6 	bl	800513c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00d      	beq.n	8004d92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d107      	bne.n	8004d8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e050      	b.n	8004e34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d92:	893b      	ldrh	r3, [r7, #8]
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9e:	6a39      	ldr	r1, [r7, #32]
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f9cb 	bl	800513c <I2C_WaitOnTXEFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00d      	beq.n	8004dc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d107      	bne.n	8004dc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e035      	b.n	8004e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f8d3 	bl	8004f90 <I2C_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00d      	beq.n	8004e0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfe:	d103      	bne.n	8004e08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e013      	b.n	8004e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e0c:	897b      	ldrh	r3, [r7, #10]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	6a3a      	ldr	r2, [r7, #32]
 8004e20:	4906      	ldr	r1, [pc, #24]	; (8004e3c <I2C_RequestMemoryRead+0x1cc>)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f90b 	bl	800503e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	00010002 	.word	0x00010002

08004e40 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e58:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e5a:	4b4b      	ldr	r3, [pc, #300]	; (8004f88 <I2C_DMAAbort+0x148>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	08db      	lsrs	r3, r3, #3
 8004e60:	4a4a      	ldr	r2, [pc, #296]	; (8004f8c <I2C_DMAAbort+0x14c>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	0a1a      	lsrs	r2, r3, #8
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	00da      	lsls	r2, r3, #3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004e86:	e00a      	b.n	8004e9e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e9c:	d0ea      	beq.n	8004e74 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	2200      	movs	r2, #0
 8004eac:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	2200      	movs	r2, #0
 8004ebc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ecc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b60      	cmp	r3, #96	; 0x60
 8004f0e:	d10e      	bne.n	8004f2e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2200      	movs	r2, #0
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f26:	6978      	ldr	r0, [r7, #20]
 8004f28:	f7fe fbe7 	bl	80036fa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f2c:	e027      	b.n	8004f7e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f2e:	7cfb      	ldrb	r3, [r7, #19]
 8004f30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f34:	2b28      	cmp	r3, #40	; 0x28
 8004f36:	d117      	bne.n	8004f68 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2228      	movs	r2, #40	; 0x28
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f66:	e007      	b.n	8004f78 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f78:	6978      	ldr	r0, [r7, #20]
 8004f7a:	f7fe fbb5 	bl	80036e8 <HAL_I2C_ErrorCallback>
}
 8004f7e:	bf00      	nop
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000004 	.word	0x20000004
 8004f8c:	14f8b589 	.word	0x14f8b589

08004f90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fa0:	e025      	b.n	8004fee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d021      	beq.n	8004fee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004faa:	f7fc fe93 	bl	8001cd4 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d302      	bcc.n	8004fc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d116      	bne.n	8004fee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e023      	b.n	8005036 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	0c1b      	lsrs	r3, r3, #16
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d10d      	bne.n	8005014 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	43da      	mvns	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4013      	ands	r3, r2
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf0c      	ite	eq
 800500a:	2301      	moveq	r3, #1
 800500c:	2300      	movne	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	461a      	mov	r2, r3
 8005012:	e00c      	b.n	800502e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	43da      	mvns	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	bf0c      	ite	eq
 8005026:	2301      	moveq	r3, #1
 8005028:	2300      	movne	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	429a      	cmp	r2, r3
 8005032:	d0b6      	beq.n	8004fa2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
 800504a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800504c:	e051      	b.n	80050f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505c:	d123      	bne.n	80050a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800506c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005076:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f043 0204 	orr.w	r2, r3, #4
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e046      	b.n	8005134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ac:	d021      	beq.n	80050f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ae:	f7fc fe11 	bl	8001cd4 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d302      	bcc.n	80050c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d116      	bne.n	80050f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f043 0220 	orr.w	r2, r3, #32
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e020      	b.n	8005134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d10c      	bne.n	8005116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	43da      	mvns	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4013      	ands	r3, r2
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	bf14      	ite	ne
 800510e:	2301      	movne	r3, #1
 8005110:	2300      	moveq	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	e00b      	b.n	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	43da      	mvns	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4013      	ands	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf14      	ite	ne
 8005128:	2301      	movne	r3, #1
 800512a:	2300      	moveq	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d18d      	bne.n	800504e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005148:	e02d      	b.n	80051a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 f900 	bl	8005350 <I2C_IsAcknowledgeFailed>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e02d      	b.n	80051b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d021      	beq.n	80051a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005162:	f7fc fdb7 	bl	8001cd4 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	429a      	cmp	r2, r3
 8005170:	d302      	bcc.n	8005178 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d116      	bne.n	80051a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e007      	b.n	80051b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b0:	2b80      	cmp	r3, #128	; 0x80
 80051b2:	d1ca      	bne.n	800514a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051ca:	e02d      	b.n	8005228 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f8bf 	bl	8005350 <I2C_IsAcknowledgeFailed>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e02d      	b.n	8005238 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d021      	beq.n	8005228 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e4:	f7fc fd76 	bl	8001cd4 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d302      	bcc.n	80051fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d116      	bne.n	8005228 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e007      	b.n	8005238 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b04      	cmp	r3, #4
 8005234:	d1ca      	bne.n	80051cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800524c:	4b13      	ldr	r3, [pc, #76]	; (800529c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	08db      	lsrs	r3, r3, #3
 8005252:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005254:	fba2 2303 	umull	r2, r3, r2, r3
 8005258:	0a1a      	lsrs	r2, r3, #8
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3b01      	subs	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d107      	bne.n	800527e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e008      	b.n	8005290 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800528c:	d0e9      	beq.n	8005262 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20000004 	.word	0x20000004
 80052a0:	14f8b589 	.word	0x14f8b589

080052a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052b0:	e042      	b.n	8005338 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d119      	bne.n	80052f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0210 	mvn.w	r2, #16
 80052c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e029      	b.n	8005348 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f4:	f7fc fcee 	bl	8001cd4 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	429a      	cmp	r2, r3
 8005302:	d302      	bcc.n	800530a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d116      	bne.n	8005338 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	f043 0220 	orr.w	r2, r3, #32
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e007      	b.n	8005348 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005342:	2b40      	cmp	r3, #64	; 0x40
 8005344:	d1b5      	bne.n	80052b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005366:	d11b      	bne.n	80053a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005370:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f043 0204 	orr.w	r2, r3, #4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80053bc:	d103      	bne.n	80053c6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80053c4:	e007      	b.n	80053d6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80053ce:	d102      	bne.n	80053d6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2208      	movs	r2, #8
 80053d4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr

080053e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053e2:	b08b      	sub	sp, #44	; 0x2c
 80053e4:	af06      	add	r7, sp, #24
 80053e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e0fd      	b.n	80055ee <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f007 f8b8 	bl	800c57c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2203      	movs	r2, #3
 8005410:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f002 fd8b 	bl	8007f34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	687e      	ldr	r6, [r7, #4]
 8005426:	466d      	mov	r5, sp
 8005428:	f106 0410 	add.w	r4, r6, #16
 800542c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800542e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	602b      	str	r3, [r5, #0]
 8005434:	1d33      	adds	r3, r6, #4
 8005436:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005438:	6838      	ldr	r0, [r7, #0]
 800543a:	f002 fd55 	bl	8007ee8 <USB_CoreInit>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0ce      	b.n	80055ee <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2100      	movs	r1, #0
 8005456:	4618      	mov	r0, r3
 8005458:	f002 fd86 	bl	8007f68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800545c:	2300      	movs	r3, #0
 800545e:	73fb      	strb	r3, [r7, #15]
 8005460:	e04c      	b.n	80054fc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	440b      	add	r3, r1
 8005472:	3301      	adds	r3, #1
 8005474:	2201      	movs	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	440b      	add	r3, r1
 8005488:	7bfa      	ldrb	r2, [r7, #15]
 800548a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800548c:	7bfa      	ldrb	r2, [r7, #15]
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	b298      	uxth	r0, r3
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	440b      	add	r3, r1
 800549e:	3336      	adds	r3, #54	; 0x36
 80054a0:	4602      	mov	r2, r0
 80054a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	4613      	mov	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	440b      	add	r3, r1
 80054b4:	3303      	adds	r3, #3
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80054ba:	7bfa      	ldrb	r2, [r7, #15]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	440b      	add	r3, r1
 80054c8:	3338      	adds	r3, #56	; 0x38
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80054ce:	7bfa      	ldrb	r2, [r7, #15]
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	440b      	add	r3, r1
 80054dc:	333c      	adds	r3, #60	; 0x3c
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80054e2:	7bfa      	ldrb	r2, [r7, #15]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	440b      	add	r3, r1
 80054f0:	3340      	adds	r3, #64	; 0x40
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	3301      	adds	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
 80054fc:	7bfa      	ldrb	r2, [r7, #15]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d3ad      	bcc.n	8005462 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005506:	2300      	movs	r3, #0
 8005508:	73fb      	strb	r3, [r7, #15]
 800550a:	e044      	b.n	8005596 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800550c:	7bfa      	ldrb	r2, [r7, #15]
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	440b      	add	r3, r1
 800551a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005522:	7bfa      	ldrb	r2, [r7, #15]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	440b      	add	r3, r1
 8005530:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005538:	7bfa      	ldrb	r2, [r7, #15]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	440b      	add	r3, r1
 8005546:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800554e:	7bfa      	ldrb	r2, [r7, #15]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	440b      	add	r3, r1
 800555c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005564:	7bfa      	ldrb	r2, [r7, #15]
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	440b      	add	r3, r1
 8005572:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800557a:	7bfa      	ldrb	r2, [r7, #15]
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	440b      	add	r3, r1
 8005588:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	3301      	adds	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
 8005596:	7bfa      	ldrb	r2, [r7, #15]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d3b5      	bcc.n	800550c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	603b      	str	r3, [r7, #0]
 80055a6:	687e      	ldr	r6, [r7, #4]
 80055a8:	466d      	mov	r5, sp
 80055aa:	f106 0410 	add.w	r4, r6, #16
 80055ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	602b      	str	r3, [r5, #0]
 80055b6:	1d33      	adds	r3, r6, #4
 80055b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055ba:	6838      	ldr	r0, [r7, #0]
 80055bc:	f002 fce0 	bl	8007f80 <USB_DevInit>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2202      	movs	r2, #2
 80055ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e00d      	b.n	80055ee <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f005 f992 	bl	800a910 <USB_DevDisconnect>

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_PCD_Start+0x16>
 8005608:	2302      	movs	r3, #2
 800560a:	e016      	b.n	800563a <HAL_PCD_Start+0x44>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4618      	mov	r0, r3
 800561a:	f002 fc75 	bl	8007f08 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800561e:	2101      	movs	r1, #1
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f007 fa1e 	bl	800ca62 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f005 f966 	bl	800a8fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b088      	sub	sp, #32
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f005 f968 	bl	800a924 <USB_ReadInterrupts>
 8005654:	4603      	mov	r3, r0
 8005656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800565a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800565e:	d102      	bne.n	8005666 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fb5f 	bl	8005d24 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f005 f95a 	bl	800a924 <USB_ReadInterrupts>
 8005670:	4603      	mov	r3, r0
 8005672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567a:	d112      	bne.n	80056a2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005684:	b29a      	uxth	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800568e:	b292      	uxth	r2, r2
 8005690:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f006 ffec 	bl	800c672 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800569a:	2100      	movs	r1, #0
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f923 	bl	80058e8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f005 f93c 	bl	800a924 <USB_ReadInterrupts>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056b6:	d10b      	bne.n	80056d0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056ca:	b292      	uxth	r2, r2
 80056cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f005 f925 	bl	800a924 <USB_ReadInterrupts>
 80056da:	4603      	mov	r3, r0
 80056dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e4:	d10b      	bne.n	80056fe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056f8:	b292      	uxth	r2, r2
 80056fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f005 f90e 	bl	800a924 <USB_ReadInterrupts>
 8005708:	4603      	mov	r3, r0
 800570a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005712:	d126      	bne.n	8005762 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800571c:	b29a      	uxth	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0204 	bic.w	r2, r2, #4
 8005726:	b292      	uxth	r2, r2
 8005728:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0208 	bic.w	r2, r2, #8
 800573e:	b292      	uxth	r2, r2
 8005740:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f006 ffcd 	bl	800c6e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005752:	b29a      	uxth	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800575c:	b292      	uxth	r2, r2
 800575e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f005 f8dc 	bl	800a924 <USB_ReadInterrupts>
 800576c:	4603      	mov	r3, r0
 800576e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005776:	f040 8082 	bne.w	800587e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800577a:	2300      	movs	r3, #0
 800577c:	77fb      	strb	r3, [r7, #31]
 800577e:	e010      	b.n	80057a2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	7ffb      	ldrb	r3, [r7, #31]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	441a      	add	r2, r3
 800578c:	7ffb      	ldrb	r3, [r7, #31]
 800578e:	8812      	ldrh	r2, [r2, #0]
 8005790:	b292      	uxth	r2, r2
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	3320      	adds	r3, #32
 8005796:	443b      	add	r3, r7
 8005798:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800579c:	7ffb      	ldrb	r3, [r7, #31]
 800579e:	3301      	adds	r3, #1
 80057a0:	77fb      	strb	r3, [r7, #31]
 80057a2:	7ffb      	ldrb	r3, [r7, #31]
 80057a4:	2b07      	cmp	r3, #7
 80057a6:	d9eb      	bls.n	8005780 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0201 	orr.w	r2, r2, #1
 80057ba:	b292      	uxth	r2, r2
 80057bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0201 	bic.w	r2, r2, #1
 80057d2:	b292      	uxth	r2, r2
 80057d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80057d8:	bf00      	nop
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f6      	beq.n	80057da <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057fe:	b292      	uxth	r2, r2
 8005800:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005804:	2300      	movs	r3, #0
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e00f      	b.n	800582a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800580a:	7ffb      	ldrb	r3, [r7, #31]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	4611      	mov	r1, r2
 8005812:	7ffa      	ldrb	r2, [r7, #31]
 8005814:	0092      	lsls	r2, r2, #2
 8005816:	440a      	add	r2, r1
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	3320      	adds	r3, #32
 800581c:	443b      	add	r3, r7
 800581e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005822:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005824:	7ffb      	ldrb	r3, [r7, #31]
 8005826:	3301      	adds	r3, #1
 8005828:	77fb      	strb	r3, [r7, #31]
 800582a:	7ffb      	ldrb	r3, [r7, #31]
 800582c:	2b07      	cmp	r3, #7
 800582e:	d9ec      	bls.n	800580a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005838:	b29a      	uxth	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0208 	orr.w	r2, r2, #8
 8005842:	b292      	uxth	r2, r2
 8005844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005850:	b29a      	uxth	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800585a:	b292      	uxth	r2, r2
 800585c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005868:	b29a      	uxth	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0204 	orr.w	r2, r2, #4
 8005872:	b292      	uxth	r2, r2
 8005874:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f006 ff19 	bl	800c6b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f005 f84e 	bl	800a924 <USB_ReadInterrupts>
 8005888:	4603      	mov	r3, r0
 800588a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800588e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005892:	d10e      	bne.n	80058b2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800589c:	b29a      	uxth	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058a6:	b292      	uxth	r2, r2
 80058a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f006 fed2 	bl	800c656 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f005 f834 	bl	800a924 <USB_ReadInterrupts>
 80058bc:	4603      	mov	r3, r0
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c6:	d10b      	bne.n	80058e0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058da:	b292      	uxth	r2, r2
 80058dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80058e0:	bf00      	nop
 80058e2:	3720      	adds	r7, #32
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_PCD_SetAddress+0x1a>
 80058fe:	2302      	movs	r3, #2
 8005900:	e013      	b.n	800592a <HAL_PCD_SetAddress+0x42>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	78fa      	ldrb	r2, [r7, #3]
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f004 ffdb 	bl	800a8d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	4608      	mov	r0, r1
 800593c:	4611      	mov	r1, r2
 800593e:	461a      	mov	r2, r3
 8005940:	4603      	mov	r3, r0
 8005942:	70fb      	strb	r3, [r7, #3]
 8005944:	460b      	mov	r3, r1
 8005946:	803b      	strh	r3, [r7, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005954:	2b00      	cmp	r3, #0
 8005956:	da0e      	bge.n	8005976 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4413      	add	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	705a      	strb	r2, [r3, #1]
 8005974:	e00e      	b.n	8005994 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	f003 0207 	and.w	r2, r3, #7
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	4413      	add	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	b2da      	uxtb	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80059a0:	883a      	ldrh	r2, [r7, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	78ba      	ldrb	r2, [r7, #2]
 80059aa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d004      	beq.n	80059be <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059be:	78bb      	ldrb	r3, [r7, #2]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d102      	bne.n	80059ca <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_PCD_EP_Open+0xa6>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e00e      	b.n	80059f6 <HAL_PCD_EP_Open+0xc4>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68f9      	ldr	r1, [r7, #12]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f002 faea 	bl	8007fc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80059f4:	7afb      	ldrb	r3, [r7, #11]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	da0e      	bge.n	8005a30 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4413      	add	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	705a      	strb	r2, [r3, #1]
 8005a2e:	e00e      	b.n	8005a4e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	f003 0207 	and.w	r2, r3, #7
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a4e:	78fb      	ldrb	r3, [r7, #3]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_PCD_EP_Close+0x6a>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e00e      	b.n	8005a86 <HAL_PCD_EP_Close+0x88>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68f9      	ldr	r1, [r7, #12]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f002 fe0c 	bl	8008694 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b086      	sub	sp, #24
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a9e:	7afb      	ldrb	r3, [r7, #11]
 8005aa0:	f003 0207 	and.w	r2, r3, #7
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2200      	movs	r2, #0
 8005acc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ace:	7afb      	ldrb	r3, [r7, #11]
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ada:	7afb      	ldrb	r3, [r7, #11]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6979      	ldr	r1, [r7, #20]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f002 ffbe 	bl	8008a6c <USB_EPStartXfer>
 8005af0:	e005      	b.n	8005afe <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6979      	ldr	r1, [r7, #20]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f002 ffb7 	bl	8008a6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	f003 0207 	and.w	r2, r3, #7
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	440b      	add	r3, r1
 8005b26:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr

08005b36 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b086      	sub	sp, #24
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	460b      	mov	r3, r1
 8005b44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b46:	7afb      	ldrb	r3, [r7, #11]
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4413      	add	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b82:	7afb      	ldrb	r3, [r7, #11]
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d106      	bne.n	8005ba6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6979      	ldr	r1, [r7, #20]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f002 ff64 	bl	8008a6c <USB_EPStartXfer>
 8005ba4:	e005      	b.n	8005bb2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6979      	ldr	r1, [r7, #20]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f002 ff5d 	bl	8008a6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	f003 0207 	and.w	r2, r3, #7
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d901      	bls.n	8005bda <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e04c      	b.n	8005c74 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	da0e      	bge.n	8005c00 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	705a      	strb	r2, [r3, #1]
 8005bfe:	e00c      	b.n	8005c1a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c00:	78fa      	ldrb	r2, [r7, #3]
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	4413      	add	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_PCD_EP_SetStall+0x7e>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e01c      	b.n	8005c74 <HAL_PCD_EP_SetStall+0xb8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f004 fd47 	bl	800a6dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d108      	bne.n	8005c6a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005c62:	4619      	mov	r1, r3
 8005c64:	4610      	mov	r0, r2
 8005c66:	f004 fe6c 	bl	800a942 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	f003 020f 	and.w	r2, r3, #15
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d901      	bls.n	8005c9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e040      	b.n	8005d1c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	da0e      	bge.n	8005cc0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	705a      	strb	r2, [r3, #1]
 8005cbe:	e00e      	b.n	8005cde <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	f003 0207 	and.w	r2, r3, #7
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_PCD_EP_ClrStall+0x82>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e00e      	b.n	8005d1c <HAL_PCD_EP_ClrStall+0xa0>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f004 fd35 	bl	800a77c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08e      	sub	sp, #56	; 0x38
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d2c:	e2ec      	b.n	8006308 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d36:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005d38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005d44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f040 8161 	bne.w	8006010 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005d4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d152      	bne.n	8005dfe <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d68:	81fb      	strh	r3, [r7, #14]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	89fb      	ldrh	r3, [r7, #14]
 8005d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3328      	adds	r3, #40	; 0x28
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4413      	add	r3, r2
 8005d96:	3302      	adds	r3, #2
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	441a      	add	r2, r3
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f006 fc2f 	bl	800c622 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 829b 	beq.w	8006308 <PCD_EP_ISR_Handler+0x5e4>
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f040 8296 	bne.w	8006308 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	b292      	uxth	r2, r2
 8005df0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005dfc:	e284      	b.n	8006308 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005e0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d034      	beq.n	8005e82 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3306      	adds	r3, #6
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f004 fdc3 	bl	800a9e2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005e68:	4013      	ands	r3, r2
 8005e6a:	823b      	strh	r3, [r7, #16]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	8a3a      	ldrh	r2, [r7, #16]
 8005e72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e76:	b292      	uxth	r2, r2
 8005e78:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f006 fba4 	bl	800c5c8 <HAL_PCD_SetupStageCallback>
 8005e80:	e242      	b.n	8006308 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005e82:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f280 823e 	bge.w	8006308 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005e98:	4013      	ands	r3, r2
 8005e9a:	83bb      	strh	r3, [r7, #28]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	8bba      	ldrh	r2, [r7, #28]
 8005ea2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ea6:	b292      	uxth	r2, r2
 8005ea8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	3306      	adds	r3, #6
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d019      	beq.n	8005f12 <PCD_EP_ISR_Handler+0x1ee>
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d015      	beq.n	8005f12 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	6959      	ldr	r1, [r3, #20]
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f004 fd73 	bl	800a9e2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	695a      	ldr	r2, [r3, #20]
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	441a      	add	r2, r3
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f006 fb6d 	bl	800c5ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f040 81f2 	bne.w	8006308 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	4413      	add	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d112      	bne.n	8005f72 <PCD_EP_ISR_Handler+0x24e>
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	e02f      	b.n	8005fd2 <PCD_EP_ISR_Handler+0x2ae>
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b3e      	cmp	r3, #62	; 0x3e
 8005f78:	d813      	bhi.n	8005fa2 <PCD_EP_ISR_Handler+0x27e>
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	085b      	lsrs	r3, r3, #1
 8005f80:	633b      	str	r3, [r7, #48]	; 0x30
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <PCD_EP_ISR_Handler+0x270>
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	3301      	adds	r3, #1
 8005f92:	633b      	str	r3, [r7, #48]	; 0x30
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	029b      	lsls	r3, r3, #10
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	801a      	strh	r2, [r3, #0]
 8005fa0:	e017      	b.n	8005fd2 <PCD_EP_ISR_Handler+0x2ae>
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 031f 	and.w	r3, r3, #31
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <PCD_EP_ISR_Handler+0x298>
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	633b      	str	r3, [r7, #48]	; 0x30
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	029b      	lsls	r3, r3, #10
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	827b      	strh	r3, [r7, #18]
 8005fe4:	8a7b      	ldrh	r3, [r7, #18]
 8005fe6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fea:	827b      	strh	r3, [r7, #18]
 8005fec:	8a7b      	ldrh	r3, [r7, #18]
 8005fee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ff2:	827b      	strh	r3, [r7, #18]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	8a7b      	ldrh	r3, [r7, #18]
 8005ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600a:	b29b      	uxth	r3, r3
 800600c:	8013      	strh	r3, [r2, #0]
 800600e:	e17b      	b.n	8006308 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006022:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006026:	2b00      	cmp	r3, #0
 8006028:	f280 80ea 	bge.w	8006200 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	461a      	mov	r2, r3
 8006032:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29a      	uxth	r2, r3
 800603e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006042:	4013      	ands	r3, r2
 8006044:	853b      	strh	r3, [r7, #40]	; 0x28
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006056:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800605a:	b292      	uxth	r2, r2
 800605c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800605e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	4413      	add	r3, r2
 8006072:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	7b1b      	ldrb	r3, [r3, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d122      	bne.n	80060c2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006084:	b29b      	uxth	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4413      	add	r3, r2
 8006090:	3306      	adds	r3, #6
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80060a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 8087 	beq.w	80061bc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6818      	ldr	r0, [r3, #0]
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	6959      	ldr	r1, [r3, #20]
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	88da      	ldrh	r2, [r3, #6]
 80060ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060bc:	f004 fc91 	bl	800a9e2 <USB_ReadPMA>
 80060c0:	e07c      	b.n	80061bc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	78db      	ldrb	r3, [r3, #3]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d108      	bne.n	80060dc <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80060ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060cc:	461a      	mov	r2, r3
 80060ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f927 	bl	8006324 <HAL_PCD_EP_DB_Receive>
 80060d6:	4603      	mov	r3, r0
 80060d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80060da:	e06f      	b.n	80061bc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	441a      	add	r2, r3
 8006106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800610c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006114:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006118:	b29b      	uxth	r3, r3
 800611a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d021      	beq.n	800617a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800613e:	b29b      	uxth	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	4413      	add	r3, r2
 800614a:	3302      	adds	r3, #2
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800615e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006160:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006162:	2b00      	cmp	r3, #0
 8006164:	d02a      	beq.n	80061bc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	6959      	ldr	r1, [r3, #20]
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	891a      	ldrh	r2, [r3, #8]
 8006172:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006174:	f004 fc35 	bl	800a9e2 <USB_ReadPMA>
 8006178:	e020      	b.n	80061bc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006182:	b29b      	uxth	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	4413      	add	r3, r2
 800618e:	3306      	adds	r3, #6
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061a2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80061a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d008      	beq.n	80061bc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	6959      	ldr	r1, [r3, #20]
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	895a      	ldrh	r2, [r3, #10]
 80061b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061b8:	f004 fc13 	bl	800a9e2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061c2:	441a      	add	r2, r3
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	695a      	ldr	r2, [r3, #20]
 80061cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061ce:	441a      	add	r2, r3
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <PCD_EP_ISR_Handler+0x4c2>
 80061dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d206      	bcs.n	80061f4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f006 f9fd 	bl	800c5ec <HAL_PCD_DataOutStageCallback>
 80061f2:	e005      	b.n	8006200 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f002 fc36 	bl	8008a6c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006200:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d07e      	beq.n	8006308 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800620a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	4413      	add	r3, r2
 800621c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006238:	843b      	strh	r3, [r7, #32]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	441a      	add	r2, r3
 8006248:	8c3b      	ldrh	r3, [r7, #32]
 800624a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800624e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	78db      	ldrb	r3, [r3, #3]
 800625a:	2b03      	cmp	r3, #3
 800625c:	d00c      	beq.n	8006278 <PCD_EP_ISR_Handler+0x554>
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	78db      	ldrb	r3, [r3, #3]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d008      	beq.n	8006278 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800626a:	2b02      	cmp	r3, #2
 800626c:	d146      	bne.n	80062fc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800626e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d141      	bne.n	80062fc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006280:	b29b      	uxth	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	4413      	add	r3, r2
 800628c:	3302      	adds	r3, #2
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6812      	ldr	r2, [r2, #0]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062a0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	8bfb      	ldrh	r3, [r7, #30]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d906      	bls.n	80062ba <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	8bfb      	ldrh	r3, [r7, #30]
 80062b2:	1ad2      	subs	r2, r2, r3
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	619a      	str	r2, [r3, #24]
 80062b8:	e002      	b.n	80062c0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	2200      	movs	r2, #0
 80062be:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	4619      	mov	r1, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f006 f9a7 	bl	800c622 <HAL_PCD_DataInStageCallback>
 80062d4:	e018      	b.n	8006308 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	695a      	ldr	r2, [r3, #20]
 80062da:	8bfb      	ldrh	r3, [r7, #30]
 80062dc:	441a      	add	r2, r3
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	69da      	ldr	r2, [r3, #28]
 80062e6:	8bfb      	ldrh	r3, [r7, #30]
 80062e8:	441a      	add	r2, r3
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062f4:	4618      	mov	r0, r3
 80062f6:	f002 fbb9 	bl	8008a6c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80062fa:	e005      	b.n	8006308 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80062fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062fe:	461a      	mov	r2, r3
 8006300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f91b 	bl	800653e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006310:	b29b      	uxth	r3, r3
 8006312:	b21b      	sxth	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	f6ff ad0a 	blt.w	8005d2e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3738      	adds	r7, #56	; 0x38
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	4613      	mov	r3, r2
 8006330:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006332:	88fb      	ldrh	r3, [r7, #6]
 8006334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d07e      	beq.n	800643a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006344:	b29b      	uxth	r3, r3
 8006346:	461a      	mov	r2, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	4413      	add	r3, r2
 8006350:	3302      	adds	r3, #2
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	6812      	ldr	r2, [r2, #0]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006364:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	8b7b      	ldrh	r3, [r7, #26]
 800636c:	429a      	cmp	r2, r3
 800636e:	d306      	bcc.n	800637e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	699a      	ldr	r2, [r3, #24]
 8006374:	8b7b      	ldrh	r3, [r7, #26]
 8006376:	1ad2      	subs	r2, r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	619a      	str	r2, [r3, #24]
 800637c:	e002      	b.n	8006384 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2200      	movs	r2, #0
 8006382:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d123      	bne.n	80063d4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a6:	833b      	strh	r3, [r7, #24]
 80063a8:	8b3b      	ldrh	r3, [r7, #24]
 80063aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063ae:	833b      	strh	r3, [r7, #24]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	441a      	add	r2, r3
 80063be:	8b3b      	ldrh	r3, [r7, #24]
 80063c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01f      	beq.n	800641e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f8:	82fb      	strh	r3, [r7, #22]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	441a      	add	r2, r3
 8006408:	8afb      	ldrh	r3, [r7, #22]
 800640a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006416:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800641a:	b29b      	uxth	r3, r3
 800641c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800641e:	8b7b      	ldrh	r3, [r7, #26]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8087 	beq.w	8006534 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	6959      	ldr	r1, [r3, #20]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	891a      	ldrh	r2, [r3, #8]
 8006432:	8b7b      	ldrh	r3, [r7, #26]
 8006434:	f004 fad5 	bl	800a9e2 <USB_ReadPMA>
 8006438:	e07c      	b.n	8006534 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006442:	b29b      	uxth	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	4413      	add	r3, r2
 800644e:	3306      	adds	r3, #6
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006462:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	699a      	ldr	r2, [r3, #24]
 8006468:	8b7b      	ldrh	r3, [r7, #26]
 800646a:	429a      	cmp	r2, r3
 800646c:	d306      	bcc.n	800647c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	8b7b      	ldrh	r3, [r7, #26]
 8006474:	1ad2      	subs	r2, r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	619a      	str	r2, [r3, #24]
 800647a:	e002      	b.n	8006482 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2200      	movs	r2, #0
 8006480:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d123      	bne.n	80064d2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a4:	83fb      	strh	r3, [r7, #30]
 80064a6:	8bfb      	ldrh	r3, [r7, #30]
 80064a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064ac:	83fb      	strh	r3, [r7, #30]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	441a      	add	r2, r3
 80064bc:	8bfb      	ldrh	r3, [r7, #30]
 80064be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d11f      	bne.n	800651c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f6:	83bb      	strh	r3, [r7, #28]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	441a      	add	r2, r3
 8006506:	8bbb      	ldrh	r3, [r7, #28]
 8006508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800650c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006514:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006518:	b29b      	uxth	r3, r3
 800651a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800651c:	8b7b      	ldrh	r3, [r7, #26]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	6959      	ldr	r1, [r3, #20]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	895a      	ldrh	r2, [r3, #10]
 800652e:	8b7b      	ldrh	r3, [r7, #26]
 8006530:	f004 fa57 	bl	800a9e2 <USB_ReadPMA>
    }
  }

  return count;
 8006534:	8b7b      	ldrh	r3, [r7, #26]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b0a2      	sub	sp, #136	; 0x88
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	4613      	mov	r3, r2
 800654a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800654c:	88fb      	ldrh	r3, [r7, #6]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 81c7 	beq.w	80068e6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006560:	b29b      	uxth	r3, r3
 8006562:	461a      	mov	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	4413      	add	r3, r2
 800656c:	3302      	adds	r3, #2
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006580:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	699a      	ldr	r2, [r3, #24]
 8006588:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800658c:	429a      	cmp	r2, r3
 800658e:	d907      	bls.n	80065a0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006598:	1ad2      	subs	r2, r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	619a      	str	r2, [r3, #24]
 800659e:	e002      	b.n	80065a6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2200      	movs	r2, #0
 80065a4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f040 80b9 	bne.w	8006722 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d126      	bne.n	8006606 <HAL_PCD_EP_DB_Transmit+0xc8>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	461a      	mov	r2, r3
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	4413      	add	r3, r2
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	011a      	lsls	r2, r3, #4
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	4413      	add	r3, r2
 80065da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fe:	b29a      	uxth	r2, r3
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	e01a      	b.n	800663c <HAL_PCD_EP_DB_Transmit+0xfe>
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	785b      	ldrb	r3, [r3, #1]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d116      	bne.n	800663c <HAL_PCD_EP_DB_Transmit+0xfe>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	633b      	str	r3, [r7, #48]	; 0x30
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661c:	b29b      	uxth	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	4413      	add	r3, r2
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	011a      	lsls	r2, r3, #4
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	4413      	add	r3, r2
 8006630:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	2200      	movs	r2, #0
 800663a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	623b      	str	r3, [r7, #32]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d126      	bne.n	8006698 <HAL_PCD_EP_DB_Transmit+0x15a>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	61bb      	str	r3, [r7, #24]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006658:	b29b      	uxth	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	4413      	add	r3, r2
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	011a      	lsls	r2, r3, #4
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	4413      	add	r3, r2
 800666c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800667c:	b29a      	uxth	r2, r3
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006690:	b29a      	uxth	r2, r3
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	e017      	b.n	80066c8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d113      	bne.n	80066c8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	4413      	add	r3, r2
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	011a      	lsls	r2, r3, #4
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	4413      	add	r3, r2
 80066bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	2200      	movs	r2, #0
 80066c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	4619      	mov	r1, r3
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f005 ffa7 	bl	800c622 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80066d4:	88fb      	ldrh	r3, [r7, #6]
 80066d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 82d4 	beq.w	8006c88 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	827b      	strh	r3, [r7, #18]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	441a      	add	r2, r3
 800670a:	8a7b      	ldrh	r3, [r7, #18]
 800670c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671c:	b29b      	uxth	r3, r3
 800671e:	8013      	strh	r3, [r2, #0]
 8006720:	e2b2      	b.n	8006c88 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006722:	88fb      	ldrh	r3, [r7, #6]
 8006724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d021      	beq.n	8006770 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	441a      	add	r2, r3
 8006758:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800675c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676c:	b29b      	uxth	r3, r3
 800676e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006776:	2b01      	cmp	r3, #1
 8006778:	f040 8286 	bne.w	8006c88 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	695a      	ldr	r2, [r3, #20]
 8006780:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006784:	441a      	add	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	69da      	ldr	r2, [r3, #28]
 800678e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006792:	441a      	add	r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	6a1a      	ldr	r2, [r3, #32]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d309      	bcc.n	80067b8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	6a1a      	ldr	r2, [r3, #32]
 80067ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b0:	1ad2      	subs	r2, r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	621a      	str	r2, [r3, #32]
 80067b6:	e015      	b.n	80067e4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d107      	bne.n	80067d0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80067c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80067ce:	e009      	b.n	80067e4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2200      	movs	r2, #0
 80067e2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d155      	bne.n	8006898 <HAL_PCD_EP_DB_Transmit+0x35a>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	4413      	add	r3, r2
 8006802:	63bb      	str	r3, [r7, #56]	; 0x38
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	011a      	lsls	r2, r3, #4
 800680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680c:	4413      	add	r3, r2
 800680e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006812:	637b      	str	r3, [r7, #52]	; 0x34
 8006814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006816:	2b00      	cmp	r3, #0
 8006818:	d112      	bne.n	8006840 <HAL_PCD_EP_DB_Transmit+0x302>
 800681a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006824:	b29a      	uxth	r2, r3
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29b      	uxth	r3, r3
 8006830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006838:	b29a      	uxth	r2, r3
 800683a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683c:	801a      	strh	r2, [r3, #0]
 800683e:	e047      	b.n	80068d0 <HAL_PCD_EP_DB_Transmit+0x392>
 8006840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006842:	2b3e      	cmp	r3, #62	; 0x3e
 8006844:	d811      	bhi.n	800686a <HAL_PCD_EP_DB_Transmit+0x32c>
 8006846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006848:	085b      	lsrs	r3, r3, #1
 800684a:	64bb      	str	r3, [r7, #72]	; 0x48
 800684c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_PCD_EP_DB_Transmit+0x31e>
 8006856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006858:	3301      	adds	r3, #1
 800685a:	64bb      	str	r3, [r7, #72]	; 0x48
 800685c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800685e:	b29b      	uxth	r3, r3
 8006860:	029b      	lsls	r3, r3, #10
 8006862:	b29a      	uxth	r2, r3
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	e032      	b.n	80068d0 <HAL_PCD_EP_DB_Transmit+0x392>
 800686a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006872:	f003 031f 	and.w	r3, r3, #31
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <HAL_PCD_EP_DB_Transmit+0x342>
 800687a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800687c:	3b01      	subs	r3, #1
 800687e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006882:	b29b      	uxth	r3, r3
 8006884:	029b      	lsls	r3, r3, #10
 8006886:	b29b      	uxth	r3, r3
 8006888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800688c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006890:	b29a      	uxth	r2, r3
 8006892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006894:	801a      	strh	r2, [r3, #0]
 8006896:	e01b      	b.n	80068d0 <HAL_PCD_EP_DB_Transmit+0x392>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d117      	bne.n	80068d0 <HAL_PCD_EP_DB_Transmit+0x392>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	643b      	str	r3, [r7, #64]	; 0x40
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b4:	4413      	add	r3, r2
 80068b6:	643b      	str	r3, [r7, #64]	; 0x40
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	011a      	lsls	r2, r3, #4
 80068be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c0:	4413      	add	r3, r2
 80068c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ce:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	6959      	ldr	r1, [r3, #20]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	891a      	ldrh	r2, [r3, #8]
 80068dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f004 f83a 	bl	800a958 <USB_WritePMA>
 80068e4:	e1d0      	b.n	8006c88 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	4413      	add	r3, r2
 80068fa:	3306      	adds	r3, #6
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	6812      	ldr	r2, [r2, #0]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800690e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800691a:	429a      	cmp	r2, r3
 800691c:	d307      	bcc.n	800692e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006926:	1ad2      	subs	r2, r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	619a      	str	r2, [r3, #24]
 800692c:	e002      	b.n	8006934 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2200      	movs	r2, #0
 8006932:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f040 80c4 	bne.w	8006ac6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d126      	bne.n	8006994 <HAL_PCD_EP_DB_Transmit+0x456>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006954:	b29b      	uxth	r3, r3
 8006956:	461a      	mov	r2, r3
 8006958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695a:	4413      	add	r3, r2
 800695c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	011a      	lsls	r2, r3, #4
 8006964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006966:	4413      	add	r3, r2
 8006968:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800696c:	66bb      	str	r3, [r7, #104]	; 0x68
 800696e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006978:	b29a      	uxth	r2, r3
 800697a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698c:	b29a      	uxth	r2, r3
 800698e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	e01a      	b.n	80069ca <HAL_PCD_EP_DB_Transmit+0x48c>
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	785b      	ldrb	r3, [r3, #1]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d116      	bne.n	80069ca <HAL_PCD_EP_DB_Transmit+0x48c>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	677b      	str	r3, [r7, #116]	; 0x74
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	461a      	mov	r2, r3
 80069ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069b0:	4413      	add	r3, r2
 80069b2:	677b      	str	r3, [r7, #116]	; 0x74
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	011a      	lsls	r2, r3, #4
 80069ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069bc:	4413      	add	r3, r2
 80069be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069c2:	673b      	str	r3, [r7, #112]	; 0x70
 80069c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069c6:	2200      	movs	r2, #0
 80069c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	785b      	ldrb	r3, [r3, #1]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d12f      	bne.n	8006a38 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069f0:	4413      	add	r3, r2
 80069f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	011a      	lsls	r2, r3, #4
 80069fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a00:	4413      	add	r3, r2
 8006a02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a34:	801a      	strh	r2, [r3, #0]
 8006a36:	e017      	b.n	8006a68 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	785b      	ldrb	r3, [r3, #1]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d113      	bne.n	8006a68 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4e:	4413      	add	r3, r2
 8006a50:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	011a      	lsls	r2, r3, #4
 8006a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a64:	2200      	movs	r2, #0
 8006a66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f005 fdd7 	bl	800c622 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006a74:	88fb      	ldrh	r3, [r7, #6]
 8006a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f040 8104 	bne.w	8006c88 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	461a      	mov	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	8013      	strh	r3, [r2, #0]
 8006ac4:	e0e0      	b.n	8006c88 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d121      	bne.n	8006b14 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	441a      	add	r2, r3
 8006afc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	f040 80b4 	bne.w	8006c88 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	695a      	ldr	r2, [r3, #20]
 8006b24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b28:	441a      	add	r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b36:	441a      	add	r2, r3
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6a1a      	ldr	r2, [r3, #32]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d309      	bcc.n	8006b5c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	6a1a      	ldr	r2, [r3, #32]
 8006b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b54:	1ad2      	subs	r2, r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	621a      	str	r2, [r3, #32]
 8006b5a:	e015      	b.n	8006b88 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d107      	bne.n	8006b74 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8006b64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006b72:	e009      	b.n	8006b88 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d155      	bne.n	8006c42 <HAL_PCD_EP_DB_Transmit+0x704>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006baa:	4413      	add	r3, r2
 8006bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	011a      	lsls	r2, r3, #4
 8006bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d112      	bne.n	8006bea <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006bc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bd2:	801a      	strh	r2, [r3, #0]
 8006bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006be6:	801a      	strh	r2, [r3, #0]
 8006be8:	e044      	b.n	8006c74 <HAL_PCD_EP_DB_Transmit+0x736>
 8006bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bec:	2b3e      	cmp	r3, #62	; 0x3e
 8006bee:	d811      	bhi.n	8006c14 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	657b      	str	r3, [r7, #84]	; 0x54
 8006bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c02:	3301      	adds	r3, #1
 8006c04:	657b      	str	r3, [r7, #84]	; 0x54
 8006c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	029b      	lsls	r3, r3, #10
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e02f      	b.n	8006c74 <HAL_PCD_EP_DB_Transmit+0x736>
 8006c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	657b      	str	r3, [r7, #84]	; 0x54
 8006c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1c:	f003 031f 	and.w	r3, r3, #31
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d102      	bne.n	8006c2a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c26:	3b01      	subs	r3, #1
 8006c28:	657b      	str	r3, [r7, #84]	; 0x54
 8006c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	029b      	lsls	r3, r3, #10
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c3e:	801a      	strh	r2, [r3, #0]
 8006c40:	e018      	b.n	8006c74 <HAL_PCD_EP_DB_Transmit+0x736>
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	785b      	ldrb	r3, [r3, #1]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d114      	bne.n	8006c74 <HAL_PCD_EP_DB_Transmit+0x736>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	461a      	mov	r2, r3
 8006c56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c58:	4413      	add	r3, r2
 8006c5a:	667b      	str	r3, [r7, #100]	; 0x64
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	011a      	lsls	r2, r3, #4
 8006c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c64:	4413      	add	r3, r2
 8006c66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c6a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c72:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	6959      	ldr	r1, [r3, #20]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	895a      	ldrh	r2, [r3, #10]
 8006c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f003 fe68 	bl	800a958 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ca2:	823b      	strh	r3, [r7, #16]
 8006ca4:	8a3b      	ldrh	r3, [r7, #16]
 8006ca6:	f083 0310 	eor.w	r3, r3, #16
 8006caa:	823b      	strh	r3, [r7, #16]
 8006cac:	8a3b      	ldrh	r3, [r7, #16]
 8006cae:	f083 0320 	eor.w	r3, r3, #32
 8006cb2:	823b      	strh	r3, [r7, #16]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	8a3b      	ldrh	r3, [r7, #16]
 8006cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3788      	adds	r7, #136	; 0x88
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b087      	sub	sp, #28
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	607b      	str	r3, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	817b      	strh	r3, [r7, #10]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006cf4:	897b      	ldrh	r3, [r7, #10]
 8006cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d00:	897b      	ldrh	r3, [r7, #10]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	e009      	b.n	8006d2c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d18:	897a      	ldrh	r2, [r7, #10]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4413      	add	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006d2c:	893b      	ldrh	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d107      	bne.n	8006d42 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2200      	movs	r2, #0
 8006d36:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	80da      	strh	r2, [r3, #6]
 8006d40:	e00b      	b.n	8006d5a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2201      	movs	r2, #1
 8006d46:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	0c1b      	lsrs	r3, r3, #16
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	371c      	adds	r7, #28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr
	...

08006d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e272      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8087 	beq.w	8006e96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d88:	4b92      	ldr	r3, [pc, #584]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f003 030c 	and.w	r3, r3, #12
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d00c      	beq.n	8006dae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d94:	4b8f      	ldr	r3, [pc, #572]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f003 030c 	and.w	r3, r3, #12
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d112      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x5e>
 8006da0:	4b8c      	ldr	r3, [pc, #560]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dac:	d10b      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dae:	4b89      	ldr	r3, [pc, #548]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d06c      	beq.n	8006e94 <HAL_RCC_OscConfig+0x12c>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d168      	bne.n	8006e94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e24c      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dce:	d106      	bne.n	8006dde <HAL_RCC_OscConfig+0x76>
 8006dd0:	4b80      	ldr	r3, [pc, #512]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a7f      	ldr	r2, [pc, #508]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	e02e      	b.n	8006e3c <HAL_RCC_OscConfig+0xd4>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10c      	bne.n	8006e00 <HAL_RCC_OscConfig+0x98>
 8006de6:	4b7b      	ldr	r3, [pc, #492]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a7a      	ldr	r2, [pc, #488]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	4b78      	ldr	r3, [pc, #480]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a77      	ldr	r2, [pc, #476]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	e01d      	b.n	8006e3c <HAL_RCC_OscConfig+0xd4>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e08:	d10c      	bne.n	8006e24 <HAL_RCC_OscConfig+0xbc>
 8006e0a:	4b72      	ldr	r3, [pc, #456]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a71      	ldr	r2, [pc, #452]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	4b6f      	ldr	r3, [pc, #444]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a6e      	ldr	r2, [pc, #440]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	e00b      	b.n	8006e3c <HAL_RCC_OscConfig+0xd4>
 8006e24:	4b6b      	ldr	r3, [pc, #428]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a6a      	ldr	r2, [pc, #424]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	4b68      	ldr	r3, [pc, #416]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a67      	ldr	r2, [pc, #412]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d013      	beq.n	8006e6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e44:	f7fa ff46 	bl	8001cd4 <HAL_GetTick>
 8006e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4a:	e008      	b.n	8006e5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e4c:	f7fa ff42 	bl	8001cd4 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b64      	cmp	r3, #100	; 0x64
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e200      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e5e:	4b5d      	ldr	r3, [pc, #372]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0f0      	beq.n	8006e4c <HAL_RCC_OscConfig+0xe4>
 8006e6a:	e014      	b.n	8006e96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6c:	f7fa ff32 	bl	8001cd4 <HAL_GetTick>
 8006e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e72:	e008      	b.n	8006e86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e74:	f7fa ff2e 	bl	8001cd4 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b64      	cmp	r3, #100	; 0x64
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e1ec      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e86:	4b53      	ldr	r3, [pc, #332]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1f0      	bne.n	8006e74 <HAL_RCC_OscConfig+0x10c>
 8006e92:	e000      	b.n	8006e96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d063      	beq.n	8006f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ea2:	4b4c      	ldr	r3, [pc, #304]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f003 030c 	and.w	r3, r3, #12
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00b      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006eae:	4b49      	ldr	r3, [pc, #292]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f003 030c 	and.w	r3, r3, #12
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d11c      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x18c>
 8006eba:	4b46      	ldr	r3, [pc, #280]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d116      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ec6:	4b43      	ldr	r3, [pc, #268]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d005      	beq.n	8006ede <HAL_RCC_OscConfig+0x176>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d001      	beq.n	8006ede <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e1c0      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ede:	4b3d      	ldr	r3, [pc, #244]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	4939      	ldr	r1, [pc, #228]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ef2:	e03a      	b.n	8006f6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d020      	beq.n	8006f3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006efc:	4b36      	ldr	r3, [pc, #216]	; (8006fd8 <HAL_RCC_OscConfig+0x270>)
 8006efe:	2201      	movs	r2, #1
 8006f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f02:	f7fa fee7 	bl	8001cd4 <HAL_GetTick>
 8006f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f08:	e008      	b.n	8006f1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f0a:	f7fa fee3 	bl	8001cd4 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e1a1      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f1c:	4b2d      	ldr	r3, [pc, #180]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0f0      	beq.n	8006f0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f28:	4b2a      	ldr	r3, [pc, #168]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	00db      	lsls	r3, r3, #3
 8006f36:	4927      	ldr	r1, [pc, #156]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	600b      	str	r3, [r1, #0]
 8006f3c:	e015      	b.n	8006f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f3e:	4b26      	ldr	r3, [pc, #152]	; (8006fd8 <HAL_RCC_OscConfig+0x270>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f44:	f7fa fec6 	bl	8001cd4 <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f4c:	f7fa fec2 	bl	8001cd4 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e180      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f5e:	4b1d      	ldr	r3, [pc, #116]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f0      	bne.n	8006f4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d03a      	beq.n	8006fec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d019      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f7e:	4b17      	ldr	r3, [pc, #92]	; (8006fdc <HAL_RCC_OscConfig+0x274>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f84:	f7fa fea6 	bl	8001cd4 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f8c:	f7fa fea2 	bl	8001cd4 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e160      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f9e:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <HAL_RCC_OscConfig+0x26c>)
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f0      	beq.n	8006f8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006faa:	2001      	movs	r0, #1
 8006fac:	f000 fac4 	bl	8007538 <RCC_Delay>
 8006fb0:	e01c      	b.n	8006fec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <HAL_RCC_OscConfig+0x274>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fb8:	f7fa fe8c 	bl	8001cd4 <HAL_GetTick>
 8006fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fbe:	e00f      	b.n	8006fe0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fc0:	f7fa fe88 	bl	8001cd4 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d908      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e146      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
 8006fd2:	bf00      	nop
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	42420000 	.word	0x42420000
 8006fdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fe0:	4b92      	ldr	r3, [pc, #584]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e9      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 80a6 	beq.w	8007146 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ffe:	4b8b      	ldr	r3, [pc, #556]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10d      	bne.n	8007026 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800700a:	4b88      	ldr	r3, [pc, #544]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	4a87      	ldr	r2, [pc, #540]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8007010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007014:	61d3      	str	r3, [r2, #28]
 8007016:	4b85      	ldr	r3, [pc, #532]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701e:	60bb      	str	r3, [r7, #8]
 8007020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007022:	2301      	movs	r3, #1
 8007024:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007026:	4b82      	ldr	r3, [pc, #520]	; (8007230 <HAL_RCC_OscConfig+0x4c8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702e:	2b00      	cmp	r3, #0
 8007030:	d118      	bne.n	8007064 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007032:	4b7f      	ldr	r3, [pc, #508]	; (8007230 <HAL_RCC_OscConfig+0x4c8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a7e      	ldr	r2, [pc, #504]	; (8007230 <HAL_RCC_OscConfig+0x4c8>)
 8007038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800703c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800703e:	f7fa fe49 	bl	8001cd4 <HAL_GetTick>
 8007042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007044:	e008      	b.n	8007058 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007046:	f7fa fe45 	bl	8001cd4 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b64      	cmp	r3, #100	; 0x64
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e103      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007058:	4b75      	ldr	r3, [pc, #468]	; (8007230 <HAL_RCC_OscConfig+0x4c8>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0f0      	beq.n	8007046 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d106      	bne.n	800707a <HAL_RCC_OscConfig+0x312>
 800706c:	4b6f      	ldr	r3, [pc, #444]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	4a6e      	ldr	r2, [pc, #440]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8007072:	f043 0301 	orr.w	r3, r3, #1
 8007076:	6213      	str	r3, [r2, #32]
 8007078:	e02d      	b.n	80070d6 <HAL_RCC_OscConfig+0x36e>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10c      	bne.n	800709c <HAL_RCC_OscConfig+0x334>
 8007082:	4b6a      	ldr	r3, [pc, #424]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	4a69      	ldr	r2, [pc, #420]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8007088:	f023 0301 	bic.w	r3, r3, #1
 800708c:	6213      	str	r3, [r2, #32]
 800708e:	4b67      	ldr	r3, [pc, #412]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	4a66      	ldr	r2, [pc, #408]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8007094:	f023 0304 	bic.w	r3, r3, #4
 8007098:	6213      	str	r3, [r2, #32]
 800709a:	e01c      	b.n	80070d6 <HAL_RCC_OscConfig+0x36e>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	2b05      	cmp	r3, #5
 80070a2:	d10c      	bne.n	80070be <HAL_RCC_OscConfig+0x356>
 80070a4:	4b61      	ldr	r3, [pc, #388]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	4a60      	ldr	r2, [pc, #384]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80070aa:	f043 0304 	orr.w	r3, r3, #4
 80070ae:	6213      	str	r3, [r2, #32]
 80070b0:	4b5e      	ldr	r3, [pc, #376]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	4a5d      	ldr	r2, [pc, #372]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80070b6:	f043 0301 	orr.w	r3, r3, #1
 80070ba:	6213      	str	r3, [r2, #32]
 80070bc:	e00b      	b.n	80070d6 <HAL_RCC_OscConfig+0x36e>
 80070be:	4b5b      	ldr	r3, [pc, #364]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	4a5a      	ldr	r2, [pc, #360]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80070c4:	f023 0301 	bic.w	r3, r3, #1
 80070c8:	6213      	str	r3, [r2, #32]
 80070ca:	4b58      	ldr	r3, [pc, #352]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	4a57      	ldr	r2, [pc, #348]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80070d0:	f023 0304 	bic.w	r3, r3, #4
 80070d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d015      	beq.n	800710a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070de:	f7fa fdf9 	bl	8001cd4 <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070e4:	e00a      	b.n	80070fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070e6:	f7fa fdf5 	bl	8001cd4 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e0b1      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070fc:	4b4b      	ldr	r3, [pc, #300]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0ee      	beq.n	80070e6 <HAL_RCC_OscConfig+0x37e>
 8007108:	e014      	b.n	8007134 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800710a:	f7fa fde3 	bl	8001cd4 <HAL_GetTick>
 800710e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007110:	e00a      	b.n	8007128 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007112:	f7fa fddf 	bl	8001cd4 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007120:	4293      	cmp	r3, r2
 8007122:	d901      	bls.n	8007128 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e09b      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007128:	4b40      	ldr	r3, [pc, #256]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1ee      	bne.n	8007112 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007134:	7dfb      	ldrb	r3, [r7, #23]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d105      	bne.n	8007146 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800713a:	4b3c      	ldr	r3, [pc, #240]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	4a3b      	ldr	r2, [pc, #236]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8007140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007144:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 8087 	beq.w	800725e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007150:	4b36      	ldr	r3, [pc, #216]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f003 030c 	and.w	r3, r3, #12
 8007158:	2b08      	cmp	r3, #8
 800715a:	d061      	beq.n	8007220 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d146      	bne.n	80071f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007164:	4b33      	ldr	r3, [pc, #204]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007166:	2200      	movs	r2, #0
 8007168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800716a:	f7fa fdb3 	bl	8001cd4 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007172:	f7fa fdaf 	bl	8001cd4 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e06d      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007184:	4b29      	ldr	r3, [pc, #164]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f0      	bne.n	8007172 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007198:	d108      	bne.n	80071ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800719a:	4b24      	ldr	r3, [pc, #144]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	4921      	ldr	r1, [pc, #132]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071ac:	4b1f      	ldr	r3, [pc, #124]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a19      	ldr	r1, [r3, #32]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	430b      	orrs	r3, r1
 80071be:	491b      	ldr	r1, [pc, #108]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071c4:	4b1b      	ldr	r3, [pc, #108]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ca:	f7fa fd83 	bl	8001cd4 <HAL_GetTick>
 80071ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071d0:	e008      	b.n	80071e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d2:	f7fa fd7f 	bl	8001cd4 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e03d      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071e4:	4b11      	ldr	r3, [pc, #68]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0f0      	beq.n	80071d2 <HAL_RCC_OscConfig+0x46a>
 80071f0:	e035      	b.n	800725e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f2:	4b10      	ldr	r3, [pc, #64]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f8:	f7fa fd6c 	bl	8001cd4 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007200:	f7fa fd68 	bl	8001cd4 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e026      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007212:	4b06      	ldr	r3, [pc, #24]	; (800722c <HAL_RCC_OscConfig+0x4c4>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1f0      	bne.n	8007200 <HAL_RCC_OscConfig+0x498>
 800721e:	e01e      	b.n	800725e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d107      	bne.n	8007238 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e019      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
 800722c:	40021000 	.word	0x40021000
 8007230:	40007000 	.word	0x40007000
 8007234:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	429a      	cmp	r2, r3
 800724a:	d106      	bne.n	800725a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007256:	429a      	cmp	r2, r3
 8007258:	d001      	beq.n	800725e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	40021000 	.word	0x40021000

0800726c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0d0      	b.n	8007422 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007280:	4b6a      	ldr	r3, [pc, #424]	; (800742c <HAL_RCC_ClockConfig+0x1c0>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	429a      	cmp	r2, r3
 800728c:	d910      	bls.n	80072b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800728e:	4b67      	ldr	r3, [pc, #412]	; (800742c <HAL_RCC_ClockConfig+0x1c0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f023 0207 	bic.w	r2, r3, #7
 8007296:	4965      	ldr	r1, [pc, #404]	; (800742c <HAL_RCC_ClockConfig+0x1c0>)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	4313      	orrs	r3, r2
 800729c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800729e:	4b63      	ldr	r3, [pc, #396]	; (800742c <HAL_RCC_ClockConfig+0x1c0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d001      	beq.n	80072b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e0b8      	b.n	8007422 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d020      	beq.n	80072fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072c8:	4b59      	ldr	r3, [pc, #356]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	4a58      	ldr	r2, [pc, #352]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 80072ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80072d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d005      	beq.n	80072ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072e0:	4b53      	ldr	r3, [pc, #332]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	4a52      	ldr	r2, [pc, #328]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 80072e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80072ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ec:	4b50      	ldr	r3, [pc, #320]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	494d      	ldr	r1, [pc, #308]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d040      	beq.n	800738c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d107      	bne.n	8007322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007312:	4b47      	ldr	r3, [pc, #284]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d115      	bne.n	800734a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e07f      	b.n	8007422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d107      	bne.n	800733a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800732a:	4b41      	ldr	r3, [pc, #260]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d109      	bne.n	800734a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e073      	b.n	8007422 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800733a:	4b3d      	ldr	r3, [pc, #244]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e06b      	b.n	8007422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800734a:	4b39      	ldr	r3, [pc, #228]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f023 0203 	bic.w	r2, r3, #3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	4936      	ldr	r1, [pc, #216]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 8007358:	4313      	orrs	r3, r2
 800735a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800735c:	f7fa fcba 	bl	8001cd4 <HAL_GetTick>
 8007360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007362:	e00a      	b.n	800737a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007364:	f7fa fcb6 	bl	8001cd4 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007372:	4293      	cmp	r3, r2
 8007374:	d901      	bls.n	800737a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e053      	b.n	8007422 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800737a:	4b2d      	ldr	r3, [pc, #180]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f003 020c 	and.w	r2, r3, #12
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	429a      	cmp	r2, r3
 800738a:	d1eb      	bne.n	8007364 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800738c:	4b27      	ldr	r3, [pc, #156]	; (800742c <HAL_RCC_ClockConfig+0x1c0>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	429a      	cmp	r2, r3
 8007398:	d210      	bcs.n	80073bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800739a:	4b24      	ldr	r3, [pc, #144]	; (800742c <HAL_RCC_ClockConfig+0x1c0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f023 0207 	bic.w	r2, r3, #7
 80073a2:	4922      	ldr	r1, [pc, #136]	; (800742c <HAL_RCC_ClockConfig+0x1c0>)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073aa:	4b20      	ldr	r3, [pc, #128]	; (800742c <HAL_RCC_ClockConfig+0x1c0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d001      	beq.n	80073bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e032      	b.n	8007422 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073c8:	4b19      	ldr	r3, [pc, #100]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	4916      	ldr	r1, [pc, #88]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0308 	and.w	r3, r3, #8
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d009      	beq.n	80073fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073e6:	4b12      	ldr	r3, [pc, #72]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	490e      	ldr	r1, [pc, #56]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073fa:	f000 f821 	bl	8007440 <HAL_RCC_GetSysClockFreq>
 80073fe:	4602      	mov	r2, r0
 8007400:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	091b      	lsrs	r3, r3, #4
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	490a      	ldr	r1, [pc, #40]	; (8007434 <HAL_RCC_ClockConfig+0x1c8>)
 800740c:	5ccb      	ldrb	r3, [r1, r3]
 800740e:	fa22 f303 	lsr.w	r3, r2, r3
 8007412:	4a09      	ldr	r2, [pc, #36]	; (8007438 <HAL_RCC_ClockConfig+0x1cc>)
 8007414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007416:	4b09      	ldr	r3, [pc, #36]	; (800743c <HAL_RCC_ClockConfig+0x1d0>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4618      	mov	r0, r3
 800741c:	f7fa fc18 	bl	8001c50 <HAL_InitTick>

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	40022000 	.word	0x40022000
 8007430:	40021000 	.word	0x40021000
 8007434:	0800def4 	.word	0x0800def4
 8007438:	20000004 	.word	0x20000004
 800743c:	20000008 	.word	0x20000008

08007440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007440:	b490      	push	{r4, r7}
 8007442:	b08a      	sub	sp, #40	; 0x28
 8007444:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007446:	4b29      	ldr	r3, [pc, #164]	; (80074ec <HAL_RCC_GetSysClockFreq+0xac>)
 8007448:	1d3c      	adds	r4, r7, #4
 800744a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800744c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007450:	f240 2301 	movw	r3, #513	; 0x201
 8007454:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	2300      	movs	r3, #0
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	2300      	movs	r3, #0
 8007460:	627b      	str	r3, [r7, #36]	; 0x24
 8007462:	2300      	movs	r3, #0
 8007464:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800746a:	4b21      	ldr	r3, [pc, #132]	; (80074f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f003 030c 	and.w	r3, r3, #12
 8007476:	2b04      	cmp	r3, #4
 8007478:	d002      	beq.n	8007480 <HAL_RCC_GetSysClockFreq+0x40>
 800747a:	2b08      	cmp	r3, #8
 800747c:	d003      	beq.n	8007486 <HAL_RCC_GetSysClockFreq+0x46>
 800747e:	e02b      	b.n	80074d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007480:	4b1c      	ldr	r3, [pc, #112]	; (80074f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007482:	623b      	str	r3, [r7, #32]
      break;
 8007484:	e02b      	b.n	80074de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	0c9b      	lsrs	r3, r3, #18
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	3328      	adds	r3, #40	; 0x28
 8007490:	443b      	add	r3, r7
 8007492:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007496:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d012      	beq.n	80074c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80074a2:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	0c5b      	lsrs	r3, r3, #17
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	3328      	adds	r3, #40	; 0x28
 80074ae:	443b      	add	r3, r7
 80074b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80074b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	4a0e      	ldr	r2, [pc, #56]	; (80074f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80074ba:	fb03 f202 	mul.w	r2, r3, r2
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
 80074c6:	e004      	b.n	80074d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	4a0b      	ldr	r2, [pc, #44]	; (80074f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074cc:	fb02 f303 	mul.w	r3, r2, r3
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	623b      	str	r3, [r7, #32]
      break;
 80074d6:	e002      	b.n	80074de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80074d8:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80074da:	623b      	str	r3, [r7, #32]
      break;
 80074dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074de:	6a3b      	ldr	r3, [r7, #32]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3728      	adds	r7, #40	; 0x28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc90      	pop	{r4, r7}
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	0800de98 	.word	0x0800de98
 80074f0:	40021000 	.word	0x40021000
 80074f4:	007a1200 	.word	0x007a1200
 80074f8:	003d0900 	.word	0x003d0900

080074fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007500:	4b02      	ldr	r3, [pc, #8]	; (800750c <HAL_RCC_GetHCLKFreq+0x10>)
 8007502:	681b      	ldr	r3, [r3, #0]
}
 8007504:	4618      	mov	r0, r3
 8007506:	46bd      	mov	sp, r7
 8007508:	bc80      	pop	{r7}
 800750a:	4770      	bx	lr
 800750c:	20000004 	.word	0x20000004

08007510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007514:	f7ff fff2 	bl	80074fc <HAL_RCC_GetHCLKFreq>
 8007518:	4602      	mov	r2, r0
 800751a:	4b05      	ldr	r3, [pc, #20]	; (8007530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	0a1b      	lsrs	r3, r3, #8
 8007520:	f003 0307 	and.w	r3, r3, #7
 8007524:	4903      	ldr	r1, [pc, #12]	; (8007534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007526:	5ccb      	ldrb	r3, [r1, r3]
 8007528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800752c:	4618      	mov	r0, r3
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40021000 	.word	0x40021000
 8007534:	0800df04 	.word	0x0800df04

08007538 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <RCC_Delay+0x34>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a0a      	ldr	r2, [pc, #40]	; (8007570 <RCC_Delay+0x38>)
 8007546:	fba2 2303 	umull	r2, r3, r2, r3
 800754a:	0a5b      	lsrs	r3, r3, #9
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	fb02 f303 	mul.w	r3, r2, r3
 8007552:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007554:	bf00      	nop
  }
  while (Delay --);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	1e5a      	subs	r2, r3, #1
 800755a:	60fa      	str	r2, [r7, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1f9      	bne.n	8007554 <RCC_Delay+0x1c>
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	bc80      	pop	{r7}
 800756a:	4770      	bx	lr
 800756c:	20000004 	.word	0x20000004
 8007570:	10624dd3 	.word	0x10624dd3

08007574 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d07d      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007590:	2300      	movs	r3, #0
 8007592:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007594:	4b4f      	ldr	r3, [pc, #316]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10d      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075a0:	4b4c      	ldr	r3, [pc, #304]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	4a4b      	ldr	r2, [pc, #300]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075aa:	61d3      	str	r3, [r2, #28]
 80075ac:	4b49      	ldr	r3, [pc, #292]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b4:	60bb      	str	r3, [r7, #8]
 80075b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075b8:	2301      	movs	r3, #1
 80075ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075bc:	4b46      	ldr	r3, [pc, #280]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d118      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075c8:	4b43      	ldr	r3, [pc, #268]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a42      	ldr	r2, [pc, #264]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075d4:	f7fa fb7e 	bl	8001cd4 <HAL_GetTick>
 80075d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075da:	e008      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075dc:	f7fa fb7a 	bl	8001cd4 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b64      	cmp	r3, #100	; 0x64
 80075e8:	d901      	bls.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e06d      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ee:	4b3a      	ldr	r3, [pc, #232]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0f0      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075fa:	4b36      	ldr	r3, [pc, #216]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007602:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d02e      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	429a      	cmp	r2, r3
 8007616:	d027      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007618:	4b2e      	ldr	r3, [pc, #184]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007620:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007622:	4b2e      	ldr	r3, [pc, #184]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007624:	2201      	movs	r2, #1
 8007626:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007628:	4b2c      	ldr	r3, [pc, #176]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800762e:	4a29      	ldr	r2, [pc, #164]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d014      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800763e:	f7fa fb49 	bl	8001cd4 <HAL_GetTick>
 8007642:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007644:	e00a      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007646:	f7fa fb45 	bl	8001cd4 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	f241 3288 	movw	r2, #5000	; 0x1388
 8007654:	4293      	cmp	r3, r2
 8007656:	d901      	bls.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e036      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800765c:	4b1d      	ldr	r3, [pc, #116]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d0ee      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007668:	4b1a      	ldr	r3, [pc, #104]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	4917      	ldr	r1, [pc, #92]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007676:	4313      	orrs	r3, r2
 8007678:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d105      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007680:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	4a13      	ldr	r2, [pc, #76]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800768a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d008      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007698:	4b0e      	ldr	r3, [pc, #56]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	490b      	ldr	r1, [pc, #44]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d008      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076b6:	4b07      	ldr	r3, [pc, #28]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	4904      	ldr	r1, [pc, #16]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	40021000 	.word	0x40021000
 80076d8:	40007000 	.word	0x40007000
 80076dc:	42420440 	.word	0x42420440

080076e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e041      	b.n	8007776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7fa f950 	bl	80019ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3304      	adds	r3, #4
 800771c:	4619      	mov	r1, r3
 800771e:	4610      	mov	r0, r2
 8007720:	f000 fa7a 	bl	8007c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	d001      	beq.n	8007798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e03a      	b.n	800780e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2202      	movs	r2, #2
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0201 	orr.w	r2, r2, #1
 80077ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a18      	ldr	r2, [pc, #96]	; (8007818 <HAL_TIM_Base_Start_IT+0x98>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00e      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x58>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c2:	d009      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x58>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a14      	ldr	r2, [pc, #80]	; (800781c <HAL_TIM_Base_Start_IT+0x9c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d004      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x58>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a13      	ldr	r2, [pc, #76]	; (8007820 <HAL_TIM_Base_Start_IT+0xa0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d111      	bne.n	80077fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b06      	cmp	r3, #6
 80077e8:	d010      	beq.n	800780c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f042 0201 	orr.w	r2, r2, #1
 80077f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077fa:	e007      	b.n	800780c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0201 	orr.w	r2, r2, #1
 800780a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr
 8007818:	40012c00 	.word	0x40012c00
 800781c:	40000400 	.word	0x40000400
 8007820:	40000800 	.word	0x40000800

08007824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b02      	cmp	r3, #2
 8007838:	d122      	bne.n	8007880 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b02      	cmp	r3, #2
 8007846:	d11b      	bne.n	8007880 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f06f 0202 	mvn.w	r2, #2
 8007850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f9ba 	bl	8007be0 <HAL_TIM_IC_CaptureCallback>
 800786c:	e005      	b.n	800787a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f9ad 	bl	8007bce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f9bc 	bl	8007bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 0304 	and.w	r3, r3, #4
 800788a:	2b04      	cmp	r3, #4
 800788c:	d122      	bne.n	80078d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b04      	cmp	r3, #4
 800789a:	d11b      	bne.n	80078d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f06f 0204 	mvn.w	r2, #4
 80078a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2202      	movs	r2, #2
 80078aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f990 	bl	8007be0 <HAL_TIM_IC_CaptureCallback>
 80078c0:	e005      	b.n	80078ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f983 	bl	8007bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f992 	bl	8007bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b08      	cmp	r3, #8
 80078e0:	d122      	bne.n	8007928 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d11b      	bne.n	8007928 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f06f 0208 	mvn.w	r2, #8
 80078f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2204      	movs	r2, #4
 80078fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f966 	bl	8007be0 <HAL_TIM_IC_CaptureCallback>
 8007914:	e005      	b.n	8007922 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f959 	bl	8007bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f968 	bl	8007bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	f003 0310 	and.w	r3, r3, #16
 8007932:	2b10      	cmp	r3, #16
 8007934:	d122      	bne.n	800797c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b10      	cmp	r3, #16
 8007942:	d11b      	bne.n	800797c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f06f 0210 	mvn.w	r2, #16
 800794c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2208      	movs	r2, #8
 8007952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f93c 	bl	8007be0 <HAL_TIM_IC_CaptureCallback>
 8007968:	e005      	b.n	8007976 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f92f 	bl	8007bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f93e 	bl	8007bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b01      	cmp	r3, #1
 8007988:	d10e      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b01      	cmp	r3, #1
 8007996:	d107      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0201 	mvn.w	r2, #1
 80079a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f90a 	bl	8007bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b2:	2b80      	cmp	r3, #128	; 0x80
 80079b4:	d10e      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c0:	2b80      	cmp	r3, #128	; 0x80
 80079c2:	d107      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa81 	bl	8007ed6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d10e      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d107      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f902 	bl	8007c04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	d10e      	bne.n	8007a2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d107      	bne.n	8007a2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f06f 0220 	mvn.w	r2, #32
 8007a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa4c 	bl	8007ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_TIM_ConfigClockSource+0x18>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e0b3      	b.n	8007bb4 <HAL_TIM_ConfigClockSource+0x180>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a84:	d03e      	beq.n	8007b04 <HAL_TIM_ConfigClockSource+0xd0>
 8007a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a8a:	f200 8087 	bhi.w	8007b9c <HAL_TIM_ConfigClockSource+0x168>
 8007a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a92:	f000 8085 	beq.w	8007ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8007a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9a:	d87f      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x168>
 8007a9c:	2b70      	cmp	r3, #112	; 0x70
 8007a9e:	d01a      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0xa2>
 8007aa0:	2b70      	cmp	r3, #112	; 0x70
 8007aa2:	d87b      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x168>
 8007aa4:	2b60      	cmp	r3, #96	; 0x60
 8007aa6:	d050      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x116>
 8007aa8:	2b60      	cmp	r3, #96	; 0x60
 8007aaa:	d877      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x168>
 8007aac:	2b50      	cmp	r3, #80	; 0x50
 8007aae:	d03c      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0xf6>
 8007ab0:	2b50      	cmp	r3, #80	; 0x50
 8007ab2:	d873      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x168>
 8007ab4:	2b40      	cmp	r3, #64	; 0x40
 8007ab6:	d058      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x136>
 8007ab8:	2b40      	cmp	r3, #64	; 0x40
 8007aba:	d86f      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x168>
 8007abc:	2b30      	cmp	r3, #48	; 0x30
 8007abe:	d064      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x156>
 8007ac0:	2b30      	cmp	r3, #48	; 0x30
 8007ac2:	d86b      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x168>
 8007ac4:	2b20      	cmp	r3, #32
 8007ac6:	d060      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x156>
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d867      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x168>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d05c      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x156>
 8007ad0:	2b10      	cmp	r3, #16
 8007ad2:	d05a      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007ad4:	e062      	b.n	8007b9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	6899      	ldr	r1, [r3, #8]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f000 f970 	bl	8007dca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007af8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	609a      	str	r2, [r3, #8]
      break;
 8007b02:	e04e      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	6899      	ldr	r1, [r3, #8]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f000 f959 	bl	8007dca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b26:	609a      	str	r2, [r3, #8]
      break;
 8007b28:	e03b      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	6859      	ldr	r1, [r3, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	461a      	mov	r2, r3
 8007b38:	f000 f8d0 	bl	8007cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2150      	movs	r1, #80	; 0x50
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 f927 	bl	8007d96 <TIM_ITRx_SetConfig>
      break;
 8007b48:	e02b      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6859      	ldr	r1, [r3, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	461a      	mov	r2, r3
 8007b58:	f000 f8ee 	bl	8007d38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2160      	movs	r1, #96	; 0x60
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 f917 	bl	8007d96 <TIM_ITRx_SetConfig>
      break;
 8007b68:	e01b      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6859      	ldr	r1, [r3, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f000 f8b0 	bl	8007cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2140      	movs	r1, #64	; 0x40
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 f907 	bl	8007d96 <TIM_ITRx_SetConfig>
      break;
 8007b88:	e00b      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4619      	mov	r1, r3
 8007b94:	4610      	mov	r0, r2
 8007b96:	f000 f8fe 	bl	8007d96 <TIM_ITRx_SetConfig>
        break;
 8007b9a:	e002      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b9c:	bf00      	nop
 8007b9e:	e000      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ba0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bc80      	pop	{r7}
 8007bcc:	4770      	bx	lr

08007bce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bc80      	pop	{r7}
 8007bde:	4770      	bx	lr

08007be0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr

08007bf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bfa:	bf00      	nop
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bc80      	pop	{r7}
 8007c02:	4770      	bx	lr

08007c04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr
	...

08007c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a29      	ldr	r2, [pc, #164]	; (8007cd0 <TIM_Base_SetConfig+0xb8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00b      	beq.n	8007c48 <TIM_Base_SetConfig+0x30>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c36:	d007      	beq.n	8007c48 <TIM_Base_SetConfig+0x30>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a26      	ldr	r2, [pc, #152]	; (8007cd4 <TIM_Base_SetConfig+0xbc>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d003      	beq.n	8007c48 <TIM_Base_SetConfig+0x30>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a25      	ldr	r2, [pc, #148]	; (8007cd8 <TIM_Base_SetConfig+0xc0>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d108      	bne.n	8007c5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a1c      	ldr	r2, [pc, #112]	; (8007cd0 <TIM_Base_SetConfig+0xb8>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00b      	beq.n	8007c7a <TIM_Base_SetConfig+0x62>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c68:	d007      	beq.n	8007c7a <TIM_Base_SetConfig+0x62>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a19      	ldr	r2, [pc, #100]	; (8007cd4 <TIM_Base_SetConfig+0xbc>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d003      	beq.n	8007c7a <TIM_Base_SetConfig+0x62>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a18      	ldr	r2, [pc, #96]	; (8007cd8 <TIM_Base_SetConfig+0xc0>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d108      	bne.n	8007c8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a07      	ldr	r2, [pc, #28]	; (8007cd0 <TIM_Base_SetConfig+0xb8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d103      	bne.n	8007cc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	691a      	ldr	r2, [r3, #16]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	615a      	str	r2, [r3, #20]
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bc80      	pop	{r7}
 8007cce:	4770      	bx	lr
 8007cd0:	40012c00 	.word	0x40012c00
 8007cd4:	40000400 	.word	0x40000400
 8007cd8:	40000800 	.word	0x40000800

08007cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	f023 0201 	bic.w	r2, r3, #1
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f023 030a 	bic.w	r3, r3, #10
 8007d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	621a      	str	r2, [r3, #32]
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bc80      	pop	{r7}
 8007d36:	4770      	bx	lr

08007d38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	f023 0210 	bic.w	r2, r3, #16
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	031b      	lsls	r3, r3, #12
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	621a      	str	r2, [r3, #32]
}
 8007d8c:	bf00      	nop
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bc80      	pop	{r7}
 8007d94:	4770      	bx	lr

08007d96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b085      	sub	sp, #20
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	f043 0307 	orr.w	r3, r3, #7
 8007db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	609a      	str	r2, [r3, #8]
}
 8007dc0:	bf00      	nop
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bc80      	pop	{r7}
 8007dc8:	4770      	bx	lr

08007dca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b087      	sub	sp, #28
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
 8007dd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007de4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	021a      	lsls	r2, r3, #8
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	431a      	orrs	r2, r3
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	609a      	str	r2, [r3, #8]
}
 8007dfe:	bf00      	nop
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc80      	pop	{r7}
 8007e06:	4770      	bx	lr

08007e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d101      	bne.n	8007e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	e046      	b.n	8007eae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00e      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e6c:	d009      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a12      	ldr	r2, [pc, #72]	; (8007ebc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d004      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a10      	ldr	r2, [pc, #64]	; (8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d10c      	bne.n	8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bc80      	pop	{r7}
 8007eb6:	4770      	bx	lr
 8007eb8:	40012c00 	.word	0x40012c00
 8007ebc:	40000400 	.word	0x40000400
 8007ec0:	40000800 	.word	0x40000800

08007ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bc80      	pop	{r7}
 8007ed4:	4770      	bx	lr

08007ed6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bc80      	pop	{r7}
 8007ee6:	4770      	bx	lr

08007ee8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ee8:	b084      	sub	sp, #16
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	f107 0014 	add.w	r0, r7, #20
 8007ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	b004      	add	sp, #16
 8007f06:	4770      	bx	lr

08007f08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f18:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007f1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bc80      	pop	{r7}
 8007f32:	4770      	bx	lr

08007f34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f3c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007f40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	43db      	mvns	r3, r3
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	4013      	ands	r3, r2
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc80      	pop	{r7}
 8007f66:	4770      	bx	lr

08007f68 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bc80      	pop	{r7}
 8007f7e:	4770      	bx	lr

08007f80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f80:	b084      	sub	sp, #16
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	f107 0014 	add.w	r0, r7, #20
 8007f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bc80      	pop	{r7}
 8007fbc:	b004      	add	sp, #16
 8007fbe:	4770      	bx	lr

08007fc0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b09b      	sub	sp, #108	; 0x6c
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	78db      	ldrb	r3, [r3, #3]
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d81f      	bhi.n	8008032 <USB_ActivateEndpoint+0x72>
 8007ff2:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <USB_ActivateEndpoint+0x38>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	08008025 	.word	0x08008025
 8008000:	0800803b 	.word	0x0800803b
 8008004:	08008017 	.word	0x08008017
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008008:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800800c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008010:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008014:	e012      	b.n	800803c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008016:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800801a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800801e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008022:	e00b      	b.n	800803c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008024:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008028:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800802c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008030:	e004      	b.n	800803c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008038:	e000      	b.n	800803c <USB_ActivateEndpoint+0x7c>
      break;
 800803a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	441a      	add	r2, r3
 8008046:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800804a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805a:	b29b      	uxth	r3, r3
 800805c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	b29b      	uxth	r3, r3
 800806c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008074:	b29a      	uxth	r2, r3
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	4313      	orrs	r3, r2
 800807e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	441a      	add	r2, r3
 800808c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800809c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	7b1b      	ldrb	r3, [r3, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f040 8149 	bne.w	8008340 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 8084 	beq.w	80081c0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	461a      	mov	r2, r3
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	4413      	add	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	011a      	lsls	r2, r3, #4
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080da:	613b      	str	r3, [r7, #16]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	88db      	ldrh	r3, [r3, #6]
 80080e0:	085b      	lsrs	r3, r3, #1
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	81fb      	strh	r3, [r7, #14]
 80080fa:	89fb      	ldrh	r3, [r7, #14]
 80080fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01b      	beq.n	800813c <USB_ActivateEndpoint+0x17c>
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	b29b      	uxth	r3, r3
 8008112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811a:	81bb      	strh	r3, [r7, #12]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	441a      	add	r2, r3
 8008126:	89bb      	ldrh	r3, [r7, #12]
 8008128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800812c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008138:	b29b      	uxth	r3, r3
 800813a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	78db      	ldrb	r3, [r3, #3]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d020      	beq.n	8008186 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	b29b      	uxth	r3, r3
 8008152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800815a:	813b      	strh	r3, [r7, #8]
 800815c:	893b      	ldrh	r3, [r7, #8]
 800815e:	f083 0320 	eor.w	r3, r3, #32
 8008162:	813b      	strh	r3, [r7, #8]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	441a      	add	r2, r3
 800816e:	893b      	ldrh	r3, [r7, #8]
 8008170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800817c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008180:	b29b      	uxth	r3, r3
 8008182:	8013      	strh	r3, [r2, #0]
 8008184:	e27f      	b.n	8008686 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	b29b      	uxth	r3, r3
 8008194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800819c:	817b      	strh	r3, [r7, #10]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	441a      	add	r2, r3
 80081a8:	897b      	ldrh	r3, [r7, #10]
 80081aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	8013      	strh	r3, [r2, #0]
 80081be:	e262      	b.n	8008686 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	461a      	mov	r2, r3
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	4413      	add	r3, r2
 80081d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	011a      	lsls	r2, r3, #4
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80081e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	88db      	ldrh	r3, [r3, #6]
 80081e8:	085b      	lsrs	r3, r3, #1
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081fe:	b29b      	uxth	r3, r3
 8008200:	461a      	mov	r2, r3
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	4413      	add	r3, r2
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	011a      	lsls	r2, r3, #4
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	4413      	add	r3, r2
 8008212:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008216:	623b      	str	r3, [r7, #32]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d112      	bne.n	8008246 <USB_ActivateEndpoint+0x286>
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	b29b      	uxth	r3, r3
 8008226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800822a:	b29a      	uxth	r2, r3
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	801a      	strh	r2, [r3, #0]
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800823a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800823e:	b29a      	uxth	r2, r3
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	801a      	strh	r2, [r3, #0]
 8008244:	e02f      	b.n	80082a6 <USB_ActivateEndpoint+0x2e6>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b3e      	cmp	r3, #62	; 0x3e
 800824c:	d813      	bhi.n	8008276 <USB_ActivateEndpoint+0x2b6>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	085b      	lsrs	r3, r3, #1
 8008254:	663b      	str	r3, [r7, #96]	; 0x60
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <USB_ActivateEndpoint+0x2a8>
 8008262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008264:	3301      	adds	r3, #1
 8008266:	663b      	str	r3, [r7, #96]	; 0x60
 8008268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800826a:	b29b      	uxth	r3, r3
 800826c:	029b      	lsls	r3, r3, #10
 800826e:	b29a      	uxth	r2, r3
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	e017      	b.n	80082a6 <USB_ActivateEndpoint+0x2e6>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	095b      	lsrs	r3, r3, #5
 800827c:	663b      	str	r3, [r7, #96]	; 0x60
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f003 031f 	and.w	r3, r3, #31
 8008286:	2b00      	cmp	r3, #0
 8008288:	d102      	bne.n	8008290 <USB_ActivateEndpoint+0x2d0>
 800828a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800828c:	3b01      	subs	r3, #1
 800828e:	663b      	str	r3, [r7, #96]	; 0x60
 8008290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008292:	b29b      	uxth	r3, r3
 8008294:	029b      	lsls	r3, r3, #10
 8008296:	b29b      	uxth	r3, r3
 8008298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800829c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	83fb      	strh	r3, [r7, #30]
 80082b4:	8bfb      	ldrh	r3, [r7, #30]
 80082b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d01b      	beq.n	80082f6 <USB_ActivateEndpoint+0x336>
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d4:	83bb      	strh	r3, [r7, #28]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	441a      	add	r2, r3
 80082e0:	8bbb      	ldrh	r3, [r7, #28]
 80082e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830c:	837b      	strh	r3, [r7, #26]
 800830e:	8b7b      	ldrh	r3, [r7, #26]
 8008310:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008314:	837b      	strh	r3, [r7, #26]
 8008316:	8b7b      	ldrh	r3, [r7, #26]
 8008318:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800831c:	837b      	strh	r3, [r7, #26]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	441a      	add	r2, r3
 8008328:	8b7b      	ldrh	r3, [r7, #26]
 800832a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833a:	b29b      	uxth	r3, r3
 800833c:	8013      	strh	r3, [r2, #0]
 800833e:	e1a2      	b.n	8008686 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	b29b      	uxth	r3, r3
 800834e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008356:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	441a      	add	r2, r3
 8008364:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800836c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008370:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008378:	b29b      	uxth	r3, r3
 800837a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008386:	b29b      	uxth	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800838c:	4413      	add	r3, r2
 800838e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	011a      	lsls	r2, r3, #4
 8008396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008398:	4413      	add	r3, r2
 800839a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800839e:	657b      	str	r3, [r7, #84]	; 0x54
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	891b      	ldrh	r3, [r3, #8]
 80083a4:	085b      	lsrs	r3, r3, #1
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ae:	801a      	strh	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	653b      	str	r3, [r7, #80]	; 0x50
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	461a      	mov	r2, r3
 80083be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c0:	4413      	add	r3, r2
 80083c2:	653b      	str	r3, [r7, #80]	; 0x50
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	011a      	lsls	r2, r3, #4
 80083ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80083d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	895b      	ldrh	r3, [r3, #10]
 80083d8:	085b      	lsrs	r3, r3, #1
 80083da:	b29b      	uxth	r3, r3
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	b29a      	uxth	r2, r3
 80083e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	785b      	ldrb	r3, [r3, #1]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f040 8091 	bne.w	8008510 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80083fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80083fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d01b      	beq.n	800843e <USB_ActivateEndpoint+0x47e>
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	441a      	add	r2, r3
 8008428:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800842a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800842e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008432:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800843a:	b29b      	uxth	r3, r3
 800843c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	873b      	strh	r3, [r7, #56]	; 0x38
 800844c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800844e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008452:	2b00      	cmp	r3, #0
 8008454:	d01b      	beq.n	800848e <USB_ActivateEndpoint+0x4ce>
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	441a      	add	r2, r3
 8008478:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800847a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800847e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008486:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800848a:	b29b      	uxth	r3, r3
 800848c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80084a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80084a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80084ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80084b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	441a      	add	r2, r3
 80084c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80084c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ec:	867b      	strh	r3, [r7, #50]	; 0x32
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	441a      	add	r2, r3
 80084f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80084fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850a:	b29b      	uxth	r3, r3
 800850c:	8013      	strh	r3, [r2, #0]
 800850e:	e0ba      	b.n	8008686 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008520:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01d      	beq.n	8008568 <USB_ActivateEndpoint+0x5a8>
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800853e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008542:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	441a      	add	r2, r3
 8008550:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800855c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008564:	b29b      	uxth	r3, r3
 8008566:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008578:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800857c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	d01d      	beq.n	80085c0 <USB_ActivateEndpoint+0x600>
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	b29b      	uxth	r3, r3
 8008592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800859a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	441a      	add	r2, r3
 80085a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80085ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085bc:	b29b      	uxth	r3, r3
 80085be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	78db      	ldrb	r3, [r3, #3]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d024      	beq.n	8008612 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80085e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80085e6:	f083 0320 	eor.w	r3, r3, #32
 80085ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	441a      	add	r2, r3
 80085f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80085fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800860c:	b29b      	uxth	r3, r3
 800860e:	8013      	strh	r3, [r2, #0]
 8008610:	e01d      	b.n	800864e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	b29b      	uxth	r3, r3
 8008620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008628:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	441a      	add	r2, r3
 8008636:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800863a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800863e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800864a:	b29b      	uxth	r3, r3
 800864c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	b29b      	uxth	r3, r3
 800865c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008664:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	441a      	add	r2, r3
 8008670:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800867a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800867e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008682:	b29b      	uxth	r3, r3
 8008684:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008686:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800868a:	4618      	mov	r0, r3
 800868c:	376c      	adds	r7, #108	; 0x6c
 800868e:	46bd      	mov	sp, r7
 8008690:	bc80      	pop	{r7}
 8008692:	4770      	bx	lr

08008694 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008694:	b480      	push	{r7}
 8008696:	b08d      	sub	sp, #52	; 0x34
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	7b1b      	ldrb	r3, [r3, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f040 808e 	bne.w	80087c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d044      	beq.n	800873a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	81bb      	strh	r3, [r7, #12]
 80086be:	89bb      	ldrh	r3, [r7, #12]
 80086c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d01b      	beq.n	8008700 <USB_DeactivateEndpoint+0x6c>
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086de:	817b      	strh	r3, [r7, #10]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	441a      	add	r2, r3
 80086ea:	897b      	ldrh	r3, [r7, #10]
 80086ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	881b      	ldrh	r3, [r3, #0]
 800870c:	b29b      	uxth	r3, r3
 800870e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008716:	813b      	strh	r3, [r7, #8]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	441a      	add	r2, r3
 8008722:	893b      	ldrh	r3, [r7, #8]
 8008724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800872c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008734:	b29b      	uxth	r3, r3
 8008736:	8013      	strh	r3, [r2, #0]
 8008738:	e192      	b.n	8008a60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	827b      	strh	r3, [r7, #18]
 8008748:	8a7b      	ldrh	r3, [r7, #18]
 800874a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d01b      	beq.n	800878a <USB_DeactivateEndpoint+0xf6>
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29b      	uxth	r3, r3
 8008760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008768:	823b      	strh	r3, [r7, #16]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	441a      	add	r2, r3
 8008774:	8a3b      	ldrh	r3, [r7, #16]
 8008776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800877e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008786:	b29b      	uxth	r3, r3
 8008788:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	b29b      	uxth	r3, r3
 8008798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800879c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a0:	81fb      	strh	r3, [r7, #14]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	441a      	add	r2, r3
 80087ac:	89fb      	ldrh	r3, [r7, #14]
 80087ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087be:	b29b      	uxth	r3, r3
 80087c0:	8013      	strh	r3, [r2, #0]
 80087c2:	e14d      	b.n	8008a60 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f040 80a5 	bne.w	8008918 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	843b      	strh	r3, [r7, #32]
 80087dc:	8c3b      	ldrh	r3, [r7, #32]
 80087de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d01b      	beq.n	800881e <USB_DeactivateEndpoint+0x18a>
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fc:	83fb      	strh	r3, [r7, #30]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	441a      	add	r2, r3
 8008808:	8bfb      	ldrh	r3, [r7, #30]
 800880a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800880e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881a:	b29b      	uxth	r3, r3
 800881c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	83bb      	strh	r3, [r7, #28]
 800882c:	8bbb      	ldrh	r3, [r7, #28]
 800882e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01b      	beq.n	800886e <USB_DeactivateEndpoint+0x1da>
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b29b      	uxth	r3, r3
 8008844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800884c:	837b      	strh	r3, [r7, #26]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	441a      	add	r2, r3
 8008858:	8b7b      	ldrh	r3, [r7, #26]
 800885a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800885e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008866:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800886a:	b29b      	uxth	r3, r3
 800886c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008884:	833b      	strh	r3, [r7, #24]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	441a      	add	r2, r3
 8008890:	8b3b      	ldrh	r3, [r7, #24]
 8008892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800889a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800889e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088bc:	82fb      	strh	r3, [r7, #22]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	441a      	add	r2, r3
 80088c8:	8afb      	ldrh	r3, [r7, #22]
 80088ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088da:	b29b      	uxth	r3, r3
 80088dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f4:	82bb      	strh	r3, [r7, #20]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	441a      	add	r2, r3
 8008900:	8abb      	ldrh	r3, [r7, #20]
 8008902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800890a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800890e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008912:	b29b      	uxth	r3, r3
 8008914:	8013      	strh	r3, [r2, #0]
 8008916:	e0a3      	b.n	8008a60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008926:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01b      	beq.n	8008968 <USB_DeactivateEndpoint+0x2d4>
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	b29b      	uxth	r3, r3
 800893e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008946:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	441a      	add	r2, r3
 8008952:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008964:	b29b      	uxth	r3, r3
 8008966:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008976:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01b      	beq.n	80089b8 <USB_DeactivateEndpoint+0x324>
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	b29b      	uxth	r3, r3
 800898e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008996:	853b      	strh	r3, [r7, #40]	; 0x28
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	441a      	add	r2, r3
 80089a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	441a      	add	r2, r3
 80089da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80089dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	441a      	add	r2, r3
 8008a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	441a      	add	r2, r3
 8008a4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3734      	adds	r7, #52	; 0x34
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bc80      	pop	{r7}
 8008a6a:	4770      	bx	lr

08008a6c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b0cc      	sub	sp, #304	; 0x130
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a7a:	6018      	str	r0, [r3, #0]
 8008a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a84:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	785b      	ldrb	r3, [r3, #1]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	f041 817d 	bne.w	8009d92 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	699a      	ldr	r2, [r3, #24]
 8008aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d908      	bls.n	8008ac6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008ac4:	e007      	b.n	8008ad6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	7b1b      	ldrb	r3, [r3, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d152      	bne.n	8008b8c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6959      	ldr	r1, [r3, #20]
 8008af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	88da      	ldrh	r2, [r3, #6]
 8008afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008b08:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008b0c:	6800      	ldr	r0, [r0, #0]
 8008b0e:	f001 ff23 	bl	800a958 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008b1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b1e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008b22:	6812      	ldr	r2, [r2, #0]
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	4619      	mov	r1, r3
 8008b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008b40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b44:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008b48:	6812      	ldr	r2, [r2, #0]
 8008b4a:	440a      	add	r2, r1
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	011a      	lsls	r2, r3, #4
 8008b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b60:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4413      	add	r3, r2
 8008b68:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b80:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	801a      	strh	r2, [r3, #0]
 8008b88:	f001 b8b5 	b.w	8009cf6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	78db      	ldrb	r3, [r3, #3]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	f040 84c6 	bne.w	800952a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6a1a      	ldr	r2, [r3, #32]
 8008baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	f240 8443 	bls.w	8009442 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	441a      	add	r2, r3
 8008c00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c0c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6a1a      	ldr	r2, [r3, #32]
 8008c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c28:	1ad2      	subs	r2, r2, r3
 8008c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 823e 	beq.w	80090da <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c62:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008c66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c6a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008c6e:	6812      	ldr	r2, [r2, #0]
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	785b      	ldrb	r3, [r3, #1]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f040 809a 	bne.w	8008db8 <USB_EPStartXfer+0x34c>
 8008c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c90:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008c94:	6812      	ldr	r2, [r2, #0]
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cb6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008cba:	6812      	ldr	r2, [r2, #0]
 8008cbc:	440a      	add	r2, r1
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	011a      	lsls	r2, r3, #4
 8008cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d122      	bne.n	8008d36 <USB_EPStartXfer+0x2ca>
 8008cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	801a      	strh	r2, [r3, #0]
 8008d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	801a      	strh	r2, [r3, #0]
 8008d34:	e079      	b.n	8008e2a <USB_EPStartXfer+0x3be>
 8008d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d3a:	2b3e      	cmp	r3, #62	; 0x3e
 8008d3c:	d81b      	bhi.n	8008d76 <USB_EPStartXfer+0x30a>
 8008d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d42:	085b      	lsrs	r3, r3, #1
 8008d44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d004      	beq.n	8008d5e <USB_EPStartXfer+0x2f2>
 8008d54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d58:	3301      	adds	r3, #1
 8008d5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	029b      	lsls	r3, r3, #10
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	801a      	strh	r2, [r3, #0]
 8008d74:	e059      	b.n	8008e2a <USB_EPStartXfer+0x3be>
 8008d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d7a:	095b      	lsrs	r3, r3, #5
 8008d7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d84:	f003 031f 	and.w	r3, r3, #31
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d104      	bne.n	8008d96 <USB_EPStartXfer+0x32a>
 8008d8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d90:	3b01      	subs	r3, #1
 8008d92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008d96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	029b      	lsls	r3, r3, #10
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	801a      	strh	r2, [r3, #0]
 8008db6:	e038      	b.n	8008e2a <USB_EPStartXfer+0x3be>
 8008db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	785b      	ldrb	r3, [r3, #1]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d130      	bne.n	8008e2a <USB_EPStartXfer+0x3be>
 8008dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	4619      	mov	r1, r3
 8008dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dde:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008de2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008de6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008dea:	6812      	ldr	r2, [r2, #0]
 8008dec:	440a      	add	r2, r1
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	011a      	lsls	r2, r3, #4
 8008dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e02:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	895b      	ldrh	r3, [r3, #10]
 8008e36:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6959      	ldr	r1, [r3, #20]
 8008e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e50:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008e54:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008e58:	6800      	ldr	r0, [r0, #0]
 8008e5a:	f001 fd7d 	bl	800a958 <USB_WritePMA>
            ep->xfer_buff += len;
 8008e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	695a      	ldr	r2, [r3, #20]
 8008e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e6e:	441a      	add	r2, r3
 8008e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6a1a      	ldr	r2, [r3, #32]
 8008e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d90f      	bls.n	8008eb8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6a1a      	ldr	r2, [r3, #32]
 8008ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea8:	1ad2      	subs	r2, r2, r3
 8008eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	621a      	str	r2, [r3, #32]
 8008eb6:	e00e      	b.n	8008ed6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	785b      	ldrb	r3, [r3, #1]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f040 809a 	bne.w	800901c <USB_EPStartXfer+0x5b0>
 8008ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008ef0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ef4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008ef8:	6812      	ldr	r2, [r2, #0]
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f12:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008f16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f1a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008f1e:	6812      	ldr	r2, [r2, #0]
 8008f20:	440a      	add	r2, r1
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	011a      	lsls	r2, r3, #4
 8008f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f36:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008f4a:	601a      	str	r2, [r3, #0]
 8008f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d122      	bne.n	8008f9a <USB_EPStartXfer+0x52e>
 8008f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f58:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	801a      	strh	r2, [r3, #0]
 8008f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	801a      	strh	r2, [r3, #0]
 8008f98:	e083      	b.n	80090a2 <USB_EPStartXfer+0x636>
 8008f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f9e:	2b3e      	cmp	r3, #62	; 0x3e
 8008fa0:	d81b      	bhi.n	8008fda <USB_EPStartXfer+0x56e>
 8008fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa6:	085b      	lsrs	r3, r3, #1
 8008fa8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d004      	beq.n	8008fc2 <USB_EPStartXfer+0x556>
 8008fb8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008fc2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	029b      	lsls	r3, r3, #10
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	801a      	strh	r2, [r3, #0]
 8008fd8:	e063      	b.n	80090a2 <USB_EPStartXfer+0x636>
 8008fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fde:	095b      	lsrs	r3, r3, #5
 8008fe0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe8:	f003 031f 	and.w	r3, r3, #31
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d104      	bne.n	8008ffa <USB_EPStartXfer+0x58e>
 8008ff0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008ffa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	029b      	lsls	r3, r3, #10
 8009002:	b29b      	uxth	r3, r3
 8009004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800900c:	b29a      	uxth	r2, r3
 800900e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009012:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	801a      	strh	r2, [r3, #0]
 800901a:	e042      	b.n	80090a2 <USB_EPStartXfer+0x636>
 800901c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	785b      	ldrb	r3, [r3, #1]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d13a      	bne.n	80090a2 <USB_EPStartXfer+0x636>
 800902c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009030:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009034:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009038:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800903c:	6812      	ldr	r2, [r2, #0]
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009044:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800904e:	b29b      	uxth	r3, r3
 8009050:	4619      	mov	r1, r3
 8009052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009056:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800905a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800905e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8009062:	6812      	ldr	r2, [r2, #0]
 8009064:	440a      	add	r2, r1
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800906c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	011a      	lsls	r2, r3, #4
 8009076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800907a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4413      	add	r3, r2
 8009082:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800908a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009094:	b29a      	uxth	r2, r3
 8009096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800909a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80090a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	891b      	ldrh	r3, [r3, #8]
 80090ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6959      	ldr	r1, [r3, #20]
 80090be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80090c8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80090cc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80090d0:	6800      	ldr	r0, [r0, #0]
 80090d2:	f001 fc41 	bl	800a958 <USB_WritePMA>
 80090d6:	f000 be0e 	b.w	8009cf6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80090da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	785b      	ldrb	r3, [r3, #1]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d16d      	bne.n	80091c6 <USB_EPStartXfer+0x75a>
 80090ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009104:	b29b      	uxth	r3, r3
 8009106:	461a      	mov	r2, r3
 8009108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800910a:	4413      	add	r3, r2
 800910c:	64bb      	str	r3, [r7, #72]	; 0x48
 800910e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	011a      	lsls	r2, r3, #4
 800911c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800911e:	4413      	add	r3, r2
 8009120:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009124:	647b      	str	r3, [r7, #68]	; 0x44
 8009126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800912a:	2b00      	cmp	r3, #0
 800912c:	d112      	bne.n	8009154 <USB_EPStartXfer+0x6e8>
 800912e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009138:	b29a      	uxth	r2, r3
 800913a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800913c:	801a      	strh	r2, [r3, #0]
 800913e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	b29b      	uxth	r3, r3
 8009144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800914c:	b29a      	uxth	r2, r3
 800914e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009150:	801a      	strh	r2, [r3, #0]
 8009152:	e063      	b.n	800921c <USB_EPStartXfer+0x7b0>
 8009154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009158:	2b3e      	cmp	r3, #62	; 0x3e
 800915a:	d817      	bhi.n	800918c <USB_EPStartXfer+0x720>
 800915c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009160:	085b      	lsrs	r3, r3, #1
 8009162:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d004      	beq.n	800917c <USB_EPStartXfer+0x710>
 8009172:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009176:	3301      	adds	r3, #1
 8009178:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800917c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009180:	b29b      	uxth	r3, r3
 8009182:	029b      	lsls	r3, r3, #10
 8009184:	b29a      	uxth	r2, r3
 8009186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009188:	801a      	strh	r2, [r3, #0]
 800918a:	e047      	b.n	800921c <USB_EPStartXfer+0x7b0>
 800918c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009190:	095b      	lsrs	r3, r3, #5
 8009192:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800919a:	f003 031f 	and.w	r3, r3, #31
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d104      	bne.n	80091ac <USB_EPStartXfer+0x740>
 80091a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80091a6:	3b01      	subs	r3, #1
 80091a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80091ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	029b      	lsls	r3, r3, #10
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091be:	b29a      	uxth	r2, r3
 80091c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091c2:	801a      	strh	r2, [r3, #0]
 80091c4:	e02a      	b.n	800921c <USB_EPStartXfer+0x7b0>
 80091c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	785b      	ldrb	r3, [r3, #1]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d122      	bne.n	800921c <USB_EPStartXfer+0x7b0>
 80091d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	653b      	str	r3, [r7, #80]	; 0x50
 80091e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	461a      	mov	r2, r3
 80091f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f6:	4413      	add	r3, r2
 80091f8:	653b      	str	r3, [r7, #80]	; 0x50
 80091fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	011a      	lsls	r2, r3, #4
 8009208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800920a:	4413      	add	r3, r2
 800920c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009210:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009216:	b29a      	uxth	r2, r3
 8009218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800921a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800921c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	891b      	ldrh	r3, [r3, #8]
 8009228:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800922c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6959      	ldr	r1, [r3, #20]
 8009238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800923c:	b29b      	uxth	r3, r3
 800923e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009242:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009246:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	f001 fb84 	bl	800a958 <USB_WritePMA>
            ep->xfer_buff += len;
 8009250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	695a      	ldr	r2, [r3, #20]
 800925c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009260:	441a      	add	r2, r3
 8009262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800926e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6a1a      	ldr	r2, [r3, #32]
 800927a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800927e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	429a      	cmp	r2, r3
 8009288:	d90f      	bls.n	80092aa <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800928a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6a1a      	ldr	r2, [r3, #32]
 8009296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800929a:	1ad2      	subs	r2, r2, r3
 800929c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	621a      	str	r2, [r3, #32]
 80092a8:	e00e      	b.n	80092c8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80092aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80092ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2200      	movs	r2, #0
 80092c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	643b      	str	r3, [r7, #64]	; 0x40
 80092d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	785b      	ldrb	r3, [r3, #1]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d16d      	bne.n	80093c0 <USB_EPStartXfer+0x954>
 80092e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80092f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092fe:	b29b      	uxth	r3, r3
 8009300:	461a      	mov	r2, r3
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	4413      	add	r3, r2
 8009306:	63bb      	str	r3, [r7, #56]	; 0x38
 8009308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800930c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	011a      	lsls	r2, r3, #4
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	4413      	add	r3, r2
 800931a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800931e:	637b      	str	r3, [r7, #52]	; 0x34
 8009320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009324:	2b00      	cmp	r3, #0
 8009326:	d112      	bne.n	800934e <USB_EPStartXfer+0x8e2>
 8009328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	b29b      	uxth	r3, r3
 800932e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009332:	b29a      	uxth	r2, r3
 8009334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009336:	801a      	strh	r2, [r3, #0]
 8009338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	b29b      	uxth	r3, r3
 800933e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009346:	b29a      	uxth	r2, r3
 8009348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934a:	801a      	strh	r2, [r3, #0]
 800934c:	e05d      	b.n	800940a <USB_EPStartXfer+0x99e>
 800934e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009352:	2b3e      	cmp	r3, #62	; 0x3e
 8009354:	d817      	bhi.n	8009386 <USB_EPStartXfer+0x91a>
 8009356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800935a:	085b      	lsrs	r3, r3, #1
 800935c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d004      	beq.n	8009376 <USB_EPStartXfer+0x90a>
 800936c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009370:	3301      	adds	r3, #1
 8009372:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009376:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800937a:	b29b      	uxth	r3, r3
 800937c:	029b      	lsls	r3, r3, #10
 800937e:	b29a      	uxth	r2, r3
 8009380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009382:	801a      	strh	r2, [r3, #0]
 8009384:	e041      	b.n	800940a <USB_EPStartXfer+0x99e>
 8009386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938a:	095b      	lsrs	r3, r3, #5
 800938c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009394:	f003 031f 	and.w	r3, r3, #31
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <USB_EPStartXfer+0x93a>
 800939c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80093a0:	3b01      	subs	r3, #1
 80093a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80093a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	029b      	lsls	r3, r3, #10
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093bc:	801a      	strh	r2, [r3, #0]
 80093be:	e024      	b.n	800940a <USB_EPStartXfer+0x99e>
 80093c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	785b      	ldrb	r3, [r3, #1]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d11c      	bne.n	800940a <USB_EPStartXfer+0x99e>
 80093d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093de:	b29b      	uxth	r3, r3
 80093e0:	461a      	mov	r2, r3
 80093e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e4:	4413      	add	r3, r2
 80093e6:	643b      	str	r3, [r7, #64]	; 0x40
 80093e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	011a      	lsls	r2, r3, #4
 80093f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093f8:	4413      	add	r3, r2
 80093fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009404:	b29a      	uxth	r2, r3
 8009406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009408:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800940a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800940e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	895b      	ldrh	r3, [r3, #10]
 8009416:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800941a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800941e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6959      	ldr	r1, [r3, #20]
 8009426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800942a:	b29b      	uxth	r3, r3
 800942c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009430:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009434:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009438:	6800      	ldr	r0, [r0, #0]
 800943a:	f001 fa8d 	bl	800a958 <USB_WritePMA>
 800943e:	f000 bc5a 	b.w	8009cf6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009456:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	b29b      	uxth	r3, r3
 8009470:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009478:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800947c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009480:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800948a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	441a      	add	r2, r3
 8009496:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800949a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800949e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80094ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	461a      	mov	r2, r3
 80094cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094ce:	4413      	add	r3, r2
 80094d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	011a      	lsls	r2, r3, #4
 80094e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094e2:	4413      	add	r3, r2
 80094e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80094ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80094f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	891b      	ldrh	r3, [r3, #8]
 8009500:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6959      	ldr	r1, [r3, #20]
 8009510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009514:	b29b      	uxth	r3, r3
 8009516:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800951a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800951e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009522:	6800      	ldr	r0, [r0, #0]
 8009524:	f001 fa18 	bl	800a958 <USB_WritePMA>
 8009528:	e3e5      	b.n	8009cf6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800952a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800952e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	881b      	ldrh	r3, [r3, #0]
 8009546:	b29b      	uxth	r3, r3
 8009548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800954c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009550:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009558:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	441a      	add	r2, r3
 800956e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800957a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800957e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009582:	b29b      	uxth	r3, r3
 8009584:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800958a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6a1a      	ldr	r2, [r3, #32]
 8009592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009596:	1ad2      	subs	r2, r2, r3
 8009598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800959c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80095a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f000 81bc 	beq.w	8009944 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	785b      	ldrb	r3, [r3, #1]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d16d      	bne.n	80096c6 <USB_EPStartXfer+0xc5a>
 80095ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80095f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009604:	b29b      	uxth	r3, r3
 8009606:	461a      	mov	r2, r3
 8009608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800960a:	4413      	add	r3, r2
 800960c:	67bb      	str	r3, [r7, #120]	; 0x78
 800960e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	011a      	lsls	r2, r3, #4
 800961c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800961e:	4413      	add	r3, r2
 8009620:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009624:	677b      	str	r3, [r7, #116]	; 0x74
 8009626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800962a:	2b00      	cmp	r3, #0
 800962c:	d112      	bne.n	8009654 <USB_EPStartXfer+0xbe8>
 800962e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	b29b      	uxth	r3, r3
 8009634:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009638:	b29a      	uxth	r2, r3
 800963a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800963c:	801a      	strh	r2, [r3, #0]
 800963e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	b29b      	uxth	r3, r3
 8009644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800964c:	b29a      	uxth	r2, r3
 800964e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009650:	801a      	strh	r2, [r3, #0]
 8009652:	e060      	b.n	8009716 <USB_EPStartXfer+0xcaa>
 8009654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009658:	2b3e      	cmp	r3, #62	; 0x3e
 800965a:	d817      	bhi.n	800968c <USB_EPStartXfer+0xc20>
 800965c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009660:	085b      	lsrs	r3, r3, #1
 8009662:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	2b00      	cmp	r3, #0
 8009670:	d004      	beq.n	800967c <USB_EPStartXfer+0xc10>
 8009672:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009676:	3301      	adds	r3, #1
 8009678:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800967c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009680:	b29b      	uxth	r3, r3
 8009682:	029b      	lsls	r3, r3, #10
 8009684:	b29a      	uxth	r2, r3
 8009686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009688:	801a      	strh	r2, [r3, #0]
 800968a:	e044      	b.n	8009716 <USB_EPStartXfer+0xcaa>
 800968c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009690:	095b      	lsrs	r3, r3, #5
 8009692:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800969a:	f003 031f 	and.w	r3, r3, #31
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d104      	bne.n	80096ac <USB_EPStartXfer+0xc40>
 80096a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80096a6:	3b01      	subs	r3, #1
 80096a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80096ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	029b      	lsls	r3, r3, #10
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096be:	b29a      	uxth	r2, r3
 80096c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096c2:	801a      	strh	r2, [r3, #0]
 80096c4:	e027      	b.n	8009716 <USB_EPStartXfer+0xcaa>
 80096c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	785b      	ldrb	r3, [r3, #1]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d11f      	bne.n	8009716 <USB_EPStartXfer+0xcaa>
 80096d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	461a      	mov	r2, r3
 80096e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096ec:	4413      	add	r3, r2
 80096ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	011a      	lsls	r2, r3, #4
 8009700:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009704:	4413      	add	r3, r2
 8009706:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800970a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800970c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009710:	b29a      	uxth	r2, r3
 8009712:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009714:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800971a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	895b      	ldrh	r3, [r3, #10]
 8009722:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800972a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6959      	ldr	r1, [r3, #20]
 8009732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009736:	b29b      	uxth	r3, r3
 8009738:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800973c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009740:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009744:	6800      	ldr	r0, [r0, #0]
 8009746:	f001 f907 	bl	800a958 <USB_WritePMA>
          ep->xfer_buff += len;
 800974a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800974e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	695a      	ldr	r2, [r3, #20]
 8009756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800975a:	441a      	add	r2, r3
 800975c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800976c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6a1a      	ldr	r2, [r3, #32]
 8009774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	429a      	cmp	r2, r3
 8009782:	d90f      	bls.n	80097a4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8009784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6a1a      	ldr	r2, [r3, #32]
 8009790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009794:	1ad2      	subs	r2, r2, r3
 8009796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800979a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	621a      	str	r2, [r3, #32]
 80097a2:	e00e      	b.n	80097c2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80097a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80097b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2200      	movs	r2, #0
 80097c0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80097c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 8295 	beq.w	8009cf6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	785b      	ldrb	r3, [r3, #1]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d16d      	bne.n	80098b8 <USB_EPStartXfer+0xe4c>
 80097dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80097e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	461a      	mov	r2, r3
 80097fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097fc:	4413      	add	r3, r2
 80097fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	011a      	lsls	r2, r3, #4
 800980e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009810:	4413      	add	r3, r2
 8009812:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009816:	667b      	str	r3, [r7, #100]	; 0x64
 8009818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800981c:	2b00      	cmp	r3, #0
 800981e:	d112      	bne.n	8009846 <USB_EPStartXfer+0xdda>
 8009820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	b29b      	uxth	r3, r3
 8009826:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800982a:	b29a      	uxth	r2, r3
 800982c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800982e:	801a      	strh	r2, [r3, #0]
 8009830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	b29b      	uxth	r3, r3
 8009836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800983a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800983e:	b29a      	uxth	r2, r3
 8009840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009842:	801a      	strh	r2, [r3, #0]
 8009844:	e063      	b.n	800990e <USB_EPStartXfer+0xea2>
 8009846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800984a:	2b3e      	cmp	r3, #62	; 0x3e
 800984c:	d817      	bhi.n	800987e <USB_EPStartXfer+0xe12>
 800984e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009852:	085b      	lsrs	r3, r3, #1
 8009854:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	2b00      	cmp	r3, #0
 8009862:	d004      	beq.n	800986e <USB_EPStartXfer+0xe02>
 8009864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009868:	3301      	adds	r3, #1
 800986a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800986e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009872:	b29b      	uxth	r3, r3
 8009874:	029b      	lsls	r3, r3, #10
 8009876:	b29a      	uxth	r2, r3
 8009878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	e047      	b.n	800990e <USB_EPStartXfer+0xea2>
 800987e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009882:	095b      	lsrs	r3, r3, #5
 8009884:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800988c:	f003 031f 	and.w	r3, r3, #31
 8009890:	2b00      	cmp	r3, #0
 8009892:	d104      	bne.n	800989e <USB_EPStartXfer+0xe32>
 8009894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009898:	3b01      	subs	r3, #1
 800989a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800989e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	029b      	lsls	r3, r3, #10
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098b4:	801a      	strh	r2, [r3, #0]
 80098b6:	e02a      	b.n	800990e <USB_EPStartXfer+0xea2>
 80098b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	785b      	ldrb	r3, [r3, #1]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d122      	bne.n	800990e <USB_EPStartXfer+0xea2>
 80098c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	673b      	str	r3, [r7, #112]	; 0x70
 80098d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	461a      	mov	r2, r3
 80098e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098e8:	4413      	add	r3, r2
 80098ea:	673b      	str	r3, [r7, #112]	; 0x70
 80098ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	011a      	lsls	r2, r3, #4
 80098fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098fc:	4413      	add	r3, r2
 80098fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009902:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009908:	b29a      	uxth	r2, r3
 800990a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800990c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800990e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	891b      	ldrh	r3, [r3, #8]
 800991a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800991e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	6959      	ldr	r1, [r3, #20]
 800992a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800992e:	b29b      	uxth	r3, r3
 8009930:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009934:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009938:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800993c:	6800      	ldr	r0, [r0, #0]
 800993e:	f001 f80b 	bl	800a958 <USB_WritePMA>
 8009942:	e1d8      	b.n	8009cf6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	785b      	ldrb	r3, [r3, #1]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d178      	bne.n	8009a46 <USB_EPStartXfer+0xfda>
 8009954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009958:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009966:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009970:	b29b      	uxth	r3, r3
 8009972:	461a      	mov	r2, r3
 8009974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009978:	4413      	add	r3, r2
 800997a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800997e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	011a      	lsls	r2, r3, #4
 800998c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009990:	4413      	add	r3, r2
 8009992:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009996:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800999a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d116      	bne.n	80099d0 <USB_EPStartXfer+0xf64>
 80099a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099b4:	801a      	strh	r2, [r3, #0]
 80099b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099ba:	881b      	ldrh	r3, [r3, #0]
 80099bc:	b29b      	uxth	r3, r3
 80099be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099cc:	801a      	strh	r2, [r3, #0]
 80099ce:	e06b      	b.n	8009aa8 <USB_EPStartXfer+0x103c>
 80099d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099d4:	2b3e      	cmp	r3, #62	; 0x3e
 80099d6:	d818      	bhi.n	8009a0a <USB_EPStartXfer+0xf9e>
 80099d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099dc:	085b      	lsrs	r3, r3, #1
 80099de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80099e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d004      	beq.n	80099f8 <USB_EPStartXfer+0xf8c>
 80099ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80099f2:	3301      	adds	r3, #1
 80099f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80099f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	029b      	lsls	r3, r3, #10
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a06:	801a      	strh	r2, [r3, #0]
 8009a08:	e04e      	b.n	8009aa8 <USB_EPStartXfer+0x103c>
 8009a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a0e:	095b      	lsrs	r3, r3, #5
 8009a10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a18:	f003 031f 	and.w	r3, r3, #31
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d104      	bne.n	8009a2a <USB_EPStartXfer+0xfbe>
 8009a20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009a24:	3b01      	subs	r3, #1
 8009a26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009a2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	029b      	lsls	r3, r3, #10
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a42:	801a      	strh	r2, [r3, #0]
 8009a44:	e030      	b.n	8009aa8 <USB_EPStartXfer+0x103c>
 8009a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	785b      	ldrb	r3, [r3, #1]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d128      	bne.n	8009aa8 <USB_EPStartXfer+0x103c>
 8009a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	461a      	mov	r2, r3
 8009a76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	011a      	lsls	r2, r3, #4
 8009a8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a92:	4413      	add	r3, r2
 8009a94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009aa6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	891b      	ldrh	r3, [r3, #8]
 8009ab4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6959      	ldr	r1, [r3, #20]
 8009ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009ace:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009ad2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009ad6:	6800      	ldr	r0, [r0, #0]
 8009ad8:	f000 ff3e 	bl	800a958 <USB_WritePMA>
          ep->xfer_buff += len;
 8009adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	695a      	ldr	r2, [r3, #20]
 8009ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aec:	441a      	add	r2, r3
 8009aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6a1a      	ldr	r2, [r3, #32]
 8009b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d90f      	bls.n	8009b36 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8009b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6a1a      	ldr	r2, [r3, #32]
 8009b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b26:	1ad2      	subs	r2, r2, r3
 8009b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	621a      	str	r2, [r3, #32]
 8009b34:	e00e      	b.n	8009b54 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8009b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2200      	movs	r2, #0
 8009b52:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 80cc 	beq.w	8009cf6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	785b      	ldrb	r3, [r3, #1]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d178      	bne.n	8009c6e <USB_EPStartXfer+0x1202>
 8009b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	011a      	lsls	r2, r3, #4
 8009bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bb8:	4413      	add	r3, r2
 8009bba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d116      	bne.n	8009bf8 <USB_EPStartXfer+0x118c>
 8009bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bdc:	801a      	strh	r2, [r3, #0]
 8009bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bf4:	801a      	strh	r2, [r3, #0]
 8009bf6:	e064      	b.n	8009cc2 <USB_EPStartXfer+0x1256>
 8009bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bfc:	2b3e      	cmp	r3, #62	; 0x3e
 8009bfe:	d818      	bhi.n	8009c32 <USB_EPStartXfer+0x11c6>
 8009c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c04:	085b      	lsrs	r3, r3, #1
 8009c06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d004      	beq.n	8009c20 <USB_EPStartXfer+0x11b4>
 8009c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	029b      	lsls	r3, r3, #10
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c2e:	801a      	strh	r2, [r3, #0]
 8009c30:	e047      	b.n	8009cc2 <USB_EPStartXfer+0x1256>
 8009c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c36:	095b      	lsrs	r3, r3, #5
 8009c38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c40:	f003 031f 	and.w	r3, r3, #31
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d104      	bne.n	8009c52 <USB_EPStartXfer+0x11e6>
 8009c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	029b      	lsls	r3, r3, #10
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c6a:	801a      	strh	r2, [r3, #0]
 8009c6c:	e029      	b.n	8009cc2 <USB_EPStartXfer+0x1256>
 8009c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	785b      	ldrb	r3, [r3, #1]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d121      	bne.n	8009cc2 <USB_EPStartXfer+0x1256>
 8009c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c94:	4413      	add	r3, r2
 8009c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	011a      	lsls	r2, r3, #4
 8009ca8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cac:	4413      	add	r3, r2
 8009cae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	895b      	ldrh	r3, [r3, #10]
 8009cce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6959      	ldr	r1, [r3, #20]
 8009cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009ce8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009cec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009cf0:	6800      	ldr	r0, [r0, #0]
 8009cf2:	f000 fe31 	bl	800a958 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d18:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d24:	8013      	strh	r3, [r2, #0]
 8009d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d2a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009d2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d32:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009d36:	8812      	ldrh	r2, [r2, #0]
 8009d38:	f082 0210 	eor.w	r2, r2, #16
 8009d3c:	801a      	strh	r2, [r3, #0]
 8009d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d42:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009d46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d4a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009d4e:	8812      	ldrh	r2, [r2, #0]
 8009d50:	f082 0220 	eor.w	r2, r2, #32
 8009d54:	801a      	strh	r2, [r3, #0]
 8009d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	441a      	add	r2, r3
 8009d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d74:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	8013      	strh	r3, [r2, #0]
 8009d8e:	f000 bc9f 	b.w	800a6d0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	7b1b      	ldrb	r3, [r3, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f040 80ae 	bne.w	8009f00 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	699a      	ldr	r2, [r3, #24]
 8009db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d917      	bls.n	8009df0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	699a      	ldr	r2, [r3, #24]
 8009ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009de0:	1ad2      	subs	r2, r2, r3
 8009de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	619a      	str	r2, [r3, #24]
 8009dee:	e00e      	b.n	8009e0e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009e32:	4413      	add	r3, r2
 8009e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	011a      	lsls	r2, r3, #4
 8009e46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d116      	bne.n	8009e8a <USB_EPStartXfer+0x141e>
 8009e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e6e:	801a      	strh	r2, [r3, #0]
 8009e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e86:	801a      	strh	r2, [r3, #0]
 8009e88:	e3e8      	b.n	800a65c <USB_EPStartXfer+0x1bf0>
 8009e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8009e90:	d818      	bhi.n	8009ec4 <USB_EPStartXfer+0x1458>
 8009e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e96:	085b      	lsrs	r3, r3, #1
 8009e98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d004      	beq.n	8009eb2 <USB_EPStartXfer+0x1446>
 8009ea8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009eac:	3301      	adds	r3, #1
 8009eae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009eb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	029b      	lsls	r3, r3, #10
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ec0:	801a      	strh	r2, [r3, #0]
 8009ec2:	e3cb      	b.n	800a65c <USB_EPStartXfer+0x1bf0>
 8009ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ec8:	095b      	lsrs	r3, r3, #5
 8009eca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ed2:	f003 031f 	and.w	r3, r3, #31
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d104      	bne.n	8009ee4 <USB_EPStartXfer+0x1478>
 8009eda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009ee4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	029b      	lsls	r3, r3, #10
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009efc:	801a      	strh	r2, [r3, #0]
 8009efe:	e3ad      	b.n	800a65c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	78db      	ldrb	r3, [r3, #3]
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	f040 8200 	bne.w	800a312 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	785b      	ldrb	r3, [r3, #1]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f040 8091 	bne.w	800a046 <USB_EPStartXfer+0x15da>
 8009f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	461a      	mov	r2, r3
 8009f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f48:	4413      	add	r3, r2
 8009f4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	011a      	lsls	r2, r3, #4
 8009f5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f60:	4413      	add	r3, r2
 8009f62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d116      	bne.n	8009fa8 <USB_EPStartXfer+0x153c>
 8009f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f8c:	801a      	strh	r2, [r3, #0]
 8009f8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f92:	881b      	ldrh	r3, [r3, #0]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fa4:	801a      	strh	r2, [r3, #0]
 8009fa6:	e083      	b.n	800a0b0 <USB_EPStartXfer+0x1644>
 8009fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	2b3e      	cmp	r3, #62	; 0x3e
 8009fb6:	d820      	bhi.n	8009ffa <USB_EPStartXfer+0x158e>
 8009fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	085b      	lsrs	r3, r3, #1
 8009fc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d004      	beq.n	8009fe8 <USB_EPStartXfer+0x157c>
 8009fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	029b      	lsls	r3, r3, #10
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ff6:	801a      	strh	r2, [r3, #0]
 8009ff8:	e05a      	b.n	800a0b0 <USB_EPStartXfer+0x1644>
 8009ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	095b      	lsrs	r3, r3, #5
 800a008:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a00c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	f003 031f 	and.w	r3, r3, #31
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d104      	bne.n	800a02a <USB_EPStartXfer+0x15be>
 800a020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a024:	3b01      	subs	r3, #1
 800a026:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a02e:	b29b      	uxth	r3, r3
 800a030:	029b      	lsls	r3, r3, #10
 800a032:	b29b      	uxth	r3, r3
 800a034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a042:	801a      	strh	r2, [r3, #0]
 800a044:	e034      	b.n	800a0b0 <USB_EPStartXfer+0x1644>
 800a046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a04a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	785b      	ldrb	r3, [r3, #1]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d12c      	bne.n	800a0b0 <USB_EPStartXfer+0x1644>
 800a056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a05a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a068:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a072:	b29b      	uxth	r3, r3
 800a074:	461a      	mov	r2, r3
 800a076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a07a:	4413      	add	r3, r2
 800a07c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	011a      	lsls	r2, r3, #4
 800a08e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a092:	4413      	add	r3, r2
 800a094:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a09c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a0ae:	801a      	strh	r2, [r3, #0]
 800a0b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	785b      	ldrb	r3, [r3, #1]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f040 8091 	bne.w	800a1f2 <USB_EPStartXfer+0x1786>
 800a0d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a0de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a0fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	011a      	lsls	r2, r3, #4
 800a108:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a10c:	4413      	add	r3, r2
 800a10e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a112:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a11a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d116      	bne.n	800a154 <USB_EPStartXfer+0x16e8>
 800a126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a132:	b29a      	uxth	r2, r3
 800a134:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a138:	801a      	strh	r2, [r3, #0]
 800a13a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a13e:	881b      	ldrh	r3, [r3, #0]
 800a140:	b29b      	uxth	r3, r3
 800a142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a150:	801a      	strh	r2, [r3, #0]
 800a152:	e07c      	b.n	800a24e <USB_EPStartXfer+0x17e2>
 800a154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	2b3e      	cmp	r3, #62	; 0x3e
 800a162:	d820      	bhi.n	800a1a6 <USB_EPStartXfer+0x173a>
 800a164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	085b      	lsrs	r3, r3, #1
 800a172:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a17a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	2b00      	cmp	r3, #0
 800a188:	d004      	beq.n	800a194 <USB_EPStartXfer+0x1728>
 800a18a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a18e:	3301      	adds	r3, #1
 800a190:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a194:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a198:	b29b      	uxth	r3, r3
 800a19a:	029b      	lsls	r3, r3, #10
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1a2:	801a      	strh	r2, [r3, #0]
 800a1a4:	e053      	b.n	800a24e <USB_EPStartXfer+0x17e2>
 800a1a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	095b      	lsrs	r3, r3, #5
 800a1b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a1b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	f003 031f 	and.w	r3, r3, #31
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <USB_EPStartXfer+0x176a>
 800a1cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a1d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	029b      	lsls	r3, r3, #10
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1ee:	801a      	strh	r2, [r3, #0]
 800a1f0:	e02d      	b.n	800a24e <USB_EPStartXfer+0x17e2>
 800a1f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	785b      	ldrb	r3, [r3, #1]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d125      	bne.n	800a24e <USB_EPStartXfer+0x17e2>
 800a202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a206:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a210:	b29b      	uxth	r3, r3
 800a212:	461a      	mov	r2, r3
 800a214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a218:	4413      	add	r3, r2
 800a21a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a21e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	011a      	lsls	r2, r3, #4
 800a22c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a230:	4413      	add	r3, r2
 800a232:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a236:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a23a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a23e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	b29a      	uxth	r2, r3
 800a248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a24c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a24e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 81fe 	beq.w	800a65c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a264:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a26e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	4413      	add	r3, r2
 800a27a:	881b      	ldrh	r3, [r3, #0]
 800a27c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a280:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d005      	beq.n	800a298 <USB_EPStartXfer+0x182c>
 800a28c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10d      	bne.n	800a2b4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a298:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a29c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f040 81db 	bne.w	800a65c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a2a6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f040 81d4 	bne.w	800a65c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a2b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	881b      	ldrh	r3, [r3, #0]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2da:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a2de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	441a      	add	r2, r3
 800a2f8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a2fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a308:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	8013      	strh	r3, [r2, #0]
 800a310:	e1a4      	b.n	800a65c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	78db      	ldrb	r3, [r3, #3]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	f040 819a 	bne.w	800a658 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	699a      	ldr	r2, [r3, #24]
 800a330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d917      	bls.n	800a370 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	699a      	ldr	r2, [r3, #24]
 800a35c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a360:	1ad2      	subs	r2, r2, r3
 800a362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	619a      	str	r2, [r3, #24]
 800a36e:	e00e      	b.n	800a38e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2200      	movs	r2, #0
 800a38c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a38e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	785b      	ldrb	r3, [r3, #1]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d178      	bne.n	800a490 <USB_EPStartXfer+0x1a24>
 800a39e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a3ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	461a      	mov	r2, r3
 800a3be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a3c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	011a      	lsls	r2, r3, #4
 800a3d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a3da:	4413      	add	r3, r2
 800a3dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a3e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d116      	bne.n	800a41a <USB_EPStartXfer+0x19ae>
 800a3ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a3fe:	801a      	strh	r2, [r3, #0]
 800a400:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	b29b      	uxth	r3, r3
 800a408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a40c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a410:	b29a      	uxth	r2, r3
 800a412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a416:	801a      	strh	r2, [r3, #0]
 800a418:	e06b      	b.n	800a4f2 <USB_EPStartXfer+0x1a86>
 800a41a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a41e:	2b3e      	cmp	r3, #62	; 0x3e
 800a420:	d818      	bhi.n	800a454 <USB_EPStartXfer+0x19e8>
 800a422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a426:	085b      	lsrs	r3, r3, #1
 800a428:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a42c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d004      	beq.n	800a442 <USB_EPStartXfer+0x19d6>
 800a438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a43c:	3301      	adds	r3, #1
 800a43e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a446:	b29b      	uxth	r3, r3
 800a448:	029b      	lsls	r3, r3, #10
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a450:	801a      	strh	r2, [r3, #0]
 800a452:	e04e      	b.n	800a4f2 <USB_EPStartXfer+0x1a86>
 800a454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a458:	095b      	lsrs	r3, r3, #5
 800a45a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a45e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a462:	f003 031f 	and.w	r3, r3, #31
 800a466:	2b00      	cmp	r3, #0
 800a468:	d104      	bne.n	800a474 <USB_EPStartXfer+0x1a08>
 800a46a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a46e:	3b01      	subs	r3, #1
 800a470:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a478:	b29b      	uxth	r3, r3
 800a47a:	029b      	lsls	r3, r3, #10
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a486:	b29a      	uxth	r2, r3
 800a488:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a48c:	801a      	strh	r2, [r3, #0]
 800a48e:	e030      	b.n	800a4f2 <USB_EPStartXfer+0x1a86>
 800a490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	785b      	ldrb	r3, [r3, #1]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d128      	bne.n	800a4f2 <USB_EPStartXfer+0x1a86>
 800a4a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a4ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a4ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	011a      	lsls	r2, r3, #4
 800a4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4dc:	4413      	add	r3, r2
 800a4de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a4e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a4e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a4f0:	801a      	strh	r2, [r3, #0]
 800a4f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	785b      	ldrb	r3, [r3, #1]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d178      	bne.n	800a602 <USB_EPStartXfer+0x1b96>
 800a510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a514:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a51e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a522:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	461a      	mov	r2, r3
 800a530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a534:	4413      	add	r3, r2
 800a536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a53a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a53e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	011a      	lsls	r2, r3, #4
 800a548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a54c:	4413      	add	r3, r2
 800a54e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d116      	bne.n	800a58c <USB_EPStartXfer+0x1b20>
 800a55e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a562:	881b      	ldrh	r3, [r3, #0]
 800a564:	b29b      	uxth	r3, r3
 800a566:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a570:	801a      	strh	r2, [r3, #0]
 800a572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	b29b      	uxth	r3, r3
 800a57a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a57e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a582:	b29a      	uxth	r2, r3
 800a584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a588:	801a      	strh	r2, [r3, #0]
 800a58a:	e067      	b.n	800a65c <USB_EPStartXfer+0x1bf0>
 800a58c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a590:	2b3e      	cmp	r3, #62	; 0x3e
 800a592:	d818      	bhi.n	800a5c6 <USB_EPStartXfer+0x1b5a>
 800a594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a598:	085b      	lsrs	r3, r3, #1
 800a59a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a59e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d004      	beq.n	800a5b4 <USB_EPStartXfer+0x1b48>
 800a5aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a5b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	029b      	lsls	r3, r3, #10
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5c2:	801a      	strh	r2, [r3, #0]
 800a5c4:	e04a      	b.n	800a65c <USB_EPStartXfer+0x1bf0>
 800a5c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5ca:	095b      	lsrs	r3, r3, #5
 800a5cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a5d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5d4:	f003 031f 	and.w	r3, r3, #31
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d104      	bne.n	800a5e6 <USB_EPStartXfer+0x1b7a>
 800a5dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a5e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	029b      	lsls	r3, r3, #10
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5fe:	801a      	strh	r2, [r3, #0]
 800a600:	e02c      	b.n	800a65c <USB_EPStartXfer+0x1bf0>
 800a602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d124      	bne.n	800a65c <USB_EPStartXfer+0x1bf0>
 800a612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a616:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a620:	b29b      	uxth	r3, r3
 800a622:	461a      	mov	r2, r3
 800a624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a628:	4413      	add	r3, r2
 800a62a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a62e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	011a      	lsls	r2, r3, #4
 800a63c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a640:	4413      	add	r3, r2
 800a642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a646:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a64a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a64e:	b29a      	uxth	r2, r3
 800a650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a654:	801a      	strh	r2, [r3, #0]
 800a656:	e001      	b.n	800a65c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e03a      	b.n	800a6d2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a65c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a66a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	4413      	add	r3, r2
 800a676:	881b      	ldrh	r3, [r3, #0]
 800a678:	b29b      	uxth	r3, r3
 800a67a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a67e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a682:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a686:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a68a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a68e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a692:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a696:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a69a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a69e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	441a      	add	r2, r3
 800a6b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a6bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	785b      	ldrb	r3, [r3, #1]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d020      	beq.n	800a730 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a704:	81bb      	strh	r3, [r7, #12]
 800a706:	89bb      	ldrh	r3, [r7, #12]
 800a708:	f083 0310 	eor.w	r3, r3, #16
 800a70c:	81bb      	strh	r3, [r7, #12]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	441a      	add	r2, r3
 800a718:	89bb      	ldrh	r3, [r7, #12]
 800a71a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a71e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	8013      	strh	r3, [r2, #0]
 800a72e:	e01f      	b.n	800a770 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a746:	81fb      	strh	r3, [r7, #14]
 800a748:	89fb      	ldrh	r3, [r7, #14]
 800a74a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a74e:	81fb      	strh	r3, [r7, #14]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	441a      	add	r2, r3
 800a75a:	89fb      	ldrh	r3, [r7, #14]
 800a75c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	bc80      	pop	{r7}
 800a77a:	4770      	bx	lr

0800a77c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b087      	sub	sp, #28
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	7b1b      	ldrb	r3, [r3, #12]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f040 809d 	bne.w	800a8ca <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	785b      	ldrb	r3, [r3, #1]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d04c      	beq.n	800a832 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	823b      	strh	r3, [r7, #16]
 800a7a6:	8a3b      	ldrh	r3, [r7, #16]
 800a7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d01b      	beq.n	800a7e8 <USB_EPClearStall+0x6c>
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	4413      	add	r3, r2
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7c6:	81fb      	strh	r3, [r7, #14]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	441a      	add	r2, r3
 800a7d2:	89fb      	ldrh	r3, [r7, #14]
 800a7d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	78db      	ldrb	r3, [r3, #3]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d06c      	beq.n	800a8ca <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	881b      	ldrh	r3, [r3, #0]
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a806:	81bb      	strh	r3, [r7, #12]
 800a808:	89bb      	ldrh	r3, [r7, #12]
 800a80a:	f083 0320 	eor.w	r3, r3, #32
 800a80e:	81bb      	strh	r3, [r7, #12]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	441a      	add	r2, r3
 800a81a:	89bb      	ldrh	r3, [r7, #12]
 800a81c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	8013      	strh	r3, [r2, #0]
 800a830:	e04b      	b.n	800a8ca <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	82fb      	strh	r3, [r7, #22]
 800a840:	8afb      	ldrh	r3, [r7, #22]
 800a842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d01b      	beq.n	800a882 <USB_EPClearStall+0x106>
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	b29b      	uxth	r3, r3
 800a858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a85c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a860:	82bb      	strh	r3, [r7, #20]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	441a      	add	r2, r3
 800a86c:	8abb      	ldrh	r3, [r7, #20]
 800a86e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a87a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a87e:	b29b      	uxth	r3, r3
 800a880:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4413      	add	r3, r2
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a898:	827b      	strh	r3, [r7, #18]
 800a89a:	8a7b      	ldrh	r3, [r7, #18]
 800a89c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a8a0:	827b      	strh	r3, [r7, #18]
 800a8a2:	8a7b      	ldrh	r3, [r7, #18]
 800a8a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a8a8:	827b      	strh	r3, [r7, #18]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	441a      	add	r2, r3
 800a8b4:	8a7b      	ldrh	r3, [r7, #18]
 800a8b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	371c      	adds	r7, #28
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bc80      	pop	{r7}
 800a8d4:	4770      	bx	lr

0800a8d6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b083      	sub	sp, #12
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	460b      	mov	r3, r1
 800a8e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a8e2:	78fb      	ldrb	r3, [r7, #3]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d103      	bne.n	800a8f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2280      	movs	r2, #128	; 0x80
 800a8ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	370c      	adds	r7, #12
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bc80      	pop	{r7}
 800a8fa:	4770      	bx	lr

0800a8fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bc80      	pop	{r7}
 800a90e:	4770      	bx	lr

0800a910 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	bc80      	pop	{r7}
 800a922:	4770      	bx	lr

0800a924 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a932:	b29b      	uxth	r3, r3
 800a934:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a936:	68fb      	ldr	r3, [r7, #12]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bc80      	pop	{r7}
 800a940:	4770      	bx	lr

0800a942 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a942:	b480      	push	{r7}
 800a944:	b083      	sub	sp, #12
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	bc80      	pop	{r7}
 800a956:	4770      	bx	lr

0800a958 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a958:	b480      	push	{r7}
 800a95a:	b08d      	sub	sp, #52	; 0x34
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	4611      	mov	r1, r2
 800a964:	461a      	mov	r2, r3
 800a966:	460b      	mov	r3, r1
 800a968:	80fb      	strh	r3, [r7, #6]
 800a96a:	4613      	mov	r3, r2
 800a96c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a96e:	88bb      	ldrh	r3, [r7, #4]
 800a970:	3301      	adds	r3, #1
 800a972:	085b      	lsrs	r3, r3, #1
 800a974:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a97e:	88fb      	ldrh	r3, [r7, #6]
 800a980:	005a      	lsls	r2, r3, #1
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	4413      	add	r3, r2
 800a986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a98c:	6a3b      	ldr	r3, [r7, #32]
 800a98e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a990:	e01e      	b.n	800a9d0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	3301      	adds	r3, #1
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	021b      	lsls	r3, r3, #8
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ba:	3302      	adds	r3, #2
 800a9bc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	3302      	adds	r3, #2
 800a9c2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1dd      	bne.n	800a992 <USB_WritePMA+0x3a>
  }
}
 800a9d6:	bf00      	nop
 800a9d8:	bf00      	nop
 800a9da:	3734      	adds	r7, #52	; 0x34
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bc80      	pop	{r7}
 800a9e0:	4770      	bx	lr

0800a9e2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b08b      	sub	sp, #44	; 0x2c
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	80fb      	strh	r3, [r7, #6]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a9f8:	88bb      	ldrh	r3, [r7, #4]
 800a9fa:	085b      	lsrs	r3, r3, #1
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aa08:	88fb      	ldrh	r3, [r7, #6]
 800aa0a:	005a      	lsls	r2, r3, #1
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	4413      	add	r3, r2
 800aa10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa14:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	627b      	str	r3, [r7, #36]	; 0x24
 800aa1a:	e01b      	b.n	800aa54 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	881b      	ldrh	r3, [r3, #0]
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	3302      	adds	r3, #2
 800aa28:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	b2da      	uxtb	r2, r3
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	3301      	adds	r3, #1
 800aa36:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	0a1b      	lsrs	r3, r3, #8
 800aa3c:	b2da      	uxtb	r2, r3
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	3301      	adds	r3, #1
 800aa46:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800aa48:	6a3b      	ldr	r3, [r7, #32]
 800aa4a:	3302      	adds	r3, #2
 800aa4c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	3b01      	subs	r3, #1
 800aa52:	627b      	str	r3, [r7, #36]	; 0x24
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1e0      	bne.n	800aa1c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800aa5a:	88bb      	ldrh	r3, [r7, #4]
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d007      	beq.n	800aa76 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800aa66:	6a3b      	ldr	r3, [r7, #32]
 800aa68:	881b      	ldrh	r3, [r3, #0]
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	701a      	strb	r2, [r3, #0]
  }
}
 800aa76:	bf00      	nop
 800aa78:	372c      	adds	r7, #44	; 0x2c
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bc80      	pop	{r7}
 800aa7e:	4770      	bx	lr

0800aa80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	7c1b      	ldrb	r3, [r3, #16]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d115      	bne.n	800aac4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	2181      	movs	r1, #129	; 0x81
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f001 fea2 	bl	800c7ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aaac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aab0:	2202      	movs	r2, #2
 800aab2:	2101      	movs	r1, #1
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 fe98 	bl	800c7ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800aac2:	e012      	b.n	800aaea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aac4:	2340      	movs	r3, #64	; 0x40
 800aac6:	2202      	movs	r2, #2
 800aac8:	2181      	movs	r1, #129	; 0x81
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f001 fe8d 	bl	800c7ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aad6:	2340      	movs	r3, #64	; 0x40
 800aad8:	2202      	movs	r2, #2
 800aada:	2101      	movs	r1, #1
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 fe84 	bl	800c7ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aaea:	2308      	movs	r3, #8
 800aaec:	2203      	movs	r2, #3
 800aaee:	2182      	movs	r1, #130	; 0x82
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f001 fe7a 	bl	800c7ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aafc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ab00:	f001 ff9a 	bl	800ca38 <USBD_static_malloc>
 800ab04:	4602      	mov	r2, r0
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d102      	bne.n	800ab1c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800ab16:	2301      	movs	r3, #1
 800ab18:	73fb      	strb	r3, [r7, #15]
 800ab1a:	e026      	b.n	800ab6a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab22:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	7c1b      	ldrb	r3, [r3, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d109      	bne.n	800ab5a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab50:	2101      	movs	r1, #1
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f001 ff3a 	bl	800c9cc <USBD_LL_PrepareReceive>
 800ab58:	e007      	b.n	800ab6a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab60:	2340      	movs	r3, #64	; 0x40
 800ab62:	2101      	movs	r1, #1
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f001 ff31 	bl	800c9cc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ab84:	2181      	movs	r1, #129	; 0x81
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f001 fe55 	bl	800c836 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ab92:	2101      	movs	r1, #1
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 fe4e 	bl	800c836 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aba2:	2182      	movs	r1, #130	; 0x82
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f001 fe46 	bl	800c836 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00e      	beq.n	800abd8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abca:	4618      	mov	r0, r3
 800abcc:	f001 ff40 	bl	800ca50 <USBD_static_free>
    pdev->pClassData = NULL;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b086      	sub	sp, #24
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800abf8:	2300      	movs	r3, #0
 800abfa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d039      	beq.n	800ac80 <USBD_CDC_Setup+0x9e>
 800ac0c:	2b20      	cmp	r3, #32
 800ac0e:	d17f      	bne.n	800ad10 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	88db      	ldrh	r3, [r3, #6]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d029      	beq.n	800ac6c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	b25b      	sxtb	r3, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	da11      	bge.n	800ac46 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	683a      	ldr	r2, [r7, #0]
 800ac2c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800ac2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	88d2      	ldrh	r2, [r2, #6]
 800ac34:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ac36:	6939      	ldr	r1, [r7, #16]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	88db      	ldrh	r3, [r3, #6]
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f001 fa09 	bl	800c056 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800ac44:	e06b      	b.n	800ad1e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	785a      	ldrb	r2, [r3, #1]
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	88db      	ldrh	r3, [r3, #6]
 800ac54:	b2da      	uxtb	r2, r3
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ac5c:	6939      	ldr	r1, [r7, #16]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	88db      	ldrh	r3, [r3, #6]
 800ac62:	461a      	mov	r2, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f001 fa24 	bl	800c0b2 <USBD_CtlPrepareRx>
      break;
 800ac6a:	e058      	b.n	800ad1e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	683a      	ldr	r2, [r7, #0]
 800ac76:	7850      	ldrb	r0, [r2, #1]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	4798      	blx	r3
      break;
 800ac7e:	e04e      	b.n	800ad1e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	785b      	ldrb	r3, [r3, #1]
 800ac84:	2b0b      	cmp	r3, #11
 800ac86:	d02e      	beq.n	800ace6 <USBD_CDC_Setup+0x104>
 800ac88:	2b0b      	cmp	r3, #11
 800ac8a:	dc38      	bgt.n	800acfe <USBD_CDC_Setup+0x11c>
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <USBD_CDC_Setup+0xb4>
 800ac90:	2b0a      	cmp	r3, #10
 800ac92:	d014      	beq.n	800acbe <USBD_CDC_Setup+0xdc>
 800ac94:	e033      	b.n	800acfe <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac9c:	2b03      	cmp	r3, #3
 800ac9e:	d107      	bne.n	800acb0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800aca0:	f107 030c 	add.w	r3, r7, #12
 800aca4:	2202      	movs	r2, #2
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f001 f9d4 	bl	800c056 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800acae:	e02e      	b.n	800ad0e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 f965 	bl	800bf82 <USBD_CtlError>
            ret = USBD_FAIL;
 800acb8:	2302      	movs	r3, #2
 800acba:	75fb      	strb	r3, [r7, #23]
          break;
 800acbc:	e027      	b.n	800ad0e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acc4:	2b03      	cmp	r3, #3
 800acc6:	d107      	bne.n	800acd8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800acc8:	f107 030f 	add.w	r3, r7, #15
 800accc:	2201      	movs	r2, #1
 800acce:	4619      	mov	r1, r3
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f001 f9c0 	bl	800c056 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800acd6:	e01a      	b.n	800ad0e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f001 f951 	bl	800bf82 <USBD_CtlError>
            ret = USBD_FAIL;
 800ace0:	2302      	movs	r3, #2
 800ace2:	75fb      	strb	r3, [r7, #23]
          break;
 800ace4:	e013      	b.n	800ad0e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acec:	2b03      	cmp	r3, #3
 800acee:	d00d      	beq.n	800ad0c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f001 f945 	bl	800bf82 <USBD_CtlError>
            ret = USBD_FAIL;
 800acf8:	2302      	movs	r3, #2
 800acfa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800acfc:	e006      	b.n	800ad0c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f001 f93e 	bl	800bf82 <USBD_CtlError>
          ret = USBD_FAIL;
 800ad06:	2302      	movs	r3, #2
 800ad08:	75fb      	strb	r3, [r7, #23]
          break;
 800ad0a:	e000      	b.n	800ad0e <USBD_CDC_Setup+0x12c>
          break;
 800ad0c:	bf00      	nop
      }
      break;
 800ad0e:	e006      	b.n	800ad1e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f001 f935 	bl	800bf82 <USBD_CtlError>
      ret = USBD_FAIL;
 800ad18:	2302      	movs	r3, #2
 800ad1a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad1c:	bf00      	nop
  }

  return ret;
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad3a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad42:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d03a      	beq.n	800adc4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ad4e:	78fa      	ldrb	r2, [r7, #3]
 800ad50:	6879      	ldr	r1, [r7, #4]
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	440b      	add	r3, r1
 800ad5c:	331c      	adds	r3, #28
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d029      	beq.n	800adb8 <USBD_CDC_DataIn+0x90>
 800ad64:	78fa      	ldrb	r2, [r7, #3]
 800ad66:	6879      	ldr	r1, [r7, #4]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	4413      	add	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	440b      	add	r3, r1
 800ad72:	331c      	adds	r3, #28
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	78f9      	ldrb	r1, [r7, #3]
 800ad78:	68b8      	ldr	r0, [r7, #8]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	440b      	add	r3, r1
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	4403      	add	r3, r0
 800ad84:	3338      	adds	r3, #56	; 0x38
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad8c:	fb01 f303 	mul.w	r3, r1, r3
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d110      	bne.n	800adb8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ad96:	78fa      	ldrb	r2, [r7, #3]
 800ad98:	6879      	ldr	r1, [r7, #4]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	4413      	add	r3, r2
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	440b      	add	r3, r1
 800ada4:	331c      	adds	r3, #28
 800ada6:	2200      	movs	r2, #0
 800ada8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800adaa:	78f9      	ldrb	r1, [r7, #3]
 800adac:	2300      	movs	r3, #0
 800adae:	2200      	movs	r2, #0
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f001 fde8 	bl	800c986 <USBD_LL_Transmit>
 800adb6:	e003      	b.n	800adc0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	e000      	b.n	800adc6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800adc4:	2302      	movs	r3, #2
  }
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b084      	sub	sp, #16
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	460b      	mov	r3, r1
 800add8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ade2:	78fb      	ldrb	r3, [r7, #3]
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f001 fe13 	bl	800ca12 <USBD_LL_GetRxDataSize>
 800adec:	4602      	mov	r2, r0
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00d      	beq.n	800ae1a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ae12:	4611      	mov	r1, r2
 800ae14:	4798      	blx	r3

    return USBD_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	e000      	b.n	800ae1c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ae1a:	2302      	movs	r3, #2
  }
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae32:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d015      	beq.n	800ae6a <USBD_CDC_EP0_RxReady+0x46>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ae44:	2bff      	cmp	r3, #255	; 0xff
 800ae46:	d010      	beq.n	800ae6a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ae56:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae5e:	b292      	uxth	r2, r2
 800ae60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	22ff      	movs	r2, #255	; 0xff
 800ae66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2243      	movs	r2, #67	; 0x43
 800ae80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ae82:	4b03      	ldr	r3, [pc, #12]	; (800ae90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bc80      	pop	{r7}
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	20000098 	.word	0x20000098

0800ae94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2243      	movs	r2, #67	; 0x43
 800aea0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800aea2:	4b03      	ldr	r3, [pc, #12]	; (800aeb0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bc80      	pop	{r7}
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	20000054 	.word	0x20000054

0800aeb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2243      	movs	r2, #67	; 0x43
 800aec0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800aec2:	4b03      	ldr	r3, [pc, #12]	; (800aed0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bc80      	pop	{r7}
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	200000dc 	.word	0x200000dc

0800aed4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	220a      	movs	r2, #10
 800aee0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800aee2:	4b03      	ldr	r3, [pc, #12]	; (800aef0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bc80      	pop	{r7}
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	20000010 	.word	0x20000010

0800aef4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800aefe:	2302      	movs	r3, #2
 800af00:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d005      	beq.n	800af14 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800af14:	7bfb      	ldrb	r3, [r7, #15]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bc80      	pop	{r7}
 800af1e:	4770      	bx	lr

0800af20 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800af20:	b480      	push	{r7}
 800af22:	b087      	sub	sp, #28
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	4613      	mov	r3, r2
 800af2c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800af3e:	88fa      	ldrh	r2, [r7, #6]
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	371c      	adds	r7, #28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bc80      	pop	{r7}
 800af50:	4770      	bx	lr

0800af52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800af52:	b480      	push	{r7}
 800af54:	b085      	sub	sp, #20
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af62:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	bc80      	pop	{r7}
 800af76:	4770      	bx	lr

0800af78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d01c      	beq.n	800afcc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d115      	bne.n	800afc8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800afba:	b29b      	uxth	r3, r3
 800afbc:	2181      	movs	r1, #129	; 0x81
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f001 fce1 	bl	800c986 <USBD_LL_Transmit>

      return USBD_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	e002      	b.n	800afce <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800afc8:	2301      	movs	r3, #1
 800afca:	e000      	b.n	800afce <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800afcc:	2302      	movs	r3, #2
  }
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b084      	sub	sp, #16
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afe4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afec:	2b00      	cmp	r3, #0
 800afee:	d017      	beq.n	800b020 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	7c1b      	ldrb	r3, [r3, #16]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d109      	bne.n	800b00c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800affe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b002:	2101      	movs	r1, #1
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f001 fce1 	bl	800c9cc <USBD_LL_PrepareReceive>
 800b00a:	e007      	b.n	800b01c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b012:	2340      	movs	r3, #64	; 0x40
 800b014:	2101      	movs	r1, #1
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f001 fcd8 	bl	800c9cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	e000      	b.n	800b022 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b020:	2302      	movs	r3, #2
  }
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	60f8      	str	r0, [r7, #12]
 800b032:	60b9      	str	r1, [r7, #8]
 800b034:	4613      	mov	r3, r2
 800b036:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b03e:	2302      	movs	r3, #2
 800b040:	e01a      	b.n	800b078 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d003      	beq.n	800b062 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2201      	movs	r2, #1
 800b066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	79fa      	ldrb	r2, [r7, #7]
 800b06e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f001 fb45 	bl	800c700 <USBD_LL_Init>

  return USBD_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d006      	beq.n	800b0a2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	73fb      	strb	r3, [r7, #15]
 800b0a0:	e001      	b.n	800b0a6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b0a2:	2302      	movs	r3, #2
 800b0a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bc80      	pop	{r7}
 800b0b0:	4770      	bx	lr

0800b0b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f001 fb7a 	bl	800c7b4 <USBD_LL_Start>

  return USBD_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3708      	adds	r7, #8
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b0ca:	b480      	push	{r7}
 800b0cc:	b083      	sub	sp, #12
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bc80      	pop	{r7}
 800b0dc:	4770      	bx	lr

0800b0de <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00c      	beq.n	800b112 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	78fa      	ldrb	r2, [r7, #3]
 800b102:	4611      	mov	r1, r2
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	4798      	blx	r3
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b112:	7bfb      	ldrb	r3, [r7, #15]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	78fa      	ldrb	r2, [r7, #3]
 800b132:	4611      	mov	r1, r2
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	4798      	blx	r3

  return USBD_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b082      	sub	sp, #8
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fed8 	bl	800bf0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b168:	461a      	mov	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b176:	f003 031f 	and.w	r3, r3, #31
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d016      	beq.n	800b1ac <USBD_LL_SetupStage+0x6a>
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d81c      	bhi.n	800b1bc <USBD_LL_SetupStage+0x7a>
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <USBD_LL_SetupStage+0x4a>
 800b186:	2b01      	cmp	r3, #1
 800b188:	d008      	beq.n	800b19c <USBD_LL_SetupStage+0x5a>
 800b18a:	e017      	b.n	800b1bc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f9cb 	bl	800b530 <USBD_StdDevReq>
      break;
 800b19a:	e01a      	b.n	800b1d2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fa2d 	bl	800b604 <USBD_StdItfReq>
      break;
 800b1aa:	e012      	b.n	800b1d2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fa6d 	bl	800b694 <USBD_StdEPReq>
      break;
 800b1ba:	e00a      	b.n	800b1d2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b1c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f001 fb52 	bl	800c874 <USBD_LL_StallEP>
      break;
 800b1d0:	bf00      	nop
  }

  return USBD_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b086      	sub	sp, #24
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b1ea:	7afb      	ldrb	r3, [r7, #11]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d14b      	bne.n	800b288 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b1f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	d134      	bne.n	800b26c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	68da      	ldr	r2, [r3, #12]
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d919      	bls.n	800b242 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	68da      	ldr	r2, [r3, #12]
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	1ad2      	subs	r2, r2, r3
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	68da      	ldr	r2, [r3, #12]
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b224:	429a      	cmp	r2, r3
 800b226:	d203      	bcs.n	800b230 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	e002      	b.n	800b236 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b234:	b29b      	uxth	r3, r3
 800b236:	461a      	mov	r2, r3
 800b238:	6879      	ldr	r1, [r7, #4]
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f000 ff57 	bl	800c0ee <USBD_CtlContinueRx>
 800b240:	e038      	b.n	800b2b4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00a      	beq.n	800b264 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b254:	2b03      	cmp	r3, #3
 800b256:	d105      	bne.n	800b264 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f000 ff54 	bl	800c112 <USBD_CtlSendStatus>
 800b26a:	e023      	b.n	800b2b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b272:	2b05      	cmp	r3, #5
 800b274:	d11e      	bne.n	800b2b4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b27e:	2100      	movs	r1, #0
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f001 faf7 	bl	800c874 <USBD_LL_StallEP>
 800b286:	e015      	b.n	800b2b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00d      	beq.n	800b2b0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	d108      	bne.n	800b2b0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	7afa      	ldrb	r2, [r7, #11]
 800b2a8:	4611      	mov	r1, r2
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	4798      	blx	r3
 800b2ae:	e001      	b.n	800b2b4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	e000      	b.n	800b2b6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b086      	sub	sp, #24
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	60f8      	str	r0, [r7, #12]
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	607a      	str	r2, [r7, #4]
 800b2ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b2cc:	7afb      	ldrb	r3, [r7, #11]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d17f      	bne.n	800b3d2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3314      	adds	r3, #20
 800b2d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d15c      	bne.n	800b39c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d915      	bls.n	800b31a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	68da      	ldr	r2, [r3, #12]
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	1ad2      	subs	r2, r2, r3
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	b29b      	uxth	r3, r3
 800b302:	461a      	mov	r2, r3
 800b304:	6879      	ldr	r1, [r7, #4]
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f000 fec1 	bl	800c08e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b30c:	2300      	movs	r3, #0
 800b30e:	2200      	movs	r2, #0
 800b310:	2100      	movs	r1, #0
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f001 fb5a 	bl	800c9cc <USBD_LL_PrepareReceive>
 800b318:	e04e      	b.n	800b3b8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	6912      	ldr	r2, [r2, #16]
 800b322:	fbb3 f1f2 	udiv	r1, r3, r2
 800b326:	fb01 f202 	mul.w	r2, r1, r2
 800b32a:	1a9b      	subs	r3, r3, r2
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d11c      	bne.n	800b36a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	689a      	ldr	r2, [r3, #8]
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b338:	429a      	cmp	r2, r3
 800b33a:	d316      	bcc.n	800b36a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	689a      	ldr	r2, [r3, #8]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b346:	429a      	cmp	r2, r3
 800b348:	d20f      	bcs.n	800b36a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b34a:	2200      	movs	r2, #0
 800b34c:	2100      	movs	r1, #0
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	f000 fe9d 	bl	800c08e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b35c:	2300      	movs	r3, #0
 800b35e:	2200      	movs	r2, #0
 800b360:	2100      	movs	r1, #0
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f001 fb32 	bl	800c9cc <USBD_LL_PrepareReceive>
 800b368:	e026      	b.n	800b3b8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00a      	beq.n	800b38c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	d105      	bne.n	800b38c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b38c:	2180      	movs	r1, #128	; 0x80
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f001 fa70 	bl	800c874 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 fecf 	bl	800c138 <USBD_CtlReceiveStatus>
 800b39a:	e00d      	b.n	800b3b8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3a2:	2b04      	cmp	r3, #4
 800b3a4:	d004      	beq.n	800b3b0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d103      	bne.n	800b3b8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b3b0:	2180      	movs	r1, #128	; 0x80
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f001 fa5e 	bl	800c874 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d11d      	bne.n	800b3fe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f7ff fe81 	bl	800b0ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b3d0:	e015      	b.n	800b3fe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00d      	beq.n	800b3fa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b3e4:	2b03      	cmp	r3, #3
 800b3e6:	d108      	bne.n	800b3fa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	7afa      	ldrb	r2, [r7, #11]
 800b3f2:	4611      	mov	r1, r2
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	4798      	blx	r3
 800b3f8:	e001      	b.n	800b3fe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	e000      	b.n	800b400 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b410:	2340      	movs	r3, #64	; 0x40
 800b412:	2200      	movs	r2, #0
 800b414:	2100      	movs	r1, #0
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 f9e7 	bl	800c7ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2240      	movs	r2, #64	; 0x40
 800b428:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b42c:	2340      	movs	r3, #64	; 0x40
 800b42e:	2200      	movs	r2, #0
 800b430:	2180      	movs	r1, #128	; 0x80
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f001 f9d9 	bl	800c7ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2240      	movs	r2, #64	; 0x40
 800b442:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d009      	beq.n	800b480 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6852      	ldr	r2, [r2, #4]
 800b478:	b2d2      	uxtb	r2, r2
 800b47a:	4611      	mov	r1, r2
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	4798      	blx	r3
  }

  return USBD_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b083      	sub	sp, #12
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	460b      	mov	r3, r1
 800b494:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	78fa      	ldrb	r2, [r7, #3]
 800b49a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	370c      	adds	r7, #12
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bc80      	pop	{r7}
 800b4a6:	4770      	bx	lr

0800b4a8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2204      	movs	r2, #4
 800b4c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	370c      	adds	r7, #12
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bc80      	pop	{r7}
 800b4ce:	4770      	bx	lr

0800b4d0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4de:	2b04      	cmp	r3, #4
 800b4e0:	d105      	bne.n	800b4ee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bc80      	pop	{r7}
 800b4f8:	4770      	bx	lr

0800b4fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b082      	sub	sp, #8
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d10b      	bne.n	800b524 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b512:	69db      	ldr	r3, [r3, #28]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d005      	beq.n	800b524 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b51e:	69db      	ldr	r3, [r3, #28]
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
	...

0800b530 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b546:	2b40      	cmp	r3, #64	; 0x40
 800b548:	d005      	beq.n	800b556 <USBD_StdDevReq+0x26>
 800b54a:	2b40      	cmp	r3, #64	; 0x40
 800b54c:	d84f      	bhi.n	800b5ee <USBD_StdDevReq+0xbe>
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d009      	beq.n	800b566 <USBD_StdDevReq+0x36>
 800b552:	2b20      	cmp	r3, #32
 800b554:	d14b      	bne.n	800b5ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	4798      	blx	r3
      break;
 800b564:	e048      	b.n	800b5f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	785b      	ldrb	r3, [r3, #1]
 800b56a:	2b09      	cmp	r3, #9
 800b56c:	d839      	bhi.n	800b5e2 <USBD_StdDevReq+0xb2>
 800b56e:	a201      	add	r2, pc, #4	; (adr r2, 800b574 <USBD_StdDevReq+0x44>)
 800b570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b574:	0800b5c5 	.word	0x0800b5c5
 800b578:	0800b5d9 	.word	0x0800b5d9
 800b57c:	0800b5e3 	.word	0x0800b5e3
 800b580:	0800b5cf 	.word	0x0800b5cf
 800b584:	0800b5e3 	.word	0x0800b5e3
 800b588:	0800b5a7 	.word	0x0800b5a7
 800b58c:	0800b59d 	.word	0x0800b59d
 800b590:	0800b5e3 	.word	0x0800b5e3
 800b594:	0800b5bb 	.word	0x0800b5bb
 800b598:	0800b5b1 	.word	0x0800b5b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f9dc 	bl	800b95c <USBD_GetDescriptor>
          break;
 800b5a4:	e022      	b.n	800b5ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fb3f 	bl	800bc2c <USBD_SetAddress>
          break;
 800b5ae:	e01d      	b.n	800b5ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b5b0:	6839      	ldr	r1, [r7, #0]
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fb7e 	bl	800bcb4 <USBD_SetConfig>
          break;
 800b5b8:	e018      	b.n	800b5ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b5ba:	6839      	ldr	r1, [r7, #0]
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fc07 	bl	800bdd0 <USBD_GetConfig>
          break;
 800b5c2:	e013      	b.n	800b5ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fc37 	bl	800be3a <USBD_GetStatus>
          break;
 800b5cc:	e00e      	b.n	800b5ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b5ce:	6839      	ldr	r1, [r7, #0]
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fc65 	bl	800bea0 <USBD_SetFeature>
          break;
 800b5d6:	e009      	b.n	800b5ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fc74 	bl	800bec8 <USBD_ClrFeature>
          break;
 800b5e0:	e004      	b.n	800b5ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fccc 	bl	800bf82 <USBD_CtlError>
          break;
 800b5ea:	bf00      	nop
      }
      break;
 800b5ec:	e004      	b.n	800b5f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fcc6 	bl	800bf82 <USBD_CtlError>
      break;
 800b5f6:	bf00      	nop
  }

  return ret;
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop

0800b604 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b61a:	2b40      	cmp	r3, #64	; 0x40
 800b61c:	d005      	beq.n	800b62a <USBD_StdItfReq+0x26>
 800b61e:	2b40      	cmp	r3, #64	; 0x40
 800b620:	d82e      	bhi.n	800b680 <USBD_StdItfReq+0x7c>
 800b622:	2b00      	cmp	r3, #0
 800b624:	d001      	beq.n	800b62a <USBD_StdItfReq+0x26>
 800b626:	2b20      	cmp	r3, #32
 800b628:	d12a      	bne.n	800b680 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b630:	3b01      	subs	r3, #1
 800b632:	2b02      	cmp	r3, #2
 800b634:	d81d      	bhi.n	800b672 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	889b      	ldrh	r3, [r3, #4]
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d813      	bhi.n	800b668 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	4798      	blx	r3
 800b64e:	4603      	mov	r3, r0
 800b650:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	88db      	ldrh	r3, [r3, #6]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d110      	bne.n	800b67c <USBD_StdItfReq+0x78>
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10d      	bne.n	800b67c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 fd56 	bl	800c112 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b666:	e009      	b.n	800b67c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fc89 	bl	800bf82 <USBD_CtlError>
          break;
 800b670:	e004      	b.n	800b67c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fc84 	bl	800bf82 <USBD_CtlError>
          break;
 800b67a:	e000      	b.n	800b67e <USBD_StdItfReq+0x7a>
          break;
 800b67c:	bf00      	nop
      }
      break;
 800b67e:	e004      	b.n	800b68a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fc7d 	bl	800bf82 <USBD_CtlError>
      break;
 800b688:	bf00      	nop
  }

  return USBD_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	889b      	ldrh	r3, [r3, #4]
 800b6a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6b0:	2b40      	cmp	r3, #64	; 0x40
 800b6b2:	d007      	beq.n	800b6c4 <USBD_StdEPReq+0x30>
 800b6b4:	2b40      	cmp	r3, #64	; 0x40
 800b6b6:	f200 8146 	bhi.w	800b946 <USBD_StdEPReq+0x2b2>
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00a      	beq.n	800b6d4 <USBD_StdEPReq+0x40>
 800b6be:	2b20      	cmp	r3, #32
 800b6c0:	f040 8141 	bne.w	800b946 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	4798      	blx	r3
      break;
 800b6d2:	e13d      	b.n	800b950 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6dc:	2b20      	cmp	r3, #32
 800b6de:	d10a      	bne.n	800b6f6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	4798      	blx	r3
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b6f2:	7bfb      	ldrb	r3, [r7, #15]
 800b6f4:	e12d      	b.n	800b952 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	785b      	ldrb	r3, [r3, #1]
 800b6fa:	2b03      	cmp	r3, #3
 800b6fc:	d007      	beq.n	800b70e <USBD_StdEPReq+0x7a>
 800b6fe:	2b03      	cmp	r3, #3
 800b700:	f300 811b 	bgt.w	800b93a <USBD_StdEPReq+0x2a6>
 800b704:	2b00      	cmp	r3, #0
 800b706:	d072      	beq.n	800b7ee <USBD_StdEPReq+0x15a>
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d03a      	beq.n	800b782 <USBD_StdEPReq+0xee>
 800b70c:	e115      	b.n	800b93a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b714:	2b02      	cmp	r3, #2
 800b716:	d002      	beq.n	800b71e <USBD_StdEPReq+0x8a>
 800b718:	2b03      	cmp	r3, #3
 800b71a:	d015      	beq.n	800b748 <USBD_StdEPReq+0xb4>
 800b71c:	e02b      	b.n	800b776 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b71e:	7bbb      	ldrb	r3, [r7, #14]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00c      	beq.n	800b73e <USBD_StdEPReq+0xaa>
 800b724:	7bbb      	ldrb	r3, [r7, #14]
 800b726:	2b80      	cmp	r3, #128	; 0x80
 800b728:	d009      	beq.n	800b73e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b72a:	7bbb      	ldrb	r3, [r7, #14]
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f001 f8a0 	bl	800c874 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b734:	2180      	movs	r1, #128	; 0x80
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f001 f89c 	bl	800c874 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b73c:	e020      	b.n	800b780 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fc1e 	bl	800bf82 <USBD_CtlError>
              break;
 800b746:	e01b      	b.n	800b780 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	885b      	ldrh	r3, [r3, #2]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10e      	bne.n	800b76e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b750:	7bbb      	ldrb	r3, [r7, #14]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00b      	beq.n	800b76e <USBD_StdEPReq+0xda>
 800b756:	7bbb      	ldrb	r3, [r7, #14]
 800b758:	2b80      	cmp	r3, #128	; 0x80
 800b75a:	d008      	beq.n	800b76e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	88db      	ldrh	r3, [r3, #6]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d104      	bne.n	800b76e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b764:	7bbb      	ldrb	r3, [r7, #14]
 800b766:	4619      	mov	r1, r3
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f001 f883 	bl	800c874 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fccf 	bl	800c112 <USBD_CtlSendStatus>

              break;
 800b774:	e004      	b.n	800b780 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fc02 	bl	800bf82 <USBD_CtlError>
              break;
 800b77e:	bf00      	nop
          }
          break;
 800b780:	e0e0      	b.n	800b944 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d002      	beq.n	800b792 <USBD_StdEPReq+0xfe>
 800b78c:	2b03      	cmp	r3, #3
 800b78e:	d015      	beq.n	800b7bc <USBD_StdEPReq+0x128>
 800b790:	e026      	b.n	800b7e0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b792:	7bbb      	ldrb	r3, [r7, #14]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00c      	beq.n	800b7b2 <USBD_StdEPReq+0x11e>
 800b798:	7bbb      	ldrb	r3, [r7, #14]
 800b79a:	2b80      	cmp	r3, #128	; 0x80
 800b79c:	d009      	beq.n	800b7b2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b79e:	7bbb      	ldrb	r3, [r7, #14]
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f001 f866 	bl	800c874 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b7a8:	2180      	movs	r1, #128	; 0x80
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f001 f862 	bl	800c874 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b7b0:	e01c      	b.n	800b7ec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fbe4 	bl	800bf82 <USBD_CtlError>
              break;
 800b7ba:	e017      	b.n	800b7ec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	885b      	ldrh	r3, [r3, #2]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d112      	bne.n	800b7ea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b7c4:	7bbb      	ldrb	r3, [r7, #14]
 800b7c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d004      	beq.n	800b7d8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b7ce:	7bbb      	ldrb	r3, [r7, #14]
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f001 f86d 	bl	800c8b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 fc9a 	bl	800c112 <USBD_CtlSendStatus>
              }
              break;
 800b7de:	e004      	b.n	800b7ea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fbcd 	bl	800bf82 <USBD_CtlError>
              break;
 800b7e8:	e000      	b.n	800b7ec <USBD_StdEPReq+0x158>
              break;
 800b7ea:	bf00      	nop
          }
          break;
 800b7ec:	e0aa      	b.n	800b944 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	d002      	beq.n	800b7fe <USBD_StdEPReq+0x16a>
 800b7f8:	2b03      	cmp	r3, #3
 800b7fa:	d032      	beq.n	800b862 <USBD_StdEPReq+0x1ce>
 800b7fc:	e097      	b.n	800b92e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7fe:	7bbb      	ldrb	r3, [r7, #14]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d007      	beq.n	800b814 <USBD_StdEPReq+0x180>
 800b804:	7bbb      	ldrb	r3, [r7, #14]
 800b806:	2b80      	cmp	r3, #128	; 0x80
 800b808:	d004      	beq.n	800b814 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b80a:	6839      	ldr	r1, [r7, #0]
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 fbb8 	bl	800bf82 <USBD_CtlError>
                break;
 800b812:	e091      	b.n	800b938 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	da0b      	bge.n	800b834 <USBD_StdEPReq+0x1a0>
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
 800b81e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	3310      	adds	r3, #16
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	4413      	add	r3, r2
 800b830:	3304      	adds	r3, #4
 800b832:	e00b      	b.n	800b84c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b834:	7bbb      	ldrb	r3, [r7, #14]
 800b836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b83a:	4613      	mov	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	4413      	add	r3, r2
 800b84a:	3304      	adds	r3, #4
 800b84c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	2200      	movs	r2, #0
 800b852:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	2202      	movs	r2, #2
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fbfb 	bl	800c056 <USBD_CtlSendData>
              break;
 800b860:	e06a      	b.n	800b938 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b866:	2b00      	cmp	r3, #0
 800b868:	da11      	bge.n	800b88e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b86a:	7bbb      	ldrb	r3, [r7, #14]
 800b86c:	f003 020f 	and.w	r2, r3, #15
 800b870:	6879      	ldr	r1, [r7, #4]
 800b872:	4613      	mov	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4413      	add	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	440b      	add	r3, r1
 800b87c:	3318      	adds	r3, #24
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d117      	bne.n	800b8b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b884:	6839      	ldr	r1, [r7, #0]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fb7b 	bl	800bf82 <USBD_CtlError>
                  break;
 800b88c:	e054      	b.n	800b938 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b88e:	7bbb      	ldrb	r3, [r7, #14]
 800b890:	f003 020f 	and.w	r2, r3, #15
 800b894:	6879      	ldr	r1, [r7, #4]
 800b896:	4613      	mov	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4413      	add	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	440b      	add	r3, r1
 800b8a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d104      	bne.n	800b8b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fb68 	bl	800bf82 <USBD_CtlError>
                  break;
 800b8b2:	e041      	b.n	800b938 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	da0b      	bge.n	800b8d4 <USBD_StdEPReq+0x240>
 800b8bc:	7bbb      	ldrb	r3, [r7, #14]
 800b8be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	4413      	add	r3, r2
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	3310      	adds	r3, #16
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	3304      	adds	r3, #4
 800b8d2:	e00b      	b.n	800b8ec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8d4:	7bbb      	ldrb	r3, [r7, #14]
 800b8d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8da:	4613      	mov	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4413      	add	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b8ee:	7bbb      	ldrb	r3, [r7, #14]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <USBD_StdEPReq+0x266>
 800b8f4:	7bbb      	ldrb	r3, [r7, #14]
 800b8f6:	2b80      	cmp	r3, #128	; 0x80
 800b8f8:	d103      	bne.n	800b902 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	601a      	str	r2, [r3, #0]
 800b900:	e00e      	b.n	800b920 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b902:	7bbb      	ldrb	r3, [r7, #14]
 800b904:	4619      	mov	r1, r3
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fff2 	bl	800c8f0 <USBD_LL_IsStallEP>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2201      	movs	r2, #1
 800b916:	601a      	str	r2, [r3, #0]
 800b918:	e002      	b.n	800b920 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	2200      	movs	r2, #0
 800b91e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	2202      	movs	r2, #2
 800b924:	4619      	mov	r1, r3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 fb95 	bl	800c056 <USBD_CtlSendData>
              break;
 800b92c:	e004      	b.n	800b938 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b92e:	6839      	ldr	r1, [r7, #0]
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fb26 	bl	800bf82 <USBD_CtlError>
              break;
 800b936:	bf00      	nop
          }
          break;
 800b938:	e004      	b.n	800b944 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fb20 	bl	800bf82 <USBD_CtlError>
          break;
 800b942:	bf00      	nop
      }
      break;
 800b944:	e004      	b.n	800b950 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fb1a 	bl	800bf82 <USBD_CtlError>
      break;
 800b94e:	bf00      	nop
  }

  return ret;
 800b950:	7bfb      	ldrb	r3, [r7, #15]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
	...

0800b95c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b966:	2300      	movs	r3, #0
 800b968:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b96a:	2300      	movs	r3, #0
 800b96c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b96e:	2300      	movs	r3, #0
 800b970:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	885b      	ldrh	r3, [r3, #2]
 800b976:	0a1b      	lsrs	r3, r3, #8
 800b978:	b29b      	uxth	r3, r3
 800b97a:	3b01      	subs	r3, #1
 800b97c:	2b06      	cmp	r3, #6
 800b97e:	f200 8128 	bhi.w	800bbd2 <USBD_GetDescriptor+0x276>
 800b982:	a201      	add	r2, pc, #4	; (adr r2, 800b988 <USBD_GetDescriptor+0x2c>)
 800b984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b988:	0800b9a5 	.word	0x0800b9a5
 800b98c:	0800b9bd 	.word	0x0800b9bd
 800b990:	0800b9fd 	.word	0x0800b9fd
 800b994:	0800bbd3 	.word	0x0800bbd3
 800b998:	0800bbd3 	.word	0x0800bbd3
 800b99c:	0800bb73 	.word	0x0800bb73
 800b9a0:	0800bb9f 	.word	0x0800bb9f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	7c12      	ldrb	r2, [r2, #16]
 800b9b0:	f107 0108 	add.w	r1, r7, #8
 800b9b4:	4610      	mov	r0, r2
 800b9b6:	4798      	blx	r3
 800b9b8:	60f8      	str	r0, [r7, #12]
      break;
 800b9ba:	e112      	b.n	800bbe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	7c1b      	ldrb	r3, [r3, #16]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10d      	bne.n	800b9e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9cc:	f107 0208 	add.w	r2, r7, #8
 800b9d0:	4610      	mov	r0, r2
 800b9d2:	4798      	blx	r3
 800b9d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	2202      	movs	r2, #2
 800b9dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b9de:	e100      	b.n	800bbe2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e8:	f107 0208 	add.w	r2, r7, #8
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	4798      	blx	r3
 800b9f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	701a      	strb	r2, [r3, #0]
      break;
 800b9fa:	e0f2      	b.n	800bbe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	885b      	ldrh	r3, [r3, #2]
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b05      	cmp	r3, #5
 800ba04:	f200 80ac 	bhi.w	800bb60 <USBD_GetDescriptor+0x204>
 800ba08:	a201      	add	r2, pc, #4	; (adr r2, 800ba10 <USBD_GetDescriptor+0xb4>)
 800ba0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0e:	bf00      	nop
 800ba10:	0800ba29 	.word	0x0800ba29
 800ba14:	0800ba5d 	.word	0x0800ba5d
 800ba18:	0800ba91 	.word	0x0800ba91
 800ba1c:	0800bac5 	.word	0x0800bac5
 800ba20:	0800baf9 	.word	0x0800baf9
 800ba24:	0800bb2d 	.word	0x0800bb2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00b      	beq.n	800ba4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	7c12      	ldrb	r2, [r2, #16]
 800ba40:	f107 0108 	add.w	r1, r7, #8
 800ba44:	4610      	mov	r0, r2
 800ba46:	4798      	blx	r3
 800ba48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba4a:	e091      	b.n	800bb70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fa97 	bl	800bf82 <USBD_CtlError>
            err++;
 800ba54:	7afb      	ldrb	r3, [r7, #11]
 800ba56:	3301      	adds	r3, #1
 800ba58:	72fb      	strb	r3, [r7, #11]
          break;
 800ba5a:	e089      	b.n	800bb70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00b      	beq.n	800ba80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	7c12      	ldrb	r2, [r2, #16]
 800ba74:	f107 0108 	add.w	r1, r7, #8
 800ba78:	4610      	mov	r0, r2
 800ba7a:	4798      	blx	r3
 800ba7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba7e:	e077      	b.n	800bb70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fa7d 	bl	800bf82 <USBD_CtlError>
            err++;
 800ba88:	7afb      	ldrb	r3, [r7, #11]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba8e:	e06f      	b.n	800bb70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00b      	beq.n	800bab4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	7c12      	ldrb	r2, [r2, #16]
 800baa8:	f107 0108 	add.w	r1, r7, #8
 800baac:	4610      	mov	r0, r2
 800baae:	4798      	blx	r3
 800bab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bab2:	e05d      	b.n	800bb70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fa63 	bl	800bf82 <USBD_CtlError>
            err++;
 800babc:	7afb      	ldrb	r3, [r7, #11]
 800babe:	3301      	adds	r3, #1
 800bac0:	72fb      	strb	r3, [r7, #11]
          break;
 800bac2:	e055      	b.n	800bb70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00b      	beq.n	800bae8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	7c12      	ldrb	r2, [r2, #16]
 800badc:	f107 0108 	add.w	r1, r7, #8
 800bae0:	4610      	mov	r0, r2
 800bae2:	4798      	blx	r3
 800bae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bae6:	e043      	b.n	800bb70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fa49 	bl	800bf82 <USBD_CtlError>
            err++;
 800baf0:	7afb      	ldrb	r3, [r7, #11]
 800baf2:	3301      	adds	r3, #1
 800baf4:	72fb      	strb	r3, [r7, #11]
          break;
 800baf6:	e03b      	b.n	800bb70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bafe:	695b      	ldr	r3, [r3, #20]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00b      	beq.n	800bb1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb0a:	695b      	ldr	r3, [r3, #20]
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	7c12      	ldrb	r2, [r2, #16]
 800bb10:	f107 0108 	add.w	r1, r7, #8
 800bb14:	4610      	mov	r0, r2
 800bb16:	4798      	blx	r3
 800bb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb1a:	e029      	b.n	800bb70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fa2f 	bl	800bf82 <USBD_CtlError>
            err++;
 800bb24:	7afb      	ldrb	r3, [r7, #11]
 800bb26:	3301      	adds	r3, #1
 800bb28:	72fb      	strb	r3, [r7, #11]
          break;
 800bb2a:	e021      	b.n	800bb70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00b      	beq.n	800bb50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	7c12      	ldrb	r2, [r2, #16]
 800bb44:	f107 0108 	add.w	r1, r7, #8
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4798      	blx	r3
 800bb4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb4e:	e00f      	b.n	800bb70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 fa15 	bl	800bf82 <USBD_CtlError>
            err++;
 800bb58:	7afb      	ldrb	r3, [r7, #11]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb5e:	e007      	b.n	800bb70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fa0d 	bl	800bf82 <USBD_CtlError>
          err++;
 800bb68:	7afb      	ldrb	r3, [r7, #11]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bb6e:	e038      	b.n	800bbe2 <USBD_GetDescriptor+0x286>
 800bb70:	e037      	b.n	800bbe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	7c1b      	ldrb	r3, [r3, #16]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d109      	bne.n	800bb8e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb82:	f107 0208 	add.w	r2, r7, #8
 800bb86:	4610      	mov	r0, r2
 800bb88:	4798      	blx	r3
 800bb8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb8c:	e029      	b.n	800bbe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f9f6 	bl	800bf82 <USBD_CtlError>
        err++;
 800bb96:	7afb      	ldrb	r3, [r7, #11]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	72fb      	strb	r3, [r7, #11]
      break;
 800bb9c:	e021      	b.n	800bbe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	7c1b      	ldrb	r3, [r3, #16]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10d      	bne.n	800bbc2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbae:	f107 0208 	add.w	r2, r7, #8
 800bbb2:	4610      	mov	r0, r2
 800bbb4:	4798      	blx	r3
 800bbb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	2207      	movs	r2, #7
 800bbbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbc0:	e00f      	b.n	800bbe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bbc2:	6839      	ldr	r1, [r7, #0]
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f9dc 	bl	800bf82 <USBD_CtlError>
        err++;
 800bbca:	7afb      	ldrb	r3, [r7, #11]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	72fb      	strb	r3, [r7, #11]
      break;
 800bbd0:	e007      	b.n	800bbe2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bbd2:	6839      	ldr	r1, [r7, #0]
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f9d4 	bl	800bf82 <USBD_CtlError>
      err++;
 800bbda:	7afb      	ldrb	r3, [r7, #11]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	72fb      	strb	r3, [r7, #11]
      break;
 800bbe0:	bf00      	nop
  }

  if (err != 0U)
 800bbe2:	7afb      	ldrb	r3, [r7, #11]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d11c      	bne.n	800bc22 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bbe8:	893b      	ldrh	r3, [r7, #8]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d011      	beq.n	800bc12 <USBD_GetDescriptor+0x2b6>
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	88db      	ldrh	r3, [r3, #6]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00d      	beq.n	800bc12 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	88da      	ldrh	r2, [r3, #6]
 800bbfa:	893b      	ldrh	r3, [r7, #8]
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	bf28      	it	cs
 800bc00:	4613      	movcs	r3, r2
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bc06:	893b      	ldrh	r3, [r7, #8]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	68f9      	ldr	r1, [r7, #12]
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fa22 	bl	800c056 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	88db      	ldrh	r3, [r3, #6]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d104      	bne.n	800bc24 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 fa79 	bl	800c112 <USBD_CtlSendStatus>
 800bc20:	e000      	b.n	800bc24 <USBD_GetDescriptor+0x2c8>
    return;
 800bc22:	bf00      	nop
    }
  }
}
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop

0800bc2c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	889b      	ldrh	r3, [r3, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d130      	bne.n	800bca0 <USBD_SetAddress+0x74>
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	88db      	ldrh	r3, [r3, #6]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d12c      	bne.n	800bca0 <USBD_SetAddress+0x74>
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	885b      	ldrh	r3, [r3, #2]
 800bc4a:	2b7f      	cmp	r3, #127	; 0x7f
 800bc4c:	d828      	bhi.n	800bca0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	885b      	ldrh	r3, [r3, #2]
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc60:	2b03      	cmp	r3, #3
 800bc62:	d104      	bne.n	800bc6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 f98b 	bl	800bf82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc6c:	e01d      	b.n	800bcaa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	7bfa      	ldrb	r2, [r7, #15]
 800bc72:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 fe64 	bl	800c948 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fa46 	bl	800c112 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d004      	beq.n	800bc96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2202      	movs	r2, #2
 800bc90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc94:	e009      	b.n	800bcaa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc9e:	e004      	b.n	800bcaa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bca0:	6839      	ldr	r1, [r7, #0]
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f96d 	bl	800bf82 <USBD_CtlError>
  }
}
 800bca8:	bf00      	nop
 800bcaa:	bf00      	nop
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
	...

0800bcb4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	885b      	ldrh	r3, [r3, #2]
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	4b41      	ldr	r3, [pc, #260]	; (800bdcc <USBD_SetConfig+0x118>)
 800bcc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bcc8:	4b40      	ldr	r3, [pc, #256]	; (800bdcc <USBD_SetConfig+0x118>)
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d904      	bls.n	800bcda <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 f955 	bl	800bf82 <USBD_CtlError>
 800bcd8:	e075      	b.n	800bdc6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d002      	beq.n	800bcea <USBD_SetConfig+0x36>
 800bce4:	2b03      	cmp	r3, #3
 800bce6:	d023      	beq.n	800bd30 <USBD_SetConfig+0x7c>
 800bce8:	e062      	b.n	800bdb0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bcea:	4b38      	ldr	r3, [pc, #224]	; (800bdcc <USBD_SetConfig+0x118>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d01a      	beq.n	800bd28 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bcf2:	4b36      	ldr	r3, [pc, #216]	; (800bdcc <USBD_SetConfig+0x118>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2203      	movs	r2, #3
 800bd00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bd04:	4b31      	ldr	r3, [pc, #196]	; (800bdcc <USBD_SetConfig+0x118>)
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7ff f9e7 	bl	800b0de <USBD_SetClassConfig>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d104      	bne.n	800bd20 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bd16:	6839      	ldr	r1, [r7, #0]
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 f932 	bl	800bf82 <USBD_CtlError>
            return;
 800bd1e:	e052      	b.n	800bdc6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 f9f6 	bl	800c112 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bd26:	e04e      	b.n	800bdc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 f9f2 	bl	800c112 <USBD_CtlSendStatus>
        break;
 800bd2e:	e04a      	b.n	800bdc6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bd30:	4b26      	ldr	r3, [pc, #152]	; (800bdcc <USBD_SetConfig+0x118>)
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d112      	bne.n	800bd5e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2202      	movs	r2, #2
 800bd3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bd40:	4b22      	ldr	r3, [pc, #136]	; (800bdcc <USBD_SetConfig+0x118>)
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	461a      	mov	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bd4a:	4b20      	ldr	r3, [pc, #128]	; (800bdcc <USBD_SetConfig+0x118>)
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	4619      	mov	r1, r3
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff f9e3 	bl	800b11c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f9db 	bl	800c112 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bd5c:	e033      	b.n	800bdc6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bd5e:	4b1b      	ldr	r3, [pc, #108]	; (800bdcc <USBD_SetConfig+0x118>)
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d01d      	beq.n	800bda8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	4619      	mov	r1, r3
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7ff f9d1 	bl	800b11c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bd7a:	4b14      	ldr	r3, [pc, #80]	; (800bdcc <USBD_SetConfig+0x118>)
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bd84:	4b11      	ldr	r3, [pc, #68]	; (800bdcc <USBD_SetConfig+0x118>)
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	4619      	mov	r1, r3
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff f9a7 	bl	800b0de <USBD_SetClassConfig>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	d104      	bne.n	800bda0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 f8f2 	bl	800bf82 <USBD_CtlError>
            return;
 800bd9e:	e012      	b.n	800bdc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 f9b6 	bl	800c112 <USBD_CtlSendStatus>
        break;
 800bda6:	e00e      	b.n	800bdc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 f9b2 	bl	800c112 <USBD_CtlSendStatus>
        break;
 800bdae:	e00a      	b.n	800bdc6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bdb0:	6839      	ldr	r1, [r7, #0]
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f8e5 	bl	800bf82 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bdb8:	4b04      	ldr	r3, [pc, #16]	; (800bdcc <USBD_SetConfig+0x118>)
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f7ff f9ac 	bl	800b11c <USBD_ClrClassConfig>
        break;
 800bdc4:	bf00      	nop
    }
  }
}
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	200003e8 	.word	0x200003e8

0800bdd0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	88db      	ldrh	r3, [r3, #6]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d004      	beq.n	800bdec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f8cc 	bl	800bf82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bdea:	e022      	b.n	800be32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	dc02      	bgt.n	800bdfc <USBD_GetConfig+0x2c>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	dc03      	bgt.n	800be02 <USBD_GetConfig+0x32>
 800bdfa:	e015      	b.n	800be28 <USBD_GetConfig+0x58>
 800bdfc:	2b03      	cmp	r3, #3
 800bdfe:	d00b      	beq.n	800be18 <USBD_GetConfig+0x48>
 800be00:	e012      	b.n	800be28 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	3308      	adds	r3, #8
 800be0c:	2201      	movs	r2, #1
 800be0e:	4619      	mov	r1, r3
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f920 	bl	800c056 <USBD_CtlSendData>
        break;
 800be16:	e00c      	b.n	800be32 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	3304      	adds	r3, #4
 800be1c:	2201      	movs	r2, #1
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f918 	bl	800c056 <USBD_CtlSendData>
        break;
 800be26:	e004      	b.n	800be32 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f8a9 	bl	800bf82 <USBD_CtlError>
        break;
 800be30:	bf00      	nop
}
 800be32:	bf00      	nop
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b082      	sub	sp, #8
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be4a:	3b01      	subs	r3, #1
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d81e      	bhi.n	800be8e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	88db      	ldrh	r3, [r3, #6]
 800be54:	2b02      	cmp	r3, #2
 800be56:	d004      	beq.n	800be62 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 f891 	bl	800bf82 <USBD_CtlError>
        break;
 800be60:	e01a      	b.n	800be98 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2201      	movs	r2, #1
 800be66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d005      	beq.n	800be7e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	f043 0202 	orr.w	r2, r3, #2
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	330c      	adds	r3, #12
 800be82:	2202      	movs	r2, #2
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f8e5 	bl	800c056 <USBD_CtlSendData>
      break;
 800be8c:	e004      	b.n	800be98 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f876 	bl	800bf82 <USBD_CtlError>
      break;
 800be96:	bf00      	nop
  }
}
 800be98:	bf00      	nop
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	885b      	ldrh	r3, [r3, #2]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d106      	bne.n	800bec0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 f929 	bl	800c112 <USBD_CtlSendStatus>
  }
}
 800bec0:	bf00      	nop
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bed8:	3b01      	subs	r3, #1
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d80b      	bhi.n	800bef6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	885b      	ldrh	r3, [r3, #2]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d10c      	bne.n	800bf00 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 f90f 	bl	800c112 <USBD_CtlSendStatus>
      }
      break;
 800bef4:	e004      	b.n	800bf00 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 f842 	bl	800bf82 <USBD_CtlError>
      break;
 800befe:	e000      	b.n	800bf02 <USBD_ClrFeature+0x3a>
      break;
 800bf00:	bf00      	nop
  }
}
 800bf02:	bf00      	nop
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bf0a:	b480      	push	{r7}
 800bf0c:	b083      	sub	sp, #12
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
 800bf12:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	781a      	ldrb	r2, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	785a      	ldrb	r2, [r3, #1]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	3302      	adds	r3, #2
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	3303      	adds	r3, #3
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	021b      	lsls	r3, r3, #8
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	4413      	add	r3, r2
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	3304      	adds	r3, #4
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	3305      	adds	r3, #5
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	021b      	lsls	r3, r3, #8
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	4413      	add	r3, r2
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	3306      	adds	r3, #6
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	3307      	adds	r3, #7
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	021b      	lsls	r3, r3, #8
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	4413      	add	r3, r2
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	80da      	strh	r2, [r3, #6]

}
 800bf78:	bf00      	nop
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bc80      	pop	{r7}
 800bf80:	4770      	bx	lr

0800bf82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bf8c:	2180      	movs	r1, #128	; 0x80
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 fc70 	bl	800c874 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bf94:	2100      	movs	r1, #0
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fc6c 	bl	800c874 <USBD_LL_StallEP>
}
 800bf9c:	bf00      	nop
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d032      	beq.n	800c020 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f000 f834 	bl	800c028 <USBD_GetLen>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	005b      	lsls	r3, r3, #1
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	75fa      	strb	r2, [r7, #23]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	4413      	add	r3, r2
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	7812      	ldrb	r2, [r2, #0]
 800bfde:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
 800bfe2:	1c5a      	adds	r2, r3, #1
 800bfe4:	75fa      	strb	r2, [r7, #23]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	4413      	add	r3, r2
 800bfec:	2203      	movs	r2, #3
 800bfee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bff0:	e012      	b.n	800c018 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	1c5a      	adds	r2, r3, #1
 800bff6:	60fa      	str	r2, [r7, #12]
 800bff8:	7dfa      	ldrb	r2, [r7, #23]
 800bffa:	1c51      	adds	r1, r2, #1
 800bffc:	75f9      	strb	r1, [r7, #23]
 800bffe:	4611      	mov	r1, r2
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	440a      	add	r2, r1
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c008:	7dfb      	ldrb	r3, [r7, #23]
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	75fa      	strb	r2, [r7, #23]
 800c00e:	461a      	mov	r2, r3
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	4413      	add	r3, r2
 800c014:	2200      	movs	r2, #0
 800c016:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1e8      	bne.n	800bff2 <USBD_GetString+0x4e>
    }
  }
}
 800c020:	bf00      	nop
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c030:	2300      	movs	r3, #0
 800c032:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c034:	e005      	b.n	800c042 <USBD_GetLen+0x1a>
  {
    len++;
 800c036:	7bfb      	ldrb	r3, [r7, #15]
 800c038:	3301      	adds	r3, #1
 800c03a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	3301      	adds	r3, #1
 800c040:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1f5      	bne.n	800c036 <USBD_GetLen+0xe>
  }

  return len;
 800c04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3714      	adds	r7, #20
 800c050:	46bd      	mov	sp, r7
 800c052:	bc80      	pop	{r7}
 800c054:	4770      	bx	lr

0800c056 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b084      	sub	sp, #16
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	60f8      	str	r0, [r7, #12]
 800c05e:	60b9      	str	r1, [r7, #8]
 800c060:	4613      	mov	r3, r2
 800c062:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2202      	movs	r2, #2
 800c068:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c06c:	88fa      	ldrh	r2, [r7, #6]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c072:	88fa      	ldrh	r2, [r7, #6]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c078:	88fb      	ldrh	r3, [r7, #6]
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	2100      	movs	r1, #0
 800c07e:	68f8      	ldr	r0, [r7, #12]
 800c080:	f000 fc81 	bl	800c986 <USBD_LL_Transmit>

  return USBD_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	60f8      	str	r0, [r7, #12]
 800c096:	60b9      	str	r1, [r7, #8]
 800c098:	4613      	mov	r3, r2
 800c09a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c09c:	88fb      	ldrh	r3, [r7, #6]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f000 fc6f 	bl	800c986 <USBD_LL_Transmit>

  return USBD_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b084      	sub	sp, #16
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	60b9      	str	r1, [r7, #8]
 800c0bc:	4613      	mov	r3, r2
 800c0be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2203      	movs	r2, #3
 800c0c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c0c8:	88fa      	ldrh	r2, [r7, #6]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c0d0:	88fa      	ldrh	r2, [r7, #6]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c0d8:	88fb      	ldrh	r3, [r7, #6]
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	2100      	movs	r1, #0
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f000 fc74 	bl	800c9cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	60f8      	str	r0, [r7, #12]
 800c0f6:	60b9      	str	r1, [r7, #8]
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c0fc:	88fb      	ldrh	r3, [r7, #6]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	2100      	movs	r1, #0
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f000 fc62 	bl	800c9cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b082      	sub	sp, #8
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2204      	movs	r2, #4
 800c11e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c122:	2300      	movs	r3, #0
 800c124:	2200      	movs	r2, #0
 800c126:	2100      	movs	r1, #0
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fc2c 	bl	800c986 <USBD_LL_Transmit>

  return USBD_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2205      	movs	r2, #5
 800c144:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c148:	2300      	movs	r3, #0
 800c14a:	2200      	movs	r2, #0
 800c14c:	2100      	movs	r1, #0
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fc3c 	bl	800c9cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3708      	adds	r7, #8
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c164:	2200      	movs	r2, #0
 800c166:	4912      	ldr	r1, [pc, #72]	; (800c1b0 <MX_USB_DEVICE_Init+0x50>)
 800c168:	4812      	ldr	r0, [pc, #72]	; (800c1b4 <MX_USB_DEVICE_Init+0x54>)
 800c16a:	f7fe ff5e 	bl	800b02a <USBD_Init>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d001      	beq.n	800c178 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c174:	f7f5 fb57 	bl	8001826 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c178:	490f      	ldr	r1, [pc, #60]	; (800c1b8 <MX_USB_DEVICE_Init+0x58>)
 800c17a:	480e      	ldr	r0, [pc, #56]	; (800c1b4 <MX_USB_DEVICE_Init+0x54>)
 800c17c:	f7fe ff80 	bl	800b080 <USBD_RegisterClass>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c186:	f7f5 fb4e 	bl	8001826 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c18a:	490c      	ldr	r1, [pc, #48]	; (800c1bc <MX_USB_DEVICE_Init+0x5c>)
 800c18c:	4809      	ldr	r0, [pc, #36]	; (800c1b4 <MX_USB_DEVICE_Init+0x54>)
 800c18e:	f7fe feb1 	bl	800aef4 <USBD_CDC_RegisterInterface>
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d001      	beq.n	800c19c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c198:	f7f5 fb45 	bl	8001826 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c19c:	4805      	ldr	r0, [pc, #20]	; (800c1b4 <MX_USB_DEVICE_Init+0x54>)
 800c19e:	f7fe ff88 	bl	800b0b2 <USBD_Start>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d001      	beq.n	800c1ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c1a8:	f7f5 fb3d 	bl	8001826 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c1ac:	bf00      	nop
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	20000130 	.word	0x20000130
 800c1b4:	200003ec 	.word	0x200003ec
 800c1b8:	2000001c 	.word	0x2000001c
 800c1bc:	20000120 	.word	0x20000120

0800c1c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	4905      	ldr	r1, [pc, #20]	; (800c1dc <CDC_Init_FS+0x1c>)
 800c1c8:	4805      	ldr	r0, [pc, #20]	; (800c1e0 <CDC_Init_FS+0x20>)
 800c1ca:	f7fe fea9 	bl	800af20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c1ce:	4905      	ldr	r1, [pc, #20]	; (800c1e4 <CDC_Init_FS+0x24>)
 800c1d0:	4803      	ldr	r0, [pc, #12]	; (800c1e0 <CDC_Init_FS+0x20>)
 800c1d2:	f7fe febe 	bl	800af52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c1d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	20000ab0 	.word	0x20000ab0
 800c1e0:	200003ec 	.word	0x200003ec
 800c1e4:	200006b0 	.word	0x200006b0

0800c1e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c1ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bc80      	pop	{r7}
 800c1f4:	4770      	bx	lr
	...

0800c1f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	4603      	mov	r3, r0
 800c200:	6039      	str	r1, [r7, #0]
 800c202:	71fb      	strb	r3, [r7, #7]
 800c204:	4613      	mov	r3, r2
 800c206:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c208:	79fb      	ldrb	r3, [r7, #7]
 800c20a:	2b23      	cmp	r3, #35	; 0x23
 800c20c:	d84a      	bhi.n	800c2a4 <CDC_Control_FS+0xac>
 800c20e:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <CDC_Control_FS+0x1c>)
 800c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c214:	0800c2a5 	.word	0x0800c2a5
 800c218:	0800c2a5 	.word	0x0800c2a5
 800c21c:	0800c2a5 	.word	0x0800c2a5
 800c220:	0800c2a5 	.word	0x0800c2a5
 800c224:	0800c2a5 	.word	0x0800c2a5
 800c228:	0800c2a5 	.word	0x0800c2a5
 800c22c:	0800c2a5 	.word	0x0800c2a5
 800c230:	0800c2a5 	.word	0x0800c2a5
 800c234:	0800c2a5 	.word	0x0800c2a5
 800c238:	0800c2a5 	.word	0x0800c2a5
 800c23c:	0800c2a5 	.word	0x0800c2a5
 800c240:	0800c2a5 	.word	0x0800c2a5
 800c244:	0800c2a5 	.word	0x0800c2a5
 800c248:	0800c2a5 	.word	0x0800c2a5
 800c24c:	0800c2a5 	.word	0x0800c2a5
 800c250:	0800c2a5 	.word	0x0800c2a5
 800c254:	0800c2a5 	.word	0x0800c2a5
 800c258:	0800c2a5 	.word	0x0800c2a5
 800c25c:	0800c2a5 	.word	0x0800c2a5
 800c260:	0800c2a5 	.word	0x0800c2a5
 800c264:	0800c2a5 	.word	0x0800c2a5
 800c268:	0800c2a5 	.word	0x0800c2a5
 800c26c:	0800c2a5 	.word	0x0800c2a5
 800c270:	0800c2a5 	.word	0x0800c2a5
 800c274:	0800c2a5 	.word	0x0800c2a5
 800c278:	0800c2a5 	.word	0x0800c2a5
 800c27c:	0800c2a5 	.word	0x0800c2a5
 800c280:	0800c2a5 	.word	0x0800c2a5
 800c284:	0800c2a5 	.word	0x0800c2a5
 800c288:	0800c2a5 	.word	0x0800c2a5
 800c28c:	0800c2a5 	.word	0x0800c2a5
 800c290:	0800c2a5 	.word	0x0800c2a5
 800c294:	0800c2a5 	.word	0x0800c2a5
 800c298:	0800c2a5 	.word	0x0800c2a5
 800c29c:	0800c2a5 	.word	0x0800c2a5
 800c2a0:	0800c2a5 	.word	0x0800c2a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c2a4:	bf00      	nop
  }

  return (USBD_OK);
 800c2a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bc80      	pop	{r7}
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop

0800c2b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; ++i)
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60fb      	str	r3, [r7, #12]
 800c2c2:	e00b      	b.n	800c2dc <CDC_Receive_FS+0x28>
  {
	  Buffer_Write(FIFO_buf, Buf[i]);
 800c2c4:	4b11      	ldr	r3, [pc, #68]	; (800c30c <CDC_Receive_FS+0x58>)
 800c2c6:	6818      	ldr	r0, [r3, #0]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	f7f4 fe93 	bl	8000ffc <Buffer_Write>
  for (int i = 0; i < *Len; ++i)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	60fb      	str	r3, [r7, #12]
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d8ee      	bhi.n	800c2c4 <CDC_Receive_FS+0x10>
  }
  memset(Buf, 0, *Len);
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f001 fd0c 	bl	800dd0c <memset>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c2f4:	6879      	ldr	r1, [r7, #4]
 800c2f6:	4806      	ldr	r0, [pc, #24]	; (800c310 <CDC_Receive_FS+0x5c>)
 800c2f8:	f7fe fe2b 	bl	800af52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c2fc:	4804      	ldr	r0, [pc, #16]	; (800c310 <CDC_Receive_FS+0x5c>)
 800c2fe:	f7fe fe6a 	bl	800afd6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c302:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c304:	4618      	mov	r0, r3
 800c306:	3710      	adds	r7, #16
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	20000384 	.word	0x20000384
 800c310:	200003ec 	.word	0x200003ec

0800c314 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	460b      	mov	r3, r1
 800c31e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c324:	4b0d      	ldr	r3, [pc, #52]	; (800c35c <CDC_Transmit_FS+0x48>)
 800c326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c32a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c332:	2b00      	cmp	r3, #0
 800c334:	d001      	beq.n	800c33a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c336:	2301      	movs	r3, #1
 800c338:	e00b      	b.n	800c352 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c33a:	887b      	ldrh	r3, [r7, #2]
 800c33c:	461a      	mov	r2, r3
 800c33e:	6879      	ldr	r1, [r7, #4]
 800c340:	4806      	ldr	r0, [pc, #24]	; (800c35c <CDC_Transmit_FS+0x48>)
 800c342:	f7fe fded 	bl	800af20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c346:	4805      	ldr	r0, [pc, #20]	; (800c35c <CDC_Transmit_FS+0x48>)
 800c348:	f7fe fe16 	bl	800af78 <USBD_CDC_TransmitPacket>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c350:	7bfb      	ldrb	r3, [r7, #15]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	200003ec 	.word	0x200003ec

0800c360 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	4603      	mov	r3, r0
 800c368:	6039      	str	r1, [r7, #0]
 800c36a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2212      	movs	r2, #18
 800c370:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c372:	4b03      	ldr	r3, [pc, #12]	; (800c380 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c374:	4618      	mov	r0, r3
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	bc80      	pop	{r7}
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	2000014c 	.word	0x2000014c

0800c384 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	4603      	mov	r3, r0
 800c38c:	6039      	str	r1, [r7, #0]
 800c38e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	2204      	movs	r2, #4
 800c394:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c396:	4b03      	ldr	r3, [pc, #12]	; (800c3a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c398:	4618      	mov	r0, r3
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bc80      	pop	{r7}
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	20000160 	.word	0x20000160

0800c3a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	6039      	str	r1, [r7, #0]
 800c3b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3b4:	79fb      	ldrb	r3, [r7, #7]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d105      	bne.n	800c3c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	4907      	ldr	r1, [pc, #28]	; (800c3dc <USBD_FS_ProductStrDescriptor+0x34>)
 800c3be:	4808      	ldr	r0, [pc, #32]	; (800c3e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c3c0:	f7ff fdf0 	bl	800bfa4 <USBD_GetString>
 800c3c4:	e004      	b.n	800c3d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3c6:	683a      	ldr	r2, [r7, #0]
 800c3c8:	4904      	ldr	r1, [pc, #16]	; (800c3dc <USBD_FS_ProductStrDescriptor+0x34>)
 800c3ca:	4805      	ldr	r0, [pc, #20]	; (800c3e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c3cc:	f7ff fdea 	bl	800bfa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3d0:	4b02      	ldr	r3, [pc, #8]	; (800c3dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	20000eb0 	.word	0x20000eb0
 800c3e0:	0800dea8 	.word	0x0800dea8

0800c3e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	6039      	str	r1, [r7, #0]
 800c3ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c3f0:	683a      	ldr	r2, [r7, #0]
 800c3f2:	4904      	ldr	r1, [pc, #16]	; (800c404 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c3f4:	4804      	ldr	r0, [pc, #16]	; (800c408 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c3f6:	f7ff fdd5 	bl	800bfa4 <USBD_GetString>
  return USBD_StrDesc;
 800c3fa:	4b02      	ldr	r3, [pc, #8]	; (800c404 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	20000eb0 	.word	0x20000eb0
 800c408:	0800dec0 	.word	0x0800dec0

0800c40c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	4603      	mov	r3, r0
 800c414:	6039      	str	r1, [r7, #0]
 800c416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	221a      	movs	r2, #26
 800c41c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c41e:	f000 f843 	bl	800c4a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c422:	4b02      	ldr	r3, [pc, #8]	; (800c42c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c424:	4618      	mov	r0, r3
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	20000164 	.word	0x20000164

0800c430 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	4603      	mov	r3, r0
 800c438:	6039      	str	r1, [r7, #0]
 800c43a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c43c:	79fb      	ldrb	r3, [r7, #7]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d105      	bne.n	800c44e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c442:	683a      	ldr	r2, [r7, #0]
 800c444:	4907      	ldr	r1, [pc, #28]	; (800c464 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c446:	4808      	ldr	r0, [pc, #32]	; (800c468 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c448:	f7ff fdac 	bl	800bfa4 <USBD_GetString>
 800c44c:	e004      	b.n	800c458 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	4904      	ldr	r1, [pc, #16]	; (800c464 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c452:	4805      	ldr	r0, [pc, #20]	; (800c468 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c454:	f7ff fda6 	bl	800bfa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c458:	4b02      	ldr	r3, [pc, #8]	; (800c464 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20000eb0 	.word	0x20000eb0
 800c468:	0800ded4 	.word	0x0800ded4

0800c46c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	4603      	mov	r3, r0
 800c474:	6039      	str	r1, [r7, #0]
 800c476:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c478:	79fb      	ldrb	r3, [r7, #7]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d105      	bne.n	800c48a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c47e:	683a      	ldr	r2, [r7, #0]
 800c480:	4907      	ldr	r1, [pc, #28]	; (800c4a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c482:	4808      	ldr	r0, [pc, #32]	; (800c4a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c484:	f7ff fd8e 	bl	800bfa4 <USBD_GetString>
 800c488:	e004      	b.n	800c494 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c48a:	683a      	ldr	r2, [r7, #0]
 800c48c:	4904      	ldr	r1, [pc, #16]	; (800c4a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c48e:	4805      	ldr	r0, [pc, #20]	; (800c4a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c490:	f7ff fd88 	bl	800bfa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c494:	4b02      	ldr	r3, [pc, #8]	; (800c4a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c496:	4618      	mov	r0, r3
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	20000eb0 	.word	0x20000eb0
 800c4a4:	0800dee0 	.word	0x0800dee0

0800c4a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c4ae:	4b0f      	ldr	r3, [pc, #60]	; (800c4ec <Get_SerialNum+0x44>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c4b4:	4b0e      	ldr	r3, [pc, #56]	; (800c4f0 <Get_SerialNum+0x48>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c4ba:	4b0e      	ldr	r3, [pc, #56]	; (800c4f4 <Get_SerialNum+0x4c>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d009      	beq.n	800c4e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c4ce:	2208      	movs	r2, #8
 800c4d0:	4909      	ldr	r1, [pc, #36]	; (800c4f8 <Get_SerialNum+0x50>)
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f000 f814 	bl	800c500 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c4d8:	2204      	movs	r2, #4
 800c4da:	4908      	ldr	r1, [pc, #32]	; (800c4fc <Get_SerialNum+0x54>)
 800c4dc:	68b8      	ldr	r0, [r7, #8]
 800c4de:	f000 f80f 	bl	800c500 <IntToUnicode>
  }
}
 800c4e2:	bf00      	nop
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	1ffff7e8 	.word	0x1ffff7e8
 800c4f0:	1ffff7ec 	.word	0x1ffff7ec
 800c4f4:	1ffff7f0 	.word	0x1ffff7f0
 800c4f8:	20000166 	.word	0x20000166
 800c4fc:	20000176 	.word	0x20000176

0800c500 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c500:	b480      	push	{r7}
 800c502:	b087      	sub	sp, #28
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	4613      	mov	r3, r2
 800c50c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c512:	2300      	movs	r3, #0
 800c514:	75fb      	strb	r3, [r7, #23]
 800c516:	e027      	b.n	800c568 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	0f1b      	lsrs	r3, r3, #28
 800c51c:	2b09      	cmp	r3, #9
 800c51e:	d80b      	bhi.n	800c538 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	0f1b      	lsrs	r3, r3, #28
 800c524:	b2da      	uxtb	r2, r3
 800c526:	7dfb      	ldrb	r3, [r7, #23]
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	4619      	mov	r1, r3
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	440b      	add	r3, r1
 800c530:	3230      	adds	r2, #48	; 0x30
 800c532:	b2d2      	uxtb	r2, r2
 800c534:	701a      	strb	r2, [r3, #0]
 800c536:	e00a      	b.n	800c54e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	0f1b      	lsrs	r3, r3, #28
 800c53c:	b2da      	uxtb	r2, r3
 800c53e:	7dfb      	ldrb	r3, [r7, #23]
 800c540:	005b      	lsls	r3, r3, #1
 800c542:	4619      	mov	r1, r3
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	440b      	add	r3, r1
 800c548:	3237      	adds	r2, #55	; 0x37
 800c54a:	b2d2      	uxtb	r2, r2
 800c54c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	011b      	lsls	r3, r3, #4
 800c552:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c554:	7dfb      	ldrb	r3, [r7, #23]
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	3301      	adds	r3, #1
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	4413      	add	r3, r2
 800c55e:	2200      	movs	r2, #0
 800c560:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c562:	7dfb      	ldrb	r3, [r7, #23]
 800c564:	3301      	adds	r3, #1
 800c566:	75fb      	strb	r3, [r7, #23]
 800c568:	7dfa      	ldrb	r2, [r7, #23]
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d3d3      	bcc.n	800c518 <IntToUnicode+0x18>
  }
}
 800c570:	bf00      	nop
 800c572:	bf00      	nop
 800c574:	371c      	adds	r7, #28
 800c576:	46bd      	mov	sp, r7
 800c578:	bc80      	pop	{r7}
 800c57a:	4770      	bx	lr

0800c57c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a0d      	ldr	r2, [pc, #52]	; (800c5c0 <HAL_PCD_MspInit+0x44>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d113      	bne.n	800c5b6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c58e:	4b0d      	ldr	r3, [pc, #52]	; (800c5c4 <HAL_PCD_MspInit+0x48>)
 800c590:	69db      	ldr	r3, [r3, #28]
 800c592:	4a0c      	ldr	r2, [pc, #48]	; (800c5c4 <HAL_PCD_MspInit+0x48>)
 800c594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c598:	61d3      	str	r3, [r2, #28]
 800c59a:	4b0a      	ldr	r3, [pc, #40]	; (800c5c4 <HAL_PCD_MspInit+0x48>)
 800c59c:	69db      	ldr	r3, [r3, #28]
 800c59e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5a2:	60fb      	str	r3, [r7, #12]
 800c5a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	2014      	movs	r0, #20
 800c5ac:	f7f5 fc97 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c5b0:	2014      	movs	r0, #20
 800c5b2:	f7f5 fcb0 	bl	8001f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c5b6:	bf00      	nop
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	40005c00 	.word	0x40005c00
 800c5c4:	40021000 	.word	0x40021000

0800c5c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c5dc:	4619      	mov	r1, r3
 800c5de:	4610      	mov	r0, r2
 800c5e0:	f7fe fdaf 	bl	800b142 <USBD_LL_SetupStage>
}
 800c5e4:	bf00      	nop
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c5fe:	78fa      	ldrb	r2, [r7, #3]
 800c600:	6879      	ldr	r1, [r7, #4]
 800c602:	4613      	mov	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4413      	add	r3, r2
 800c608:	00db      	lsls	r3, r3, #3
 800c60a:	440b      	add	r3, r1
 800c60c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	78fb      	ldrb	r3, [r7, #3]
 800c614:	4619      	mov	r1, r3
 800c616:	f7fe fde1 	bl	800b1dc <USBD_LL_DataOutStage>
}
 800c61a:	bf00      	nop
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b082      	sub	sp, #8
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	460b      	mov	r3, r1
 800c62c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c634:	78fa      	ldrb	r2, [r7, #3]
 800c636:	6879      	ldr	r1, [r7, #4]
 800c638:	4613      	mov	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	00db      	lsls	r3, r3, #3
 800c640:	440b      	add	r3, r1
 800c642:	333c      	adds	r3, #60	; 0x3c
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	78fb      	ldrb	r3, [r7, #3]
 800c648:	4619      	mov	r1, r3
 800c64a:	f7fe fe38 	bl	800b2be <USBD_LL_DataInStage>
}
 800c64e:	bf00      	nop
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b082      	sub	sp, #8
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c664:	4618      	mov	r0, r3
 800c666:	f7fe ff48 	bl	800b4fa <USBD_LL_SOF>
}
 800c66a:	bf00      	nop
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b084      	sub	sp, #16
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c67a:	2301      	movs	r3, #1
 800c67c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	2b02      	cmp	r3, #2
 800c684:	d001      	beq.n	800c68a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c686:	f7f5 f8ce 	bl	8001826 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c690:	7bfa      	ldrb	r2, [r7, #15]
 800c692:	4611      	mov	r1, r2
 800c694:	4618      	mov	r0, r3
 800c696:	f7fe fef8 	bl	800b48a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7fe feb1 	bl	800b408 <USBD_LL_Reset>
}
 800c6a6:	bf00      	nop
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
	...

0800c6b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe fef2 	bl	800b4a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	699b      	ldr	r3, [r3, #24]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d005      	beq.n	800c6d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c6cc:	4b04      	ldr	r3, [pc, #16]	; (800c6e0 <HAL_PCD_SuspendCallback+0x30>)
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	4a03      	ldr	r2, [pc, #12]	; (800c6e0 <HAL_PCD_SuspendCallback+0x30>)
 800c6d2:	f043 0306 	orr.w	r3, r3, #6
 800c6d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c6d8:	bf00      	nop
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	e000ed00 	.word	0xe000ed00

0800c6e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fe feec 	bl	800b4d0 <USBD_LL_Resume>
}
 800c6f8:	bf00      	nop
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c708:	4a28      	ldr	r2, [pc, #160]	; (800c7ac <USBD_LL_Init+0xac>)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a26      	ldr	r2, [pc, #152]	; (800c7ac <USBD_LL_Init+0xac>)
 800c714:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c718:	4b24      	ldr	r3, [pc, #144]	; (800c7ac <USBD_LL_Init+0xac>)
 800c71a:	4a25      	ldr	r2, [pc, #148]	; (800c7b0 <USBD_LL_Init+0xb0>)
 800c71c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c71e:	4b23      	ldr	r3, [pc, #140]	; (800c7ac <USBD_LL_Init+0xac>)
 800c720:	2208      	movs	r2, #8
 800c722:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c724:	4b21      	ldr	r3, [pc, #132]	; (800c7ac <USBD_LL_Init+0xac>)
 800c726:	2202      	movs	r2, #2
 800c728:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c72a:	4b20      	ldr	r3, [pc, #128]	; (800c7ac <USBD_LL_Init+0xac>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c730:	4b1e      	ldr	r3, [pc, #120]	; (800c7ac <USBD_LL_Init+0xac>)
 800c732:	2200      	movs	r2, #0
 800c734:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c736:	4b1d      	ldr	r3, [pc, #116]	; (800c7ac <USBD_LL_Init+0xac>)
 800c738:	2200      	movs	r2, #0
 800c73a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c73c:	481b      	ldr	r0, [pc, #108]	; (800c7ac <USBD_LL_Init+0xac>)
 800c73e:	f7f8 fe4f 	bl	80053e0 <HAL_PCD_Init>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d001      	beq.n	800c74c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c748:	f7f5 f86d 	bl	8001826 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c752:	2318      	movs	r3, #24
 800c754:	2200      	movs	r2, #0
 800c756:	2100      	movs	r1, #0
 800c758:	f7fa fac3 	bl	8006ce2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c762:	2358      	movs	r3, #88	; 0x58
 800c764:	2200      	movs	r2, #0
 800c766:	2180      	movs	r1, #128	; 0x80
 800c768:	f7fa fabb 	bl	8006ce2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c772:	23c0      	movs	r3, #192	; 0xc0
 800c774:	2200      	movs	r2, #0
 800c776:	2181      	movs	r1, #129	; 0x81
 800c778:	f7fa fab3 	bl	8006ce2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c782:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c786:	2200      	movs	r2, #0
 800c788:	2101      	movs	r1, #1
 800c78a:	f7fa faaa 	bl	8006ce2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c794:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c798:	2200      	movs	r2, #0
 800c79a:	2182      	movs	r1, #130	; 0x82
 800c79c:	f7fa faa1 	bl	8006ce2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	200010b0 	.word	0x200010b0
 800c7b0:	40005c00 	.word	0x40005c00

0800c7b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7f8 ff13 	bl	80055f6 <HAL_PCD_Start>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7d4:	7bfb      	ldrb	r3, [r7, #15]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f000 f94e 	bl	800ca78 <USBD_Get_USB_Status>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b084      	sub	sp, #16
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	4608      	mov	r0, r1
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	70fb      	strb	r3, [r7, #3]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	70bb      	strb	r3, [r7, #2]
 800c800:	4613      	mov	r3, r2
 800c802:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c804:	2300      	movs	r3, #0
 800c806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c812:	78bb      	ldrb	r3, [r7, #2]
 800c814:	883a      	ldrh	r2, [r7, #0]
 800c816:	78f9      	ldrb	r1, [r7, #3]
 800c818:	f7f9 f88b 	bl	8005932 <HAL_PCD_EP_Open>
 800c81c:	4603      	mov	r3, r0
 800c81e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c820:	7bfb      	ldrb	r3, [r7, #15]
 800c822:	4618      	mov	r0, r3
 800c824:	f000 f928 	bl	800ca78 <USBD_Get_USB_Status>
 800c828:	4603      	mov	r3, r0
 800c82a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c82c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c836:	b580      	push	{r7, lr}
 800c838:	b084      	sub	sp, #16
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
 800c83e:	460b      	mov	r3, r1
 800c840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c842:	2300      	movs	r3, #0
 800c844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c846:	2300      	movs	r3, #0
 800c848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c850:	78fa      	ldrb	r2, [r7, #3]
 800c852:	4611      	mov	r1, r2
 800c854:	4618      	mov	r0, r3
 800c856:	f7f9 f8d2 	bl	80059fe <HAL_PCD_EP_Close>
 800c85a:	4603      	mov	r3, r0
 800c85c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
 800c860:	4618      	mov	r0, r3
 800c862:	f000 f909 	bl	800ca78 <USBD_Get_USB_Status>
 800c866:	4603      	mov	r3, r0
 800c868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c86a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3710      	adds	r7, #16
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	460b      	mov	r3, r1
 800c87e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c880:	2300      	movs	r3, #0
 800c882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c884:	2300      	movs	r3, #0
 800c886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c88e:	78fa      	ldrb	r2, [r7, #3]
 800c890:	4611      	mov	r1, r2
 800c892:	4618      	mov	r0, r3
 800c894:	f7f9 f992 	bl	8005bbc <HAL_PCD_EP_SetStall>
 800c898:	4603      	mov	r3, r0
 800c89a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 f8ea 	bl	800ca78 <USBD_Get_USB_Status>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b084      	sub	sp, #16
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8cc:	78fa      	ldrb	r2, [r7, #3]
 800c8ce:	4611      	mov	r1, r2
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7f9 f9d3 	bl	8005c7c <HAL_PCD_EP_ClrStall>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f000 f8cb 	bl	800ca78 <USBD_Get_USB_Status>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3710      	adds	r7, #16
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c902:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	da0c      	bge.n	800c926 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c90c:	78fb      	ldrb	r3, [r7, #3]
 800c90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c912:	68f9      	ldr	r1, [r7, #12]
 800c914:	1c5a      	adds	r2, r3, #1
 800c916:	4613      	mov	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	00db      	lsls	r3, r3, #3
 800c91e:	440b      	add	r3, r1
 800c920:	3302      	adds	r3, #2
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	e00b      	b.n	800c93e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c926:	78fb      	ldrb	r3, [r7, #3]
 800c928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c92c:	68f9      	ldr	r1, [r7, #12]
 800c92e:	4613      	mov	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	4413      	add	r3, r2
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	440b      	add	r3, r1
 800c938:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c93c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	bc80      	pop	{r7}
 800c946:	4770      	bx	lr

0800c948 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	460b      	mov	r3, r1
 800c952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c958:	2300      	movs	r3, #0
 800c95a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c962:	78fa      	ldrb	r2, [r7, #3]
 800c964:	4611      	mov	r1, r2
 800c966:	4618      	mov	r0, r3
 800c968:	f7f8 ffbe 	bl	80058e8 <HAL_PCD_SetAddress>
 800c96c:	4603      	mov	r3, r0
 800c96e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c970:	7bfb      	ldrb	r3, [r7, #15]
 800c972:	4618      	mov	r0, r3
 800c974:	f000 f880 	bl	800ca78 <USBD_Get_USB_Status>
 800c978:	4603      	mov	r3, r0
 800c97a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c97c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b086      	sub	sp, #24
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	461a      	mov	r2, r3
 800c992:	460b      	mov	r3, r1
 800c994:	72fb      	strb	r3, [r7, #11]
 800c996:	4613      	mov	r3, r2
 800c998:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c99a:	2300      	movs	r3, #0
 800c99c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9a8:	893b      	ldrh	r3, [r7, #8]
 800c9aa:	7af9      	ldrb	r1, [r7, #11]
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	f7f9 f8c2 	bl	8005b36 <HAL_PCD_EP_Transmit>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9b6:	7dfb      	ldrb	r3, [r7, #23]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f000 f85d 	bl	800ca78 <USBD_Get_USB_Status>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3718      	adds	r7, #24
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b086      	sub	sp, #24
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	607a      	str	r2, [r7, #4]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	460b      	mov	r3, r1
 800c9da:	72fb      	strb	r3, [r7, #11]
 800c9dc:	4613      	mov	r3, r2
 800c9de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9ee:	893b      	ldrh	r3, [r7, #8]
 800c9f0:	7af9      	ldrb	r1, [r7, #11]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	f7f9 f84b 	bl	8005a8e <HAL_PCD_EP_Receive>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9fc:	7dfb      	ldrb	r3, [r7, #23]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f000 f83a 	bl	800ca78 <USBD_Get_USB_Status>
 800ca04:	4603      	mov	r3, r0
 800ca06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ca08:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3718      	adds	r7, #24
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b082      	sub	sp, #8
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	460b      	mov	r3, r1
 800ca1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca24:	78fa      	ldrb	r2, [r7, #3]
 800ca26:	4611      	mov	r1, r2
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7f9 f86d 	bl	8005b08 <HAL_PCD_EP_GetRxCount>
 800ca2e:	4603      	mov	r3, r0
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ca40:	4b02      	ldr	r3, [pc, #8]	; (800ca4c <USBD_static_malloc+0x14>)
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	370c      	adds	r7, #12
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bc80      	pop	{r7}
 800ca4a:	4770      	bx	lr
 800ca4c:	2000139c 	.word	0x2000139c

0800ca50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]

}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bc80      	pop	{r7}
 800ca60:	4770      	bx	lr

0800ca62 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ca6e:	bf00      	nop
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bc80      	pop	{r7}
 800ca76:	4770      	bx	lr

0800ca78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	4603      	mov	r3, r0
 800ca80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca86:	79fb      	ldrb	r3, [r7, #7]
 800ca88:	2b03      	cmp	r3, #3
 800ca8a:	d817      	bhi.n	800cabc <USBD_Get_USB_Status+0x44>
 800ca8c:	a201      	add	r2, pc, #4	; (adr r2, 800ca94 <USBD_Get_USB_Status+0x1c>)
 800ca8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca92:	bf00      	nop
 800ca94:	0800caa5 	.word	0x0800caa5
 800ca98:	0800caab 	.word	0x0800caab
 800ca9c:	0800cab1 	.word	0x0800cab1
 800caa0:	0800cab7 	.word	0x0800cab7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800caa4:	2300      	movs	r3, #0
 800caa6:	73fb      	strb	r3, [r7, #15]
    break;
 800caa8:	e00b      	b.n	800cac2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800caaa:	2302      	movs	r3, #2
 800caac:	73fb      	strb	r3, [r7, #15]
    break;
 800caae:	e008      	b.n	800cac2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cab0:	2301      	movs	r3, #1
 800cab2:	73fb      	strb	r3, [r7, #15]
    break;
 800cab4:	e005      	b.n	800cac2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cab6:	2302      	movs	r3, #2
 800cab8:	73fb      	strb	r3, [r7, #15]
    break;
 800caba:	e002      	b.n	800cac2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cabc:	2302      	movs	r3, #2
 800cabe:	73fb      	strb	r3, [r7, #15]
    break;
 800cac0:	bf00      	nop
  }
  return usb_status;
 800cac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3714      	adds	r7, #20
 800cac8:	46bd      	mov	sp, r7
 800caca:	bc80      	pop	{r7}
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop

0800cad0 <BMX055_init_globals>:
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};    // vector to hold quaternion
float eInt[3] = {0.0f, 0.0f, 0.0f};       // vector to hold integral error for Mahony method


void BMX055_init_globals()
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
	Gscale = GFS_125DPS;
 800cad6:	4b23      	ldr	r3, [pc, #140]	; (800cb64 <BMX055_init_globals+0x94>)
 800cad8:	2204      	movs	r2, #4
 800cada:	701a      	strb	r2, [r3, #0]
	GODRBW = G_200Hz23Hz;      // set gyro ODR and bandwidth
 800cadc:	4b22      	ldr	r3, [pc, #136]	; (800cb68 <BMX055_init_globals+0x98>)
 800cade:	2204      	movs	r2, #4
 800cae0:	701a      	strb	r2, [r3, #0]
	Ascale = AFS_2G;           // set accel full scale
 800cae2:	4b22      	ldr	r3, [pc, #136]	; (800cb6c <BMX055_init_globals+0x9c>)
 800cae4:	2203      	movs	r2, #3
 800cae6:	701a      	strb	r2, [r3, #0]
	ACCBW  = 0x08 | ABW_16Hz;  // Choose bandwidth for accelerometer, need bit 3 = 1 to enable bandwidth choice in enum
 800cae8:	4b21      	ldr	r3, [pc, #132]	; (800cb70 <BMX055_init_globals+0xa0>)
 800caea:	2209      	movs	r2, #9
 800caec:	701a      	strb	r2, [r3, #0]
	Mmode  = Regular;          // Choose magnetometer operation mode
 800caee:	4b21      	ldr	r3, [pc, #132]	; (800cb74 <BMX055_init_globals+0xa4>)
 800caf0:	2201      	movs	r2, #1
 800caf2:	701a      	strb	r2, [r3, #0]
	MODR   = MODR_10Hz;
 800caf4:	4b20      	ldr	r3, [pc, #128]	; (800cb78 <BMX055_init_globals+0xa8>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	701a      	strb	r2, [r3, #0]

	intACC1   =  8;  // These are fixed on the BMX055 Mini Add-On for Teensy 3.1
 800cafa:	4b20      	ldr	r3, [pc, #128]	; (800cb7c <BMX055_init_globals+0xac>)
 800cafc:	2208      	movs	r2, #8
 800cafe:	601a      	str	r2, [r3, #0]
	intACC2   =  9;
 800cb00:	4b1f      	ldr	r3, [pc, #124]	; (800cb80 <BMX055_init_globals+0xb0>)
 800cb02:	2209      	movs	r2, #9
 800cb04:	601a      	str	r2, [r3, #0]
	intGYRO1  = 11;
 800cb06:	4b1f      	ldr	r3, [pc, #124]	; (800cb84 <BMX055_init_globals+0xb4>)
 800cb08:	220b      	movs	r2, #11
 800cb0a:	601a      	str	r2, [r3, #0]
	intGYRO2  = 10;
 800cb0c:	4b1e      	ldr	r3, [pc, #120]	; (800cb88 <BMX055_init_globals+0xb8>)
 800cb0e:	220a      	movs	r2, #10
 800cb10:	601a      	str	r2, [r3, #0]
	intMAG1   = 12;
 800cb12:	4b1e      	ldr	r3, [pc, #120]	; (800cb8c <BMX055_init_globals+0xbc>)
 800cb14:	220c      	movs	r2, #12
 800cb16:	601a      	str	r2, [r3, #0]
	intDRDYM  = 15;
 800cb18:	4b1d      	ldr	r3, [pc, #116]	; (800cb90 <BMX055_init_globals+0xc0>)
 800cb1a:	220f      	movs	r2, #15
 800cb1c:	601a      	str	r2, [r3, #0]
	myLed     = 13;  // LED on the Teensy 3.1
 800cb1e:	4b1d      	ldr	r3, [pc, #116]	; (800cb94 <BMX055_init_globals+0xc4>)
 800cb20:	220d      	movs	r2, #13
 800cb22:	601a      	str	r2, [r3, #0]

	// Bias corrections for gyro, accelerometer, mag
	for (int i=0; i < 3; i++)
 800cb24:	2300      	movs	r3, #0
 800cb26:	607b      	str	r3, [r7, #4]
 800cb28:	e012      	b.n	800cb50 <BMX055_init_globals+0x80>
	{
		gyroBias[i] = 0;
 800cb2a:	4a1b      	ldr	r2, [pc, #108]	; (800cb98 <BMX055_init_globals+0xc8>)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f04f 0100 	mov.w	r1, #0
 800cb32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		accelBias[i] = 0;
 800cb36:	4a19      	ldr	r2, [pc, #100]	; (800cb9c <BMX055_init_globals+0xcc>)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f04f 0100 	mov.w	r1, #0
 800cb3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		magBias[3] = 0;
 800cb42:	4b17      	ldr	r3, [pc, #92]	; (800cba0 <BMX055_init_globals+0xd0>)
 800cb44:	f04f 0200 	mov.w	r2, #0
 800cb48:	60da      	str	r2, [r3, #12]
	for (int i=0; i < 3; i++)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	607b      	str	r3, [r7, #4]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	dde9      	ble.n	800cb2a <BMX055_init_globals+0x5a>
	}


}
 800cb56:	bf00      	nop
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bc80      	pop	{r7}
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	200015bc 	.word	0x200015bc
 800cb68:	200015bd 	.word	0x200015bd
 800cb6c:	200015be 	.word	0x200015be
 800cb70:	200015bf 	.word	0x200015bf
 800cb74:	200015c0 	.word	0x200015c0
 800cb78:	200015c1 	.word	0x200015c1
 800cb7c:	200015e0 	.word	0x200015e0
 800cb80:	200015e4 	.word	0x200015e4
 800cb84:	200015e8 	.word	0x200015e8
 800cb88:	200015ec 	.word	0x200015ec
 800cb8c:	200015f0 	.word	0x200015f0
 800cb90:	200015f4 	.word	0x200015f4
 800cb94:	200015f8 	.word	0x200015f8
 800cb98:	20001614 	.word	0x20001614
 800cb9c:	20001620 	.word	0x20001620
 800cba0:	2000162c 	.word	0x2000162c

0800cba4 <BMX055_setup>:

bool BMX055_setup()
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
//  display.clearDisplay();   // clears the screen and buffer

  // Read the BMX-055 WHO_AM_I registers, this is a good test of communication
//  Serial.println("BMX055 accelerometer...");

  uint8_t c = readByte(BMX055_ACC_ADDRESS, BMX055_ACC_WHOAMI);  // Read ACC WHO_AM_I register for BMX055
 800cbaa:	2100      	movs	r1, #0
 800cbac:	2018      	movs	r0, #24
 800cbae:	f000 fcf1 	bl	800d594 <readByte>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	71fb      	strb	r3, [r7, #7]
//  display.setCursor(0,10); display.print("I AM");
//  display.setCursor(0,20); display.print("0x"); display.print(c, HEX);
//  display.setCursor(0,30); display.print("I Should Be");
//  display.setCursor(0,40); display.print("0x"); display.print(0xFA, HEX);
//  display.display();
  HAL_Delay(1000);
 800cbb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cbba:	f7f5 f895 	bl	8001ce8 <HAL_Delay>

//  display.clearDisplay();   // clears the screen and buffer
//  Serial.println("BMX055 gyroscope...");

  uint8_t d = readByte(BMX055_GYRO_ADDRESS, BMX055_GYRO_WHOAMI);  // Read GYRO WHO_AM_I register for BMX055
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	2068      	movs	r0, #104	; 0x68
 800cbc2:	f000 fce7 	bl	800d594 <readByte>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	71bb      	strb	r3, [r7, #6]
//  display.setCursor(0,10); display.print("I AM");
//  display.setCursor(0,20); display.print("0x"); display.print(d, HEX);
//  display.setCursor(0,30); display.print("I Should Be");
//  display.setCursor(0,40); display.print("0x"); display.print(0x0F, HEX);
//  display.display();
  HAL_Delay(1000);
 800cbca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cbce:	f7f5 f88b 	bl	8001ce8 <HAL_Delay>

//  Serial.println("BMX055 magnetometer...");

  writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_PWR_CNTL1, 0x01); // wake up magnetometer first thing
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	214b      	movs	r1, #75	; 0x4b
 800cbd6:	2010      	movs	r0, #16
 800cbd8:	f000 fcbc 	bl	800d554 <writeByte>
  HAL_Delay(100);
 800cbdc:	2064      	movs	r0, #100	; 0x64
 800cbde:	f7f5 f883 	bl	8001ce8 <HAL_Delay>
  uint8_t e = readByte(BMX055_MAG_ADDRESS, BMX055_MAG_WHOAMI);  // Read MAG WHO_AM_I register for BMX055
 800cbe2:	2140      	movs	r1, #64	; 0x40
 800cbe4:	2010      	movs	r0, #16
 800cbe6:	f000 fcd5 	bl	800d594 <readByte>
 800cbea:	4603      	mov	r3, r0
 800cbec:	717b      	strb	r3, [r7, #5]
//  display.setCursor(0,10); display.print("I AM");
//  display.setCursor(0,20); display.print("0x"); display.print(e, HEX);
//  display.setCursor(0,30); display.print("I Should Be");
//  display.setCursor(0,40); display.print("0x"); display.print(0x32, HEX);
//  display.display();
  HAL_Delay(1000);
 800cbee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cbf2:	f7f5 f879 	bl	8001ce8 <HAL_Delay>

  if ((c == 0xFA) && (d == 0x0F) && (e == 0x32)) // WHO_AM_I should always be ACC = 0xFA, GYRO = 0x0F, MAG = 0x32
 800cbf6:	79fb      	ldrb	r3, [r7, #7]
 800cbf8:	2bfa      	cmp	r3, #250	; 0xfa
 800cbfa:	d120      	bne.n	800cc3e <BMX055_setup+0x9a>
 800cbfc:	79bb      	ldrb	r3, [r7, #6]
 800cbfe:	2b0f      	cmp	r3, #15
 800cc00:	d11d      	bne.n	800cc3e <BMX055_setup+0x9a>
 800cc02:	797b      	ldrb	r3, [r7, #5]
 800cc04:	2b32      	cmp	r3, #50	; 0x32
 800cc06:	d11a      	bne.n	800cc3e <BMX055_setup+0x9a>
//  display.setCursor(0, 0); display.print("BMX055 online");
//  display.setCursor(0,10); display.print("configuring");
//  display.display();
//  delay(1000);

  initBMX055();
 800cc08:	f000 faac 	bl	800d164 <initBMX055>
//  display.setCursor(0, 0); display.print("BMX055 online");
//  display.setCursor(0,10); display.print("initialized");
//  display.display();
//  delay(1000);

  HAL_Delay(1000);
 800cc0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cc10:	f7f5 f86a 	bl	8001ce8 <HAL_Delay>

  // get sensor resolutions, only need to do this once
   getAres();
 800cc14:	f000 f85a 	bl	800cccc <getAres>
   getGres();
 800cc18:	f000 f81e 	bl	800cc58 <getGres>
   // magnetometer resolution is 1 microTesla/16 counts or 1/1.6 milliGauss/count
   mRes = 1./1.6;
 800cc1c:	4b0a      	ldr	r3, [pc, #40]	; (800cc48 <BMX055_setup+0xa4>)
 800cc1e:	4a0b      	ldr	r2, [pc, #44]	; (800cc4c <BMX055_setup+0xa8>)
 800cc20:	601a      	str	r2, [r3, #0]
   trimBMX055();  // read the magnetometer calibration data
 800cc22:	f000 fa05 	bl	800d030 <trimBMX055>
//   display.setCursor(0, 0); display.print("BMX055 Res");
//   display.setCursor(0,10); display.print("ACC ");  display.setCursor(50,10); display.print(1000.*aRes, 2);
//   display.setCursor(0,20); display.print("GYRO "); display.setCursor(50,20); display.print(1000.*gRes, 2);
////   display.setCursor(0,30); display.print("MAG ");  display.setCursor(50,30); display.print((int)dig_x1);
//   display.display();
   HAL_Delay(1000);
 800cc26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cc2a:	f7f5 f85d 	bl	8001ce8 <HAL_Delay>


  fastcompaccelBMX055(accelBias);
 800cc2e:	4808      	ldr	r0, [pc, #32]	; (800cc50 <BMX055_setup+0xac>)
 800cc30:	f000 fb2c 	bl	800d28c <fastcompaccelBMX055>
//  Serial.println("accel biases (mg)"); Serial.println(1000.*accelBias[0]); Serial.println(1000.*accelBias[1]); Serial.println(1000.*accelBias[2]);
//  Serial.println("gyro biases (dps)"); Serial.println(gyroBias[0]); Serial.println(gyroBias[1]); Serial.println(gyroBias[2]);

  magcalBMX055(magBias);
 800cc34:	4807      	ldr	r0, [pc, #28]	; (800cc54 <BMX055_setup+0xb0>)
 800cc36:	f000 fbc9 	bl	800d3cc <magcalBMX055>
//  Serial.println("mag biases (mG)"); Serial.println(magBias[0]); Serial.println(magBias[1]); Serial.println(magBias[2]);

  return true;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e000      	b.n	800cc40 <BMX055_setup+0x9c>
  {
//    Serial.print("Could not connect to BMX055: 0x");
//    Serial.println(c, HEX);

    //while(1) ; // Loop forever if communication doesn't happen
	  return false;
 800cc3e:	2300      	movs	r3, #0
  }
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	200015cc 	.word	0x200015cc
 800cc4c:	3f200000 	.word	0x3f200000
 800cc50:	20001620 	.word	0x20001620
 800cc54:	2000162c 	.word	0x2000162c

0800cc58 <getGres>:

//===================================================================================================================
//====== Set of useful function to access acceleration. gyroscope, magnetometer, and temperature data
//===================================================================================================================

void getGres() {
 800cc58:	b480      	push	{r7}
 800cc5a:	af00      	add	r7, sp, #0
  switch (Gscale)
 800cc5c:	4b14      	ldr	r3, [pc, #80]	; (800ccb0 <getGres+0x58>)
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	2b04      	cmp	r3, #4
 800cc62:	d821      	bhi.n	800cca8 <getGres+0x50>
 800cc64:	a201      	add	r2, pc, #4	; (adr r2, 800cc6c <getGres+0x14>)
 800cc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc6a:	bf00      	nop
 800cc6c:	0800cca1 	.word	0x0800cca1
 800cc70:	0800cc99 	.word	0x0800cc99
 800cc74:	0800cc91 	.word	0x0800cc91
 800cc78:	0800cc89 	.word	0x0800cc89
 800cc7c:	0800cc81 	.word	0x0800cc81
  {
 	// Possible gyro scales (and their register bit settings) are:
	// 125 DPS (100), 250 DPS (011), 500 DPS (010), 1000 DPS (001), and 2000 DPS (000).
    case GFS_125DPS:
          gRes = 124.87/32768.0; // per data sheet, not exactly 125!?
 800cc80:	4b0c      	ldr	r3, [pc, #48]	; (800ccb4 <getGres+0x5c>)
 800cc82:	4a0d      	ldr	r2, [pc, #52]	; (800ccb8 <getGres+0x60>)
 800cc84:	601a      	str	r2, [r3, #0]
          break;
 800cc86:	e00f      	b.n	800cca8 <getGres+0x50>
    case GFS_250DPS:
          gRes = 249.75/32768.0;
 800cc88:	4b0a      	ldr	r3, [pc, #40]	; (800ccb4 <getGres+0x5c>)
 800cc8a:	4a0c      	ldr	r2, [pc, #48]	; (800ccbc <getGres+0x64>)
 800cc8c:	601a      	str	r2, [r3, #0]
          break;
 800cc8e:	e00b      	b.n	800cca8 <getGres+0x50>
    case GFS_500DPS:
          gRes = 499.5/32768.0;
 800cc90:	4b08      	ldr	r3, [pc, #32]	; (800ccb4 <getGres+0x5c>)
 800cc92:	4a0b      	ldr	r2, [pc, #44]	; (800ccc0 <getGres+0x68>)
 800cc94:	601a      	str	r2, [r3, #0]
          break;
 800cc96:	e007      	b.n	800cca8 <getGres+0x50>
    case GFS_1000DPS:
          gRes = 999.0/32768.0;
 800cc98:	4b06      	ldr	r3, [pc, #24]	; (800ccb4 <getGres+0x5c>)
 800cc9a:	4a0a      	ldr	r2, [pc, #40]	; (800ccc4 <getGres+0x6c>)
 800cc9c:	601a      	str	r2, [r3, #0]
          break;
 800cc9e:	e003      	b.n	800cca8 <getGres+0x50>
    case GFS_2000DPS:
          gRes = 1998.0/32768.0;
 800cca0:	4b04      	ldr	r3, [pc, #16]	; (800ccb4 <getGres+0x5c>)
 800cca2:	4a09      	ldr	r2, [pc, #36]	; (800ccc8 <getGres+0x70>)
 800cca4:	601a      	str	r2, [r3, #0]
          break;
 800cca6:	bf00      	nop
  }
}
 800cca8:	bf00      	nop
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bc80      	pop	{r7}
 800ccae:	4770      	bx	lr
 800ccb0:	200015bc 	.word	0x200015bc
 800ccb4:	200015c8 	.word	0x200015c8
 800ccb8:	3b79bd71 	.word	0x3b79bd71
 800ccbc:	3bf9c000 	.word	0x3bf9c000
 800ccc0:	3c79c000 	.word	0x3c79c000
 800ccc4:	3cf9c000 	.word	0x3cf9c000
 800ccc8:	3d79c000 	.word	0x3d79c000

0800cccc <getAres>:

void getAres() {
 800cccc:	b480      	push	{r7}
 800ccce:	af00      	add	r7, sp, #0
  switch (Ascale)
 800ccd0:	4b19      	ldr	r3, [pc, #100]	; (800cd38 <getAres+0x6c>)
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	3b03      	subs	r3, #3
 800ccd6:	2b09      	cmp	r3, #9
 800ccd8:	d82a      	bhi.n	800cd30 <getAres+0x64>
 800ccda:	a201      	add	r2, pc, #4	; (adr r2, 800cce0 <getAres+0x14>)
 800ccdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce0:	0800cd09 	.word	0x0800cd09
 800cce4:	0800cd31 	.word	0x0800cd31
 800cce8:	0800cd13 	.word	0x0800cd13
 800ccec:	0800cd31 	.word	0x0800cd31
 800ccf0:	0800cd31 	.word	0x0800cd31
 800ccf4:	0800cd1d 	.word	0x0800cd1d
 800ccf8:	0800cd31 	.word	0x0800cd31
 800ccfc:	0800cd31 	.word	0x0800cd31
 800cd00:	0800cd31 	.word	0x0800cd31
 800cd04:	0800cd27 	.word	0x0800cd27
  {
 	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (0011), 4 Gs (0101), 8 Gs (1000), and 16 Gs  (1100).
        // BMX055 ACC data is signed 12 bit
    case AFS_2G:
          aRes = 2.0/2048.0;
 800cd08:	4b0c      	ldr	r3, [pc, #48]	; (800cd3c <getAres+0x70>)
 800cd0a:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 800cd0e:	601a      	str	r2, [r3, #0]
          break;
 800cd10:	e00e      	b.n	800cd30 <getAres+0x64>
    case AFS_4G:
          aRes = 4.0/2048.0;
 800cd12:	4b0a      	ldr	r3, [pc, #40]	; (800cd3c <getAres+0x70>)
 800cd14:	f04f 526c 	mov.w	r2, #989855744	; 0x3b000000
 800cd18:	601a      	str	r2, [r3, #0]
          break;
 800cd1a:	e009      	b.n	800cd30 <getAres+0x64>
    case AFS_8G:
          aRes = 8.0/2048.0;
 800cd1c:	4b07      	ldr	r3, [pc, #28]	; (800cd3c <getAres+0x70>)
 800cd1e:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 800cd22:	601a      	str	r2, [r3, #0]
          break;
 800cd24:	e004      	b.n	800cd30 <getAres+0x64>
    case AFS_16G:
          aRes = 16.0/2048.0;
 800cd26:	4b05      	ldr	r3, [pc, #20]	; (800cd3c <getAres+0x70>)
 800cd28:	f04f 5270 	mov.w	r2, #1006632960	; 0x3c000000
 800cd2c:	601a      	str	r2, [r3, #0]
          break;
 800cd2e:	bf00      	nop
  }
}
 800cd30:	bf00      	nop
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bc80      	pop	{r7}
 800cd36:	4770      	bx	lr
 800cd38:	200015be 	.word	0x200015be
 800cd3c:	200015c4 	.word	0x200015c4

0800cd40 <readAccelData>:


void readAccelData(int16_t * destination)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  uint8_t rawData[6];  // x/y/z accel register data stored here
  readBytes(BMX055_ACC_ADDRESS, BMX055_ACC_D_X_LSB, 6, &rawData[0]);       // Read the six raw data registers into data array
 800cd48:	f107 0308 	add.w	r3, r7, #8
 800cd4c:	2206      	movs	r2, #6
 800cd4e:	2102      	movs	r1, #2
 800cd50:	2018      	movs	r0, #24
 800cd52:	f000 fc51 	bl	800d5f8 <readBytes>
  if((rawData[0] & 0x01) && (rawData[2] & 0x01) && (rawData[4] & 0x01)) {  // Check that all 3 axes have new data
 800cd56:	7a3b      	ldrb	r3, [r7, #8]
 800cd58:	f003 0301 	and.w	r3, r3, #1
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d02c      	beq.n	800cdba <readAccelData+0x7a>
 800cd60:	7abb      	ldrb	r3, [r7, #10]
 800cd62:	f003 0301 	and.w	r3, r3, #1
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d027      	beq.n	800cdba <readAccelData+0x7a>
 800cd6a:	7b3b      	ldrb	r3, [r7, #12]
 800cd6c:	f003 0301 	and.w	r3, r3, #1
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d022      	beq.n	800cdba <readAccelData+0x7a>
  destination[0] = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]) >> 4;  // Turn the MSB and LSB into a signed 12-bit value
 800cd74:	7a7b      	ldrb	r3, [r7, #9]
 800cd76:	021b      	lsls	r3, r3, #8
 800cd78:	b21a      	sxth	r2, r3
 800cd7a:	7a3b      	ldrb	r3, [r7, #8]
 800cd7c:	b21b      	sxth	r3, r3
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	b21b      	sxth	r3, r3
 800cd82:	111b      	asrs	r3, r3, #4
 800cd84:	b21a      	sxth	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	801a      	strh	r2, [r3, #0]
  destination[1] = (int16_t) (((int16_t)rawData[3] << 8) | rawData[2]) >> 4;
 800cd8a:	7afb      	ldrb	r3, [r7, #11]
 800cd8c:	021b      	lsls	r3, r3, #8
 800cd8e:	b21a      	sxth	r2, r3
 800cd90:	7abb      	ldrb	r3, [r7, #10]
 800cd92:	b21b      	sxth	r3, r3
 800cd94:	4313      	orrs	r3, r2
 800cd96:	b21a      	sxth	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	3302      	adds	r3, #2
 800cd9c:	1112      	asrs	r2, r2, #4
 800cd9e:	b212      	sxth	r2, r2
 800cda0:	801a      	strh	r2, [r3, #0]
  destination[2] = (int16_t) (((int16_t)rawData[5] << 8) | rawData[4]) >> 4;
 800cda2:	7b7b      	ldrb	r3, [r7, #13]
 800cda4:	021b      	lsls	r3, r3, #8
 800cda6:	b21a      	sxth	r2, r3
 800cda8:	7b3b      	ldrb	r3, [r7, #12]
 800cdaa:	b21b      	sxth	r3, r3
 800cdac:	4313      	orrs	r3, r2
 800cdae:	b21a      	sxth	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	1112      	asrs	r2, r2, #4
 800cdb6:	b212      	sxth	r2, r2
 800cdb8:	801a      	strh	r2, [r3, #0]
  }
}
 800cdba:	bf00      	nop
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <readGyroData>:

void readGyroData(int16_t * destination)
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b084      	sub	sp, #16
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  uint8_t rawData[6];  // x/y/z gyro register data stored here
  readBytes(BMX055_GYRO_ADDRESS, BMX055_GYRO_RATE_X_LSB, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 800cdca:	f107 0308 	add.w	r3, r7, #8
 800cdce:	2206      	movs	r2, #6
 800cdd0:	2102      	movs	r1, #2
 800cdd2:	2068      	movs	r0, #104	; 0x68
 800cdd4:	f000 fc10 	bl	800d5f8 <readBytes>
  destination[0] = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]);   // Turn the MSB and LSB into a signed 16-bit value
 800cdd8:	7a7b      	ldrb	r3, [r7, #9]
 800cdda:	021b      	lsls	r3, r3, #8
 800cddc:	b21a      	sxth	r2, r3
 800cdde:	7a3b      	ldrb	r3, [r7, #8]
 800cde0:	b21b      	sxth	r3, r3
 800cde2:	4313      	orrs	r3, r2
 800cde4:	b21a      	sxth	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	801a      	strh	r2, [r3, #0]
  destination[1] = (int16_t) (((int16_t)rawData[3] << 8) | rawData[2]);
 800cdea:	7afb      	ldrb	r3, [r7, #11]
 800cdec:	021b      	lsls	r3, r3, #8
 800cdee:	b219      	sxth	r1, r3
 800cdf0:	7abb      	ldrb	r3, [r7, #10]
 800cdf2:	b21a      	sxth	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	3302      	adds	r3, #2
 800cdf8:	430a      	orrs	r2, r1
 800cdfa:	b212      	sxth	r2, r2
 800cdfc:	801a      	strh	r2, [r3, #0]
  destination[2] = (int16_t) (((int16_t)rawData[5] << 8) | rawData[4]);
 800cdfe:	7b7b      	ldrb	r3, [r7, #13]
 800ce00:	021b      	lsls	r3, r3, #8
 800ce02:	b219      	sxth	r1, r3
 800ce04:	7b3b      	ldrb	r3, [r7, #12]
 800ce06:	b21a      	sxth	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	3304      	adds	r3, #4
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	b212      	sxth	r2, r2
 800ce10:	801a      	strh	r2, [r3, #0]
}
 800ce12:	bf00      	nop
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
	...

0800ce1c <readMagData>:

void readMagData(int16_t * magData)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b088      	sub	sp, #32
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  int16_t mdata_x = 0, mdata_y = 0, mdata_z = 0, temp = 0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	83fb      	strh	r3, [r7, #30]
 800ce28:	2300      	movs	r3, #0
 800ce2a:	83bb      	strh	r3, [r7, #28]
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	837b      	strh	r3, [r7, #26]
 800ce30:	2300      	movs	r3, #0
 800ce32:	833b      	strh	r3, [r7, #24]
  uint16_t data_r = 0;
 800ce34:	2300      	movs	r3, #0
 800ce36:	82fb      	strh	r3, [r7, #22]
  uint8_t rawData[8];  // x/y/z hall magnetic field data, and Hall resistance data
  readBytes(BMX055_MAG_ADDRESS, BMX055_MAG_XOUT_LSB, 8, &rawData[0]);  // Read the eight raw data registers sequentially into data array
 800ce38:	f107 030c 	add.w	r3, r7, #12
 800ce3c:	2208      	movs	r2, #8
 800ce3e:	2142      	movs	r1, #66	; 0x42
 800ce40:	2010      	movs	r0, #16
 800ce42:	f000 fbd9 	bl	800d5f8 <readBytes>
    if(rawData[6] & 0x01) { // Check if data ready status bit is set
 800ce46:	7cbb      	ldrb	r3, [r7, #18]
 800ce48:	f003 0301 	and.w	r3, r3, #1
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f000 80d5 	beq.w	800cffc <readMagData+0x1e0>
    mdata_x = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]) >> 3;  // 13-bit signed integer for x-axis field
 800ce52:	7b7b      	ldrb	r3, [r7, #13]
 800ce54:	021b      	lsls	r3, r3, #8
 800ce56:	b21a      	sxth	r2, r3
 800ce58:	7b3b      	ldrb	r3, [r7, #12]
 800ce5a:	b21b      	sxth	r3, r3
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	b21b      	sxth	r3, r3
 800ce60:	10db      	asrs	r3, r3, #3
 800ce62:	83fb      	strh	r3, [r7, #30]
    mdata_y = (int16_t) (((int16_t)rawData[3] << 8) | rawData[2]) >> 3;  // 13-bit signed integer for y-axis field
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
 800ce66:	021b      	lsls	r3, r3, #8
 800ce68:	b21a      	sxth	r2, r3
 800ce6a:	7bbb      	ldrb	r3, [r7, #14]
 800ce6c:	b21b      	sxth	r3, r3
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	b21b      	sxth	r3, r3
 800ce72:	10db      	asrs	r3, r3, #3
 800ce74:	83bb      	strh	r3, [r7, #28]
    mdata_z = (int16_t) (((int16_t)rawData[5] << 8) | rawData[4]) >> 1;  // 15-bit signed integer for z-axis field
 800ce76:	7c7b      	ldrb	r3, [r7, #17]
 800ce78:	021b      	lsls	r3, r3, #8
 800ce7a:	b21a      	sxth	r2, r3
 800ce7c:	7c3b      	ldrb	r3, [r7, #16]
 800ce7e:	b21b      	sxth	r3, r3
 800ce80:	4313      	orrs	r3, r2
 800ce82:	b21b      	sxth	r3, r3
 800ce84:	105b      	asrs	r3, r3, #1
 800ce86:	837b      	strh	r3, [r7, #26]
    data_r = (uint16_t) (((uint16_t)rawData[7] << 8) | rawData[6]) >> 2;  // 14-bit unsigned integer for Hall resistance
 800ce88:	7cfb      	ldrb	r3, [r7, #19]
 800ce8a:	021b      	lsls	r3, r3, #8
 800ce8c:	b21a      	sxth	r2, r3
 800ce8e:	7cbb      	ldrb	r3, [r7, #18]
 800ce90:	b21b      	sxth	r3, r3
 800ce92:	4313      	orrs	r3, r2
 800ce94:	b21b      	sxth	r3, r3
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	089b      	lsrs	r3, r3, #2
 800ce9a:	82fb      	strh	r3, [r7, #22]

   // calculate temperature compensated 16-bit magnetic fields
   temp = ((int16_t)(((uint16_t)((((int32_t)dig_xyz1) << 14)/(data_r != 0 ? data_r : dig_xyz1))) - ((uint16_t)0x4000)));
 800ce9c:	4b59      	ldr	r3, [pc, #356]	; (800d004 <readMagData+0x1e8>)
 800ce9e:	881b      	ldrh	r3, [r3, #0]
 800cea0:	039a      	lsls	r2, r3, #14
 800cea2:	8afb      	ldrh	r3, [r7, #22]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d001      	beq.n	800ceac <readMagData+0x90>
 800cea8:	8afb      	ldrh	r3, [r7, #22]
 800ceaa:	e001      	b.n	800ceb0 <readMagData+0x94>
 800ceac:	4b55      	ldr	r3, [pc, #340]	; (800d004 <readMagData+0x1e8>)
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	fb92 f3f3 	sdiv	r3, r2, r3
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	833b      	strh	r3, [r7, #24]
   magData[0] = ((int16_t)((((int32_t)mdata_x) *
 800cebe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
				((((((((int32_t)dig_xy2) * ((((int32_t)temp) * ((int32_t)temp)) >> 7)) +
 800cec2:	4a51      	ldr	r2, [pc, #324]	; (800d008 <readMagData+0x1ec>)
 800cec4:	f992 2000 	ldrsb.w	r2, [r2]
 800cec8:	4610      	mov	r0, r2
 800ceca:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800cece:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 800ced2:	fb01 f202 	mul.w	r2, r1, r2
 800ced6:	11d2      	asrs	r2, r2, #7
 800ced8:	fb02 f100 	mul.w	r1, r2, r0
			     (((int32_t)temp) * ((int32_t)(((int16_t)dig_xy1) << 7)))) >> 9) +
 800cedc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800cee0:	484a      	ldr	r0, [pc, #296]	; (800d00c <readMagData+0x1f0>)
 800cee2:	7800      	ldrb	r0, [r0, #0]
 800cee4:	01c0      	lsls	r0, r0, #7
 800cee6:	fb00 f202 	mul.w	r2, r0, r2
				((((((((int32_t)dig_xy2) * ((((int32_t)temp) * ((int32_t)temp)) >> 7)) +
 800ceea:	440a      	add	r2, r1
			     (((int32_t)temp) * ((int32_t)(((int16_t)dig_xy1) << 7)))) >> 9) +
 800ceec:	1252      	asrs	r2, r2, #9
 800ceee:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
			   ((int32_t)0x100000)) * ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)))) >> 12)) >> 13)) +
 800cef2:	4947      	ldr	r1, [pc, #284]	; (800d010 <readMagData+0x1f4>)
 800cef4:	f991 1000 	ldrsb.w	r1, [r1]
 800cef8:	31a0      	adds	r1, #160	; 0xa0
 800cefa:	fb01 f202 	mul.w	r2, r1, r2
 800cefe:	1312      	asrs	r2, r2, #12
   magData[0] = ((int16_t)((((int32_t)mdata_x) *
 800cf00:	fb02 f303 	mul.w	r3, r2, r3
			   ((int32_t)0x100000)) * ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)))) >> 12)) >> 13)) +
 800cf04:	135b      	asrs	r3, r3, #13
   magData[0] = ((int16_t)((((int32_t)mdata_x) *
 800cf06:	b29a      	uxth	r2, r3
			(((int16_t)dig_x1) << 3);
 800cf08:	4b42      	ldr	r3, [pc, #264]	; (800d014 <readMagData+0x1f8>)
 800cf0a:	f993 3000 	ldrsb.w	r3, [r3]
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	00db      	lsls	r3, r3, #3
 800cf12:	b29b      	uxth	r3, r3
			   ((int32_t)0x100000)) * ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)))) >> 12)) >> 13)) +
 800cf14:	4413      	add	r3, r2
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	b21a      	sxth	r2, r3
   magData[0] = ((int16_t)((((int32_t)mdata_x) *
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	801a      	strh	r2, [r3, #0]

   temp = ((int16_t)(((uint16_t)((((int32_t)dig_xyz1) << 14)/(data_r != 0 ? data_r : dig_xyz1))) - ((uint16_t)0x4000)));
 800cf1e:	4b39      	ldr	r3, [pc, #228]	; (800d004 <readMagData+0x1e8>)
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	039a      	lsls	r2, r3, #14
 800cf24:	8afb      	ldrh	r3, [r7, #22]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d001      	beq.n	800cf2e <readMagData+0x112>
 800cf2a:	8afb      	ldrh	r3, [r7, #22]
 800cf2c:	e001      	b.n	800cf32 <readMagData+0x116>
 800cf2e:	4b35      	ldr	r3, [pc, #212]	; (800d004 <readMagData+0x1e8>)
 800cf30:	881b      	ldrh	r3, [r3, #0]
 800cf32:	fb92 f3f3 	sdiv	r3, r2, r3
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	833b      	strh	r3, [r7, #24]
   magData[1] = ((int16_t)((((int32_t)mdata_y) *
 800cf40:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				((((((((int32_t)dig_xy2) * ((((int32_t)temp) * ((int32_t)temp)) >> 7)) +
 800cf44:	4a30      	ldr	r2, [pc, #192]	; (800d008 <readMagData+0x1ec>)
 800cf46:	f992 2000 	ldrsb.w	r2, [r2]
 800cf4a:	4610      	mov	r0, r2
 800cf4c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800cf50:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 800cf54:	fb01 f202 	mul.w	r2, r1, r2
 800cf58:	11d2      	asrs	r2, r2, #7
 800cf5a:	fb02 f100 	mul.w	r1, r2, r0
			     (((int32_t)temp) * ((int32_t)(((int16_t)dig_xy1) << 7)))) >> 9) +
 800cf5e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800cf62:	482a      	ldr	r0, [pc, #168]	; (800d00c <readMagData+0x1f0>)
 800cf64:	7800      	ldrb	r0, [r0, #0]
 800cf66:	01c0      	lsls	r0, r0, #7
 800cf68:	fb00 f202 	mul.w	r2, r0, r2
				((((((((int32_t)dig_xy2) * ((((int32_t)temp) * ((int32_t)temp)) >> 7)) +
 800cf6c:	440a      	add	r2, r1
			     (((int32_t)temp) * ((int32_t)(((int16_t)dig_xy1) << 7)))) >> 9) +
 800cf6e:	1252      	asrs	r2, r2, #9
 800cf70:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
		           ((int32_t)0x100000)) * ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)))) >> 12)) >> 13)) +
 800cf74:	4928      	ldr	r1, [pc, #160]	; (800d018 <readMagData+0x1fc>)
 800cf76:	f991 1000 	ldrsb.w	r1, [r1]
 800cf7a:	31a0      	adds	r1, #160	; 0xa0
 800cf7c:	fb01 f202 	mul.w	r2, r1, r2
 800cf80:	1312      	asrs	r2, r2, #12
   magData[1] = ((int16_t)((((int32_t)mdata_y) *
 800cf82:	fb02 f303 	mul.w	r3, r2, r3
		           ((int32_t)0x100000)) * ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)))) >> 12)) >> 13)) +
 800cf86:	135b      	asrs	r3, r3, #13
   magData[1] = ((int16_t)((((int32_t)mdata_y) *
 800cf88:	b29a      	uxth	r2, r3
			(((int16_t)dig_y1) << 3);
 800cf8a:	4b24      	ldr	r3, [pc, #144]	; (800d01c <readMagData+0x200>)
 800cf8c:	f993 3000 	ldrsb.w	r3, [r3]
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	00db      	lsls	r3, r3, #3
 800cf94:	b29b      	uxth	r3, r3
		           ((int32_t)0x100000)) * ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)))) >> 12)) >> 13)) +
 800cf96:	4413      	add	r3, r2
 800cf98:	b29a      	uxth	r2, r3
   magData[1] = ((int16_t)((((int32_t)mdata_y) *
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	3302      	adds	r3, #2
		           ((int32_t)0x100000)) * ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)))) >> 12)) >> 13)) +
 800cf9e:	b212      	sxth	r2, r2
   magData[1] = ((int16_t)((((int32_t)mdata_y) *
 800cfa0:	801a      	strh	r2, [r3, #0]
   magData[2] = (((((int32_t)(mdata_z - dig_z4)) << 15) - ((((int32_t)dig_z3) * ((int32_t)(((int16_t)data_r) -
 800cfa2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cfa6:	4a1e      	ldr	r2, [pc, #120]	; (800d020 <readMagData+0x204>)
 800cfa8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800cfac:	1a9b      	subs	r3, r3, r2
 800cfae:	03da      	lsls	r2, r3, #15
 800cfb0:	4b1c      	ldr	r3, [pc, #112]	; (800d024 <readMagData+0x208>)
 800cfb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cfbc:	4618      	mov	r0, r3
	((int16_t)dig_xyz1))))>>2))/(dig_z2 + ((int16_t)(((((int32_t)dig_z1) * ((((int16_t)data_r) << 1)))+(1<<15))>>16))));
 800cfbe:	4b11      	ldr	r3, [pc, #68]	; (800d004 <readMagData+0x1e8>)
 800cfc0:	881b      	ldrh	r3, [r3, #0]
 800cfc2:	b21b      	sxth	r3, r3
   magData[2] = (((((int32_t)(mdata_z - dig_z4)) << 15) - ((((int32_t)dig_z3) * ((int32_t)(((int16_t)data_r) -
 800cfc4:	1ac3      	subs	r3, r0, r3
 800cfc6:	fb01 f303 	mul.w	r3, r1, r3
	((int16_t)dig_xyz1))))>>2))/(dig_z2 + ((int16_t)(((((int32_t)dig_z1) * ((((int16_t)data_r) << 1)))+(1<<15))>>16))));
 800cfca:	109b      	asrs	r3, r3, #2
   magData[2] = (((((int32_t)(mdata_z - dig_z4)) << 15) - ((((int32_t)dig_z3) * ((int32_t)(((int16_t)data_r) -
 800cfcc:	1ad2      	subs	r2, r2, r3
	((int16_t)dig_xyz1))))>>2))/(dig_z2 + ((int16_t)(((((int32_t)dig_z1) * ((((int16_t)data_r) << 1)))+(1<<15))>>16))));
 800cfce:	4b16      	ldr	r3, [pc, #88]	; (800d028 <readMagData+0x20c>)
 800cfd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	4b15      	ldr	r3, [pc, #84]	; (800d02c <readMagData+0x210>)
 800cfd8:	881b      	ldrh	r3, [r3, #0]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cfe0:	005b      	lsls	r3, r3, #1
 800cfe2:	fb00 f303 	mul.w	r3, r0, r3
 800cfe6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cfea:	141b      	asrs	r3, r3, #16
 800cfec:	b21b      	sxth	r3, r3
 800cfee:	440b      	add	r3, r1
 800cff0:	fb92 f2f3 	sdiv	r2, r2, r3
   magData[2] = (((((int32_t)(mdata_z - dig_z4)) << 15) - ((((int32_t)dig_z3) * ((int32_t)(((int16_t)data_r) -
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	3304      	adds	r3, #4
 800cff8:	b212      	sxth	r2, r2
 800cffa:	801a      	strh	r2, [r3, #0]
    }
  }
 800cffc:	bf00      	nop
 800cffe:	3720      	adds	r7, #32
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	200015de 	.word	0x200015de
 800d008:	200015dd 	.word	0x200015dd
 800d00c:	200015dc 	.word	0x200015dc
 800d010:	200015d2 	.word	0x200015d2
 800d014:	200015d0 	.word	0x200015d0
 800d018:	200015d3 	.word	0x200015d3
 800d01c:	200015d1 	.word	0x200015d1
 800d020:	200015da 	.word	0x200015da
 800d024:	200015d8 	.word	0x200015d8
 800d028:	200015d6 	.word	0x200015d6
 800d02c:	200015d4 	.word	0x200015d4

0800d030 <trimBMX055>:
  uint8_t c =  readByte(BMX055_ACC_ADDRESS, BMX055_ACC_D_TEMP);  // Read the raw data register
  return ((int16_t)((int16_t)c << 8)) >> 8 ;  // Turn the byte into a signed 8-bit integer
}

void trimBMX055()  // get trim values for magnetometer sensitivity
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
  uint8_t rawData[2];  //placeholder for 2-byte trim data
  dig_x1 = readByte(BMX055_ACC_ADDRESS, BMM050_DIG_X1);
 800d036:	215d      	movs	r1, #93	; 0x5d
 800d038:	2018      	movs	r0, #24
 800d03a:	f000 faab 	bl	800d594 <readByte>
 800d03e:	4603      	mov	r3, r0
 800d040:	b25a      	sxtb	r2, r3
 800d042:	4b3d      	ldr	r3, [pc, #244]	; (800d138 <trimBMX055+0x108>)
 800d044:	701a      	strb	r2, [r3, #0]
  dig_x2 = readByte(BMX055_ACC_ADDRESS, BMM050_DIG_X2);
 800d046:	2164      	movs	r1, #100	; 0x64
 800d048:	2018      	movs	r0, #24
 800d04a:	f000 faa3 	bl	800d594 <readByte>
 800d04e:	4603      	mov	r3, r0
 800d050:	b25a      	sxtb	r2, r3
 800d052:	4b3a      	ldr	r3, [pc, #232]	; (800d13c <trimBMX055+0x10c>)
 800d054:	701a      	strb	r2, [r3, #0]
  dig_y1 = readByte(BMX055_ACC_ADDRESS, BMM050_DIG_Y1);
 800d056:	215e      	movs	r1, #94	; 0x5e
 800d058:	2018      	movs	r0, #24
 800d05a:	f000 fa9b 	bl	800d594 <readByte>
 800d05e:	4603      	mov	r3, r0
 800d060:	b25a      	sxtb	r2, r3
 800d062:	4b37      	ldr	r3, [pc, #220]	; (800d140 <trimBMX055+0x110>)
 800d064:	701a      	strb	r2, [r3, #0]
  dig_y2 = readByte(BMX055_ACC_ADDRESS, BMM050_DIG_Y2);
 800d066:	2165      	movs	r1, #101	; 0x65
 800d068:	2018      	movs	r0, #24
 800d06a:	f000 fa93 	bl	800d594 <readByte>
 800d06e:	4603      	mov	r3, r0
 800d070:	b25a      	sxtb	r2, r3
 800d072:	4b34      	ldr	r3, [pc, #208]	; (800d144 <trimBMX055+0x114>)
 800d074:	701a      	strb	r2, [r3, #0]
  dig_xy1 = readByte(BMX055_ACC_ADDRESS, BMM050_DIG_XY1);
 800d076:	2171      	movs	r1, #113	; 0x71
 800d078:	2018      	movs	r0, #24
 800d07a:	f000 fa8b 	bl	800d594 <readByte>
 800d07e:	4603      	mov	r3, r0
 800d080:	461a      	mov	r2, r3
 800d082:	4b31      	ldr	r3, [pc, #196]	; (800d148 <trimBMX055+0x118>)
 800d084:	701a      	strb	r2, [r3, #0]
  dig_xy2 = readByte(BMX055_ACC_ADDRESS, BMM050_DIG_XY2);
 800d086:	2170      	movs	r1, #112	; 0x70
 800d088:	2018      	movs	r0, #24
 800d08a:	f000 fa83 	bl	800d594 <readByte>
 800d08e:	4603      	mov	r3, r0
 800d090:	b25a      	sxtb	r2, r3
 800d092:	4b2e      	ldr	r3, [pc, #184]	; (800d14c <trimBMX055+0x11c>)
 800d094:	701a      	strb	r2, [r3, #0]
    readBytes(BMX055_MAG_ADDRESS, BMM050_DIG_Z1_LSB, 2, &rawData[0]);
 800d096:	1d3b      	adds	r3, r7, #4
 800d098:	2202      	movs	r2, #2
 800d09a:	216a      	movs	r1, #106	; 0x6a
 800d09c:	2010      	movs	r0, #16
 800d09e:	f000 faab 	bl	800d5f8 <readBytes>
  dig_z1 = (uint16_t) (((uint16_t)rawData[1] << 8) | rawData[0]);
 800d0a2:	797b      	ldrb	r3, [r7, #5]
 800d0a4:	021b      	lsls	r3, r3, #8
 800d0a6:	b21a      	sxth	r2, r3
 800d0a8:	793b      	ldrb	r3, [r7, #4]
 800d0aa:	b21b      	sxth	r3, r3
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	b21b      	sxth	r3, r3
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	4b27      	ldr	r3, [pc, #156]	; (800d150 <trimBMX055+0x120>)
 800d0b4:	801a      	strh	r2, [r3, #0]
    readBytes(BMX055_MAG_ADDRESS, BMM050_DIG_Z2_LSB, 2, &rawData[0]);
 800d0b6:	1d3b      	adds	r3, r7, #4
 800d0b8:	2202      	movs	r2, #2
 800d0ba:	2168      	movs	r1, #104	; 0x68
 800d0bc:	2010      	movs	r0, #16
 800d0be:	f000 fa9b 	bl	800d5f8 <readBytes>
  dig_z2 = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]);
 800d0c2:	797b      	ldrb	r3, [r7, #5]
 800d0c4:	021b      	lsls	r3, r3, #8
 800d0c6:	b21a      	sxth	r2, r3
 800d0c8:	793b      	ldrb	r3, [r7, #4]
 800d0ca:	b21b      	sxth	r3, r3
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	b21a      	sxth	r2, r3
 800d0d0:	4b20      	ldr	r3, [pc, #128]	; (800d154 <trimBMX055+0x124>)
 800d0d2:	801a      	strh	r2, [r3, #0]
    readBytes(BMX055_MAG_ADDRESS, BMM050_DIG_Z3_LSB, 2, &rawData[0]);
 800d0d4:	1d3b      	adds	r3, r7, #4
 800d0d6:	2202      	movs	r2, #2
 800d0d8:	216e      	movs	r1, #110	; 0x6e
 800d0da:	2010      	movs	r0, #16
 800d0dc:	f000 fa8c 	bl	800d5f8 <readBytes>
  dig_z3 = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]);
 800d0e0:	797b      	ldrb	r3, [r7, #5]
 800d0e2:	021b      	lsls	r3, r3, #8
 800d0e4:	b21a      	sxth	r2, r3
 800d0e6:	793b      	ldrb	r3, [r7, #4]
 800d0e8:	b21b      	sxth	r3, r3
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	b21a      	sxth	r2, r3
 800d0ee:	4b1a      	ldr	r3, [pc, #104]	; (800d158 <trimBMX055+0x128>)
 800d0f0:	801a      	strh	r2, [r3, #0]
    readBytes(BMX055_MAG_ADDRESS, BMM050_DIG_Z4_LSB, 2, &rawData[0]);
 800d0f2:	1d3b      	adds	r3, r7, #4
 800d0f4:	2202      	movs	r2, #2
 800d0f6:	2162      	movs	r1, #98	; 0x62
 800d0f8:	2010      	movs	r0, #16
 800d0fa:	f000 fa7d 	bl	800d5f8 <readBytes>
  dig_z4 = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]);
 800d0fe:	797b      	ldrb	r3, [r7, #5]
 800d100:	021b      	lsls	r3, r3, #8
 800d102:	b21a      	sxth	r2, r3
 800d104:	793b      	ldrb	r3, [r7, #4]
 800d106:	b21b      	sxth	r3, r3
 800d108:	4313      	orrs	r3, r2
 800d10a:	b21a      	sxth	r2, r3
 800d10c:	4b13      	ldr	r3, [pc, #76]	; (800d15c <trimBMX055+0x12c>)
 800d10e:	801a      	strh	r2, [r3, #0]
    readBytes(BMX055_MAG_ADDRESS, BMM050_DIG_XYZ1_LSB, 2, &rawData[0]);
 800d110:	1d3b      	adds	r3, r7, #4
 800d112:	2202      	movs	r2, #2
 800d114:	216c      	movs	r1, #108	; 0x6c
 800d116:	2010      	movs	r0, #16
 800d118:	f000 fa6e 	bl	800d5f8 <readBytes>
  dig_xyz1 = (uint16_t) (((uint16_t)rawData[1] << 8) | rawData[0]);
 800d11c:	797b      	ldrb	r3, [r7, #5]
 800d11e:	021b      	lsls	r3, r3, #8
 800d120:	b21a      	sxth	r2, r3
 800d122:	793b      	ldrb	r3, [r7, #4]
 800d124:	b21b      	sxth	r3, r3
 800d126:	4313      	orrs	r3, r2
 800d128:	b21b      	sxth	r3, r3
 800d12a:	b29a      	uxth	r2, r3
 800d12c:	4b0c      	ldr	r3, [pc, #48]	; (800d160 <trimBMX055+0x130>)
 800d12e:	801a      	strh	r2, [r3, #0]
}
 800d130:	bf00      	nop
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	200015d0 	.word	0x200015d0
 800d13c:	200015d2 	.word	0x200015d2
 800d140:	200015d1 	.word	0x200015d1
 800d144:	200015d3 	.word	0x200015d3
 800d148:	200015dc 	.word	0x200015dc
 800d14c:	200015dd 	.word	0x200015dd
 800d150:	200015d4 	.word	0x200015d4
 800d154:	200015d6 	.word	0x200015d6
 800d158:	200015d8 	.word	0x200015d8
 800d15c:	200015da 	.word	0x200015da
 800d160:	200015de 	.word	0x200015de

0800d164 <initBMX055>:


void initBMX055()
{
 800d164:	b580      	push	{r7, lr}
 800d166:	af00      	add	r7, sp, #0
   // start with all sensors in default mode with all registers reset
   writeByte(BMX055_ACC_ADDRESS,  BMX055_ACC_BGW_SOFTRESET, 0xB6);  // reset accelerometer
 800d168:	22b6      	movs	r2, #182	; 0xb6
 800d16a:	2114      	movs	r1, #20
 800d16c:	2018      	movs	r0, #24
 800d16e:	f000 f9f1 	bl	800d554 <writeByte>
   HAL_Delay(1000); // Wait for all registers to reset
 800d172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d176:	f7f4 fdb7 	bl	8001ce8 <HAL_Delay>

   // Configure accelerometer
   writeByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_RANGE, Ascale & 0x0F); // Set accelerometer full range
 800d17a:	4b3e      	ldr	r3, [pc, #248]	; (800d274 <initBMX055+0x110>)
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	f003 030f 	and.w	r3, r3, #15
 800d182:	b2db      	uxtb	r3, r3
 800d184:	461a      	mov	r2, r3
 800d186:	210f      	movs	r1, #15
 800d188:	2018      	movs	r0, #24
 800d18a:	f000 f9e3 	bl	800d554 <writeByte>
   writeByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_BW, ACCBW & 0x0F);     // Set accelerometer bandwidth
 800d18e:	4b3a      	ldr	r3, [pc, #232]	; (800d278 <initBMX055+0x114>)
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	f003 030f 	and.w	r3, r3, #15
 800d196:	b2db      	uxtb	r3, r3
 800d198:	461a      	mov	r2, r3
 800d19a:	2110      	movs	r1, #16
 800d19c:	2018      	movs	r0, #24
 800d19e:	f000 f9d9 	bl	800d554 <writeByte>
   writeByte(BMX055_ACC_ADDRESS, BMX055_ACC_D_HBW, 0x00);              // Use filtered data
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	2113      	movs	r1, #19
 800d1a6:	2018      	movs	r0, #24
 800d1a8:	f000 f9d4 	bl	800d554 <writeByte>
// set gyro to fast wake up mode, will sleep for 20 ms then run normally for 20 ms
// and collect data for an effective ODR of 50 Hz, other duty cycles are possible but there
// is a minimum wake duration determined by the bandwidth duration, e.g.,  > 10 ms for 23Hz gyro bandwidth
//  writeByte(BMX055_ACC_ADDRESS, BMX055_GYRO_LPM2, 0x87);

 writeByte(BMX055_GYRO_ADDRESS, BMX055_GYRO_RANGE, Gscale);  // set GYRO FS range
 800d1ac:	4b33      	ldr	r3, [pc, #204]	; (800d27c <initBMX055+0x118>)
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	210f      	movs	r1, #15
 800d1b4:	2068      	movs	r0, #104	; 0x68
 800d1b6:	f000 f9cd 	bl	800d554 <writeByte>
 writeByte(BMX055_GYRO_ADDRESS, BMX055_GYRO_BW, GODRBW);     // set GYRO ODR and Bandwidth
 800d1ba:	4b31      	ldr	r3, [pc, #196]	; (800d280 <initBMX055+0x11c>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	461a      	mov	r2, r3
 800d1c0:	2110      	movs	r1, #16
 800d1c2:	2068      	movs	r0, #104	; 0x68
 800d1c4:	f000 f9c6 	bl	800d554 <writeByte>

// writeByte(BMX055_GYRO_ADDRESS, BMX055_GYRO_BGW_SPI3_WDT, 0x06); // Enable watchdog timer for I2C with 50 ms window


// Configure magnetometer
writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_PWR_CNTL1, 0x82);  // Softreset magnetometer, ends up in sleep mode
 800d1c8:	2282      	movs	r2, #130	; 0x82
 800d1ca:	214b      	movs	r1, #75	; 0x4b
 800d1cc:	2010      	movs	r0, #16
 800d1ce:	f000 f9c1 	bl	800d554 <writeByte>
HAL_Delay(100);
 800d1d2:	2064      	movs	r0, #100	; 0x64
 800d1d4:	f7f4 fd88 	bl	8001ce8 <HAL_Delay>
writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_PWR_CNTL1, 0x01); // Wake up magnetometer
 800d1d8:	2201      	movs	r2, #1
 800d1da:	214b      	movs	r1, #75	; 0x4b
 800d1dc:	2010      	movs	r0, #16
 800d1de:	f000 f9b9 	bl	800d554 <writeByte>
HAL_Delay(100);
 800d1e2:	2064      	movs	r0, #100	; 0x64
 800d1e4:	f7f4 fd80 	bl	8001ce8 <HAL_Delay>

writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_PWR_CNTL2, MODR << 3); // Normal mode
 800d1e8:	4b26      	ldr	r3, [pc, #152]	; (800d284 <initBMX055+0x120>)
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	00db      	lsls	r3, r3, #3
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	214c      	movs	r1, #76	; 0x4c
 800d1f4:	2010      	movs	r0, #16
 800d1f6:	f000 f9ad 	bl	800d554 <writeByte>
//writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_PWR_CNTL2, MODR << 3 | 0x02); // Forced mode

//writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_INT_EN_2, 0x84); // Enable data ready pin interrupt, active high

// Set up four standard configurations for the magnetometer
  switch (Mmode)
 800d1fa:	4b23      	ldr	r3, [pc, #140]	; (800d288 <initBMX055+0x124>)
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	2b03      	cmp	r3, #3
 800d200:	d836      	bhi.n	800d270 <initBMX055+0x10c>
 800d202:	a201      	add	r2, pc, #4	; (adr r2, 800d208 <initBMX055+0xa4>)
 800d204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d208:	0800d219 	.word	0x0800d219
 800d20c:	0800d22f 	.word	0x0800d22f
 800d210:	0800d245 	.word	0x0800d245
 800d214:	0800d25b 	.word	0x0800d25b
  {
    case lowPower:
         // Low-power
          writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_REP_XY, 0x01);  // 3 repetitions (oversampling)
 800d218:	2201      	movs	r2, #1
 800d21a:	2151      	movs	r1, #81	; 0x51
 800d21c:	2010      	movs	r0, #16
 800d21e:	f000 f999 	bl	800d554 <writeByte>
          writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_REP_Z,  0x02);  // 3 repetitions (oversampling)
 800d222:	2202      	movs	r2, #2
 800d224:	2152      	movs	r1, #82	; 0x52
 800d226:	2010      	movs	r0, #16
 800d228:	f000 f994 	bl	800d554 <writeByte>
          break;
 800d22c:	e020      	b.n	800d270 <initBMX055+0x10c>
    case Regular:
          // Regular
          writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_REP_XY, 0x04);  //  9 repetitions (oversampling)
 800d22e:	2204      	movs	r2, #4
 800d230:	2151      	movs	r1, #81	; 0x51
 800d232:	2010      	movs	r0, #16
 800d234:	f000 f98e 	bl	800d554 <writeByte>
          writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_REP_Z,  0x16);  // 15 repetitions (oversampling)
 800d238:	2216      	movs	r2, #22
 800d23a:	2152      	movs	r1, #82	; 0x52
 800d23c:	2010      	movs	r0, #16
 800d23e:	f000 f989 	bl	800d554 <writeByte>
          break;
 800d242:	e015      	b.n	800d270 <initBMX055+0x10c>
    case enhancedRegular:
          // Enhanced Regular
          writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_REP_XY, 0x07);  // 15 repetitions (oversampling)
 800d244:	2207      	movs	r2, #7
 800d246:	2151      	movs	r1, #81	; 0x51
 800d248:	2010      	movs	r0, #16
 800d24a:	f000 f983 	bl	800d554 <writeByte>
          writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_REP_Z,  0x22);  // 27 repetitions (oversampling)
 800d24e:	2222      	movs	r2, #34	; 0x22
 800d250:	2152      	movs	r1, #82	; 0x52
 800d252:	2010      	movs	r0, #16
 800d254:	f000 f97e 	bl	800d554 <writeByte>
          break;
 800d258:	e00a      	b.n	800d270 <initBMX055+0x10c>
    case highAccuracy:
          // High Accuracy
          writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_REP_XY, 0x17);  // 47 repetitions (oversampling)
 800d25a:	2217      	movs	r2, #23
 800d25c:	2151      	movs	r1, #81	; 0x51
 800d25e:	2010      	movs	r0, #16
 800d260:	f000 f978 	bl	800d554 <writeByte>
          writeByte(BMX055_MAG_ADDRESS, BMX055_MAG_REP_Z,  0x51);  // 83 repetitions (oversampling)
 800d264:	2251      	movs	r2, #81	; 0x51
 800d266:	2152      	movs	r1, #82	; 0x52
 800d268:	2010      	movs	r0, #16
 800d26a:	f000 f973 	bl	800d554 <writeByte>
          break;
 800d26e:	bf00      	nop
  }
}
 800d270:	bf00      	nop
 800d272:	bd80      	pop	{r7, pc}
 800d274:	200015be 	.word	0x200015be
 800d278:	200015bf 	.word	0x200015bf
 800d27c:	200015bc 	.word	0x200015bc
 800d280:	200015bd 	.word	0x200015bd
 800d284:	200015c1 	.word	0x200015c1
 800d288:	200015c0 	.word	0x200015c0

0800d28c <fastcompaccelBMX055>:

void fastcompaccelBMX055(float * dest1)
{
 800d28c:	b590      	push	{r4, r7, lr}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  writeByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_CTRL, 0x80); // set all accel offset compensation registers to zero
 800d294:	2280      	movs	r2, #128	; 0x80
 800d296:	2136      	movs	r1, #54	; 0x36
 800d298:	2018      	movs	r0, #24
 800d29a:	f000 f95b 	bl	800d554 <writeByte>
  writeByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_SETTING, 0x20);  // set offset targets to 0, 0, and +1 g for x, y, z axes
 800d29e:	2220      	movs	r2, #32
 800d2a0:	2137      	movs	r1, #55	; 0x37
 800d2a2:	2018      	movs	r0, #24
 800d2a4:	f000 f956 	bl	800d554 <writeByte>
  writeByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_CTRL, 0x20); // calculate x-axis offset
 800d2a8:	2220      	movs	r2, #32
 800d2aa:	2136      	movs	r1, #54	; 0x36
 800d2ac:	2018      	movs	r0, #24
 800d2ae:	f000 f951 	bl	800d554 <writeByte>

  uint8_t c = readByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_CTRL);
 800d2b2:	2136      	movs	r1, #54	; 0x36
 800d2b4:	2018      	movs	r0, #24
 800d2b6:	f000 f96d 	bl	800d594 <readByte>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	73fb      	strb	r3, [r7, #15]
  while(!(c & 0x10)) {   // check if fast calibration complete
 800d2be:	e008      	b.n	800d2d2 <fastcompaccelBMX055+0x46>
  c = readByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_CTRL);
 800d2c0:	2136      	movs	r1, #54	; 0x36
 800d2c2:	2018      	movs	r0, #24
 800d2c4:	f000 f966 	bl	800d594 <readByte>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(10);
 800d2cc:	200a      	movs	r0, #10
 800d2ce:	f7f4 fd0b 	bl	8001ce8 <HAL_Delay>
  while(!(c & 0x10)) {   // check if fast calibration complete
 800d2d2:	7bfb      	ldrb	r3, [r7, #15]
 800d2d4:	f003 0310 	and.w	r3, r3, #16
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d0f1      	beq.n	800d2c0 <fastcompaccelBMX055+0x34>
}
  writeByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_CTRL, 0x40); // calculate y-axis offset
 800d2dc:	2240      	movs	r2, #64	; 0x40
 800d2de:	2136      	movs	r1, #54	; 0x36
 800d2e0:	2018      	movs	r0, #24
 800d2e2:	f000 f937 	bl	800d554 <writeByte>

  c = readByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_CTRL);
 800d2e6:	2136      	movs	r1, #54	; 0x36
 800d2e8:	2018      	movs	r0, #24
 800d2ea:	f000 f953 	bl	800d594 <readByte>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	73fb      	strb	r3, [r7, #15]
  while(!(c & 0x10)) {   // check if fast calibration complete
 800d2f2:	e008      	b.n	800d306 <fastcompaccelBMX055+0x7a>
  c = readByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_CTRL);
 800d2f4:	2136      	movs	r1, #54	; 0x36
 800d2f6:	2018      	movs	r0, #24
 800d2f8:	f000 f94c 	bl	800d594 <readByte>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(10);
 800d300:	200a      	movs	r0, #10
 800d302:	f7f4 fcf1 	bl	8001ce8 <HAL_Delay>
  while(!(c & 0x10)) {   // check if fast calibration complete
 800d306:	7bfb      	ldrb	r3, [r7, #15]
 800d308:	f003 0310 	and.w	r3, r3, #16
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d0f1      	beq.n	800d2f4 <fastcompaccelBMX055+0x68>
}
  writeByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_CTRL, 0x60); // calculate z-axis offset
 800d310:	2260      	movs	r2, #96	; 0x60
 800d312:	2136      	movs	r1, #54	; 0x36
 800d314:	2018      	movs	r0, #24
 800d316:	f000 f91d 	bl	800d554 <writeByte>

  c = readByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_CTRL);
 800d31a:	2136      	movs	r1, #54	; 0x36
 800d31c:	2018      	movs	r0, #24
 800d31e:	f000 f939 	bl	800d594 <readByte>
 800d322:	4603      	mov	r3, r0
 800d324:	73fb      	strb	r3, [r7, #15]
  while(!(c & 0x10)) {   // check if fast calibration complete
 800d326:	e008      	b.n	800d33a <fastcompaccelBMX055+0xae>
  c = readByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_CTRL);
 800d328:	2136      	movs	r1, #54	; 0x36
 800d32a:	2018      	movs	r0, #24
 800d32c:	f000 f932 	bl	800d594 <readByte>
 800d330:	4603      	mov	r3, r0
 800d332:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(10);
 800d334:	200a      	movs	r0, #10
 800d336:	f7f4 fcd7 	bl	8001ce8 <HAL_Delay>
  while(!(c & 0x10)) {   // check if fast calibration complete
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
 800d33c:	f003 0310 	and.w	r3, r3, #16
 800d340:	2b00      	cmp	r3, #0
 800d342:	d0f1      	beq.n	800d328 <fastcompaccelBMX055+0x9c>
}

  int8_t compx = readByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_OFFSET_X);
 800d344:	2138      	movs	r1, #56	; 0x38
 800d346:	2018      	movs	r0, #24
 800d348:	f000 f924 	bl	800d594 <readByte>
 800d34c:	4603      	mov	r3, r0
 800d34e:	73bb      	strb	r3, [r7, #14]
  int8_t compy = readByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_OFFSET_Y);
 800d350:	2139      	movs	r1, #57	; 0x39
 800d352:	2018      	movs	r0, #24
 800d354:	f000 f91e 	bl	800d594 <readByte>
 800d358:	4603      	mov	r3, r0
 800d35a:	737b      	strb	r3, [r7, #13]
  int8_t compz = readByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_OFFSET_Z);
 800d35c:	213a      	movs	r1, #58	; 0x3a
 800d35e:	2018      	movs	r0, #24
 800d360:	f000 f918 	bl	800d594 <readByte>
 800d364:	4603      	mov	r3, r0
 800d366:	733b      	strb	r3, [r7, #12]

  dest1[0] = (float) compx/128.; // accleration bias in g
 800d368:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7f3 fb97 	bl	8000aa0 <__aeabi_i2f>
 800d372:	4603      	mov	r3, r0
 800d374:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 800d378:	4618      	mov	r0, r3
 800d37a:	f7f3 fc99 	bl	8000cb0 <__aeabi_fdiv>
 800d37e:	4603      	mov	r3, r0
 800d380:	461a      	mov	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	601a      	str	r2, [r3, #0]
  dest1[1] = (float) compy/128.; // accleration bias in g
 800d386:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7f3 fb88 	bl	8000aa0 <__aeabi_i2f>
 800d390:	4602      	mov	r2, r0
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	1d1c      	adds	r4, r3, #4
 800d396:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 800d39a:	4610      	mov	r0, r2
 800d39c:	f7f3 fc88 	bl	8000cb0 <__aeabi_fdiv>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	6023      	str	r3, [r4, #0]
  dest1[2] = (float) compz/128.; // accleration bias in g
 800d3a4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7f3 fb79 	bl	8000aa0 <__aeabi_i2f>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f103 0408 	add.w	r4, r3, #8
 800d3b6:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	f7f3 fc78 	bl	8000cb0 <__aeabi_fdiv>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	6023      	str	r3, [r4, #0]
}
 800d3c4:	bf00      	nop
 800d3c6:	3714      	adds	r7, #20
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd90      	pop	{r4, r7, pc}

0800d3cc <magcalBMX055>:


void magcalBMX055(float * dest1)
{
 800d3cc:	b590      	push	{r4, r7, lr}
 800d3ce:	b08f      	sub	sp, #60	; 0x3c
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  uint16_t ii = 0, sample_count = 0;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d3d8:	2300      	movs	r3, #0
 800d3da:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int32_t mag_bias[3] = {0, 0, 0};
 800d3dc:	2300      	movs	r3, #0
 800d3de:	623b      	str	r3, [r7, #32]
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	627b      	str	r3, [r7, #36]	; 0x24
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	62bb      	str	r3, [r7, #40]	; 0x28
  int16_t mag_max[3] = {0, 0, 0}, mag_min[3] = {0, 0, 0};
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	833b      	strh	r3, [r7, #24]
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	837b      	strh	r3, [r7, #26]
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	83bb      	strh	r3, [r7, #28]
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	823b      	strh	r3, [r7, #16]
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	827b      	strh	r3, [r7, #18]
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	82bb      	strh	r3, [r7, #20]

//  Serial.println("Mag Calibration: Wave device in a figure eight until done!");
  HAL_Delay(4000);
 800d400:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800d404:	f7f4 fc70 	bl	8001ce8 <HAL_Delay>

   sample_count = 128;
 800d408:	2380      	movs	r3, #128	; 0x80
 800d40a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   for(ii = 0; ii < sample_count; ii++) {
 800d40c:	2300      	movs	r3, #0
 800d40e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d410:	e04d      	b.n	800d4ae <magcalBMX055+0xe2>
    int16_t mag_temp[3] = {0, 0, 0};
 800d412:	2300      	movs	r3, #0
 800d414:	813b      	strh	r3, [r7, #8]
 800d416:	2300      	movs	r3, #0
 800d418:	817b      	strh	r3, [r7, #10]
 800d41a:	2300      	movs	r3, #0
 800d41c:	81bb      	strh	r3, [r7, #12]
    readMagData(mag_temp);
 800d41e:	f107 0308 	add.w	r3, r7, #8
 800d422:	4618      	mov	r0, r3
 800d424:	f7ff fcfa 	bl	800ce1c <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 800d428:	2300      	movs	r3, #0
 800d42a:	633b      	str	r3, [r7, #48]	; 0x30
 800d42c:	e036      	b.n	800d49c <magcalBMX055+0xd0>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 800d42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d430:	005b      	lsls	r3, r3, #1
 800d432:	3338      	adds	r3, #56	; 0x38
 800d434:	443b      	add	r3, r7
 800d436:	f933 2c30 	ldrsh.w	r2, [r3, #-48]
 800d43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43c:	005b      	lsls	r3, r3, #1
 800d43e:	3338      	adds	r3, #56	; 0x38
 800d440:	443b      	add	r3, r7
 800d442:	f933 3c20 	ldrsh.w	r3, [r3, #-32]
 800d446:	429a      	cmp	r2, r3
 800d448:	dd0b      	ble.n	800d462 <magcalBMX055+0x96>
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	005b      	lsls	r3, r3, #1
 800d44e:	3338      	adds	r3, #56	; 0x38
 800d450:	443b      	add	r3, r7
 800d452:	f933 2c30 	ldrsh.w	r2, [r3, #-48]
 800d456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	3338      	adds	r3, #56	; 0x38
 800d45c:	443b      	add	r3, r7
 800d45e:	f823 2c20 	strh.w	r2, [r3, #-32]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 800d462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d464:	005b      	lsls	r3, r3, #1
 800d466:	3338      	adds	r3, #56	; 0x38
 800d468:	443b      	add	r3, r7
 800d46a:	f933 2c30 	ldrsh.w	r2, [r3, #-48]
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	005b      	lsls	r3, r3, #1
 800d472:	3338      	adds	r3, #56	; 0x38
 800d474:	443b      	add	r3, r7
 800d476:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	da0b      	bge.n	800d496 <magcalBMX055+0xca>
 800d47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	3338      	adds	r3, #56	; 0x38
 800d484:	443b      	add	r3, r7
 800d486:	f933 2c30 	ldrsh.w	r2, [r3, #-48]
 800d48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48c:	005b      	lsls	r3, r3, #1
 800d48e:	3338      	adds	r3, #56	; 0x38
 800d490:	443b      	add	r3, r7
 800d492:	f823 2c28 	strh.w	r2, [r3, #-40]
    for (int jj = 0; jj < 3; jj++) {
 800d496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d498:	3301      	adds	r3, #1
 800d49a:	633b      	str	r3, [r7, #48]	; 0x30
 800d49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49e:	2b02      	cmp	r3, #2
 800d4a0:	ddc5      	ble.n	800d42e <magcalBMX055+0x62>
    }
    HAL_Delay(105);  // at 10 Hz ODR, new mag data is available every 100 ms
 800d4a2:	2069      	movs	r0, #105	; 0x69
 800d4a4:	f7f4 fc20 	bl	8001ce8 <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 800d4a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d4ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d4b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d3ad      	bcc.n	800d412 <magcalBMX055+0x46>

//    Serial.println("mag x min/max:"); Serial.println(mag_max[0]); Serial.println(mag_min[0]);
//    Serial.println("mag y min/max:"); Serial.println(mag_max[1]); Serial.println(mag_min[1]);
//    Serial.println("mag z min/max:"); Serial.println(mag_max[2]); Serial.println(mag_min[2]);

    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 800d4b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	0fda      	lsrs	r2, r3, #31
 800d4c4:	4413      	add	r3, r2
 800d4c6:	105b      	asrs	r3, r3, #1
 800d4c8:	623b      	str	r3, [r7, #32]
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 800d4ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d4d4:	4413      	add	r3, r2
 800d4d6:	0fda      	lsrs	r2, r3, #31
 800d4d8:	4413      	add	r3, r2
 800d4da:	105b      	asrs	r3, r3, #1
 800d4dc:	627b      	str	r3, [r7, #36]	; 0x24
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 800d4de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	0fda      	lsrs	r2, r3, #31
 800d4ec:	4413      	add	r3, r2
 800d4ee:	105b      	asrs	r3, r3, #1
 800d4f0:	62bb      	str	r3, [r7, #40]	; 0x28

    dest1[0] = (float) mag_bias[0]*mRes;  // save mag biases in G for main program
 800d4f2:	6a3b      	ldr	r3, [r7, #32]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7f3 fad3 	bl	8000aa0 <__aeabi_i2f>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	4b14      	ldr	r3, [pc, #80]	; (800d550 <magcalBMX055+0x184>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4619      	mov	r1, r3
 800d502:	4610      	mov	r0, r2
 800d504:	f7f3 fb20 	bl	8000b48 <__aeabi_fmul>
 800d508:	4603      	mov	r3, r0
 800d50a:	461a      	mov	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	601a      	str	r2, [r3, #0]
    dest1[1] = (float) mag_bias[1]*mRes;
 800d510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d512:	4618      	mov	r0, r3
 800d514:	f7f3 fac4 	bl	8000aa0 <__aeabi_i2f>
 800d518:	4b0d      	ldr	r3, [pc, #52]	; (800d550 <magcalBMX055+0x184>)
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	1d1c      	adds	r4, r3, #4
 800d520:	4611      	mov	r1, r2
 800d522:	f7f3 fb11 	bl	8000b48 <__aeabi_fmul>
 800d526:	4603      	mov	r3, r0
 800d528:	6023      	str	r3, [r4, #0]
    dest1[2] = (float) mag_bias[2]*mRes;
 800d52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7f3 fab7 	bl	8000aa0 <__aeabi_i2f>
 800d532:	4b07      	ldr	r3, [pc, #28]	; (800d550 <magcalBMX055+0x184>)
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f103 0408 	add.w	r4, r3, #8
 800d53c:	4611      	mov	r1, r2
 800d53e:	f7f3 fb03 	bl	8000b48 <__aeabi_fmul>
 800d542:	4603      	mov	r3, r0
 800d544:	6023      	str	r3, [r4, #0]
  writeByte(BMX055M_ADDRESS, BMX055M_OFFSET_Y_REG_H_M, ((int16_t)mag_bias[1] >> 8) & 0xFF);
  writeByte(BMX055M_ADDRESS, BMX055M_OFFSET_Z_REG_L_M, (int16_t) mag_bias[2] & 0xFF);
  writeByte(BMX055M_ADDRESS, BMX055M_OFFSET_Z_REG_H_M, ((int16_t)mag_bias[2] >> 8) & 0xFF);
 */
//   Serial.println("Mag Calibration done!");
}
 800d546:	bf00      	nop
 800d548:	373c      	adds	r7, #60	; 0x3c
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd90      	pop	{r4, r7, pc}
 800d54e:	bf00      	nop
 800d550:	200015cc 	.word	0x200015cc

0800d554 <writeByte>:


// I2C read/write functions for the MPU9250 and AK8963 sensors

void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af02      	add	r7, sp, #8
 800d55a:	4603      	mov	r3, r0
 800d55c:	71fb      	strb	r3, [r7, #7]
 800d55e:	460b      	mov	r3, r1
 800d560:	71bb      	strb	r3, [r7, #6]
 800d562:	4613      	mov	r3, r2
 800d564:	717b      	strb	r3, [r7, #5]
//	Wire.write(data);                 // Put data in Tx buffer
//	Wire.endTransmission();           // Send the Tx buffer


	uint8_t buffer[2];
	buffer[0]=subAddress;
 800d566:	79bb      	ldrb	r3, [r7, #6]
 800d568:	733b      	strb	r3, [r7, #12]
	buffer[1]=data;
 800d56a:	797b      	ldrb	r3, [r7, #5]
 800d56c:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&cur_i2c, address<<1, buffer, 2, 10);
 800d56e:	79fb      	ldrb	r3, [r7, #7]
 800d570:	b29b      	uxth	r3, r3
 800d572:	005b      	lsls	r3, r3, #1
 800d574:	b299      	uxth	r1, r3
 800d576:	f107 020c 	add.w	r2, r7, #12
 800d57a:	230a      	movs	r3, #10
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	2302      	movs	r3, #2
 800d580:	4803      	ldr	r0, [pc, #12]	; (800d590 <writeByte+0x3c>)
 800d582:	f7f5 f87f 	bl	8002684 <HAL_I2C_Master_Transmit>
}
 800d586:	bf00      	nop
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	20000388 	.word	0x20000388

0800d594 <readByte>:

uint8_t readByte(uint8_t address, uint8_t subAddress)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af02      	add	r7, sp, #8
 800d59a:	4603      	mov	r3, r0
 800d59c:	460a      	mov	r2, r1
 800d59e:	71fb      	strb	r3, [r7, #7]
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	71bb      	strb	r3, [r7, #6]
////	Wire.requestFrom(address, 1);  // Read one byte from slave register address
//	Wire.requestFrom(address, (size_t) 1);   // Read one byte from slave register address
//	data = Wire.read();                      // Fill Rx buffer with result
//	return data;                             // Return data read from slave register

	uint8_t cmd_size = 1;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	73fb      	strb	r3, [r7, #15]
	uint8_t count = 1;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Mem_Read(&cur_i2c, address<< 1, subAddress, cmd_size, &data, count, 10);
//	return data;

uint16_t addr = address;
 800d5b0:	79fb      	ldrb	r3, [r7, #7]
 800d5b2:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Master_Transmit	(&cur_i2c, addr << 1, &subAddress, cmd_size, 10);
 800d5b4:	89bb      	ldrh	r3, [r7, #12]
 800d5b6:	005b      	lsls	r3, r3, #1
 800d5b8:	b299      	uxth	r1, r3
 800d5ba:	7bfb      	ldrb	r3, [r7, #15]
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	1dba      	adds	r2, r7, #6
 800d5c0:	200a      	movs	r0, #10
 800d5c2:	9000      	str	r0, [sp, #0]
 800d5c4:	480b      	ldr	r0, [pc, #44]	; (800d5f4 <readByte+0x60>)
 800d5c6:	f7f5 f85d 	bl	8002684 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive (&cur_i2c, addr<< 1 | 1, &data, count, 10);
 800d5ca:	89bb      	ldrh	r3, [r7, #12]
 800d5cc:	005b      	lsls	r3, r3, #1
 800d5ce:	b21b      	sxth	r3, r3
 800d5d0:	f043 0301 	orr.w	r3, r3, #1
 800d5d4:	b21b      	sxth	r3, r3
 800d5d6:	b299      	uxth	r1, r3
 800d5d8:	7bbb      	ldrb	r3, [r7, #14]
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	f107 020b 	add.w	r2, r7, #11
 800d5e0:	200a      	movs	r0, #10
 800d5e2:	9000      	str	r0, [sp, #0]
 800d5e4:	4803      	ldr	r0, [pc, #12]	; (800d5f4 <readByte+0x60>)
 800d5e6:	f7f5 f94b 	bl	8002880 <HAL_I2C_Master_Receive>

	return data;
 800d5ea:	7afb      	ldrb	r3, [r7, #11]

}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	20000388 	.word	0x20000388

0800d5f8 <readBytes>:

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 800d5f8:	b590      	push	{r4, r7, lr}
 800d5fa:	b089      	sub	sp, #36	; 0x24
 800d5fc:	af04      	add	r7, sp, #16
 800d5fe:	603b      	str	r3, [r7, #0]
 800d600:	4603      	mov	r3, r0
 800d602:	71fb      	strb	r3, [r7, #7]
 800d604:	460b      	mov	r3, r1
 800d606:	71bb      	strb	r3, [r7, #6]
 800d608:	4613      	mov	r3, r2
 800d60a:	717b      	strb	r3, [r7, #5]
////        Wire.requestFrom(address, count);  // Read bytes from slave register address
//        Wire.requestFrom(address, (size_t) count);  // Read bytes from slave register address
//	while (Wire.available()) {
//        dest[i++] = Wire.read(); }         // Put read results in the Rx buffer

	uint8_t cmd_size = 1;
 800d60c:	2301      	movs	r3, #1
 800d60e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&cur_i2c, address<< 1, subAddress, cmd_size, dest, count, 10);
 800d610:	79fb      	ldrb	r3, [r7, #7]
 800d612:	b29b      	uxth	r3, r3
 800d614:	005b      	lsls	r3, r3, #1
 800d616:	b299      	uxth	r1, r3
 800d618:	79bb      	ldrb	r3, [r7, #6]
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	7bfb      	ldrb	r3, [r7, #15]
 800d61e:	b298      	uxth	r0, r3
 800d620:	797b      	ldrb	r3, [r7, #5]
 800d622:	b29b      	uxth	r3, r3
 800d624:	240a      	movs	r4, #10
 800d626:	9402      	str	r4, [sp, #8]
 800d628:	9301      	str	r3, [sp, #4]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	4603      	mov	r3, r0
 800d630:	4803      	ldr	r0, [pc, #12]	; (800d640 <readBytes+0x48>)
 800d632:	f7f5 fb85 	bl	8002d40 <HAL_I2C_Mem_Read>
}
 800d636:	bf00      	nop
 800d638:	3714      	adds	r7, #20
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd90      	pop	{r4, r7, pc}
 800d63e:	bf00      	nop
 800d640:	20000388 	.word	0x20000388

0800d644 <ob1203_I2C_Write>:
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af02      	add	r7, sp, #8
 800d64a:	4603      	mov	r3, r0
 800d64c:	6039      	str	r1, [r7, #0]
 800d64e:	71fb      	strb	r3, [r7, #7]
 800d650:	4613      	mov	r3, r2
 800d652:	71bb      	strb	r3, [r7, #6]
 800d654:	79fb      	ldrb	r3, [r7, #7]
 800d656:	b29b      	uxth	r3, r3
 800d658:	005b      	lsls	r3, r3, #1
 800d65a:	b299      	uxth	r1, r3
 800d65c:	79bb      	ldrb	r3, [r7, #6]
 800d65e:	b29b      	uxth	r3, r3
 800d660:	220a      	movs	r2, #10
 800d662:	9200      	str	r2, [sp, #0]
 800d664:	683a      	ldr	r2, [r7, #0]
 800d666:	4804      	ldr	r0, [pc, #16]	; (800d678 <ob1203_I2C_Write+0x34>)
 800d668:	f7f5 f80c 	bl	8002684 <HAL_I2C_Master_Transmit>
 800d66c:	4603      	mov	r3, r0
 800d66e:	4618      	mov	r0, r3
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20000388 	.word	0x20000388

0800d67c <ob1203_I2C_Read>:
 800d67c:	b590      	push	{r4, r7, lr}
 800d67e:	b089      	sub	sp, #36	; 0x24
 800d680:	af04      	add	r7, sp, #16
 800d682:	60b9      	str	r1, [r7, #8]
 800d684:	607a      	str	r2, [r7, #4]
 800d686:	461a      	mov	r2, r3
 800d688:	4603      	mov	r3, r0
 800d68a:	73fb      	strb	r3, [r7, #15]
 800d68c:	4613      	mov	r3, r2
 800d68e:	73bb      	strb	r3, [r7, #14]
 800d690:	7bfb      	ldrb	r3, [r7, #15]
 800d692:	b29b      	uxth	r3, r3
 800d694:	005b      	lsls	r3, r3, #1
 800d696:	b299      	uxth	r1, r3
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	7bbb      	ldrb	r3, [r7, #14]
 800d6a0:	b298      	uxth	r0, r3
 800d6a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	240a      	movs	r4, #10
 800d6aa:	9402      	str	r4, [sp, #8]
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	9300      	str	r3, [sp, #0]
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	4803      	ldr	r0, [pc, #12]	; (800d6c4 <ob1203_I2C_Read+0x48>)
 800d6b6:	f7f5 fb43 	bl	8002d40 <HAL_I2C_Mem_Read>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3714      	adds	r7, #20
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd90      	pop	{r4, r7, pc}
 800d6c4:	20000388 	.word	0x20000388

0800d6c8 <tca9544a_I2C_SetX>:
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af02      	add	r7, sp, #8
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	71fb      	strb	r3, [r7, #7]
 800d6d2:	79fb      	ldrb	r3, [r7, #7]
 800d6d4:	f043 0304 	orr.w	r3, r3, #4
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	71fb      	strb	r3, [r7, #7]
 800d6dc:	1dfa      	adds	r2, r7, #7
 800d6de:	230a      	movs	r3, #10
 800d6e0:	9300      	str	r3, [sp, #0]
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	21e0      	movs	r1, #224	; 0xe0
 800d6e6:	4803      	ldr	r0, [pc, #12]	; (800d6f4 <tca9544a_I2C_SetX+0x2c>)
 800d6e8:	f7f4 ffcc 	bl	8002684 <HAL_I2C_Master_Transmit>
 800d6ec:	bf00      	nop
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	20000388 	.word	0x20000388

0800d6f8 <tca9544a_I2C_ReadX>:
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af02      	add	r7, sp, #8
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	230a      	movs	r3, #10
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	2301      	movs	r3, #1
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	21e1      	movs	r1, #225	; 0xe1
 800d70a:	4803      	ldr	r0, [pc, #12]	; (800d718 <tca9544a_I2C_ReadX+0x20>)
 800d70c:	f7f5 f8b8 	bl	8002880 <HAL_I2C_Master_Receive>
 800d710:	bf00      	nop
 800d712:	3708      	adds	r7, #8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	20000388 	.word	0x20000388

0800d71c <ob1203_Delay_ms>:
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7f4 fadf 	bl	8001ce8 <HAL_Delay>
 800d72a:	bf00      	nop
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
	...

0800d734 <ob1203_send_results>:
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	70fb      	strb	r3, [r7, #3]
 800d740:	4a0e      	ldr	r2, [pc, #56]	; (800d77c <ob1203_send_results+0x48>)
 800d742:	1d3b      	adds	r3, r7, #4
 800d744:	6013      	str	r3, [r2, #0]
 800d746:	2002      	movs	r0, #2
 800d748:	f7ff ffe8 	bl	800d71c <ob1203_Delay_ms>
 800d74c:	f000 f85a 	bl	800d804 <ob1203_send_preambula>
 800d750:	2002      	movs	r0, #2
 800d752:	f7ff ffe3 	bl	800d71c <ob1203_Delay_ms>
 800d756:	1cfb      	adds	r3, r7, #3
 800d758:	2101      	movs	r1, #1
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fe fdda 	bl	800c314 <CDC_Transmit_FS>
 800d760:	2002      	movs	r0, #2
 800d762:	f7ff ffdb 	bl	800d71c <ob1203_Delay_ms>
 800d766:	4b05      	ldr	r3, [pc, #20]	; (800d77c <ob1203_send_results+0x48>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2104      	movs	r1, #4
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fe fdd1 	bl	800c314 <CDC_Transmit_FS>
 800d772:	bf00      	nop
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	20001638 	.word	0x20001638

0800d780 <BMX_send_result>:
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
 800d78c:	f000 f83a 	bl	800d804 <ob1203_send_preambula>
 800d790:	2002      	movs	r0, #2
 800d792:	f7ff ffc3 	bl	800d71c <ob1203_Delay_ms>
 800d796:	2304      	movs	r3, #4
 800d798:	75fb      	strb	r3, [r7, #23]
 800d79a:	f107 0317 	add.w	r3, r7, #23
 800d79e:	2101      	movs	r1, #1
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fe fdb7 	bl	800c314 <CDC_Transmit_FS>
 800d7a6:	2002      	movs	r0, #2
 800d7a8:	f7ff ffb8 	bl	800d71c <ob1203_Delay_ms>
 800d7ac:	2106      	movs	r1, #6
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	f7fe fdb0 	bl	800c314 <CDC_Transmit_FS>
 800d7b4:	2002      	movs	r0, #2
 800d7b6:	f7ff ffb1 	bl	800d71c <ob1203_Delay_ms>
 800d7ba:	2305      	movs	r3, #5
 800d7bc:	75fb      	strb	r3, [r7, #23]
 800d7be:	f107 0317 	add.w	r3, r7, #23
 800d7c2:	2101      	movs	r1, #1
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7fe fda5 	bl	800c314 <CDC_Transmit_FS>
 800d7ca:	2002      	movs	r0, #2
 800d7cc:	f7ff ffa6 	bl	800d71c <ob1203_Delay_ms>
 800d7d0:	2106      	movs	r1, #6
 800d7d2:	68b8      	ldr	r0, [r7, #8]
 800d7d4:	f7fe fd9e 	bl	800c314 <CDC_Transmit_FS>
 800d7d8:	2002      	movs	r0, #2
 800d7da:	f7ff ff9f 	bl	800d71c <ob1203_Delay_ms>
 800d7de:	2306      	movs	r3, #6
 800d7e0:	75fb      	strb	r3, [r7, #23]
 800d7e2:	f107 0317 	add.w	r3, r7, #23
 800d7e6:	2101      	movs	r1, #1
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7fe fd93 	bl	800c314 <CDC_Transmit_FS>
 800d7ee:	2002      	movs	r0, #2
 800d7f0:	f7ff ff94 	bl	800d71c <ob1203_Delay_ms>
 800d7f4:	2106      	movs	r1, #6
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f7fe fd8c 	bl	800c314 <CDC_Transmit_FS>
 800d7fc:	bf00      	nop
 800d7fe:	3718      	adds	r7, #24
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <ob1203_send_preambula>:
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	23aa      	movs	r3, #170	; 0xaa
 800d80c:	713b      	strb	r3, [r7, #4]
 800d80e:	2355      	movs	r3, #85	; 0x55
 800d810:	717b      	strb	r3, [r7, #5]
 800d812:	23aa      	movs	r3, #170	; 0xaa
 800d814:	71bb      	strb	r3, [r7, #6]
 800d816:	2355      	movs	r3, #85	; 0x55
 800d818:	71fb      	strb	r3, [r7, #7]
 800d81a:	1d3b      	adds	r3, r7, #4
 800d81c:	2104      	movs	r1, #4
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fe fd78 	bl	800c314 <CDC_Transmit_FS>
 800d824:	bf00      	nop
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <ob1203_send_info>:
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	4603      	mov	r3, r0
 800d834:	80fb      	strh	r3, [r7, #6]
 800d836:	2304      	movs	r3, #4
 800d838:	73fb      	strb	r3, [r7, #15]
 800d83a:	2301      	movs	r3, #1
 800d83c:	73bb      	strb	r3, [r7, #14]
 800d83e:	f7ff ffe1 	bl	800d804 <ob1203_send_preambula>
 800d842:	2002      	movs	r0, #2
 800d844:	f7ff ff6a 	bl	800d71c <ob1203_Delay_ms>
 800d848:	1dbb      	adds	r3, r7, #6
 800d84a:	2102      	movs	r1, #2
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7fe fd61 	bl	800c314 <CDC_Transmit_FS>
 800d852:	2002      	movs	r0, #2
 800d854:	f7ff ff62 	bl	800d71c <ob1203_Delay_ms>
 800d858:	f107 030f 	add.w	r3, r7, #15
 800d85c:	2101      	movs	r1, #1
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe fd58 	bl	800c314 <CDC_Transmit_FS>
 800d864:	2002      	movs	r0, #2
 800d866:	f7ff ff59 	bl	800d71c <ob1203_Delay_ms>
 800d86a:	f107 030e 	add.w	r3, r7, #14
 800d86e:	2101      	movs	r1, #1
 800d870:	4618      	mov	r0, r3
 800d872:	f7fe fd4f 	bl	800c314 <CDC_Transmit_FS>
 800d876:	bf00      	nop
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <bmx055_send_info>:
 800d87e:	b580      	push	{r7, lr}
 800d880:	b084      	sub	sp, #16
 800d882:	af00      	add	r7, sp, #0
 800d884:	4603      	mov	r3, r0
 800d886:	71fb      	strb	r3, [r7, #7]
 800d888:	2302      	movs	r3, #2
 800d88a:	73fb      	strb	r3, [r7, #15]
 800d88c:	2303      	movs	r3, #3
 800d88e:	73bb      	strb	r3, [r7, #14]
 800d890:	f7ff ffb8 	bl	800d804 <ob1203_send_preambula>
 800d894:	2002      	movs	r0, #2
 800d896:	f7ff ff41 	bl	800d71c <ob1203_Delay_ms>
 800d89a:	1dfb      	adds	r3, r7, #7
 800d89c:	2101      	movs	r1, #1
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fe fd38 	bl	800c314 <CDC_Transmit_FS>
 800d8a4:	2002      	movs	r0, #2
 800d8a6:	f7ff ff39 	bl	800d71c <ob1203_Delay_ms>
 800d8aa:	f107 030f 	add.w	r3, r7, #15
 800d8ae:	2101      	movs	r1, #1
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7fe fd2f 	bl	800c314 <CDC_Transmit_FS>
 800d8b6:	2002      	movs	r0, #2
 800d8b8:	f7ff ff30 	bl	800d71c <ob1203_Delay_ms>
 800d8bc:	f107 030e 	add.w	r3, r7, #14
 800d8c0:	2101      	movs	r1, #1
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fe fd26 	bl	800c314 <CDC_Transmit_FS>
 800d8c8:	bf00      	nop
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <heartrate11_default_cfg>:
    return I2C_MASTER_SUCCESS;
}
#endif

err_t heartrate11_default_cfg(heartrate11_t *ctx)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
    err_t error_flag = HEARTRATE11_OK;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	73fb      	strb	r3, [r7, #15]
    error_flag |= heartrate11_reset_device(ctx);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 f903 	bl	800dae8 <heartrate11_reset_device>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	7bfb      	ldrb	r3, [r7, #15]
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	73fb      	strb	r3, [r7, #15]
#if defined(__MIKROC_PRO_FOR_ARM__)
    Delay_100ms();
#endif
#if defined(HAL_STM32F103)
    ob1203_Delay_ms(100);
 800d8ec:	2064      	movs	r0, #100	; 0x64
 800d8ee:	f7ff ff15 	bl	800d71c <ob1203_Delay_ms>
#endif
    error_flag |= heartrate11_write_register ( ctx, HEARTRATE11_REG_MAIN_CTRL_1, HEARTRATE11_PS_SAI_OFF |
 800d8f2:	2203      	movs	r2, #3
 800d8f4:	2116      	movs	r1, #22
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f8d1 	bl	800da9e <heartrate11_write_register>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	461a      	mov	r2, r3
 800d900:	7bfb      	ldrb	r3, [r7, #15]
 800d902:	4313      	orrs	r3, r2
 800d904:	73fb      	strb	r3, [r7, #15]
                                                                                     HEARTRATE11_HR_MODE |
                                                                                     HEARTRATE11_PPG_PS_ON );
	error_flag |= heartrate11_write_register ( ctx, HEARTRATE11_REG_INT_CFG_1, HEARTRATE11_PPG_INT_ON );
 800d906:	2210      	movs	r2, #16
 800d908:	212c      	movs	r1, #44	; 0x2c
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f8c7 	bl	800da9e <heartrate11_write_register>
 800d910:	4603      	mov	r3, r0
 800d912:	461a      	mov	r2, r3
 800d914:	7bfb      	ldrb	r3, [r7, #15]
 800d916:	4313      	orrs	r3, r2
 800d918:	73fb      	strb	r3, [r7, #15]
	error_flag |= heartrate11_set_led_current ( ctx, HEARTRATE11_IR_LED, HEARTRATE11_IR_LED_DEFAULT_CURRENT );
 800d91a:	4a19      	ldr	r2, [pc, #100]	; (800d980 <heartrate11_default_cfg+0xb0>)
 800d91c:	2101      	movs	r1, #1
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 f8f2 	bl	800db08 <heartrate11_set_led_current>
 800d924:	4603      	mov	r3, r0
 800d926:	461a      	mov	r2, r3
 800d928:	7bfb      	ldrb	r3, [r7, #15]
 800d92a:	4313      	orrs	r3, r2
 800d92c:	73fb      	strb	r3, [r7, #15]
	error_flag |= heartrate11_write_register ( ctx, HEARTRATE11_REG_PPG_PS_GAIN, HEARTRATE11_PPG_PS_GAIN_1 |
 800d92e:	2209      	movs	r2, #9
 800d930:	212e      	movs	r1, #46	; 0x2e
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f8b3 	bl	800da9e <heartrate11_write_register>
 800d938:	4603      	mov	r3, r0
 800d93a:	461a      	mov	r2, r3
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
 800d93e:	4313      	orrs	r3, r2
 800d940:	73fb      	strb	r3, [r7, #15]
																				 HEARTRATE11_PPG_PS_GAIN_RESERVED );
	error_flag |= heartrate11_write_register ( ctx, HEARTRATE11_REG_PPG_AVG, HEARTRATE11_PPG_AVG_32 |
 800d942:	225a      	movs	r2, #90	; 0x5a
 800d944:	2135      	movs	r1, #53	; 0x35
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 f8a9 	bl	800da9e <heartrate11_write_register>
 800d94c:	4603      	mov	r3, r0
 800d94e:	461a      	mov	r2, r3
 800d950:	7bfb      	ldrb	r3, [r7, #15]
 800d952:	4313      	orrs	r3, r2
 800d954:	73fb      	strb	r3, [r7, #15]
																			 HEARTRATE11_PPG_AVG_RESERVED );
	error_flag |= heartrate11_write_register ( ctx, HEARTRATE11_REG_PPG_PWIDTH_PERIOD, HEARTRATE11_PPG_PWIDTH_247US |
 800d956:	4b0b      	ldr	r3, [pc, #44]	; (800d984 <heartrate11_default_cfg+0xb4>)
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	461a      	mov	r2, r3
 800d962:	2136      	movs	r1, #54	; 0x36
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 f89a 	bl	800da9e <heartrate11_write_register>
 800d96a:	4603      	mov	r3, r0
 800d96c:	461a      	mov	r2, r3
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	4313      	orrs	r3, r2
 800d972:	73fb      	strb	r3, [r7, #15]
																					   rate);
    return error_flag;
 800d974:	7bfb      	ldrb	r3, [r7, #15]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	42480000 	.word	0x42480000
 800d984:	200003dc 	.word	0x200003dc

0800d988 <heartrate11_generic_write>:

err_t heartrate11_generic_write(heartrate11_t *ctx, uint8_t reg, uint8_t *data_in, uint8_t len)
{
 800d988:	b590      	push	{r4, r7, lr}
 800d98a:	b0c7      	sub	sp, #284	; 0x11c
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	f507 748c 	add.w	r4, r7, #280	; 0x118
 800d992:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800d996:	6020      	str	r0, [r4, #0]
 800d998:	4608      	mov	r0, r1
 800d99a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800d99e:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800d9a2:	600a      	str	r2, [r1, #0]
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d9aa:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	701a      	strb	r2, [r3, #0]
 800d9b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d9b6:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800d9ba:	460a      	mov	r2, r1
 800d9bc:	701a      	strb	r2, [r3, #0]
    uint8_t data_buf[256] = { 0 };
 800d9be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d9c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	601a      	str	r2, [r3, #0]
 800d9ca:	3304      	adds	r3, #4
 800d9cc:	22fc      	movs	r2, #252	; 0xfc
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f000 f99b 	bl	800dd0c <memset>
    data_buf[0] = reg;
 800d9d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d9da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9de:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800d9e2:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 800d9e6:	7812      	ldrb	r2, [r2, #0]
 800d9e8:	701a      	strb	r2, [r3, #0]
    for(uint8_t cnt = 0; cnt < len; cnt++)
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800d9f0:	e015      	b.n	800da1e <heartrate11_generic_write+0x96>
    {
        data_buf[cnt + 1] = data_in[cnt];
 800d9f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d9f6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800d9fa:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800d9fe:	6812      	ldr	r2, [r2, #0]
 800da00:	441a      	add	r2, r3
 800da02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800da06:	3301      	adds	r3, #1
 800da08:	7811      	ldrb	r1, [r2, #0]
 800da0a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800da0e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800da12:	54d1      	strb	r1, [r2, r3]
    for(uint8_t cnt = 0; cnt < len; cnt++)
 800da14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800da18:	3301      	adds	r3, #1
 800da1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800da1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800da22:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800da26:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d3e0      	bcc.n	800d9f2 <heartrate11_generic_write+0x6a>
    }
#if defined(__MIKROC_PRO_FOR_ARM__)
    return i2c_master_write(&ctx->i2c, data_buf, len + 1);
#endif
#if defined(HAL_STM32F103)
    if(HEARTRATE11_OK == ob1203_I2C_Write(HEARTRATE11_DEVICE_ADDRESS, data_buf, len + 1))
 800da30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800da34:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	3301      	adds	r3, #1
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	f107 0314 	add.w	r3, r7, #20
 800da42:	4619      	mov	r1, r3
 800da44:	2053      	movs	r0, #83	; 0x53
 800da46:	f7ff fdfd 	bl	800d644 <ob1203_I2C_Write>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d101      	bne.n	800da54 <heartrate11_generic_write+0xcc>
    	return HEARTRATE11_OK;
 800da50:	2300      	movs	r3, #0
 800da52:	e000      	b.n	800da56 <heartrate11_generic_write+0xce>
#endif
    return HEARTRATE11_ERROR;
 800da54:	23ff      	movs	r3, #255	; 0xff
}
 800da56:	4618      	mov	r0, r3
 800da58:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd90      	pop	{r4, r7, pc}

0800da60 <heartrate11_generic_read>:

err_t heartrate11_generic_read(heartrate11_t *ctx, uint8_t reg, uint8_t *data_out, uint8_t len)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af02      	add	r7, sp, #8
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	607a      	str	r2, [r7, #4]
 800da6a:	461a      	mov	r2, r3
 800da6c:	460b      	mov	r3, r1
 800da6e:	72fb      	strb	r3, [r7, #11]
 800da70:	4613      	mov	r3, r2
 800da72:	72bb      	strb	r3, [r7, #10]
#if defined(__MIKROC_PRO_FOR_ARM__)
    return i2c_master_write_then_read(&ctx->i2c, &reg, 1, data_out, len);
#endif
#if defined(HAL_STM32F103)
    if(HEARTRATE11_OK == ob1203_I2C_Read(HEARTRATE11_DEVICE_ADDRESS, &reg, data_out, 1, len + 1))
 800da74:	7abb      	ldrb	r3, [r7, #10]
 800da76:	3301      	adds	r3, #1
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	f107 010b 	add.w	r1, r7, #11
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	2301      	movs	r3, #1
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	2053      	movs	r0, #83	; 0x53
 800da86:	f7ff fdf9 	bl	800d67c <ob1203_I2C_Read>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d101      	bne.n	800da94 <heartrate11_generic_read+0x34>
    	return HEARTRATE11_OK;
 800da90:	2300      	movs	r3, #0
 800da92:	e000      	b.n	800da96 <heartrate11_generic_read+0x36>
#endif
    return HEARTRATE11_ERROR;
 800da94:	23ff      	movs	r3, #255	; 0xff
}
 800da96:	4618      	mov	r0, r3
 800da98:	3710      	adds	r7, #16
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <heartrate11_write_register>:

err_t heartrate11_write_register(heartrate11_t *ctx, uint8_t reg, uint8_t data_in)
{
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b082      	sub	sp, #8
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
 800daa6:	460b      	mov	r3, r1
 800daa8:	70fb      	strb	r3, [r7, #3]
 800daaa:	4613      	mov	r3, r2
 800daac:	70bb      	strb	r3, [r7, #2]
    return heartrate11_generic_write(ctx, reg, &data_in, 1);
 800daae:	1cba      	adds	r2, r7, #2
 800dab0:	78f9      	ldrb	r1, [r7, #3]
 800dab2:	2301      	movs	r3, #1
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f7ff ff67 	bl	800d988 <heartrate11_generic_write>
 800daba:	4603      	mov	r3, r0
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3708      	adds	r7, #8
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <heartrate11_read_register>:

err_t heartrate11_read_register(heartrate11_t *ctx, uint8_t reg, uint8_t *data_out)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	460b      	mov	r3, r1
 800dace:	607a      	str	r2, [r7, #4]
 800dad0:	72fb      	strb	r3, [r7, #11]
    return heartrate11_generic_read(ctx, reg, data_out, 1);
 800dad2:	7af9      	ldrb	r1, [r7, #11]
 800dad4:	2301      	movs	r3, #1
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f7ff ffc1 	bl	800da60 <heartrate11_generic_read>
 800dade:	4603      	mov	r3, r0
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <heartrate11_reset_device>:
    return digital_in_read(&ctx->int_pin);
}
#endif

err_t heartrate11_reset_device(heartrate11_t *ctx)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
    return heartrate11_write_register(ctx, HEARTRATE11_REG_MAIN_CTRL_0, HEARTRATE11_SW_RESET);
 800daf0:	2280      	movs	r2, #128	; 0x80
 800daf2:	2115      	movs	r1, #21
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f7ff ffd2 	bl	800da9e <heartrate11_write_register>
 800dafa:	4603      	mov	r3, r0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	0000      	movs	r0, r0
	...

0800db08 <heartrate11_set_led_current>:

err_t heartrate11_set_led_current(heartrate11_t *ctx, uint8_t led, float current)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	460b      	mov	r3, r1
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	72fb      	strb	r3, [r7, #11]
    if(((HEARTRATE11_RED_LED == led) &&(current > HEARTRATE11_RED_LED_MAX_CURRENT)) ||
 800db16:	7afb      	ldrb	r3, [r7, #11]
 800db18:	2b02      	cmp	r3, #2
 800db1a:	d106      	bne.n	800db2a <heartrate11_set_led_current+0x22>
 800db1c:	4944      	ldr	r1, [pc, #272]	; (800dc30 <heartrate11_set_led_current+0x128>)
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7f3 f9ce 	bl	8000ec0 <__aeabi_fcmpgt>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d109      	bne.n	800db3e <heartrate11_set_led_current+0x36>
 800db2a:	7afb      	ldrb	r3, [r7, #11]
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d806      	bhi.n	800db3e <heartrate11_set_led_current+0x36>
        (led > HEARTRATE11_RED_LED) || (current > HEARTRATE11_PS_IR_LED_MAX_CURRENT))
 800db30:	4940      	ldr	r1, [pc, #256]	; (800dc34 <heartrate11_set_led_current+0x12c>)
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7f3 f9c4 	bl	8000ec0 <__aeabi_fcmpgt>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d001      	beq.n	800db42 <heartrate11_set_led_current+0x3a>
    {
        return HEARTRATE11_ERROR;
 800db3e:	23ff      	movs	r3, #255	; 0xff
 800db40:	e069      	b.n	800dc16 <heartrate11_set_led_current+0x10e>
    }
    uint16_t raw_curr;
    uint8_t reg;
    if(HEARTRATE11_RED_LED == led)
 800db42:	7afb      	ldrb	r3, [r7, #11]
 800db44:	2b02      	cmp	r3, #2
 800db46:	d128      	bne.n	800db9a <heartrate11_set_led_current+0x92>
    {
        raw_curr =(uint16_t)((current / HEARTRATE11_RED_LED_MAX_CURRENT) * HEARTRATE11_RED_LED_CURRENT_RES +
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7f2 fc65 	bl	8000418 <__aeabi_f2d>
 800db4e:	f04f 0200 	mov.w	r2, #0
 800db52:	4b39      	ldr	r3, [pc, #228]	; (800dc38 <heartrate11_set_led_current+0x130>)
 800db54:	f7f2 fde2 	bl	800071c <__aeabi_ddiv>
 800db58:	4602      	mov	r2, r0
 800db5a:	460b      	mov	r3, r1
 800db5c:	4610      	mov	r0, r2
 800db5e:	4619      	mov	r1, r3
 800db60:	a32f      	add	r3, pc, #188	; (adr r3, 800dc20 <heartrate11_set_led_current+0x118>)
 800db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db66:	f7f2 fcaf 	bl	80004c8 <__aeabi_dmul>
 800db6a:	4602      	mov	r2, r0
 800db6c:	460b      	mov	r3, r1
 800db6e:	4610      	mov	r0, r2
 800db70:	4619      	mov	r1, r3
 800db72:	f04f 0200 	mov.w	r2, #0
 800db76:	4b31      	ldr	r3, [pc, #196]	; (800dc3c <heartrate11_set_led_current+0x134>)
 800db78:	f7f2 faf0 	bl	800015c <__adddf3>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4610      	mov	r0, r2
 800db82:	4619      	mov	r1, r3
 800db84:	f7f2 feb2 	bl	80008ec <__aeabi_d2uiz>
 800db88:	4603      	mov	r3, r0
 800db8a:	82fb      	strh	r3, [r7, #22]
                                  HEARTRATE11_ROUND_TO_NEAREST_INT);
        raw_curr &= HEARTRATE11_RED_LED_CURRENT_RES;
 800db8c:	8afb      	ldrh	r3, [r7, #22]
 800db8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db92:	82fb      	strh	r3, [r7, #22]
        reg = HEARTRATE11_REG_PPG_RLED_CURR_0;
 800db94:	2332      	movs	r3, #50	; 0x32
 800db96:	757b      	strb	r3, [r7, #21]
 800db98:	e02d      	b.n	800dbf6 <heartrate11_set_led_current+0xee>
    }
    else
    {
        raw_curr =(uint16_t)((current / HEARTRATE11_PS_IR_LED_MAX_CURRENT) * HEARTRATE11_PS_IR_LED_CURRENT_RES +
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f7f2 fc3c 	bl	8000418 <__aeabi_f2d>
 800dba0:	f04f 0200 	mov.w	r2, #0
 800dba4:	4b26      	ldr	r3, [pc, #152]	; (800dc40 <heartrate11_set_led_current+0x138>)
 800dba6:	f7f2 fdb9 	bl	800071c <__aeabi_ddiv>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	460b      	mov	r3, r1
 800dbae:	4610      	mov	r0, r2
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	a31d      	add	r3, pc, #116	; (adr r3, 800dc28 <heartrate11_set_led_current+0x120>)
 800dbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb8:	f7f2 fc86 	bl	80004c8 <__aeabi_dmul>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	4610      	mov	r0, r2
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	f04f 0200 	mov.w	r2, #0
 800dbc8:	4b1c      	ldr	r3, [pc, #112]	; (800dc3c <heartrate11_set_led_current+0x134>)
 800dbca:	f7f2 fac7 	bl	800015c <__adddf3>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	f7f2 fe89 	bl	80008ec <__aeabi_d2uiz>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	82fb      	strh	r3, [r7, #22]
                                  HEARTRATE11_ROUND_TO_NEAREST_INT);
        raw_curr &= HEARTRATE11_PS_IR_LED_CURRENT_RES;
 800dbde:	8afb      	ldrh	r3, [r7, #22]
 800dbe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dbe4:	82fb      	strh	r3, [r7, #22]
        if(HEARTRATE11_PS_LED == led)
 800dbe6:	7afb      	ldrb	r3, [r7, #11]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d102      	bne.n	800dbf2 <heartrate11_set_led_current+0xea>
        {
            reg = HEARTRATE11_REG_PS_LED_CURR_0;
 800dbec:	2317      	movs	r3, #23
 800dbee:	757b      	strb	r3, [r7, #21]
 800dbf0:	e001      	b.n	800dbf6 <heartrate11_set_led_current+0xee>
        }
        else
        {
            reg = HEARTRATE11_REG_PPG_IRLED_CURR_0;
 800dbf2:	2330      	movs	r3, #48	; 0x30
 800dbf4:	757b      	strb	r3, [r7, #21]
        }
    }
    uint8_t data_buf[2];
    data_buf[0] =(uint8_t)(raw_curr & 0xFF);
 800dbf6:	8afb      	ldrh	r3, [r7, #22]
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	743b      	strb	r3, [r7, #16]
    data_buf[1] =(uint8_t)((raw_curr >> 8) & 0xFF);
 800dbfc:	8afb      	ldrh	r3, [r7, #22]
 800dbfe:	0a1b      	lsrs	r3, r3, #8
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	747b      	strb	r3, [r7, #17]
    return heartrate11_generic_write(ctx, reg, data_buf, 2);
 800dc06:	f107 0210 	add.w	r2, r7, #16
 800dc0a:	7d79      	ldrb	r1, [r7, #21]
 800dc0c:	2302      	movs	r3, #2
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f7ff feba 	bl	800d988 <heartrate11_generic_write>
 800dc14:	4603      	mov	r3, r0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3718      	adds	r7, #24
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	00000000 	.word	0x00000000
 800dc24:	407ff000 	.word	0x407ff000
 800dc28:	00000000 	.word	0x00000000
 800dc2c:	408ff800 	.word	0x408ff800
 800dc30:	42fa0000 	.word	0x42fa0000
 800dc34:	437a0000 	.word	0x437a0000
 800dc38:	405f4000 	.word	0x405f4000
 800dc3c:	3fe00000 	.word	0x3fe00000
 800dc40:	406f4000 	.word	0x406f4000

0800dc44 <heartrate11_read_fifo>:
    *proximity =((uint16_t) data_buf[1] << 8) | data_buf[0];
    return error_flag;
}

err_t heartrate11_read_fifo(heartrate11_t *ctx, uint32_t *fifo_data)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
    uint8_t data_buf[3] = { 0 };
 800dc4e:	4b0e      	ldr	r3, [pc, #56]	; (800dc88 <heartrate11_read_fifo+0x44>)
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	81bb      	strh	r3, [r7, #12]
 800dc54:	2300      	movs	r3, #0
 800dc56:	73bb      	strb	r3, [r7, #14]
    err_t error_flag = heartrate11_generic_read(ctx, HEARTRATE11_REG_FIFO_DATA, data_buf, 3);
 800dc58:	f107 020c 	add.w	r2, r7, #12
 800dc5c:	2303      	movs	r3, #3
 800dc5e:	213b      	movs	r1, #59	; 0x3b
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7ff fefd 	bl	800da60 <heartrate11_generic_read>
 800dc66:	4603      	mov	r3, r0
 800dc68:	73fb      	strb	r3, [r7, #15]
    *fifo_data =((uint32_t) data_buf[2] << 16) | ((uint16_t) data_buf[1] << 8) | data_buf[0];
 800dc6a:	7bbb      	ldrb	r3, [r7, #14]
 800dc6c:	041b      	lsls	r3, r3, #16
 800dc6e:	7b7a      	ldrb	r2, [r7, #13]
 800dc70:	0212      	lsls	r2, r2, #8
 800dc72:	4313      	orrs	r3, r2
 800dc74:	7b3a      	ldrb	r2, [r7, #12]
 800dc76:	431a      	orrs	r2, r3
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	601a      	str	r2, [r3, #0]
    return error_flag;
 800dc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	0800def0 	.word	0x0800def0

0800dc8c <__errno>:
 800dc8c:	4b01      	ldr	r3, [pc, #4]	; (800dc94 <__errno+0x8>)
 800dc8e:	6818      	ldr	r0, [r3, #0]
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	20000180 	.word	0x20000180

0800dc98 <__libc_init_array>:
 800dc98:	b570      	push	{r4, r5, r6, lr}
 800dc9a:	2600      	movs	r6, #0
 800dc9c:	4d0c      	ldr	r5, [pc, #48]	; (800dcd0 <__libc_init_array+0x38>)
 800dc9e:	4c0d      	ldr	r4, [pc, #52]	; (800dcd4 <__libc_init_array+0x3c>)
 800dca0:	1b64      	subs	r4, r4, r5
 800dca2:	10a4      	asrs	r4, r4, #2
 800dca4:	42a6      	cmp	r6, r4
 800dca6:	d109      	bne.n	800dcbc <__libc_init_array+0x24>
 800dca8:	f000 f8ea 	bl	800de80 <_init>
 800dcac:	2600      	movs	r6, #0
 800dcae:	4d0a      	ldr	r5, [pc, #40]	; (800dcd8 <__libc_init_array+0x40>)
 800dcb0:	4c0a      	ldr	r4, [pc, #40]	; (800dcdc <__libc_init_array+0x44>)
 800dcb2:	1b64      	subs	r4, r4, r5
 800dcb4:	10a4      	asrs	r4, r4, #2
 800dcb6:	42a6      	cmp	r6, r4
 800dcb8:	d105      	bne.n	800dcc6 <__libc_init_array+0x2e>
 800dcba:	bd70      	pop	{r4, r5, r6, pc}
 800dcbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcc0:	4798      	blx	r3
 800dcc2:	3601      	adds	r6, #1
 800dcc4:	e7ee      	b.n	800dca4 <__libc_init_array+0xc>
 800dcc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcca:	4798      	blx	r3
 800dccc:	3601      	adds	r6, #1
 800dcce:	e7f2      	b.n	800dcb6 <__libc_init_array+0x1e>
 800dcd0:	0800df0c 	.word	0x0800df0c
 800dcd4:	0800df0c 	.word	0x0800df0c
 800dcd8:	0800df0c 	.word	0x0800df0c
 800dcdc:	0800df10 	.word	0x0800df10

0800dce0 <malloc>:
 800dce0:	4b02      	ldr	r3, [pc, #8]	; (800dcec <malloc+0xc>)
 800dce2:	4601      	mov	r1, r0
 800dce4:	6818      	ldr	r0, [r3, #0]
 800dce6:	f000 b839 	b.w	800dd5c <_malloc_r>
 800dcea:	bf00      	nop
 800dcec:	20000180 	.word	0x20000180

0800dcf0 <memcpy>:
 800dcf0:	440a      	add	r2, r1
 800dcf2:	4291      	cmp	r1, r2
 800dcf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcf8:	d100      	bne.n	800dcfc <memcpy+0xc>
 800dcfa:	4770      	bx	lr
 800dcfc:	b510      	push	{r4, lr}
 800dcfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd02:	4291      	cmp	r1, r2
 800dd04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd08:	d1f9      	bne.n	800dcfe <memcpy+0xe>
 800dd0a:	bd10      	pop	{r4, pc}

0800dd0c <memset>:
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	4402      	add	r2, r0
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d100      	bne.n	800dd16 <memset+0xa>
 800dd14:	4770      	bx	lr
 800dd16:	f803 1b01 	strb.w	r1, [r3], #1
 800dd1a:	e7f9      	b.n	800dd10 <memset+0x4>

0800dd1c <sbrk_aligned>:
 800dd1c:	b570      	push	{r4, r5, r6, lr}
 800dd1e:	4e0e      	ldr	r6, [pc, #56]	; (800dd58 <sbrk_aligned+0x3c>)
 800dd20:	460c      	mov	r4, r1
 800dd22:	6831      	ldr	r1, [r6, #0]
 800dd24:	4605      	mov	r5, r0
 800dd26:	b911      	cbnz	r1, 800dd2e <sbrk_aligned+0x12>
 800dd28:	f000 f88c 	bl	800de44 <_sbrk_r>
 800dd2c:	6030      	str	r0, [r6, #0]
 800dd2e:	4621      	mov	r1, r4
 800dd30:	4628      	mov	r0, r5
 800dd32:	f000 f887 	bl	800de44 <_sbrk_r>
 800dd36:	1c43      	adds	r3, r0, #1
 800dd38:	d00a      	beq.n	800dd50 <sbrk_aligned+0x34>
 800dd3a:	1cc4      	adds	r4, r0, #3
 800dd3c:	f024 0403 	bic.w	r4, r4, #3
 800dd40:	42a0      	cmp	r0, r4
 800dd42:	d007      	beq.n	800dd54 <sbrk_aligned+0x38>
 800dd44:	1a21      	subs	r1, r4, r0
 800dd46:	4628      	mov	r0, r5
 800dd48:	f000 f87c 	bl	800de44 <_sbrk_r>
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	d101      	bne.n	800dd54 <sbrk_aligned+0x38>
 800dd50:	f04f 34ff 	mov.w	r4, #4294967295
 800dd54:	4620      	mov	r0, r4
 800dd56:	bd70      	pop	{r4, r5, r6, pc}
 800dd58:	20001640 	.word	0x20001640

0800dd5c <_malloc_r>:
 800dd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd60:	1ccd      	adds	r5, r1, #3
 800dd62:	f025 0503 	bic.w	r5, r5, #3
 800dd66:	3508      	adds	r5, #8
 800dd68:	2d0c      	cmp	r5, #12
 800dd6a:	bf38      	it	cc
 800dd6c:	250c      	movcc	r5, #12
 800dd6e:	2d00      	cmp	r5, #0
 800dd70:	4607      	mov	r7, r0
 800dd72:	db01      	blt.n	800dd78 <_malloc_r+0x1c>
 800dd74:	42a9      	cmp	r1, r5
 800dd76:	d905      	bls.n	800dd84 <_malloc_r+0x28>
 800dd78:	230c      	movs	r3, #12
 800dd7a:	2600      	movs	r6, #0
 800dd7c:	603b      	str	r3, [r7, #0]
 800dd7e:	4630      	mov	r0, r6
 800dd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd84:	4e2e      	ldr	r6, [pc, #184]	; (800de40 <_malloc_r+0xe4>)
 800dd86:	f000 f86d 	bl	800de64 <__malloc_lock>
 800dd8a:	6833      	ldr	r3, [r6, #0]
 800dd8c:	461c      	mov	r4, r3
 800dd8e:	bb34      	cbnz	r4, 800ddde <_malloc_r+0x82>
 800dd90:	4629      	mov	r1, r5
 800dd92:	4638      	mov	r0, r7
 800dd94:	f7ff ffc2 	bl	800dd1c <sbrk_aligned>
 800dd98:	1c43      	adds	r3, r0, #1
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	d14d      	bne.n	800de3a <_malloc_r+0xde>
 800dd9e:	6834      	ldr	r4, [r6, #0]
 800dda0:	4626      	mov	r6, r4
 800dda2:	2e00      	cmp	r6, #0
 800dda4:	d140      	bne.n	800de28 <_malloc_r+0xcc>
 800dda6:	6823      	ldr	r3, [r4, #0]
 800dda8:	4631      	mov	r1, r6
 800ddaa:	4638      	mov	r0, r7
 800ddac:	eb04 0803 	add.w	r8, r4, r3
 800ddb0:	f000 f848 	bl	800de44 <_sbrk_r>
 800ddb4:	4580      	cmp	r8, r0
 800ddb6:	d13a      	bne.n	800de2e <_malloc_r+0xd2>
 800ddb8:	6821      	ldr	r1, [r4, #0]
 800ddba:	3503      	adds	r5, #3
 800ddbc:	1a6d      	subs	r5, r5, r1
 800ddbe:	f025 0503 	bic.w	r5, r5, #3
 800ddc2:	3508      	adds	r5, #8
 800ddc4:	2d0c      	cmp	r5, #12
 800ddc6:	bf38      	it	cc
 800ddc8:	250c      	movcc	r5, #12
 800ddca:	4638      	mov	r0, r7
 800ddcc:	4629      	mov	r1, r5
 800ddce:	f7ff ffa5 	bl	800dd1c <sbrk_aligned>
 800ddd2:	3001      	adds	r0, #1
 800ddd4:	d02b      	beq.n	800de2e <_malloc_r+0xd2>
 800ddd6:	6823      	ldr	r3, [r4, #0]
 800ddd8:	442b      	add	r3, r5
 800ddda:	6023      	str	r3, [r4, #0]
 800dddc:	e00e      	b.n	800ddfc <_malloc_r+0xa0>
 800ddde:	6822      	ldr	r2, [r4, #0]
 800dde0:	1b52      	subs	r2, r2, r5
 800dde2:	d41e      	bmi.n	800de22 <_malloc_r+0xc6>
 800dde4:	2a0b      	cmp	r2, #11
 800dde6:	d916      	bls.n	800de16 <_malloc_r+0xba>
 800dde8:	1961      	adds	r1, r4, r5
 800ddea:	42a3      	cmp	r3, r4
 800ddec:	6025      	str	r5, [r4, #0]
 800ddee:	bf18      	it	ne
 800ddf0:	6059      	strne	r1, [r3, #4]
 800ddf2:	6863      	ldr	r3, [r4, #4]
 800ddf4:	bf08      	it	eq
 800ddf6:	6031      	streq	r1, [r6, #0]
 800ddf8:	5162      	str	r2, [r4, r5]
 800ddfa:	604b      	str	r3, [r1, #4]
 800ddfc:	4638      	mov	r0, r7
 800ddfe:	f104 060b 	add.w	r6, r4, #11
 800de02:	f000 f835 	bl	800de70 <__malloc_unlock>
 800de06:	f026 0607 	bic.w	r6, r6, #7
 800de0a:	1d23      	adds	r3, r4, #4
 800de0c:	1af2      	subs	r2, r6, r3
 800de0e:	d0b6      	beq.n	800dd7e <_malloc_r+0x22>
 800de10:	1b9b      	subs	r3, r3, r6
 800de12:	50a3      	str	r3, [r4, r2]
 800de14:	e7b3      	b.n	800dd7e <_malloc_r+0x22>
 800de16:	6862      	ldr	r2, [r4, #4]
 800de18:	42a3      	cmp	r3, r4
 800de1a:	bf0c      	ite	eq
 800de1c:	6032      	streq	r2, [r6, #0]
 800de1e:	605a      	strne	r2, [r3, #4]
 800de20:	e7ec      	b.n	800ddfc <_malloc_r+0xa0>
 800de22:	4623      	mov	r3, r4
 800de24:	6864      	ldr	r4, [r4, #4]
 800de26:	e7b2      	b.n	800dd8e <_malloc_r+0x32>
 800de28:	4634      	mov	r4, r6
 800de2a:	6876      	ldr	r6, [r6, #4]
 800de2c:	e7b9      	b.n	800dda2 <_malloc_r+0x46>
 800de2e:	230c      	movs	r3, #12
 800de30:	4638      	mov	r0, r7
 800de32:	603b      	str	r3, [r7, #0]
 800de34:	f000 f81c 	bl	800de70 <__malloc_unlock>
 800de38:	e7a1      	b.n	800dd7e <_malloc_r+0x22>
 800de3a:	6025      	str	r5, [r4, #0]
 800de3c:	e7de      	b.n	800ddfc <_malloc_r+0xa0>
 800de3e:	bf00      	nop
 800de40:	2000163c 	.word	0x2000163c

0800de44 <_sbrk_r>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	2300      	movs	r3, #0
 800de48:	4d05      	ldr	r5, [pc, #20]	; (800de60 <_sbrk_r+0x1c>)
 800de4a:	4604      	mov	r4, r0
 800de4c:	4608      	mov	r0, r1
 800de4e:	602b      	str	r3, [r5, #0]
 800de50:	f7f3 fe86 	bl	8001b60 <_sbrk>
 800de54:	1c43      	adds	r3, r0, #1
 800de56:	d102      	bne.n	800de5e <_sbrk_r+0x1a>
 800de58:	682b      	ldr	r3, [r5, #0]
 800de5a:	b103      	cbz	r3, 800de5e <_sbrk_r+0x1a>
 800de5c:	6023      	str	r3, [r4, #0]
 800de5e:	bd38      	pop	{r3, r4, r5, pc}
 800de60:	20001644 	.word	0x20001644

0800de64 <__malloc_lock>:
 800de64:	4801      	ldr	r0, [pc, #4]	; (800de6c <__malloc_lock+0x8>)
 800de66:	f000 b809 	b.w	800de7c <__retarget_lock_acquire_recursive>
 800de6a:	bf00      	nop
 800de6c:	20001648 	.word	0x20001648

0800de70 <__malloc_unlock>:
 800de70:	4801      	ldr	r0, [pc, #4]	; (800de78 <__malloc_unlock+0x8>)
 800de72:	f000 b804 	b.w	800de7e <__retarget_lock_release_recursive>
 800de76:	bf00      	nop
 800de78:	20001648 	.word	0x20001648

0800de7c <__retarget_lock_acquire_recursive>:
 800de7c:	4770      	bx	lr

0800de7e <__retarget_lock_release_recursive>:
 800de7e:	4770      	bx	lr

0800de80 <_init>:
 800de80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de82:	bf00      	nop
 800de84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de86:	bc08      	pop	{r3}
 800de88:	469e      	mov	lr, r3
 800de8a:	4770      	bx	lr

0800de8c <_fini>:
 800de8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8e:	bf00      	nop
 800de90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de92:	bc08      	pop	{r3}
 800de94:	469e      	mov	lr, r3
 800de96:	4770      	bx	lr
