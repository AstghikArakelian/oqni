
ob1203.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800c5ec  0800c5ec  0001c5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6a8  0800c6a8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c6a8  0800c6a8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c6a8  0800c6a8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6a8  0800c6a8  0001c6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6ac  0800c6ac  0001c6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001304  200001e0  0800c890  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014e4  0800c890  000214e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164e6  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000392c  00000000  00000000  000366ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  0003a020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c536  00000000  00000000  0003c700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2b9  00000000  00000000  00058c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000916cc  00000000  00000000  00072eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001045bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  0010460c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c5d4 	.word	0x0800c5d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800c5d4 	.word	0x0800c5d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__gesf2>:
 800093c:	f04f 3cff 	mov.w	ip, #4294967295
 8000940:	e006      	b.n	8000950 <__cmpsf2+0x4>
 8000942:	bf00      	nop

08000944 <__lesf2>:
 8000944:	f04f 0c01 	mov.w	ip, #1
 8000948:	e002      	b.n	8000950 <__cmpsf2+0x4>
 800094a:	bf00      	nop

0800094c <__cmpsf2>:
 800094c:	f04f 0c01 	mov.w	ip, #1
 8000950:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000954:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000958:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800095c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000960:	bf18      	it	ne
 8000962:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000966:	d011      	beq.n	800098c <__cmpsf2+0x40>
 8000968:	b001      	add	sp, #4
 800096a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800096e:	bf18      	it	ne
 8000970:	ea90 0f01 	teqne	r0, r1
 8000974:	bf58      	it	pl
 8000976:	ebb2 0003 	subspl.w	r0, r2, r3
 800097a:	bf88      	it	hi
 800097c:	17c8      	asrhi	r0, r1, #31
 800097e:	bf38      	it	cc
 8000980:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000984:	bf18      	it	ne
 8000986:	f040 0001 	orrne.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000990:	d102      	bne.n	8000998 <__cmpsf2+0x4c>
 8000992:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000996:	d105      	bne.n	80009a4 <__cmpsf2+0x58>
 8000998:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800099c:	d1e4      	bne.n	8000968 <__cmpsf2+0x1c>
 800099e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009a2:	d0e1      	beq.n	8000968 <__cmpsf2+0x1c>
 80009a4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_cfrcmple>:
 80009ac:	4684      	mov	ip, r0
 80009ae:	4608      	mov	r0, r1
 80009b0:	4661      	mov	r1, ip
 80009b2:	e7ff      	b.n	80009b4 <__aeabi_cfcmpeq>

080009b4 <__aeabi_cfcmpeq>:
 80009b4:	b50f      	push	{r0, r1, r2, r3, lr}
 80009b6:	f7ff ffc9 	bl	800094c <__cmpsf2>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	bf48      	it	mi
 80009be:	f110 0f00 	cmnmi.w	r0, #0
 80009c2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080009c4 <__aeabi_fcmpeq>:
 80009c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c8:	f7ff fff4 	bl	80009b4 <__aeabi_cfcmpeq>
 80009cc:	bf0c      	ite	eq
 80009ce:	2001      	moveq	r0, #1
 80009d0:	2000      	movne	r0, #0
 80009d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d6:	bf00      	nop

080009d8 <__aeabi_fcmplt>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff ffea 	bl	80009b4 <__aeabi_cfcmpeq>
 80009e0:	bf34      	ite	cc
 80009e2:	2001      	movcc	r0, #1
 80009e4:	2000      	movcs	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_fcmple>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffe0 	bl	80009b4 <__aeabi_cfcmpeq>
 80009f4:	bf94      	ite	ls
 80009f6:	2001      	movls	r0, #1
 80009f8:	2000      	movhi	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_fcmpge>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffd2 	bl	80009ac <__aeabi_cfrcmple>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_fcmpgt>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffc8 	bl	80009ac <__aeabi_cfrcmple>
 8000a1c:	bf34      	ite	cc
 8000a1e:	2001      	movcc	r0, #1
 8000a20:	2000      	movcs	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <Buffer_Init>:

/* Private variables ---------------------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
BUF_HandleTypeDef Buffer_Init(size_t size)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	BUF_HandleTypeDef circular_buffer = malloc(sizeof(circular_buf));
 8000a30:	2010      	movs	r0, #16
 8000a32:	f00b f945 	bl	800bcc0 <malloc>
 8000a36:	4603      	mov	r3, r0
 8000a38:	60fb      	str	r3, [r7, #12]
	// If size is 1024, capacity will be 1025, and indices' range is [0..1024]
	circular_buffer->buffer = (uint8_t*)malloc(size + 1);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f00b f93e 	bl	800bcc0 <malloc>
 8000a44:	4603      	mov	r3, r0
 8000a46:	461a      	mov	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	601a      	str	r2, [r3, #0]
	circular_buffer->capacity = size + 1;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	60da      	str	r2, [r3, #12]
	Buffer_Clear(circular_buffer);
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f000 f830 	bl	8000aba <Buffer_Clear>
	return circular_buffer;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <Buffer_Size>:

size_t Buffer_Size(BUF_HandleTypeDef buf)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	size_t size = (buf->capacity + buf->write_index - buf->read_index) % buf->capacity;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	441a      	add	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	68d2      	ldr	r2, [r2, #12]
 8000a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a84:	fb01 f202 	mul.w	r2, r1, r2
 8000a88:	1a9b      	subs	r3, r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
	return size;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <Buffer_IsEmpty>:

int Buffer_IsEmpty(BUF_HandleTypeDef buf)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == 0;
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ffdf 	bl	8000a64 <Buffer_Size>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	bf0c      	ite	eq
 8000aac:	2301      	moveq	r3, #1
 8000aae:	2300      	movne	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <Buffer_Clear>:

void Buffer_Clear(BUF_HandleTypeDef buf)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	buf->write_index = 0;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
	buf->read_index = 0;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <Buffer_IsFull>:

int Buffer_IsFull(BUF_HandleTypeDef buf)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == buf->capacity - 1;
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ffbf 	bl	8000a64 <Buffer_Size>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	429a      	cmp	r2, r3
 8000af0:	bf0c      	ite	eq
 8000af2:	2301      	moveq	r3, #1
 8000af4:	2300      	movne	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <Buffer_Read>:

uint8_t Buffer_Read(BUF_HandleTypeDef buf)
 {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]
	if(!Buffer_IsEmpty(buf))
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ffc3 	bl	8000a98 <Buffer_IsEmpty>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d116      	bne.n	8000b46 <Buffer_Read+0x46>
	{
		data = buf->buffer[buf->read_index];
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4413      	add	r3, r2
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	73fb      	strb	r3, [r7, #15]
		buf->read_index++;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
		buf->read_index %= buf->capacity;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	68d2      	ldr	r2, [r2, #12]
 8000b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b3c:	fb01 f202 	mul.w	r2, r1, r2
 8000b40:	1a9a      	subs	r2, r3, r2
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	609a      	str	r2, [r3, #8]
	}
	return data;
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <Buffer_Write>:

void Buffer_Write(BUF_HandleTypeDef buf, uint8_t data)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	70fb      	strb	r3, [r7, #3]
	if(Buffer_IsFull(buf))
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ffbb 	bl	8000ad8 <Buffer_IsFull>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <Buffer_Write+0x1e>
	{
	    Buffer_Read(buf);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ffc9 	bl	8000b00 <Buffer_Read>
	}
	buf->buffer[buf->write_index] = data;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	78fa      	ldrb	r2, [r7, #3]
 8000b7a:	701a      	strb	r2, [r3, #0]
	buf->write_index++;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	605a      	str	r2, [r3, #4]
	buf->write_index %= buf->capacity;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68d2      	ldr	r2, [r2, #12]
 8000b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b92:	fb01 f202 	mul.w	r2, r1, r2
 8000b96:	1a9a      	subs	r2, r3, r2
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	605a      	str	r2, [r3, #4]
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <Command_Check>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int Command_Check()
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
	int command_count = COMMAND_FIRST_BYTE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
	int command_status = COMMAND_NOTRECEIVED;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
	while (! Buffer_IsEmpty(FIFO_buf) && command_status == COMMAND_NOTRECEIVED)
 8000bb2:	e038      	b.n	8000c26 <Command_Check+0x82>
	{
		uint8_t data = Buffer_Read(FIFO_buf);
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <Command_Check+0xa4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ffa1 	bl	8000b00 <Buffer_Read>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
		switch (command_count)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d023      	beq.n	8000c10 <Command_Check+0x6c>
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	dc2b      	bgt.n	8000c26 <Command_Check+0x82>
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <Command_Check+0x38>
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d00f      	beq.n	8000bfa <Command_Check+0x56>
 8000bda:	e024      	b.n	8000c26 <Command_Check+0x82>
		{
		case COMMAND_FIRST_BYTE:
			command_count = (data == 0)? 1: 0;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	bf0c      	ite	eq
 8000be2:	2301      	moveq	r3, #1
 8000be4:	2300      	movne	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	60fb      	str	r3, [r7, #12]
			command_count = (data == 255)? 2: 0;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2bff      	cmp	r3, #255	; 0xff
 8000bee:	d101      	bne.n	8000bf4 <Command_Check+0x50>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e000      	b.n	8000bf6 <Command_Check+0x52>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
			break;
 8000bf8:	e015      	b.n	8000c26 <Command_Check+0x82>
		case COMMAND_SECOND_BYTE:
			command_status = (data == 7)? COMMAND_RECEIVED: COMMAND_NOTRECEIVED;
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b07      	cmp	r3, #7
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	60bb      	str	r3, [r7, #8]
			command = COMMAND_START;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <Command_Check+0xa8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
			break;
 8000c0e:	e00a      	b.n	8000c26 <Command_Check+0x82>
		case COMMAND_SWITCH:
			command_status = (data == 0)? COMMAND_RECEIVED: COMMAND_NOTRECEIVED;
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bf14      	ite	ne
 8000c16:	2301      	movne	r3, #1
 8000c18:	2300      	moveq	r3, #0
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	60bb      	str	r3, [r7, #8]
			command = COMMAND_STOP;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <Command_Check+0xa8>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
			break;
 8000c24:	bf00      	nop
	while (! Buffer_IsEmpty(FIFO_buf) && command_status == COMMAND_NOTRECEIVED)
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <Command_Check+0xa4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff34 	bl	8000a98 <Buffer_IsEmpty>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <Command_Check+0x98>
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d0bb      	beq.n	8000bb4 <Command_Check+0x10>
		}
	}
	return command_status;
 8000c3c:	68bb      	ldr	r3, [r7, #8]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000029c 	.word	0x2000029c
 8000c4c:	200002a0 	.word	0x200002a0

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  FIFO_buf = Buffer_Init(128);
 8000c56:	2080      	movs	r0, #128	; 0x80
 8000c58:	f7ff fee6 	bl	8000a28 <Buffer_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4a31      	ldr	r2, [pc, #196]	; (8000d24 <main+0xd4>)
 8000c60:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f000 fb3f 	bl	80012e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f869 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 f93b 	bl	8000ee4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c6e:	f000 f8bf 	bl	8000df0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c72:	f000 f8eb 	bl	8000e4c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000c76:	f00a f8f3 	bl	800ae60 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  cur_i2c = hi2c1;
 8000c7a:	4a2b      	ldr	r2, [pc, #172]	; (8000d28 <main+0xd8>)
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <main+0xdc>)
 8000c7e:	4610      	mov	r0, r2
 8000c80:	4619      	mov	r1, r3
 8000c82:	2354      	movs	r3, #84	; 0x54
 8000c84:	461a      	mov	r2, r3
 8000c86:	f00b f823 	bl	800bcd0 <memcpy>
  adc_rdy = 0;
 8000c8a:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <main+0xe0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
  uint32_t ppg;
  int setup = SETUP_DONE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(Command_Check() == COMMAND_RECEIVED)
 8000c94:	f7ff ff86 	bl	8000ba4 <Command_Check>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <main+0x54>
	{
		SM_Case = ST_IDLE;
 8000c9e:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <main+0xe4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
	}
	switch(SM_Case)
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <main+0xe4>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d031      	beq.n	8000d10 <main+0xc0>
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	dcf1      	bgt.n	8000c94 <main+0x44>
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d002      	beq.n	8000cba <main+0x6a>
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d00f      	beq.n	8000cd8 <main+0x88>
 8000cb8:	e032      	b.n	8000d20 <main+0xd0>
	{
		case ST_IDLE:
			if (command == COMMAND_START)
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <main+0xe8>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <main+0x78>
			{
				SM_Case = ST_START;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <main+0xe4>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
			}
			if (command == COMMAND_STOP)
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <main+0xe8>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d124      	bne.n	8000d1a <main+0xca>
			{
				SM_Case = ST_STOP;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <main+0xe4>)
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000cd6:	e020      	b.n	8000d1a <main+0xca>
		case ST_START:
			if (setup == SETUP_NOTDONE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d105      	bne.n	8000cea <main+0x9a>
			{
				ob1203_send_preambula();
 8000cde:	f00a fdf1 	bl	800b8c4 <ob1203_send_preambula>
				OB1203_Setup();
 8000ce2:	f000 f99e 	bl	8001022 <OB1203_Setup>
				setup = SETUP_DONE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
			}
			if(adc_rdy)
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <main+0xe0>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d015      	beq.n	8000d1e <main+0xce>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
			{
				memset(&ppg, 0, sizeof(ppg));
				heartrate11_read_fifo(0, &ppg);
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f00a ff92 	bl	800bc24 <heartrate11_read_fifo>
				ob1203_send_results(ppg);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00a fdaa 	bl	800b85c <ob1203_send_results>
				adc_rdy = 0;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <main+0xe0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000d0e:	e006      	b.n	8000d1e <main+0xce>
		case ST_STOP:
			OB1203_RST();
 8000d10:	f000 f97c 	bl	800100c <OB1203_RST>
			setup = SETUP_NOTDONE;
 8000d14:	2301      	movs	r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
			break;
 8000d18:	e002      	b.n	8000d20 <main+0xd0>
			break;
 8000d1a:	bf00      	nop
 8000d1c:	e7ba      	b.n	8000c94 <main+0x44>
			break;
 8000d1e:	bf00      	nop
	if(Command_Check() == COMMAND_RECEIVED)
 8000d20:	e7b8      	b.n	8000c94 <main+0x44>
 8000d22:	bf00      	nop
 8000d24:	2000029c 	.word	0x2000029c
 8000d28:	200002a4 	.word	0x200002a4
 8000d2c:	200001fc 	.word	0x200001fc
 8000d30:	200002a1 	.word	0x200002a1
 8000d34:	20000298 	.word	0x20000298
 8000d38:	200002a0 	.word	0x200002a0

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d46:	2228      	movs	r2, #40	; 0x28
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00a ffce 	bl	800bcec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d88:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d92:	4618      	mov	r0, r3
 8000d94:	f005 f802 	bl	8005d9c <HAL_RCC_OscConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d9e:	f000 f94b 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da2:	230f      	movs	r3, #15
 8000da4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f005 fa6e 	bl	80062a0 <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000dca:	f000 f935 	bl	8001038 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dce:	2310      	movs	r3, #16
 8000dd0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 fbe5 	bl	80065a8 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000de4:	f000 f928 	bl	8001038 <Error_Handler>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3750      	adds	r7, #80	; 0x50
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000dfc:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <MX_I2C1_Init+0x58>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_I2C1_Init+0x50>)
 8000e2e:	f000 fe2d 	bl	8001a8c <HAL_I2C_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e38:	f000 f8fe 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200001fc 	.word	0x200001fc
 8000e44:	40005400 	.word	0x40005400
 8000e48:	00061a80 	.word	0x00061a80

08000e4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	463b      	mov	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e90:	4813      	ldr	r0, [pc, #76]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e92:	f005 fc3f 	bl	8006714 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e9c:	f000 f8cc 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000eae:	f005 fc80 	bl	80067b2 <HAL_TIM_ConfigClockSource>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000eb8:	f000 f8be 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000eca:	f005 fe2f 	bl	8006b2c <HAL_TIMEx_MasterConfigSynchronization>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ed4:	f000 f8b0 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000250 	.word	0x20000250

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a3e      	ldr	r2, [pc, #248]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b3c      	ldr	r3, [pc, #240]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f10:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a38      	ldr	r2, [pc, #224]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f16:	f043 0320 	orr.w	r3, r3, #32
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0320 	and.w	r3, r3, #32
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f28:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a32      	ldr	r2, [pc, #200]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f2e:	f043 0308 	orr.w	r3, r3, #8
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a2c      	ldr	r2, [pc, #176]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5e:	4827      	ldr	r0, [pc, #156]	; (8000ffc <MX_GPIO_Init+0x118>)
 8000f60:	f000 fd5a 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6a:	4825      	ldr	r0, [pc, #148]	; (8001000 <MX_GPIO_Init+0x11c>)
 8000f6c:	f000 fd54 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	4619      	mov	r1, r3
 8000f88:	481c      	ldr	r0, [pc, #112]	; (8000ffc <MX_GPIO_Init+0x118>)
 8000f8a:	f000 fbc1 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f94:	2312      	movs	r3, #18
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4818      	ldr	r0, [pc, #96]	; (8001004 <MX_GPIO_Init+0x120>)
 8000fa4:	f000 fbb4 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480f      	ldr	r0, [pc, #60]	; (8001000 <MX_GPIO_Init+0x11c>)
 8000fc2:	f000 fba5 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_GPIO_Init+0x124>)
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <MX_GPIO_Init+0x120>)
 8000fda:	f000 fb99 	bl	8001710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2009      	movs	r0, #9
 8000fe4:	f000 fadb 	bl	800159e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fe8:	2009      	movs	r0, #9
 8000fea:	f000 faf4 	bl	80015d6 <HAL_NVIC_EnableIRQ>

}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40011000 	.word	0x40011000
 8001000:	40010800 	.word	0x40010800
 8001004:	40010c00 	.word	0x40010c00
 8001008:	10210000 	.word	0x10210000

0800100c <OB1203_RST>:

/* USER CODE BEGIN 4 */
void OB1203_RST(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	heartrate11_t heartrate11;
	heartrate11_reset_device(&heartrate11);
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4618      	mov	r0, r3
 8001016:	f00a fd59 	bl	800bacc <heartrate11_reset_device>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <OB1203_Setup>:

void OB1203_Setup(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
	heartrate11_t heartrate11;
	heartrate11_default_cfg(&heartrate11);
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4618      	mov	r0, r3
 800102c:	f00a fc5e 	bl	800b8ec <heartrate11_default_cfg>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_MspInit+0x5c>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <HAL_MspInit+0x5c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_MspInit+0x5c>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <HAL_MspInit+0x5c>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_MspInit+0x5c>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_MspInit+0x5c>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_MspInit+0x60>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_MspInit+0x60>)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000

080010a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_I2C_MspInit+0x90>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d133      	bne.n	8001130 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <HAL_I2C_MspInit+0x94>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a1b      	ldr	r2, [pc, #108]	; (800113c <HAL_I2C_MspInit+0x94>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_I2C_MspInit+0x94>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010e0:	23c0      	movs	r3, #192	; 0xc0
 80010e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e4:	2312      	movs	r3, #18
 80010e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	4813      	ldr	r0, [pc, #76]	; (8001140 <HAL_I2C_MspInit+0x98>)
 80010f4:	f000 fb0c 	bl	8001710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_I2C_MspInit+0x94>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	4a0f      	ldr	r2, [pc, #60]	; (800113c <HAL_I2C_MspInit+0x94>)
 80010fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001102:	61d3      	str	r3, [r2, #28]
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_I2C_MspInit+0x94>)
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	201f      	movs	r0, #31
 8001116:	f000 fa42 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800111a:	201f      	movs	r0, #31
 800111c:	f000 fa5b 	bl	80015d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2020      	movs	r0, #32
 8001126:	f000 fa3a 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800112a:	2020      	movs	r0, #32
 800112c:	f000 fa53 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40005400 	.word	0x40005400
 800113c:	40021000 	.word	0x40021000
 8001140:	40010c00 	.word	0x40010c00

08001144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001154:	d10b      	bne.n	800116e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_TIM_Base_MspInit+0x34>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_TIM_Base_MspInit+0x34>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_TIM_Base_MspInit+0x34>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c2:	f000 f8d5 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  adc_rdy = 1;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <EXTI3_IRQHandler+0x14>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80011d6:	2008      	movs	r0, #8
 80011d8:	f000 fc36 	bl	8001a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200002a1 	.word	0x200002a1

080011e4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80011ea:	f003 fa44 	bl	8004676 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000fc8 	.word	0x20000fc8

080011f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <I2C1_EV_IRQHandler+0x10>)
 80011fe:	f001 f8ef 	bl	80023e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001fc 	.word	0x200001fc

0800120c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <I2C1_ER_IRQHandler+0x10>)
 8001212:	f001 fa56 	bl	80026c2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200001fc 	.word	0x200001fc

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	; (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f00a fd0c 	bl	800bc6c <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20005000 	.word	0x20005000
 8001280:	00000400 	.word	0x00000400
 8001284:	200002f8 	.word	0x200002f8
 8001288:	200014e8 	.word	0x200014e8

0800128c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	; (80012d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	; (80012dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012be:	f7ff ffe5 	bl	800128c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c2:	f00a fcd9 	bl	800bc78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c6:	f7ff fcc3 	bl	8000c50 <main>
  bx lr
 80012ca:	4770      	bx	lr
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80012d4:	0800c6b0 	.word	0x0800c6b0
  ldr r2, =_sbss
 80012d8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80012dc:	200014e4 	.word	0x200014e4

080012e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC1_2_IRQHandler>
	...

080012e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_Init+0x28>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_Init+0x28>)
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f947 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	200f      	movs	r0, #15
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff fea0 	bl	8001044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40022000 	.word	0x40022000

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f95f 	bl	80015f2 <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f927 	bl	800159e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_IncTick+0x1c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_IncTick+0x20>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a03      	ldr	r2, [pc, #12]	; (8001390 <HAL_IncTick+0x20>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000008 	.word	0x20000008
 8001390:	200002fc 	.word	0x200002fc

08001394 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <HAL_GetTick+0x10>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	200002fc 	.word	0x200002fc

080013a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff fff0 	bl	8001394 <HAL_GetTick>
 80013b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d005      	beq.n	80013ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_Delay+0x44>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ce:	bf00      	nop
 80013d0:	f7ff ffe0 	bl	8001394 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d8f7      	bhi.n	80013d0 <HAL_Delay+0x28>
  {
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000008 	.word	0x20000008

080013f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800141c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <__NVIC_GetPriorityGrouping+0x18>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0307 	and.w	r3, r3, #7
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	db0b      	blt.n	800147e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	f003 021f 	and.w	r2, r3, #31
 800146c:	4906      	ldr	r1, [pc, #24]	; (8001488 <__NVIC_EnableIRQ+0x34>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	2001      	movs	r0, #1
 8001476:	fa00 f202 	lsl.w	r2, r0, r2
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	; (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff90 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff2d 	bl	80013f0 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff42 	bl	8001438 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff90 	bl	80014e0 <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5f 	bl	800148c <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff35 	bl	8001454 <__NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa2 	bl	8001544 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800161e:	2b02      	cmp	r3, #2
 8001620:	d005      	beq.n	800162e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2204      	movs	r2, #4
 8001626:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e051      	b.n	80016d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 020e 	bic.w	r2, r2, #14
 800163c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0201 	bic.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a22      	ldr	r2, [pc, #136]	; (80016dc <HAL_DMA_Abort_IT+0xd0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d029      	beq.n	80016ac <HAL_DMA_Abort_IT+0xa0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_DMA_Abort_IT+0xd4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d022      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x9c>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <HAL_DMA_Abort_IT+0xd8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d01a      	beq.n	80016a2 <HAL_DMA_Abort_IT+0x96>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <HAL_DMA_Abort_IT+0xdc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d012      	beq.n	800169c <HAL_DMA_Abort_IT+0x90>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <HAL_DMA_Abort_IT+0xe0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d00a      	beq.n	8001696 <HAL_DMA_Abort_IT+0x8a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <HAL_DMA_Abort_IT+0xe4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d102      	bne.n	8001690 <HAL_DMA_Abort_IT+0x84>
 800168a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800168e:	e00e      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 8001690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001694:	e00b      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 8001696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169a:	e008      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	e005      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 80016a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a6:	e002      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 80016a8:	2310      	movs	r3, #16
 80016aa:	e000      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 80016ac:	2301      	movs	r3, #1
 80016ae:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <HAL_DMA_Abort_IT+0xe8>)
 80016b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	4798      	blx	r3
    } 
  }
  return status;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40020008 	.word	0x40020008
 80016e0:	4002001c 	.word	0x4002001c
 80016e4:	40020030 	.word	0x40020030
 80016e8:	40020044 	.word	0x40020044
 80016ec:	40020058 	.word	0x40020058
 80016f0:	4002006c 	.word	0x4002006c
 80016f4:	40020000 	.word	0x40020000

080016f8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	b480      	push	{r7}
 8001712:	b08b      	sub	sp, #44	; 0x2c
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001722:	e169      	b.n	80019f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001724:	2201      	movs	r2, #1
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	429a      	cmp	r2, r3
 800173e:	f040 8158 	bne.w	80019f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4a9a      	ldr	r2, [pc, #616]	; (80019b0 <HAL_GPIO_Init+0x2a0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d05e      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 800174c:	4a98      	ldr	r2, [pc, #608]	; (80019b0 <HAL_GPIO_Init+0x2a0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d875      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 8001752:	4a98      	ldr	r2, [pc, #608]	; (80019b4 <HAL_GPIO_Init+0x2a4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d058      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 8001758:	4a96      	ldr	r2, [pc, #600]	; (80019b4 <HAL_GPIO_Init+0x2a4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d86f      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 800175e:	4a96      	ldr	r2, [pc, #600]	; (80019b8 <HAL_GPIO_Init+0x2a8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d052      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 8001764:	4a94      	ldr	r2, [pc, #592]	; (80019b8 <HAL_GPIO_Init+0x2a8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d869      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 800176a:	4a94      	ldr	r2, [pc, #592]	; (80019bc <HAL_GPIO_Init+0x2ac>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d04c      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 8001770:	4a92      	ldr	r2, [pc, #584]	; (80019bc <HAL_GPIO_Init+0x2ac>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d863      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 8001776:	4a92      	ldr	r2, [pc, #584]	; (80019c0 <HAL_GPIO_Init+0x2b0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d046      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 800177c:	4a90      	ldr	r2, [pc, #576]	; (80019c0 <HAL_GPIO_Init+0x2b0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d85d      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 8001782:	2b12      	cmp	r3, #18
 8001784:	d82a      	bhi.n	80017dc <HAL_GPIO_Init+0xcc>
 8001786:	2b12      	cmp	r3, #18
 8001788:	d859      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <HAL_GPIO_Init+0x80>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	0800180b 	.word	0x0800180b
 8001794:	080017e5 	.word	0x080017e5
 8001798:	080017f7 	.word	0x080017f7
 800179c:	08001839 	.word	0x08001839
 80017a0:	0800183f 	.word	0x0800183f
 80017a4:	0800183f 	.word	0x0800183f
 80017a8:	0800183f 	.word	0x0800183f
 80017ac:	0800183f 	.word	0x0800183f
 80017b0:	0800183f 	.word	0x0800183f
 80017b4:	0800183f 	.word	0x0800183f
 80017b8:	0800183f 	.word	0x0800183f
 80017bc:	0800183f 	.word	0x0800183f
 80017c0:	0800183f 	.word	0x0800183f
 80017c4:	0800183f 	.word	0x0800183f
 80017c8:	0800183f 	.word	0x0800183f
 80017cc:	0800183f 	.word	0x0800183f
 80017d0:	0800183f 	.word	0x0800183f
 80017d4:	080017ed 	.word	0x080017ed
 80017d8:	08001801 	.word	0x08001801
 80017dc:	4a79      	ldr	r2, [pc, #484]	; (80019c4 <HAL_GPIO_Init+0x2b4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d013      	beq.n	800180a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017e2:	e02c      	b.n	800183e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	623b      	str	r3, [r7, #32]
          break;
 80017ea:	e029      	b.n	8001840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	3304      	adds	r3, #4
 80017f2:	623b      	str	r3, [r7, #32]
          break;
 80017f4:	e024      	b.n	8001840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	3308      	adds	r3, #8
 80017fc:	623b      	str	r3, [r7, #32]
          break;
 80017fe:	e01f      	b.n	8001840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	330c      	adds	r3, #12
 8001806:	623b      	str	r3, [r7, #32]
          break;
 8001808:	e01a      	b.n	8001840 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001812:	2304      	movs	r3, #4
 8001814:	623b      	str	r3, [r7, #32]
          break;
 8001816:	e013      	b.n	8001840 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001820:	2308      	movs	r3, #8
 8001822:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	611a      	str	r2, [r3, #16]
          break;
 800182a:	e009      	b.n	8001840 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800182c:	2308      	movs	r3, #8
 800182e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	615a      	str	r2, [r3, #20]
          break;
 8001836:	e003      	b.n	8001840 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
          break;
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x130>
          break;
 800183e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	d801      	bhi.n	800184a <HAL_GPIO_Init+0x13a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	e001      	b.n	800184e <HAL_GPIO_Init+0x13e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3304      	adds	r3, #4
 800184e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2bff      	cmp	r3, #255	; 0xff
 8001854:	d802      	bhi.n	800185c <HAL_GPIO_Init+0x14c>
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x152>
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	3b08      	subs	r3, #8
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	210f      	movs	r1, #15
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	401a      	ands	r2, r3
 8001874:	6a39      	ldr	r1, [r7, #32]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 80b1 	beq.w	80019f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001890:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <HAL_GPIO_Init+0x2b8>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a4c      	ldr	r2, [pc, #304]	; (80019c8 <HAL_GPIO_Init+0x2b8>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <HAL_GPIO_Init+0x2b8>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018a8:	4a48      	ldr	r2, [pc, #288]	; (80019cc <HAL_GPIO_Init+0x2bc>)
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a40      	ldr	r2, [pc, #256]	; (80019d0 <HAL_GPIO_Init+0x2c0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d013      	beq.n	80018fc <HAL_GPIO_Init+0x1ec>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a3f      	ldr	r2, [pc, #252]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d00d      	beq.n	80018f8 <HAL_GPIO_Init+0x1e8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a3e      	ldr	r2, [pc, #248]	; (80019d8 <HAL_GPIO_Init+0x2c8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d007      	beq.n	80018f4 <HAL_GPIO_Init+0x1e4>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <HAL_GPIO_Init+0x2cc>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d101      	bne.n	80018f0 <HAL_GPIO_Init+0x1e0>
 80018ec:	2303      	movs	r3, #3
 80018ee:	e006      	b.n	80018fe <HAL_GPIO_Init+0x1ee>
 80018f0:	2304      	movs	r3, #4
 80018f2:	e004      	b.n	80018fe <HAL_GPIO_Init+0x1ee>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e002      	b.n	80018fe <HAL_GPIO_Init+0x1ee>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_GPIO_Init+0x1ee>
 80018fc:	2300      	movs	r3, #0
 80018fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001900:	f002 0203 	and.w	r2, r2, #3
 8001904:	0092      	lsls	r2, r2, #2
 8001906:	4093      	lsls	r3, r2
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800190e:	492f      	ldr	r1, [pc, #188]	; (80019cc <HAL_GPIO_Init+0x2bc>)
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	492c      	ldr	r1, [pc, #176]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	4928      	ldr	r1, [pc, #160]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 8001940:	4013      	ands	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001950:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4922      	ldr	r1, [pc, #136]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	43db      	mvns	r3, r3
 8001966:	491e      	ldr	r1, [pc, #120]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 8001968:	4013      	ands	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	4918      	ldr	r1, [pc, #96]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	43db      	mvns	r3, r3
 800198e:	4914      	ldr	r1, [pc, #80]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 8001990:	4013      	ands	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d021      	beq.n	80019e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	490e      	ldr	r1, [pc, #56]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
 80019ac:	e021      	b.n	80019f2 <HAL_GPIO_Init+0x2e2>
 80019ae:	bf00      	nop
 80019b0:	10320000 	.word	0x10320000
 80019b4:	10310000 	.word	0x10310000
 80019b8:	10220000 	.word	0x10220000
 80019bc:	10210000 	.word	0x10210000
 80019c0:	10120000 	.word	0x10120000
 80019c4:	10110000 	.word	0x10110000
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	40010800 	.word	0x40010800
 80019d4:	40010c00 	.word	0x40010c00
 80019d8:	40011000 	.word	0x40011000
 80019dc:	40011400 	.word	0x40011400
 80019e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_GPIO_Init+0x304>)
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	4909      	ldr	r1, [pc, #36]	; (8001a14 <HAL_GPIO_Init+0x304>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	3301      	adds	r3, #1
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f47f ae8e 	bne.w	8001724 <HAL_GPIO_Init+0x14>
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	372c      	adds	r7, #44	; 0x2c
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	40010400 	.word	0x40010400

08001a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
 8001a24:	4613      	mov	r3, r2
 8001a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a34:	e003      	b.n	8001a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	041a      	lsls	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	611a      	str	r2, [r3, #16]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f806 	bl	8001a78 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e12b      	b.n	8001cf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d106      	bne.n	8001ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff faf8 	bl	80010a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2224      	movs	r2, #36	; 0x24
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ade:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001af0:	f004 fd28 	bl	8006544 <HAL_RCC_GetPCLK1Freq>
 8001af4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4a81      	ldr	r2, [pc, #516]	; (8001d00 <HAL_I2C_Init+0x274>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d807      	bhi.n	8001b10 <HAL_I2C_Init+0x84>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4a80      	ldr	r2, [pc, #512]	; (8001d04 <HAL_I2C_Init+0x278>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	bf94      	ite	ls
 8001b08:	2301      	movls	r3, #1
 8001b0a:	2300      	movhi	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	e006      	b.n	8001b1e <HAL_I2C_Init+0x92>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4a7d      	ldr	r2, [pc, #500]	; (8001d08 <HAL_I2C_Init+0x27c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	bf94      	ite	ls
 8001b18:	2301      	movls	r3, #1
 8001b1a:	2300      	movhi	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e0e7      	b.n	8001cf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4a78      	ldr	r2, [pc, #480]	; (8001d0c <HAL_I2C_Init+0x280>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0c9b      	lsrs	r3, r3, #18
 8001b30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a6a      	ldr	r2, [pc, #424]	; (8001d00 <HAL_I2C_Init+0x274>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d802      	bhi.n	8001b60 <HAL_I2C_Init+0xd4>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	e009      	b.n	8001b74 <HAL_I2C_Init+0xe8>
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b66:	fb02 f303 	mul.w	r3, r2, r3
 8001b6a:	4a69      	ldr	r2, [pc, #420]	; (8001d10 <HAL_I2C_Init+0x284>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	099b      	lsrs	r3, r3, #6
 8001b72:	3301      	adds	r3, #1
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	495c      	ldr	r1, [pc, #368]	; (8001d00 <HAL_I2C_Init+0x274>)
 8001b90:	428b      	cmp	r3, r1
 8001b92:	d819      	bhi.n	8001bc8 <HAL_I2C_Init+0x13c>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1e59      	subs	r1, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba2:	1c59      	adds	r1, r3, #1
 8001ba4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ba8:	400b      	ands	r3, r1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <HAL_I2C_Init+0x138>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1e59      	subs	r1, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc2:	e051      	b.n	8001c68 <HAL_I2C_Init+0x1dc>
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	e04f      	b.n	8001c68 <HAL_I2C_Init+0x1dc>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d111      	bne.n	8001bf4 <HAL_I2C_Init+0x168>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1e58      	subs	r0, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6859      	ldr	r1, [r3, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	440b      	add	r3, r1
 8001bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be2:	3301      	adds	r3, #1
 8001be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e012      	b.n	8001c1a <HAL_I2C_Init+0x18e>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1e58      	subs	r0, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	0099      	lsls	r1, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf0c      	ite	eq
 8001c14:	2301      	moveq	r3, #1
 8001c16:	2300      	movne	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_Init+0x196>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e022      	b.n	8001c68 <HAL_I2C_Init+0x1dc>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10e      	bne.n	8001c48 <HAL_I2C_Init+0x1bc>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1e58      	subs	r0, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6859      	ldr	r1, [r3, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	440b      	add	r3, r1
 8001c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c46:	e00f      	b.n	8001c68 <HAL_I2C_Init+0x1dc>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1e58      	subs	r0, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6859      	ldr	r1, [r3, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	0099      	lsls	r1, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	6809      	ldr	r1, [r1, #0]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6911      	ldr	r1, [r2, #16]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68d2      	ldr	r2, [r2, #12]
 8001ca2:	4311      	orrs	r1, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	000186a0 	.word	0x000186a0
 8001d04:	001e847f 	.word	0x001e847f
 8001d08:	003d08ff 	.word	0x003d08ff
 8001d0c:	431bde83 	.word	0x431bde83
 8001d10:	10624dd3 	.word	0x10624dd3

08001d14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	460b      	mov	r3, r1
 8001d22:	817b      	strh	r3, [r7, #10]
 8001d24:	4613      	mov	r3, r2
 8001d26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d28:	f7ff fb34 	bl	8001394 <HAL_GetTick>
 8001d2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	f040 80e0 	bne.w	8001efc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2319      	movs	r3, #25
 8001d42:	2201      	movs	r2, #1
 8001d44:	4970      	ldr	r1, [pc, #448]	; (8001f08 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f002 f93c 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d52:	2302      	movs	r3, #2
 8001d54:	e0d3      	b.n	8001efe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_I2C_Master_Transmit+0x50>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e0cc      	b.n	8001efe <HAL_I2C_Master_Transmit+0x1ea>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d007      	beq.n	8001d8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2221      	movs	r2, #33	; 0x21
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2210      	movs	r2, #16
 8001da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	893a      	ldrh	r2, [r7, #8]
 8001dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4a50      	ldr	r2, [pc, #320]	; (8001f0c <HAL_I2C_Master_Transmit+0x1f8>)
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dcc:	8979      	ldrh	r1, [r7, #10]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	6a3a      	ldr	r2, [r7, #32]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f001 fee4 	bl	8003ba0 <I2C_MasterRequestWrite>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e08d      	b.n	8001efe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001df8:	e066      	b.n	8001ec8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	6a39      	ldr	r1, [r7, #32]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f002 f9b6 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00d      	beq.n	8001e26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d107      	bne.n	8001e22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e06b      	b.n	8001efe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	781a      	ldrb	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d11b      	bne.n	8001e9c <HAL_I2C_Master_Transmit+0x188>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d017      	beq.n	8001e9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	6a39      	ldr	r1, [r7, #32]
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f002 f9a6 	bl	80041f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d107      	bne.n	8001ec4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e01a      	b.n	8001efe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d194      	bne.n	8001dfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e000      	b.n	8001efe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001efc:	2302      	movs	r3, #2
  }
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	00100002 	.word	0x00100002
 8001f0c:	ffff0000 	.word	0xffff0000

08001f10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	817b      	strh	r3, [r7, #10]
 8001f22:	460b      	mov	r3, r1
 8001f24:	813b      	strh	r3, [r7, #8]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f2e:	f7ff fa31 	bl	8001394 <HAL_GetTick>
 8001f32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	f040 8244 	bne.w	80023ca <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2319      	movs	r3, #25
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4982      	ldr	r1, [pc, #520]	; (8002154 <HAL_I2C_Mem_Read+0x244>)
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f002 f839 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e237      	b.n	80023cc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_I2C_Mem_Read+0x5a>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e230      	b.n	80023cc <HAL_I2C_Mem_Read+0x4bc>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d007      	beq.n	8001f90 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2222      	movs	r2, #34	; 0x22
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4a62      	ldr	r2, [pc, #392]	; (8002158 <HAL_I2C_Mem_Read+0x248>)
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fd2:	88f8      	ldrh	r0, [r7, #6]
 8001fd4:	893a      	ldrh	r2, [r7, #8]
 8001fd6:	8979      	ldrh	r1, [r7, #10]
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f001 fe5e 	bl	8003ca4 <I2C_RequestMemoryRead>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e1ec      	b.n	80023cc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d113      	bne.n	8002022 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e1c0      	b.n	80023a4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	2b01      	cmp	r3, #1
 8002028:	d11e      	bne.n	8002068 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002038:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800203a:	b672      	cpsid	i
}
 800203c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002062:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002064:	b662      	cpsie	i
}
 8002066:	e035      	b.n	80020d4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206c:	2b02      	cmp	r3, #2
 800206e:	d11e      	bne.n	80020ae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800207e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020aa:	b662      	cpsie	i
}
 80020ac:	e012      	b.n	80020d4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80020d4:	e166      	b.n	80023a4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	2b03      	cmp	r3, #3
 80020dc:	f200 811f 	bhi.w	800231e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d123      	bne.n	8002130 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f002 f8f3 	bl	80042d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e167      	b.n	80023cc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800212e:	e139      	b.n	80023a4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	2b02      	cmp	r3, #2
 8002136:	d152      	bne.n	80021de <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213e:	2200      	movs	r2, #0
 8002140:	4906      	ldr	r1, [pc, #24]	; (800215c <HAL_I2C_Mem_Read+0x24c>)
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f001 ff3e 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e13c      	b.n	80023cc <HAL_I2C_Mem_Read+0x4bc>
 8002152:	bf00      	nop
 8002154:	00100002 	.word	0x00100002
 8002158:	ffff0000 	.word	0xffff0000
 800215c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002160:	b672      	cpsid	i
}
 8002162:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021a6:	b662      	cpsie	i
}
 80021a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021dc:	e0e2      	b.n	80023a4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e4:	2200      	movs	r2, #0
 80021e6:	497b      	ldr	r1, [pc, #492]	; (80023d4 <HAL_I2C_Mem_Read+0x4c4>)
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f001 feeb 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0e9      	b.n	80023cc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002206:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800223e:	4b66      	ldr	r3, [pc, #408]	; (80023d8 <HAL_I2C_Mem_Read+0x4c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	08db      	lsrs	r3, r3, #3
 8002244:	4a65      	ldr	r2, [pc, #404]	; (80023dc <HAL_I2C_Mem_Read+0x4cc>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0a1a      	lsrs	r2, r3, #8
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00da      	lsls	r2, r3, #3
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	3b01      	subs	r3, #1
 800225c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d118      	bne.n	8002296 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f043 0220 	orr.w	r2, r3, #32
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002286:	b662      	cpsie	i
}
 8002288:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e09a      	b.n	80023cc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d1d9      	bne.n	8002258 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022e6:	b662      	cpsie	i
}
 80022e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800231c:	e042      	b.n	80023a4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002320:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f001 ffd8 	bl	80042d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e04c      	b.n	80023cc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b04      	cmp	r3, #4
 8002370:	d118      	bne.n	80023a4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f47f ae94 	bne.w	80020d6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
  }
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3728      	adds	r7, #40	; 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	00010004 	.word	0x00010004
 80023d8:	20000000 	.word	0x20000000
 80023dc:	14f8b589 	.word	0x14f8b589

080023e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002400:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	2b10      	cmp	r3, #16
 800240e:	d003      	beq.n	8002418 <HAL_I2C_EV_IRQHandler+0x38>
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	f040 80c1 	bne.w	800259a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <HAL_I2C_EV_IRQHandler+0x6e>
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002438:	d003      	beq.n	8002442 <HAL_I2C_EV_IRQHandler+0x62>
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002440:	d101      	bne.n	8002446 <HAL_I2C_EV_IRQHandler+0x66>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_I2C_EV_IRQHandler+0x68>
 8002446:	2300      	movs	r3, #0
 8002448:	2b01      	cmp	r3, #1
 800244a:	f000 8132 	beq.w	80026b2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00c      	beq.n	8002472 <HAL_I2C_EV_IRQHandler+0x92>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	0a5b      	lsrs	r3, r3, #9
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f001 ffbb 	bl	80043e0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fd77 	bl	8002f5e <I2C_Master_SB>
 8002470:	e092      	b.n	8002598 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	08db      	lsrs	r3, r3, #3
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_I2C_EV_IRQHandler+0xb2>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	0a5b      	lsrs	r3, r3, #9
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fdec 	bl	8003068 <I2C_Master_ADD10>
 8002490:	e082      	b.n	8002598 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_I2C_EV_IRQHandler+0xd2>
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	0a5b      	lsrs	r3, r3, #9
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fe05 	bl	80030ba <I2C_Master_ADDR>
 80024b0:	e072      	b.n	8002598 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d03b      	beq.n	8002536 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024cc:	f000 80f3 	beq.w	80026b6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	09db      	lsrs	r3, r3, #7
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00f      	beq.n	80024fc <HAL_I2C_EV_IRQHandler+0x11c>
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	0a9b      	lsrs	r3, r3, #10
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <HAL_I2C_EV_IRQHandler+0x11c>
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d103      	bne.n	80024fc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f9f1 	bl	80028dc <I2C_MasterTransmit_TXE>
 80024fa:	e04d      	b.n	8002598 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80d6 	beq.w	80026b6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	0a5b      	lsrs	r3, r3, #9
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80cf 	beq.w	80026b6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002518:	7bbb      	ldrb	r3, [r7, #14]
 800251a:	2b21      	cmp	r3, #33	; 0x21
 800251c:	d103      	bne.n	8002526 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fa78 	bl	8002a14 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002524:	e0c7      	b.n	80026b6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	f040 80c4 	bne.w	80026b6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fae6 	bl	8002b00 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002534:	e0bf      	b.n	80026b6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002544:	f000 80b7 	beq.w	80026b6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00f      	beq.n	8002574 <HAL_I2C_EV_IRQHandler+0x194>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	0a9b      	lsrs	r3, r3, #10
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <HAL_I2C_EV_IRQHandler+0x194>
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fb5b 	bl	8002c28 <I2C_MasterReceive_RXNE>
 8002572:	e011      	b.n	8002598 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 809a 	beq.w	80026b6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	0a5b      	lsrs	r3, r3, #9
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8093 	beq.w	80026b6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fbfa 	bl	8002d8a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002596:	e08e      	b.n	80026b6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002598:	e08d      	b.n	80026b6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	e007      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d012      	beq.n	80025ee <HAL_I2C_EV_IRQHandler+0x20e>
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	0a5b      	lsrs	r3, r3, #9
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00c      	beq.n	80025ee <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80025e4:	69b9      	ldr	r1, [r7, #24]
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 ffbe 	bl	8003568 <I2C_Slave_ADDR>
 80025ec:	e066      	b.n	80026bc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <HAL_I2C_EV_IRQHandler+0x22e>
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	0a5b      	lsrs	r3, r3, #9
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fff8 	bl	80035fc <I2C_Slave_STOPF>
 800260c:	e056      	b.n	80026bc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800260e:	7bbb      	ldrb	r3, [r7, #14]
 8002610:	2b21      	cmp	r3, #33	; 0x21
 8002612:	d002      	beq.n	800261a <HAL_I2C_EV_IRQHandler+0x23a>
 8002614:	7bbb      	ldrb	r3, [r7, #14]
 8002616:	2b29      	cmp	r3, #41	; 0x29
 8002618:	d125      	bne.n	8002666 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	09db      	lsrs	r3, r3, #7
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00f      	beq.n	8002646 <HAL_I2C_EV_IRQHandler+0x266>
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	0a9b      	lsrs	r3, r3, #10
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <HAL_I2C_EV_IRQHandler+0x266>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fed6 	bl	80033f0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002644:	e039      	b.n	80026ba <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d033      	beq.n	80026ba <HAL_I2C_EV_IRQHandler+0x2da>
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	0a5b      	lsrs	r3, r3, #9
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d02d      	beq.n	80026ba <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 ff03 	bl	800346a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002664:	e029      	b.n	80026ba <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00f      	beq.n	8002692 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	0a9b      	lsrs	r3, r3, #10
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_I2C_EV_IRQHandler+0x2b2>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 ff0d 	bl	80034aa <I2C_SlaveReceive_RXNE>
 8002690:	e014      	b.n	80026bc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00e      	beq.n	80026bc <HAL_I2C_EV_IRQHandler+0x2dc>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	0a5b      	lsrs	r3, r3, #9
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 ff3b 	bl	8003526 <I2C_SlaveReceive_BTF>
 80026b0:	e004      	b.n	80026bc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80026b2:	bf00      	nop
 80026b4:	e002      	b.n	80026bc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026b6:	bf00      	nop
 80026b8:	e000      	b.n	80026bc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026ba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b08a      	sub	sp, #40	; 0x28
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026e4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d016      	beq.n	8002720 <HAL_I2C_ER_IRQHandler+0x5e>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d010      	beq.n	8002720 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800270e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800271e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	0a5b      	lsrs	r3, r3, #9
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00e      	beq.n	800274a <HAL_I2C_ER_IRQHandler+0x88>
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	f043 0302 	orr.w	r3, r3, #2
 800273e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002748:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	0a9b      	lsrs	r3, r3, #10
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d03f      	beq.n	80027d6 <HAL_I2C_ER_IRQHandler+0x114>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d039      	beq.n	80027d6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002762:	7efb      	ldrb	r3, [r7, #27]
 8002764:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002774:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800277c:	7ebb      	ldrb	r3, [r7, #26]
 800277e:	2b20      	cmp	r3, #32
 8002780:	d112      	bne.n	80027a8 <HAL_I2C_ER_IRQHandler+0xe6>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10f      	bne.n	80027a8 <HAL_I2C_ER_IRQHandler+0xe6>
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	2b21      	cmp	r3, #33	; 0x21
 800278c:	d008      	beq.n	80027a0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	2b29      	cmp	r3, #41	; 0x29
 8002792:	d005      	beq.n	80027a0 <HAL_I2C_ER_IRQHandler+0xde>
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b28      	cmp	r3, #40	; 0x28
 8002798:	d106      	bne.n	80027a8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b21      	cmp	r3, #33	; 0x21
 800279e:	d103      	bne.n	80027a8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f001 f85b 	bl	800385c <I2C_Slave_AF>
 80027a6:	e016      	b.n	80027d6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80027ba:	7efb      	ldrb	r3, [r7, #27]
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d002      	beq.n	80027c6 <HAL_I2C_ER_IRQHandler+0x104>
 80027c0:	7efb      	ldrb	r3, [r7, #27]
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d107      	bne.n	80027d6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	0adb      	lsrs	r3, r3, #11
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00e      	beq.n	8002800 <HAL_I2C_ER_IRQHandler+0x13e>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	f043 0308 	orr.w	r3, r3, #8
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80027fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f001 f892 	bl	800393c <I2C_ITError>
  }
}
 8002818:	bf00      	nop
 800281a:	3728      	adds	r7, #40	; 0x28
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
 8002874:	4613      	mov	r3, r2
 8002876:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d150      	bne.n	80029a4 <I2C_MasterTransmit_TXE+0xc8>
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b21      	cmp	r3, #33	; 0x21
 8002906:	d14d      	bne.n	80029a4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b08      	cmp	r3, #8
 800290c:	d01d      	beq.n	800294a <I2C_MasterTransmit_TXE+0x6e>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b20      	cmp	r3, #32
 8002912:	d01a      	beq.n	800294a <I2C_MasterTransmit_TXE+0x6e>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800291a:	d016      	beq.n	800294a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800292a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2211      	movs	r2, #17
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ff6c 	bl	8002820 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002948:	e060      	b.n	8002a0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002958:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002968:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	d107      	bne.n	8002994 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff81 	bl	8002894 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002992:	e03b      	b.n	8002a0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff3f 	bl	8002820 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029a2:	e033      	b.n	8002a0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b21      	cmp	r3, #33	; 0x21
 80029a8:	d005      	beq.n	80029b6 <I2C_MasterTransmit_TXE+0xda>
 80029aa:	7bbb      	ldrb	r3, [r7, #14]
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d12d      	bne.n	8002a0c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	2b22      	cmp	r3, #34	; 0x22
 80029b4:	d12a      	bne.n	8002a0c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d108      	bne.n	80029d2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80029d0:	e01c      	b.n	8002a0c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b40      	cmp	r3, #64	; 0x40
 80029dc:	d103      	bne.n	80029e6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f88e 	bl	8002b00 <I2C_MemoryTransmit_TXE_BTF>
}
 80029e4:	e012      	b.n	8002a0c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a0a:	e7ff      	b.n	8002a0c <I2C_MasterTransmit_TXE+0x130>
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b21      	cmp	r3, #33	; 0x21
 8002a2c:	d164      	bne.n	8002af8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d012      	beq.n	8002a5e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002a5c:	e04c      	b.n	8002af8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d01d      	beq.n	8002aa0 <I2C_MasterTransmit_BTF+0x8c>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d01a      	beq.n	8002aa0 <I2C_MasterTransmit_BTF+0x8c>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a70:	d016      	beq.n	8002aa0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a80:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2211      	movs	r2, #17
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff fec1 	bl	8002820 <HAL_I2C_MasterTxCpltCallback>
}
 8002a9e:	e02b      	b.n	8002af8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d107      	bne.n	8002aea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff fed6 	bl	8002894 <HAL_I2C_MemTxCpltCallback>
}
 8002ae8:	e006      	b.n	8002af8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff fe94 	bl	8002820 <HAL_I2C_MasterTxCpltCallback>
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d11d      	bne.n	8002b54 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10b      	bne.n	8002b38 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b30:	1c9a      	adds	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002b36:	e073      	b.n	8002c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	121b      	asrs	r3, r3, #8
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b52:	e065      	b.n	8002c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10b      	bne.n	8002b74 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b72:	e055      	b.n	8002c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d151      	bne.n	8002c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	2b22      	cmp	r3, #34	; 0x22
 8002b80:	d10d      	bne.n	8002b9e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b90:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b9c:	e040      	b.n	8002c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b21      	cmp	r3, #33	; 0x21
 8002bac:	d112      	bne.n	8002bd4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	781a      	ldrb	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002bd2:	e025      	b.n	8002c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d120      	bne.n	8002c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b21      	cmp	r3, #33	; 0x21
 8002be2:	d11d      	bne.n	8002c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bf2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff fe3a 	bl	8002894 <HAL_I2C_MemTxCpltCallback>
}
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b22      	cmp	r3, #34	; 0x22
 8002c3a:	f040 80a2 	bne.w	8002d82 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d921      	bls.n	8002c90 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	f040 8082 	bne.w	8002d82 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002c8e:	e078      	b.n	8002d82 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d074      	beq.n	8002d82 <I2C_MasterReceive_RXNE+0x15a>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d002      	beq.n	8002ca4 <I2C_MasterReceive_RXNE+0x7c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d16e      	bne.n	8002d82 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f001 fae5 	bl	8004274 <I2C_WaitOnSTOPRequestThroughIT>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d142      	bne.n	8002d36 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cbe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b40      	cmp	r3, #64	; 0x40
 8002d08:	d10a      	bne.n	8002d20 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fdc4 	bl	80028a6 <HAL_I2C_MemRxCpltCallback>
}
 8002d1e:	e030      	b.n	8002d82 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2212      	movs	r2, #18
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff fd7f 	bl	8002832 <HAL_I2C_MasterRxCpltCallback>
}
 8002d34:	e025      	b.n	8002d82 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d44:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff fd9b 	bl	80028b8 <HAL_I2C_ErrorCallback>
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d11b      	bne.n	8002dda <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002dd8:	e0bd      	b.n	8002f56 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d129      	bne.n	8002e38 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d00a      	beq.n	8002e10 <I2C_MasterReceive_BTF+0x86>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d007      	beq.n	8002e10 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e36:	e08e      	b.n	8002f56 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d176      	bne.n	8002f30 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d002      	beq.n	8002e4e <I2C_MasterReceive_BTF+0xc4>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d108      	bne.n	8002e60 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e019      	b.n	8002e94 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d002      	beq.n	8002e6c <I2C_MasterReceive_BTF+0xe2>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d108      	bne.n	8002e7e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e00a      	b.n	8002e94 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	d007      	beq.n	8002e94 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e92:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002eee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d10a      	bne.n	8002f1a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff fcc7 	bl	80028a6 <HAL_I2C_MemRxCpltCallback>
}
 8002f18:	e01d      	b.n	8002f56 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2212      	movs	r2, #18
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff fc82 	bl	8002832 <HAL_I2C_MasterRxCpltCallback>
}
 8002f2e:	e012      	b.n	8002f56 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b40      	cmp	r3, #64	; 0x40
 8002f70:	d117      	bne.n	8002fa2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f8a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f8c:	e067      	b.n	800305e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]
}
 8002fa0:	e05d      	b.n	800305e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002faa:	d133      	bne.n	8003014 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b21      	cmp	r3, #33	; 0x21
 8002fb6:	d109      	bne.n	8002fcc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fc8:	611a      	str	r2, [r3, #16]
 8002fca:	e008      	b.n	8002fde <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <I2C_Master_SB+0x92>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d108      	bne.n	8003002 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d032      	beq.n	800305e <I2C_Master_SB+0x100>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d02d      	beq.n	800305e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003010:	605a      	str	r2, [r3, #4]
}
 8003012:	e024      	b.n	800305e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10e      	bne.n	800303a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	b29b      	uxth	r3, r3
 8003022:	11db      	asrs	r3, r3, #7
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f003 0306 	and.w	r3, r3, #6
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f063 030f 	orn	r3, r3, #15
 8003030:	b2da      	uxtb	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	611a      	str	r2, [r3, #16]
}
 8003038:	e011      	b.n	800305e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303e:	2b01      	cmp	r3, #1
 8003040:	d10d      	bne.n	800305e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	b29b      	uxth	r3, r3
 8003048:	11db      	asrs	r3, r3, #7
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 0306 	and.w	r3, r3, #6
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f063 030e 	orn	r3, r3, #14
 8003056:	b2da      	uxtb	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	611a      	str	r2, [r3, #16]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	b2da      	uxtb	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003080:	2b00      	cmp	r3, #0
 8003082:	d004      	beq.n	800308e <I2C_Master_ADD10+0x26>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d108      	bne.n	80030a0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <I2C_Master_ADD10+0x48>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ae:	605a      	str	r2, [r3, #4]
  }
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b091      	sub	sp, #68	; 0x44
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b22      	cmp	r3, #34	; 0x22
 80030e2:	f040 8174 	bne.w	80033ce <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <I2C_Master_ADDR+0x54>
 80030ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030f2:	2b40      	cmp	r3, #64	; 0x40
 80030f4:	d10b      	bne.n	800310e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f6:	2300      	movs	r3, #0
 80030f8:	633b      	str	r3, [r7, #48]	; 0x30
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	633b      	str	r3, [r7, #48]	; 0x30
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	633b      	str	r3, [r7, #48]	; 0x30
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	e16b      	b.n	80033e6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	d11d      	bne.n	8003152 <I2C_Master_ADDR+0x98>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800311e:	d118      	bne.n	8003152 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003120:	2300      	movs	r3, #0
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003144:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	651a      	str	r2, [r3, #80]	; 0x50
 8003150:	e149      	b.n	80033e6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d113      	bne.n	8003184 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315c:	2300      	movs	r3, #0
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e120      	b.n	80033c6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b01      	cmp	r3, #1
 800318c:	f040 808a 	bne.w	80032a4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003192:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003196:	d137      	bne.n	8003208 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b6:	d113      	bne.n	80031e0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	e0f2      	b.n	80033c6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	623b      	str	r3, [r7, #32]
 80031f4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e0de      	b.n	80033c6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320a:	2b08      	cmp	r3, #8
 800320c:	d02e      	beq.n	800326c <I2C_Master_ADDR+0x1b2>
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003210:	2b20      	cmp	r3, #32
 8003212:	d02b      	beq.n	800326c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	2b12      	cmp	r3, #18
 8003218:	d102      	bne.n	8003220 <I2C_Master_ADDR+0x166>
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	2b01      	cmp	r3, #1
 800321e:	d125      	bne.n	800326c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003222:	2b04      	cmp	r3, #4
 8003224:	d00e      	beq.n	8003244 <I2C_Master_ADDR+0x18a>
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	2b02      	cmp	r3, #2
 800322a:	d00b      	beq.n	8003244 <I2C_Master_ADDR+0x18a>
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	2b10      	cmp	r3, #16
 8003230:	d008      	beq.n	8003244 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e007      	b.n	8003254 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003252:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003254:	2300      	movs	r3, #0
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	e0ac      	b.n	80033c6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e090      	b.n	80033c6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d158      	bne.n	8003360 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d021      	beq.n	80032f8 <I2C_Master_ADDR+0x23e>
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d01e      	beq.n	80032f8 <I2C_Master_ADDR+0x23e>
 80032ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d01b      	beq.n	80032f8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e012      	b.n	800331e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003306:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800332c:	d14b      	bne.n	80033c6 <I2C_Master_ADDR+0x30c>
 800332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003334:	d00b      	beq.n	800334e <I2C_Master_ADDR+0x294>
 8003336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003338:	2b01      	cmp	r3, #1
 800333a:	d008      	beq.n	800334e <I2C_Master_ADDR+0x294>
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	2b08      	cmp	r3, #8
 8003340:	d005      	beq.n	800334e <I2C_Master_ADDR+0x294>
 8003342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003344:	2b10      	cmp	r3, #16
 8003346:	d002      	beq.n	800334e <I2C_Master_ADDR+0x294>
 8003348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334a:	2b20      	cmp	r3, #32
 800334c:	d13b      	bne.n	80033c6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	e032      	b.n	80033c6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800336e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800337a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337e:	d117      	bne.n	80033b0 <I2C_Master_ADDR+0x2f6>
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003386:	d00b      	beq.n	80033a0 <I2C_Master_ADDR+0x2e6>
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	2b01      	cmp	r3, #1
 800338c:	d008      	beq.n	80033a0 <I2C_Master_ADDR+0x2e6>
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b08      	cmp	r3, #8
 8003392:	d005      	beq.n	80033a0 <I2C_Master_ADDR+0x2e6>
 8003394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003396:	2b10      	cmp	r3, #16
 8003398:	d002      	beq.n	80033a0 <I2C_Master_ADDR+0x2e6>
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	2b20      	cmp	r3, #32
 800339e:	d107      	bne.n	80033b0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033ae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80033cc:	e00b      	b.n	80033e6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
}
 80033e4:	e7ff      	b.n	80033e6 <I2C_Master_ADDR+0x32c>
 80033e6:	bf00      	nop
 80033e8:	3744      	adds	r7, #68	; 0x44
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d02b      	beq.n	8003462 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	781a      	ldrb	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d114      	bne.n	8003462 <I2C_SlaveTransmit_TXE+0x72>
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b29      	cmp	r3, #41	; 0x29
 800343c:	d111      	bne.n	8003462 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2221      	movs	r2, #33	; 0x21
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2228      	movs	r2, #40	; 0x28
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff f9f1 	bl	8002844 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d011      	beq.n	80034a0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d02c      	beq.n	800351e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d114      	bne.n	800351e <I2C_SlaveReceive_RXNE+0x74>
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2b2a      	cmp	r3, #42	; 0x2a
 80034f8:	d111      	bne.n	800351e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003508:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2222      	movs	r2, #34	; 0x22
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2228      	movs	r2, #40	; 0x28
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff f99c 	bl	8002856 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d012      	beq.n	800355e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003582:	2b28      	cmp	r3, #40	; 0x28
 8003584:	d127      	bne.n	80035d6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003594:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	089b      	lsrs	r3, r3, #2
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	09db      	lsrs	r3, r3, #7
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	81bb      	strh	r3, [r7, #12]
 80035b8:	e002      	b.n	80035c0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80035c8:	89ba      	ldrh	r2, [r7, #12]
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	4619      	mov	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff f94a 	bl	8002868 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80035d4:	e00e      	b.n	80035f4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800361a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003648:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003658:	d172      	bne.n	8003740 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	2b22      	cmp	r3, #34	; 0x22
 800365e:	d002      	beq.n	8003666 <I2C_Slave_STOPF+0x6a>
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b2a      	cmp	r3, #42	; 0x2a
 8003664:	d135      	bne.n	80036d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	b29a      	uxth	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f043 0204 	orr.w	r2, r3, #4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003698:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe f82a 	bl	80016f8 <HAL_DMA_GetState>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d049      	beq.n	800373e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	4a69      	ldr	r2, [pc, #420]	; (8003854 <I2C_Slave_STOPF+0x258>)
 80036b0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd ffa8 	bl	800160c <HAL_DMA_Abort_IT>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d03d      	beq.n	800373e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036cc:	4610      	mov	r0, r2
 80036ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036d0:	e035      	b.n	800373e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f043 0204 	orr.w	r2, r3, #4
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003704:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd fff4 	bl	80016f8 <HAL_DMA_GetState>
 8003710:	4603      	mov	r3, r0
 8003712:	2b01      	cmp	r3, #1
 8003714:	d014      	beq.n	8003740 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	4a4e      	ldr	r2, [pc, #312]	; (8003854 <I2C_Slave_STOPF+0x258>)
 800371c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd ff72 	bl	800160c <HAL_DMA_Abort_IT>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003738:	4610      	mov	r0, r2
 800373a:	4798      	blx	r3
 800373c:	e000      	b.n	8003740 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800373e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d03e      	beq.n	80037c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b04      	cmp	r3, #4
 8003756:	d112      	bne.n	800377e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d112      	bne.n	80037b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	f043 0204 	orr.w	r2, r3, #4
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f8b3 	bl	800393c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80037d6:	e039      	b.n	800384c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b2a      	cmp	r3, #42	; 0x2a
 80037dc:	d109      	bne.n	80037f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2228      	movs	r2, #40	; 0x28
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff f832 	bl	8002856 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b28      	cmp	r3, #40	; 0x28
 80037fc:	d111      	bne.n	8003822 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a15      	ldr	r2, [pc, #84]	; (8003858 <I2C_Slave_STOPF+0x25c>)
 8003802:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff f831 	bl	8002882 <HAL_I2C_ListenCpltCallback>
}
 8003820:	e014      	b.n	800384c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	2b22      	cmp	r3, #34	; 0x22
 8003828:	d002      	beq.n	8003830 <I2C_Slave_STOPF+0x234>
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b22      	cmp	r3, #34	; 0x22
 800382e:	d10d      	bne.n	800384c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff f805 	bl	8002856 <HAL_I2C_SlaveRxCpltCallback>
}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	08003e75 	.word	0x08003e75
 8003858:	ffff0000 	.word	0xffff0000

0800385c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d002      	beq.n	800387e <I2C_Slave_AF+0x22>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b20      	cmp	r3, #32
 800387c:	d129      	bne.n	80038d2 <I2C_Slave_AF+0x76>
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	2b28      	cmp	r3, #40	; 0x28
 8003882:	d126      	bne.n	80038d2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a2c      	ldr	r2, [pc, #176]	; (8003938 <I2C_Slave_AF+0xdc>)
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003898:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038a2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fe ffd9 	bl	8002882 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80038d0:	e02e      	b.n	8003930 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b21      	cmp	r3, #33	; 0x21
 80038d6:	d126      	bne.n	8003926 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a17      	ldr	r2, [pc, #92]	; (8003938 <I2C_Slave_AF+0xdc>)
 80038dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2221      	movs	r2, #33	; 0x21
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003902:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800390c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fe ff90 	bl	8002844 <HAL_I2C_SlaveTxCpltCallback>
}
 8003924:	e004      	b.n	8003930 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800392e:	615a      	str	r2, [r3, #20]
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	ffff0000 	.word	0xffff0000

0800393c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003952:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003954:	7bbb      	ldrb	r3, [r7, #14]
 8003956:	2b10      	cmp	r3, #16
 8003958:	d002      	beq.n	8003960 <I2C_ITError+0x24>
 800395a:	7bbb      	ldrb	r3, [r7, #14]
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d10a      	bne.n	8003976 <I2C_ITError+0x3a>
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b22      	cmp	r3, #34	; 0x22
 8003964:	d107      	bne.n	8003976 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003974:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800397c:	2b28      	cmp	r3, #40	; 0x28
 800397e:	d107      	bne.n	8003990 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2228      	movs	r2, #40	; 0x28
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800398e:	e015      	b.n	80039bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800399a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399e:	d00a      	beq.n	80039b6 <I2C_ITError+0x7a>
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b60      	cmp	r3, #96	; 0x60
 80039a4:	d007      	beq.n	80039b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ca:	d161      	bne.n	8003a90 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d020      	beq.n	8003a2a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ec:	4a6a      	ldr	r2, [pc, #424]	; (8003b98 <I2C_ITError+0x25c>)
 80039ee:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fd fe09 	bl	800160c <HAL_DMA_Abort_IT>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8089 	beq.w	8003b14 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a24:	4610      	mov	r0, r2
 8003a26:	4798      	blx	r3
 8003a28:	e074      	b.n	8003b14 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	4a5a      	ldr	r2, [pc, #360]	; (8003b98 <I2C_ITError+0x25c>)
 8003a30:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd fde8 	bl	800160c <HAL_DMA_Abort_IT>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d068      	beq.n	8003b14 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d10b      	bne.n	8003a68 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4798      	blx	r3
 8003a8e:	e041      	b.n	8003b14 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b60      	cmp	r3, #96	; 0x60
 8003a9a:	d125      	bne.n	8003ae8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d10b      	bne.n	8003ad0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7fe fef2 	bl	80028ca <HAL_I2C_AbortCpltCallback>
 8003ae6:	e015      	b.n	8003b14 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	d10b      	bne.n	8003b0e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fe fed2 	bl	80028b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10e      	bne.n	8003b42 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b50:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b58:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d113      	bne.n	8003b8e <I2C_ITError+0x252>
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	2b28      	cmp	r3, #40	; 0x28
 8003b6a:	d110      	bne.n	8003b8e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a0b      	ldr	r2, [pc, #44]	; (8003b9c <I2C_ITError+0x260>)
 8003b70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fe fe7a 	bl	8002882 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	08003e75 	.word	0x08003e75
 8003b9c:	ffff0000 	.word	0xffff0000

08003ba0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	460b      	mov	r3, r1
 8003bae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d006      	beq.n	8003bca <I2C_MasterRequestWrite+0x2a>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d003      	beq.n	8003bca <I2C_MasterRequestWrite+0x2a>
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bc8:	d108      	bne.n	8003bdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e00b      	b.n	8003bf4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	2b12      	cmp	r3, #18
 8003be2:	d107      	bne.n	8003bf4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f9df 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1a:	d103      	bne.n	8003c24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e035      	b.n	8003c94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c30:	d108      	bne.n	8003c44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c32:	897b      	ldrh	r3, [r7, #10]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c40:	611a      	str	r2, [r3, #16]
 8003c42:	e01b      	b.n	8003c7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c44:	897b      	ldrh	r3, [r7, #10]
 8003c46:	11db      	asrs	r3, r3, #7
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f003 0306 	and.w	r3, r3, #6
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f063 030f 	orn	r3, r3, #15
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	490e      	ldr	r1, [pc, #56]	; (8003c9c <I2C_MasterRequestWrite+0xfc>)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fa05 	bl	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e010      	b.n	8003c94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c72:	897b      	ldrh	r3, [r7, #10]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4907      	ldr	r1, [pc, #28]	; (8003ca0 <I2C_MasterRequestWrite+0x100>)
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f9f5 	bl	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	00010008 	.word	0x00010008
 8003ca0:	00010002 	.word	0x00010002

08003ca4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	817b      	strh	r3, [r7, #10]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	813b      	strh	r3, [r7, #8]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f96a 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d04:	d103      	bne.n	8003d0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0aa      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	4952      	ldr	r1, [pc, #328]	; (8003e70 <I2C_RequestMemoryRead+0x1cc>)
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f9a2 	bl	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e097      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	6a39      	ldr	r1, [r7, #32]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fa0c 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d107      	bne.n	8003d76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e076      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d80:	893b      	ldrh	r3, [r7, #8]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	e021      	b.n	8003dd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d8c:	893b      	ldrh	r3, [r7, #8]
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	6a39      	ldr	r1, [r7, #32]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f9e6 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d107      	bne.n	8003dc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e050      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc6:	893b      	ldrh	r3, [r7, #8]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd2:	6a39      	ldr	r1, [r7, #32]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f9cb 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d107      	bne.n	8003df8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e035      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f8d3 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e32:	d103      	bne.n	8003e3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e013      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e40:	897b      	ldrh	r3, [r7, #10]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	6a3a      	ldr	r2, [r7, #32]
 8003e54:	4906      	ldr	r1, [pc, #24]	; (8003e70 <I2C_RequestMemoryRead+0x1cc>)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f90b 	bl	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	00010002 	.word	0x00010002

08003e74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e8e:	4b4b      	ldr	r3, [pc, #300]	; (8003fbc <I2C_DMAAbort+0x148>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	08db      	lsrs	r3, r3, #3
 8003e94:	4a4a      	ldr	r2, [pc, #296]	; (8003fc0 <I2C_DMAAbort+0x14c>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	0a1a      	lsrs	r2, r3, #8
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	00da      	lsls	r2, r3, #3
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003eba:	e00a      	b.n	8003ed2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed0:	d0ea      	beq.n	8003ea8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	2200      	movs	r2, #0
 8003ee0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	2200      	movs	r2, #0
 8003ef0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f00:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2200      	movs	r2, #0
 8003f06:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f14:	2200      	movs	r2, #0
 8003f16:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	2200      	movs	r2, #0
 8003f26:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b60      	cmp	r3, #96	; 0x60
 8003f42:	d10e      	bne.n	8003f62 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2200      	movs	r2, #0
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f7fe fcb5 	bl	80028ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f60:	e027      	b.n	8003fb2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f62:	7cfb      	ldrb	r3, [r7, #19]
 8003f64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f68:	2b28      	cmp	r3, #40	; 0x28
 8003f6a:	d117      	bne.n	8003f9c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2228      	movs	r2, #40	; 0x28
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f9a:	e007      	b.n	8003fac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003fac:	6978      	ldr	r0, [r7, #20]
 8003fae:	f7fe fc83 	bl	80028b8 <HAL_I2C_ErrorCallback>
}
 8003fb2:	bf00      	nop
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000000 	.word	0x20000000
 8003fc0:	14f8b589 	.word	0x14f8b589

08003fc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fd4:	e025      	b.n	8004022 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d021      	beq.n	8004022 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fde:	f7fd f9d9 	bl	8001394 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d302      	bcc.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d116      	bne.n	8004022 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f043 0220 	orr.w	r2, r3, #32
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e023      	b.n	800406a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	d10d      	bne.n	8004048 <I2C_WaitOnFlagUntilTimeout+0x84>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	43da      	mvns	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	e00c      	b.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	43da      	mvns	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	bf0c      	ite	eq
 800405a:	2301      	moveq	r3, #1
 800405c:	2300      	movne	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	429a      	cmp	r2, r3
 8004066:	d0b6      	beq.n	8003fd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004080:	e051      	b.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004090:	d123      	bne.n	80040da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e046      	b.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d021      	beq.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7fd f957 	bl	8001394 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d116      	bne.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f043 0220 	orr.w	r2, r3, #32
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e020      	b.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10c      	bne.n	800414a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	e00b      	b.n	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	43da      	mvns	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d18d      	bne.n	8004082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800417c:	e02d      	b.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f900 	bl	8004384 <I2C_IsAcknowledgeFailed>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e02d      	b.n	80041ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d021      	beq.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004196:	f7fd f8fd 	bl	8001394 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d116      	bne.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e007      	b.n	80041ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e4:	2b80      	cmp	r3, #128	; 0x80
 80041e6:	d1ca      	bne.n	800417e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041fe:	e02d      	b.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f8bf 	bl	8004384 <I2C_IsAcknowledgeFailed>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e02d      	b.n	800426c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004216:	d021      	beq.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004218:	f7fd f8bc 	bl	8001394 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	429a      	cmp	r2, r3
 8004226:	d302      	bcc.n	800422e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d116      	bne.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	f043 0220 	orr.w	r2, r3, #32
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e007      	b.n	800426c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b04      	cmp	r3, #4
 8004268:	d1ca      	bne.n	8004200 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004280:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	08db      	lsrs	r3, r3, #3
 8004286:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	0a1a      	lsrs	r2, r3, #8
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3b01      	subs	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d107      	bne.n	80042b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e008      	b.n	80042c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c0:	d0e9      	beq.n	8004296 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000000 	.word	0x20000000
 80042d4:	14f8b589 	.word	0x14f8b589

080042d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042e4:	e042      	b.n	800436c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d119      	bne.n	8004328 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0210 	mvn.w	r2, #16
 80042fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e029      	b.n	800437c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004328:	f7fd f834 	bl	8001394 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	429a      	cmp	r2, r3
 8004336:	d302      	bcc.n	800433e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d116      	bne.n	800436c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e007      	b.n	800437c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d1b5      	bne.n	80042e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439a:	d11b      	bne.n	80043d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	f043 0204 	orr.w	r2, r3, #4
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80043f0:	d103      	bne.n	80043fa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80043f8:	e007      	b.n	800440a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004402:	d102      	bne.n	800440a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2208      	movs	r2, #8
 8004408:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004416:	b08b      	sub	sp, #44	; 0x2c
 8004418:	af06      	add	r7, sp, #24
 800441a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e0fd      	b.n	8004622 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f006 ff1e 	bl	800b27c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2203      	movs	r2, #3
 8004444:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f002 fbf1 	bl	8006c34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	687e      	ldr	r6, [r7, #4]
 800445a:	466d      	mov	r5, sp
 800445c:	f106 0410 	add.w	r4, r6, #16
 8004460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	1d33      	adds	r3, r6, #4
 800446a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800446c:	6838      	ldr	r0, [r7, #0]
 800446e:	f002 fbbb 	bl	8006be8 <USB_CoreInit>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0ce      	b.n	8004622 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f002 fbec 	bl	8006c68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004490:	2300      	movs	r3, #0
 8004492:	73fb      	strb	r3, [r7, #15]
 8004494:	e04c      	b.n	8004530 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	440b      	add	r3, r1
 80044a6:	3301      	adds	r3, #1
 80044a8:	2201      	movs	r2, #1
 80044aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	440b      	add	r3, r1
 80044bc:	7bfa      	ldrb	r2, [r7, #15]
 80044be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044c0:	7bfa      	ldrb	r2, [r7, #15]
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	b298      	uxth	r0, r3
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	440b      	add	r3, r1
 80044d2:	3336      	adds	r3, #54	; 0x36
 80044d4:	4602      	mov	r2, r0
 80044d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	440b      	add	r3, r1
 80044e8:	3303      	adds	r3, #3
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	440b      	add	r3, r1
 80044fc:	3338      	adds	r3, #56	; 0x38
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	440b      	add	r3, r1
 8004510:	333c      	adds	r3, #60	; 0x3c
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004516:	7bfa      	ldrb	r2, [r7, #15]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	440b      	add	r3, r1
 8004524:	3340      	adds	r3, #64	; 0x40
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	3301      	adds	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	7bfa      	ldrb	r2, [r7, #15]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d3ad      	bcc.n	8004496 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453a:	2300      	movs	r3, #0
 800453c:	73fb      	strb	r3, [r7, #15]
 800453e:	e044      	b.n	80045ca <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	440b      	add	r3, r1
 800454e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004556:	7bfa      	ldrb	r2, [r7, #15]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	440b      	add	r3, r1
 8004564:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	440b      	add	r3, r1
 800457a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	440b      	add	r3, r1
 8004590:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	440b      	add	r3, r1
 80045a6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045ae:	7bfa      	ldrb	r2, [r7, #15]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	440b      	add	r3, r1
 80045bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	3301      	adds	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
 80045ca:	7bfa      	ldrb	r2, [r7, #15]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d3b5      	bcc.n	8004540 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	687e      	ldr	r6, [r7, #4]
 80045dc:	466d      	mov	r5, sp
 80045de:	f106 0410 	add.w	r4, r6, #16
 80045e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	602b      	str	r3, [r5, #0]
 80045ea:	1d33      	adds	r3, r6, #4
 80045ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045ee:	6838      	ldr	r0, [r7, #0]
 80045f0:	f002 fb46 	bl	8006c80 <USB_DevInit>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e00d      	b.n	8004622 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f004 fff8 	bl	8009610 <USB_DevDisconnect>

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800462a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_PCD_Start+0x16>
 800463c:	2302      	movs	r3, #2
 800463e:	e016      	b.n	800466e <HAL_PCD_Start+0x44>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f002 fadb 	bl	8006c08 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004652:	2101      	movs	r1, #1
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f007 f884 	bl	800b762 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f004 ffcc 	bl	80095fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b088      	sub	sp, #32
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f004 ffce 	bl	8009624 <USB_ReadInterrupts>
 8004688:	4603      	mov	r3, r0
 800468a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800468e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004692:	d102      	bne.n	800469a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fb5f 	bl	8004d58 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f004 ffc0 	bl	8009624 <USB_ReadInterrupts>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ae:	d112      	bne.n	80046d6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c2:	b292      	uxth	r2, r2
 80046c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f006 fe52 	bl	800b372 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80046ce:	2100      	movs	r1, #0
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f923 	bl	800491c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f004 ffa2 	bl	8009624 <USB_ReadInterrupts>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ea:	d10b      	bne.n	8004704 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046fe:	b292      	uxth	r2, r2
 8004700:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f004 ff8b 	bl	8009624 <USB_ReadInterrupts>
 800470e:	4603      	mov	r3, r0
 8004710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004718:	d10b      	bne.n	8004732 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004722:	b29a      	uxth	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472c:	b292      	uxth	r2, r2
 800472e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f004 ff74 	bl	8009624 <USB_ReadInterrupts>
 800473c:	4603      	mov	r3, r0
 800473e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004746:	d126      	bne.n	8004796 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004750:	b29a      	uxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0204 	bic.w	r2, r2, #4
 800475a:	b292      	uxth	r2, r2
 800475c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004768:	b29a      	uxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0208 	bic.w	r2, r2, #8
 8004772:	b292      	uxth	r2, r2
 8004774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f006 fe33 	bl	800b3e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004786:	b29a      	uxth	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004790:	b292      	uxth	r2, r2
 8004792:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f004 ff42 	bl	8009624 <USB_ReadInterrupts>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047aa:	f040 8082 	bne.w	80048b2 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80047ae:	2300      	movs	r3, #0
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e010      	b.n	80047d6 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	7ffb      	ldrb	r3, [r7, #31]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	441a      	add	r2, r3
 80047c0:	7ffb      	ldrb	r3, [r7, #31]
 80047c2:	8812      	ldrh	r2, [r2, #0]
 80047c4:	b292      	uxth	r2, r2
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	3320      	adds	r3, #32
 80047ca:	443b      	add	r3, r7
 80047cc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80047d0:	7ffb      	ldrb	r3, [r7, #31]
 80047d2:	3301      	adds	r3, #1
 80047d4:	77fb      	strb	r3, [r7, #31]
 80047d6:	7ffb      	ldrb	r3, [r7, #31]
 80047d8:	2b07      	cmp	r3, #7
 80047da:	d9eb      	bls.n	80047b4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	b292      	uxth	r2, r2
 80047f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	b292      	uxth	r2, r2
 8004808:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800480c:	bf00      	nop
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004816:	b29b      	uxth	r3, r3
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f6      	beq.n	800480e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004832:	b292      	uxth	r2, r2
 8004834:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004838:	2300      	movs	r3, #0
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e00f      	b.n	800485e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800483e:	7ffb      	ldrb	r3, [r7, #31]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	4611      	mov	r1, r2
 8004846:	7ffa      	ldrb	r2, [r7, #31]
 8004848:	0092      	lsls	r2, r2, #2
 800484a:	440a      	add	r2, r1
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	3320      	adds	r3, #32
 8004850:	443b      	add	r3, r7
 8004852:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004856:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004858:	7ffb      	ldrb	r3, [r7, #31]
 800485a:	3301      	adds	r3, #1
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	7ffb      	ldrb	r3, [r7, #31]
 8004860:	2b07      	cmp	r3, #7
 8004862:	d9ec      	bls.n	800483e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800486c:	b29a      	uxth	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0208 	orr.w	r2, r2, #8
 8004876:	b292      	uxth	r2, r2
 8004878:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004884:	b29a      	uxth	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800488e:	b292      	uxth	r2, r2
 8004890:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0204 	orr.w	r2, r2, #4
 80048a6:	b292      	uxth	r2, r2
 80048a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f006 fd7f 	bl	800b3b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f004 feb4 	bl	8009624 <USB_ReadInterrupts>
 80048bc:	4603      	mov	r3, r0
 80048be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c6:	d10e      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048da:	b292      	uxth	r2, r2
 80048dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f006 fd38 	bl	800b356 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f004 fe9a 	bl	8009624 <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048fa:	d10b      	bne.n	8004914 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004904:	b29a      	uxth	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800490e:	b292      	uxth	r2, r2
 8004910:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004914:	bf00      	nop
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_PCD_SetAddress+0x1a>
 8004932:	2302      	movs	r3, #2
 8004934:	e013      	b.n	800495e <HAL_PCD_SetAddress+0x42>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	78fa      	ldrb	r2, [r7, #3]
 8004942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f004 fe41 	bl	80095d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	4608      	mov	r0, r1
 8004970:	4611      	mov	r1, r2
 8004972:	461a      	mov	r2, r3
 8004974:	4603      	mov	r3, r0
 8004976:	70fb      	strb	r3, [r7, #3]
 8004978:	460b      	mov	r3, r1
 800497a:	803b      	strh	r3, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004988:	2b00      	cmp	r3, #0
 800498a:	da0e      	bge.n	80049aa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	4413      	add	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	705a      	strb	r2, [r3, #1]
 80049a8:	e00e      	b.n	80049c8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	f003 0207 	and.w	r2, r3, #7
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	4413      	add	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049d4:	883a      	ldrh	r2, [r7, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	78ba      	ldrb	r2, [r7, #2]
 80049de:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049f2:	78bb      	ldrb	r3, [r7, #2]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d102      	bne.n	80049fe <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_PCD_EP_Open+0xa6>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e00e      	b.n	8004a2a <HAL_PCD_EP_Open+0xc4>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68f9      	ldr	r1, [r7, #12]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f002 f950 	bl	8006cc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004a28:	7afb      	ldrb	r3, [r7, #11]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	da0e      	bge.n	8004a64 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	705a      	strb	r2, [r3, #1]
 8004a62:	e00e      	b.n	8004a82 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	f003 0207 	and.w	r2, r3, #7
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4413      	add	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_PCD_EP_Close+0x6a>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e00e      	b.n	8004aba <HAL_PCD_EP_Close+0x88>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f002 fc72 	bl	8007394 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ad2:	7afb      	ldrb	r3, [r7, #11]
 8004ad4:	f003 0207 	and.w	r2, r3, #7
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2200      	movs	r2, #0
 8004afa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2200      	movs	r2, #0
 8004b00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b02:	7afb      	ldrb	r3, [r7, #11]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b0e:	7afb      	ldrb	r3, [r7, #11]
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f002 fe24 	bl	800776c <USB_EPStartXfer>
 8004b24:	e005      	b.n	8004b32 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6979      	ldr	r1, [r7, #20]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f002 fe1d 	bl	800776c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	f003 0207 	and.w	r2, r3, #7
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	440b      	add	r3, r1
 8004b5a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	460b      	mov	r3, r1
 8004b78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b7a:	7afb      	ldrb	r3, [r7, #11]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb6:	7afb      	ldrb	r3, [r7, #11]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bc2:	7afb      	ldrb	r3, [r7, #11]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d106      	bne.n	8004bda <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6979      	ldr	r1, [r7, #20]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f002 fdca 	bl	800776c <USB_EPStartXfer>
 8004bd8:	e005      	b.n	8004be6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6979      	ldr	r1, [r7, #20]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f002 fdc3 	bl	800776c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	f003 0207 	and.w	r2, r3, #7
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d901      	bls.n	8004c0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e04c      	b.n	8004ca8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	da0e      	bge.n	8004c34 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	4413      	add	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	705a      	strb	r2, [r3, #1]
 8004c32:	e00c      	b.n	8004c4e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4413      	add	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_PCD_EP_SetStall+0x7e>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e01c      	b.n	8004ca8 <HAL_PCD_EP_SetStall+0xb8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f004 fbad 	bl	80093dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d108      	bne.n	8004c9e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f004 fcd2 	bl	8009642 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	f003 020f 	and.w	r2, r3, #15
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d901      	bls.n	8004cce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e040      	b.n	8004d50 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	da0e      	bge.n	8004cf4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	4613      	mov	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4413      	add	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	705a      	strb	r2, [r3, #1]
 8004cf2:	e00e      	b.n	8004d12 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	f003 0207 	and.w	r2, r3, #7
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_PCD_EP_ClrStall+0x82>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e00e      	b.n	8004d50 <HAL_PCD_EP_ClrStall+0xa0>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f004 fb9b 	bl	800947c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08e      	sub	sp, #56	; 0x38
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d60:	e2ec      	b.n	800533c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d6a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004d6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004d78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 8161 	bne.w	8005044 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d152      	bne.n	8004e32 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9c:	81fb      	strh	r3, [r7, #14]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	89fb      	ldrh	r3, [r7, #14]
 8004da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3328      	adds	r3, #40	; 0x28
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	3302      	adds	r3, #2
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	441a      	add	r2, r3
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004df0:	2100      	movs	r1, #0
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f006 fa95 	bl	800b322 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 829b 	beq.w	800533c <PCD_EP_ISR_Handler+0x5e4>
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f040 8296 	bne.w	800533c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	b292      	uxth	r2, r2
 8004e24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e30:	e284      	b.n	800533c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d034      	beq.n	8004eb6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	4413      	add	r3, r2
 8004e60:	3306      	adds	r3, #6
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f004 fc29 	bl	80096e2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	823b      	strh	r3, [r7, #16]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	8a3a      	ldrh	r2, [r7, #16]
 8004ea6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eaa:	b292      	uxth	r2, r2
 8004eac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f006 fa0a 	bl	800b2c8 <HAL_PCD_SetupStageCallback>
 8004eb4:	e242      	b.n	800533c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004eb6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f280 823e 	bge.w	800533c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ecc:	4013      	ands	r3, r2
 8004ece:	83bb      	strh	r3, [r7, #28]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	8bba      	ldrh	r2, [r7, #28]
 8004ed6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eda:	b292      	uxth	r2, r2
 8004edc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3306      	adds	r3, #6
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d019      	beq.n	8004f46 <PCD_EP_ISR_Handler+0x1ee>
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d015      	beq.n	8004f46 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	6959      	ldr	r1, [r3, #20]
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f004 fbd9 	bl	80096e2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	441a      	add	r2, r3
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f006 f9d3 	bl	800b2ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f040 81f2 	bne.w	800533c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d112      	bne.n	8004fa6 <PCD_EP_ISR_Handler+0x24e>
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	801a      	strh	r2, [r3, #0]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	e02f      	b.n	8005006 <PCD_EP_ISR_Handler+0x2ae>
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	2b3e      	cmp	r3, #62	; 0x3e
 8004fac:	d813      	bhi.n	8004fd6 <PCD_EP_ISR_Handler+0x27e>
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	085b      	lsrs	r3, r3, #1
 8004fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <PCD_EP_ISR_Handler+0x270>
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	e017      	b.n	8005006 <PCD_EP_ISR_Handler+0x2ae>
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <PCD_EP_ISR_Handler+0x298>
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	3b01      	subs	r3, #1
 8004fee:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005000:	b29a      	uxth	r2, r3
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	827b      	strh	r3, [r7, #18]
 8005018:	8a7b      	ldrh	r3, [r7, #18]
 800501a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800501e:	827b      	strh	r3, [r7, #18]
 8005020:	8a7b      	ldrh	r3, [r7, #18]
 8005022:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005026:	827b      	strh	r3, [r7, #18]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	8a7b      	ldrh	r3, [r7, #18]
 800502e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503e:	b29b      	uxth	r3, r3
 8005040:	8013      	strh	r3, [r2, #0]
 8005042:	e17b      	b.n	800533c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005056:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800505a:	2b00      	cmp	r3, #0
 800505c:	f280 80ea 	bge.w	8005234 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	b29a      	uxth	r2, r3
 8005072:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005076:	4013      	ands	r3, r2
 8005078:	853b      	strh	r3, [r7, #40]	; 0x28
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800508a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800508e:	b292      	uxth	r2, r2
 8005090:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005092:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	7b1b      	ldrb	r3, [r3, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d122      	bne.n	80050f6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	4413      	add	r3, r2
 80050c4:	3306      	adds	r3, #6
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050d8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80050da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8087 	beq.w	80051f0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	6959      	ldr	r1, [r3, #20]
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	88da      	ldrh	r2, [r3, #6]
 80050ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050f0:	f004 faf7 	bl	80096e2 <USB_ReadPMA>
 80050f4:	e07c      	b.n	80051f0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	78db      	ldrb	r3, [r3, #3]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d108      	bne.n	8005110 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80050fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005100:	461a      	mov	r2, r3
 8005102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f927 	bl	8005358 <HAL_PCD_EP_DB_Receive>
 800510a:	4603      	mov	r3, r0
 800510c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800510e:	e06f      	b.n	80051f0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	847b      	strh	r3, [r7, #34]	; 0x22
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800513c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005148:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d021      	beq.n	80051ae <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4413      	add	r3, r2
 800517e:	3302      	adds	r3, #2
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005192:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005194:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005196:	2b00      	cmp	r3, #0
 8005198:	d02a      	beq.n	80051f0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	6959      	ldr	r1, [r3, #20]
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	891a      	ldrh	r2, [r3, #8]
 80051a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051a8:	f004 fa9b 	bl	80096e2 <USB_ReadPMA>
 80051ac:	e020      	b.n	80051f0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4413      	add	r3, r2
 80051c2:	3306      	adds	r3, #6
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80051d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	6959      	ldr	r1, [r3, #20]
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	895a      	ldrh	r2, [r3, #10]
 80051ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051ec:	f004 fa79 	bl	80096e2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051f6:	441a      	add	r2, r3
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	695a      	ldr	r2, [r3, #20]
 8005200:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005202:	441a      	add	r2, r3
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <PCD_EP_ISR_Handler+0x4c2>
 8005210:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	429a      	cmp	r2, r3
 8005218:	d206      	bcs.n	8005228 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	4619      	mov	r1, r3
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f006 f863 	bl	800b2ec <HAL_PCD_DataOutStageCallback>
 8005226:	e005      	b.n	8005234 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800522e:	4618      	mov	r0, r3
 8005230:	f002 fa9c 	bl	800776c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005234:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d07e      	beq.n	800533c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800523e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4413      	add	r3, r2
 8005250:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526c:	843b      	strh	r3, [r7, #32]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	441a      	add	r2, r3
 800527c:	8c3b      	ldrh	r3, [r7, #32]
 800527e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005286:	b29b      	uxth	r3, r3
 8005288:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	78db      	ldrb	r3, [r3, #3]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d00c      	beq.n	80052ac <PCD_EP_ISR_Handler+0x554>
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	78db      	ldrb	r3, [r3, #3]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d008      	beq.n	80052ac <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d146      	bne.n	8005330 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80052a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d141      	bne.n	8005330 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4413      	add	r3, r2
 80052c0:	3302      	adds	r3, #2
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052d4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	8bfb      	ldrh	r3, [r7, #30]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d906      	bls.n	80052ee <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	699a      	ldr	r2, [r3, #24]
 80052e4:	8bfb      	ldrh	r3, [r7, #30]
 80052e6:	1ad2      	subs	r2, r2, r3
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	619a      	str	r2, [r3, #24]
 80052ec:	e002      	b.n	80052f4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	2200      	movs	r2, #0
 80052f2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f006 f80d 	bl	800b322 <HAL_PCD_DataInStageCallback>
 8005308:	e018      	b.n	800533c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	8bfb      	ldrh	r3, [r7, #30]
 8005310:	441a      	add	r2, r3
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	8bfb      	ldrh	r3, [r7, #30]
 800531c:	441a      	add	r2, r3
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005328:	4618      	mov	r0, r3
 800532a:	f002 fa1f 	bl	800776c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800532e:	e005      	b.n	800533c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005330:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005332:	461a      	mov	r2, r3
 8005334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f91b 	bl	8005572 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005344:	b29b      	uxth	r3, r3
 8005346:	b21b      	sxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	f6ff ad0a 	blt.w	8004d62 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3738      	adds	r7, #56	; 0x38
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d07e      	beq.n	800546e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005378:	b29b      	uxth	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	4413      	add	r3, r2
 8005384:	3302      	adds	r3, #2
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005398:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	8b7b      	ldrh	r3, [r7, #26]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d306      	bcc.n	80053b2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	8b7b      	ldrh	r3, [r7, #26]
 80053aa:	1ad2      	subs	r2, r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	619a      	str	r2, [r3, #24]
 80053b0:	e002      	b.n	80053b8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2200      	movs	r2, #0
 80053b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d123      	bne.n	8005408 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	461a      	mov	r2, r3
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053da:	833b      	strh	r3, [r7, #24]
 80053dc:	8b3b      	ldrh	r3, [r7, #24]
 80053de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053e2:	833b      	strh	r3, [r7, #24]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	441a      	add	r2, r3
 80053f2:	8b3b      	ldrh	r3, [r7, #24]
 80053f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005404:	b29b      	uxth	r3, r3
 8005406:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01f      	beq.n	8005452 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542c:	82fb      	strh	r3, [r7, #22]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	441a      	add	r2, r3
 800543c:	8afb      	ldrh	r3, [r7, #22]
 800543e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800544e:	b29b      	uxth	r3, r3
 8005450:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005452:	8b7b      	ldrh	r3, [r7, #26]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8087 	beq.w	8005568 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	6959      	ldr	r1, [r3, #20]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	891a      	ldrh	r2, [r3, #8]
 8005466:	8b7b      	ldrh	r3, [r7, #26]
 8005468:	f004 f93b 	bl	80096e2 <USB_ReadPMA>
 800546c:	e07c      	b.n	8005568 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005476:	b29b      	uxth	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4413      	add	r3, r2
 8005482:	3306      	adds	r3, #6
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005496:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	699a      	ldr	r2, [r3, #24]
 800549c:	8b7b      	ldrh	r3, [r7, #26]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d306      	bcc.n	80054b0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	8b7b      	ldrh	r3, [r7, #26]
 80054a8:	1ad2      	subs	r2, r2, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	619a      	str	r2, [r3, #24]
 80054ae:	e002      	b.n	80054b6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2200      	movs	r2, #0
 80054b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d123      	bne.n	8005506 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d8:	83fb      	strh	r3, [r7, #30]
 80054da:	8bfb      	ldrh	r3, [r7, #30]
 80054dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054e0:	83fb      	strh	r3, [r7, #30]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	441a      	add	r2, r3
 80054f0:	8bfb      	ldrh	r3, [r7, #30]
 80054f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005502:	b29b      	uxth	r3, r3
 8005504:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d11f      	bne.n	8005550 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	83bb      	strh	r3, [r7, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	441a      	add	r2, r3
 800553a:	8bbb      	ldrh	r3, [r7, #28]
 800553c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005548:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800554c:	b29b      	uxth	r3, r3
 800554e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005550:	8b7b      	ldrh	r3, [r7, #26]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	6959      	ldr	r1, [r3, #20]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	895a      	ldrh	r2, [r3, #10]
 8005562:	8b7b      	ldrh	r3, [r7, #26]
 8005564:	f004 f8bd 	bl	80096e2 <USB_ReadPMA>
    }
  }

  return count;
 8005568:	8b7b      	ldrh	r3, [r7, #26]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b0a2      	sub	sp, #136	; 0x88
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	4613      	mov	r3, r2
 800557e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005580:	88fb      	ldrh	r3, [r7, #6]
 8005582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 81c7 	beq.w	800591a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005594:	b29b      	uxth	r3, r3
 8005596:	461a      	mov	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4413      	add	r3, r2
 80055a0:	3302      	adds	r3, #2
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d907      	bls.n	80055d4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055cc:	1ad2      	subs	r2, r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	619a      	str	r2, [r3, #24]
 80055d2:	e002      	b.n	80055da <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2200      	movs	r2, #0
 80055d8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f040 80b9 	bne.w	8005756 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	785b      	ldrb	r3, [r3, #1]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d126      	bne.n	800563a <HAL_PCD_EP_DB_Transmit+0xc8>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	4413      	add	r3, r2
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	011a      	lsls	r2, r3, #4
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	4413      	add	r3, r2
 800560e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800561e:	b29a      	uxth	r2, r3
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29b      	uxth	r3, r3
 800562a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005632:	b29a      	uxth	r2, r3
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	801a      	strh	r2, [r3, #0]
 8005638:	e01a      	b.n	8005670 <HAL_PCD_EP_DB_Transmit+0xfe>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	785b      	ldrb	r3, [r3, #1]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d116      	bne.n	8005670 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	633b      	str	r3, [r7, #48]	; 0x30
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005650:	b29b      	uxth	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	4413      	add	r3, r2
 8005658:	633b      	str	r3, [r7, #48]	; 0x30
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	011a      	lsls	r2, r3, #4
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	4413      	add	r3, r2
 8005664:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	2200      	movs	r2, #0
 800566e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	623b      	str	r3, [r7, #32]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	785b      	ldrb	r3, [r3, #1]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d126      	bne.n	80056cc <HAL_PCD_EP_DB_Transmit+0x15a>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	61bb      	str	r3, [r7, #24]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568c:	b29b      	uxth	r3, r3
 800568e:	461a      	mov	r2, r3
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	4413      	add	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	011a      	lsls	r2, r3, #4
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	4413      	add	r3, r2
 80056a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	801a      	strh	r2, [r3, #0]
 80056ca:	e017      	b.n	80056fc <HAL_PCD_EP_DB_Transmit+0x18a>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d113      	bne.n	80056fc <HAL_PCD_EP_DB_Transmit+0x18a>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056dc:	b29b      	uxth	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	4413      	add	r3, r2
 80056e4:	623b      	str	r3, [r7, #32]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	011a      	lsls	r2, r3, #4
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	4413      	add	r3, r2
 80056f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	2200      	movs	r2, #0
 80056fa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	4619      	mov	r1, r3
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f005 fe0d 	bl	800b322 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 82d4 	beq.w	8005cbc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	827b      	strh	r3, [r7, #18]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	441a      	add	r2, r3
 800573e:	8a7b      	ldrh	r3, [r7, #18]
 8005740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800574c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005750:	b29b      	uxth	r3, r3
 8005752:	8013      	strh	r3, [r2, #0]
 8005754:	e2b2      	b.n	8005cbc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d021      	beq.n	80057a4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	b29b      	uxth	r3, r3
 8005772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	441a      	add	r2, r3
 800578c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800579c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	f040 8286 	bne.w	8005cbc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	695a      	ldr	r2, [r3, #20]
 80057b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057b8:	441a      	add	r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	69da      	ldr	r2, [r3, #28]
 80057c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057c6:	441a      	add	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6a1a      	ldr	r2, [r3, #32]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d309      	bcc.n	80057ec <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e4:	1ad2      	subs	r2, r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	621a      	str	r2, [r3, #32]
 80057ea:	e015      	b.n	8005818 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d107      	bne.n	8005804 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80057f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005802:	e009      	b.n	8005818 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2200      	movs	r2, #0
 8005816:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d155      	bne.n	80058cc <HAL_PCD_EP_DB_Transmit+0x35a>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	63bb      	str	r3, [r7, #56]	; 0x38
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582e:	b29b      	uxth	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	4413      	add	r3, r2
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	011a      	lsls	r2, r3, #4
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	4413      	add	r3, r2
 8005842:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005846:	637b      	str	r3, [r7, #52]	; 0x34
 8005848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800584a:	2b00      	cmp	r3, #0
 800584c:	d112      	bne.n	8005874 <HAL_PCD_EP_DB_Transmit+0x302>
 800584e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005858:	b29a      	uxth	r2, r3
 800585a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586c:	b29a      	uxth	r2, r3
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	e047      	b.n	8005904 <HAL_PCD_EP_DB_Transmit+0x392>
 8005874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005876:	2b3e      	cmp	r3, #62	; 0x3e
 8005878:	d811      	bhi.n	800589e <HAL_PCD_EP_DB_Transmit+0x32c>
 800587a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_PCD_EP_DB_Transmit+0x31e>
 800588a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588c:	3301      	adds	r3, #1
 800588e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005892:	b29b      	uxth	r3, r3
 8005894:	029b      	lsls	r3, r3, #10
 8005896:	b29a      	uxth	r2, r3
 8005898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589a:	801a      	strh	r2, [r3, #0]
 800589c:	e032      	b.n	8005904 <HAL_PCD_EP_DB_Transmit+0x392>
 800589e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a6:	f003 031f 	and.w	r3, r3, #31
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d102      	bne.n	80058b4 <HAL_PCD_EP_DB_Transmit+0x342>
 80058ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b0:	3b01      	subs	r3, #1
 80058b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	029b      	lsls	r3, r3, #10
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	e01b      	b.n	8005904 <HAL_PCD_EP_DB_Transmit+0x392>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	785b      	ldrb	r3, [r3, #1]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d117      	bne.n	8005904 <HAL_PCD_EP_DB_Transmit+0x392>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	643b      	str	r3, [r7, #64]	; 0x40
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e8:	4413      	add	r3, r2
 80058ea:	643b      	str	r3, [r7, #64]	; 0x40
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	011a      	lsls	r2, r3, #4
 80058f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f4:	4413      	add	r3, r2
 80058f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005902:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	6959      	ldr	r1, [r3, #20]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	891a      	ldrh	r2, [r3, #8]
 8005910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005912:	b29b      	uxth	r3, r3
 8005914:	f003 fea0 	bl	8009658 <USB_WritePMA>
 8005918:	e1d0      	b.n	8005cbc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005922:	b29b      	uxth	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	4413      	add	r3, r2
 800592e:	3306      	adds	r3, #6
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005942:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800594e:	429a      	cmp	r2, r3
 8005950:	d307      	bcc.n	8005962 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800595a:	1ad2      	subs	r2, r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	619a      	str	r2, [r3, #24]
 8005960:	e002      	b.n	8005968 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2200      	movs	r2, #0
 8005966:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f040 80c4 	bne.w	8005afa <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d126      	bne.n	80059c8 <HAL_PCD_EP_DB_Transmit+0x456>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005988:	b29b      	uxth	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598e:	4413      	add	r3, r2
 8005990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	011a      	lsls	r2, r3, #4
 8005998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599a:	4413      	add	r3, r2
 800599c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80059a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059b0:	801a      	strh	r2, [r3, #0]
 80059b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059c4:	801a      	strh	r2, [r3, #0]
 80059c6:	e01a      	b.n	80059fe <HAL_PCD_EP_DB_Transmit+0x48c>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d116      	bne.n	80059fe <HAL_PCD_EP_DB_Transmit+0x48c>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	677b      	str	r3, [r7, #116]	; 0x74
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059de:	b29b      	uxth	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e4:	4413      	add	r3, r2
 80059e6:	677b      	str	r3, [r7, #116]	; 0x74
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	011a      	lsls	r2, r3, #4
 80059ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f0:	4413      	add	r3, r2
 80059f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059f6:	673b      	str	r3, [r7, #112]	; 0x70
 80059f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059fa:	2200      	movs	r2, #0
 80059fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d12f      	bne.n	8005a6c <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a24:	4413      	add	r3, r2
 8005a26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	011a      	lsls	r2, r3, #4
 8005a30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	e017      	b.n	8005a9c <HAL_PCD_EP_DB_Transmit+0x52a>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d113      	bne.n	8005a9c <HAL_PCD_EP_DB_Transmit+0x52a>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a82:	4413      	add	r3, r2
 8005a84:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	011a      	lsls	r2, r3, #4
 8005a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a8e:	4413      	add	r3, r2
 8005a90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a98:	2200      	movs	r2, #0
 8005a9a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f005 fc3d 	bl	800b322 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f040 8104 	bne.w	8005cbc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ace:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	441a      	add	r2, r3
 8005ae0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	8013      	strh	r3, [r2, #0]
 8005af8:	e0e0      	b.n	8005cbc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d121      	bne.n	8005b48 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	441a      	add	r2, r3
 8005b30:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	f040 80b4 	bne.w	8005cbc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b5c:	441a      	add	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	69da      	ldr	r2, [r3, #28]
 8005b66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b6a:	441a      	add	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	6a1a      	ldr	r2, [r3, #32]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d309      	bcc.n	8005b90 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6a1a      	ldr	r2, [r3, #32]
 8005b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b88:	1ad2      	subs	r2, r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	621a      	str	r2, [r3, #32]
 8005b8e:	e015      	b.n	8005bbc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d107      	bne.n	8005ba8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005b98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b9c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005ba6:	e009      	b.n	8005bbc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	667b      	str	r3, [r7, #100]	; 0x64
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d155      	bne.n	8005c76 <HAL_PCD_EP_DB_Transmit+0x704>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bde:	4413      	add	r3, r2
 8005be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	011a      	lsls	r2, r3, #4
 8005be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bea:	4413      	add	r3, r2
 8005bec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d112      	bne.n	8005c1e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e044      	b.n	8005ca8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c20:	2b3e      	cmp	r3, #62	; 0x3e
 8005c22:	d811      	bhi.n	8005c48 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	657b      	str	r3, [r7, #84]	; 0x54
 8005c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c36:	3301      	adds	r3, #1
 8005c38:	657b      	str	r3, [r7, #84]	; 0x54
 8005c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	029b      	lsls	r3, r3, #10
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	e02f      	b.n	8005ca8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c50:	f003 031f 	and.w	r3, r3, #31
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	029b      	lsls	r3, r3, #10
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c72:	801a      	strh	r2, [r3, #0]
 8005c74:	e018      	b.n	8005ca8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d114      	bne.n	8005ca8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c8c:	4413      	add	r3, r2
 8005c8e:	667b      	str	r3, [r7, #100]	; 0x64
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	011a      	lsls	r2, r3, #4
 8005c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c98:	4413      	add	r3, r2
 8005c9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c9e:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ca6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	6959      	ldr	r1, [r3, #20]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	895a      	ldrh	r2, [r3, #10]
 8005cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f003 fcce 	bl	8009658 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd6:	823b      	strh	r3, [r7, #16]
 8005cd8:	8a3b      	ldrh	r3, [r7, #16]
 8005cda:	f083 0310 	eor.w	r3, r3, #16
 8005cde:	823b      	strh	r3, [r7, #16]
 8005ce0:	8a3b      	ldrh	r3, [r7, #16]
 8005ce2:	f083 0320 	eor.w	r3, r3, #32
 8005ce6:	823b      	strh	r3, [r7, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	8a3b      	ldrh	r3, [r7, #16]
 8005cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3788      	adds	r7, #136	; 0x88
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b087      	sub	sp, #28
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	607b      	str	r3, [r7, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	817b      	strh	r3, [r7, #10]
 8005d24:	4613      	mov	r3, r2
 8005d26:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005d28:	897b      	ldrh	r3, [r7, #10]
 8005d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d34:	897b      	ldrh	r3, [r7, #10]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	e009      	b.n	8005d60 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d4c:	897a      	ldrh	r2, [r7, #10]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005d60:	893b      	ldrh	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d107      	bne.n	8005d76 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	80da      	strh	r2, [r3, #6]
 8005d74:	e00b      	b.n	8005d8e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	0c1b      	lsrs	r3, r3, #16
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr
	...

08005d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e272      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 8087 	beq.w	8005eca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dbc:	4b92      	ldr	r3, [pc, #584]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 030c 	and.w	r3, r3, #12
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d00c      	beq.n	8005de2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005dc8:	4b8f      	ldr	r3, [pc, #572]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f003 030c 	and.w	r3, r3, #12
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d112      	bne.n	8005dfa <HAL_RCC_OscConfig+0x5e>
 8005dd4:	4b8c      	ldr	r3, [pc, #560]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de0:	d10b      	bne.n	8005dfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de2:	4b89      	ldr	r3, [pc, #548]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d06c      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x12c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d168      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e24c      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e02:	d106      	bne.n	8005e12 <HAL_RCC_OscConfig+0x76>
 8005e04:	4b80      	ldr	r3, [pc, #512]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a7f      	ldr	r2, [pc, #508]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	e02e      	b.n	8005e70 <HAL_RCC_OscConfig+0xd4>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10c      	bne.n	8005e34 <HAL_RCC_OscConfig+0x98>
 8005e1a:	4b7b      	ldr	r3, [pc, #492]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a7a      	ldr	r2, [pc, #488]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	4b78      	ldr	r3, [pc, #480]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a77      	ldr	r2, [pc, #476]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	e01d      	b.n	8005e70 <HAL_RCC_OscConfig+0xd4>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e3c:	d10c      	bne.n	8005e58 <HAL_RCC_OscConfig+0xbc>
 8005e3e:	4b72      	ldr	r3, [pc, #456]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a71      	ldr	r2, [pc, #452]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	4b6f      	ldr	r3, [pc, #444]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a6e      	ldr	r2, [pc, #440]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	e00b      	b.n	8005e70 <HAL_RCC_OscConfig+0xd4>
 8005e58:	4b6b      	ldr	r3, [pc, #428]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a6a      	ldr	r2, [pc, #424]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	4b68      	ldr	r3, [pc, #416]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a67      	ldr	r2, [pc, #412]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d013      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e78:	f7fb fa8c 	bl	8001394 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e80:	f7fb fa88 	bl	8001394 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b64      	cmp	r3, #100	; 0x64
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e200      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e92:	4b5d      	ldr	r3, [pc, #372]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f0      	beq.n	8005e80 <HAL_RCC_OscConfig+0xe4>
 8005e9e:	e014      	b.n	8005eca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea0:	f7fb fa78 	bl	8001394 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ea8:	f7fb fa74 	bl	8001394 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	; 0x64
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e1ec      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eba:	4b53      	ldr	r3, [pc, #332]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1f0      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x10c>
 8005ec6:	e000      	b.n	8005eca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d063      	beq.n	8005f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ed6:	4b4c      	ldr	r3, [pc, #304]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 030c 	and.w	r3, r3, #12
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00b      	beq.n	8005efa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005ee2:	4b49      	ldr	r3, [pc, #292]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d11c      	bne.n	8005f28 <HAL_RCC_OscConfig+0x18c>
 8005eee:	4b46      	ldr	r3, [pc, #280]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d116      	bne.n	8005f28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005efa:	4b43      	ldr	r3, [pc, #268]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <HAL_RCC_OscConfig+0x176>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d001      	beq.n	8005f12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e1c0      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f12:	4b3d      	ldr	r3, [pc, #244]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4939      	ldr	r1, [pc, #228]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f26:	e03a      	b.n	8005f9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d020      	beq.n	8005f72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f30:	4b36      	ldr	r3, [pc, #216]	; (800600c <HAL_RCC_OscConfig+0x270>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f36:	f7fb fa2d 	bl	8001394 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f3e:	f7fb fa29 	bl	8001394 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e1a1      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f50:	4b2d      	ldr	r3, [pc, #180]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0f0      	beq.n	8005f3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5c:	4b2a      	ldr	r3, [pc, #168]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	4927      	ldr	r1, [pc, #156]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	600b      	str	r3, [r1, #0]
 8005f70:	e015      	b.n	8005f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f72:	4b26      	ldr	r3, [pc, #152]	; (800600c <HAL_RCC_OscConfig+0x270>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f78:	f7fb fa0c 	bl	8001394 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f80:	f7fb fa08 	bl	8001394 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e180      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f92:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f0      	bne.n	8005f80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d03a      	beq.n	8006020 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d019      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fb2:	4b17      	ldr	r3, [pc, #92]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb8:	f7fb f9ec 	bl	8001394 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc0:	f7fb f9e8 	bl	8001394 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e160      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <HAL_RCC_OscConfig+0x26c>)
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0f0      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005fde:	2001      	movs	r0, #1
 8005fe0:	f000 fac4 	bl	800656c <RCC_Delay>
 8005fe4:	e01c      	b.n	8006020 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fec:	f7fb f9d2 	bl	8001394 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ff2:	e00f      	b.n	8006014 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ff4:	f7fb f9ce 	bl	8001394 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d908      	bls.n	8006014 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e146      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
 8006006:	bf00      	nop
 8006008:	40021000 	.word	0x40021000
 800600c:	42420000 	.word	0x42420000
 8006010:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006014:	4b92      	ldr	r3, [pc, #584]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e9      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 80a6 	beq.w	800617a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800602e:	2300      	movs	r3, #0
 8006030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006032:	4b8b      	ldr	r3, [pc, #556]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10d      	bne.n	800605a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800603e:	4b88      	ldr	r3, [pc, #544]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	4a87      	ldr	r2, [pc, #540]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 8006044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006048:	61d3      	str	r3, [r2, #28]
 800604a:	4b85      	ldr	r3, [pc, #532]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006056:	2301      	movs	r3, #1
 8006058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800605a:	4b82      	ldr	r3, [pc, #520]	; (8006264 <HAL_RCC_OscConfig+0x4c8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006062:	2b00      	cmp	r3, #0
 8006064:	d118      	bne.n	8006098 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006066:	4b7f      	ldr	r3, [pc, #508]	; (8006264 <HAL_RCC_OscConfig+0x4c8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a7e      	ldr	r2, [pc, #504]	; (8006264 <HAL_RCC_OscConfig+0x4c8>)
 800606c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006072:	f7fb f98f 	bl	8001394 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800607a:	f7fb f98b 	bl	8001394 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b64      	cmp	r3, #100	; 0x64
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e103      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800608c:	4b75      	ldr	r3, [pc, #468]	; (8006264 <HAL_RCC_OscConfig+0x4c8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0f0      	beq.n	800607a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d106      	bne.n	80060ae <HAL_RCC_OscConfig+0x312>
 80060a0:	4b6f      	ldr	r3, [pc, #444]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	4a6e      	ldr	r2, [pc, #440]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80060a6:	f043 0301 	orr.w	r3, r3, #1
 80060aa:	6213      	str	r3, [r2, #32]
 80060ac:	e02d      	b.n	800610a <HAL_RCC_OscConfig+0x36e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10c      	bne.n	80060d0 <HAL_RCC_OscConfig+0x334>
 80060b6:	4b6a      	ldr	r3, [pc, #424]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	4a69      	ldr	r2, [pc, #420]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	6213      	str	r3, [r2, #32]
 80060c2:	4b67      	ldr	r3, [pc, #412]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	4a66      	ldr	r2, [pc, #408]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80060c8:	f023 0304 	bic.w	r3, r3, #4
 80060cc:	6213      	str	r3, [r2, #32]
 80060ce:	e01c      	b.n	800610a <HAL_RCC_OscConfig+0x36e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	2b05      	cmp	r3, #5
 80060d6:	d10c      	bne.n	80060f2 <HAL_RCC_OscConfig+0x356>
 80060d8:	4b61      	ldr	r3, [pc, #388]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	4a60      	ldr	r2, [pc, #384]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80060de:	f043 0304 	orr.w	r3, r3, #4
 80060e2:	6213      	str	r3, [r2, #32]
 80060e4:	4b5e      	ldr	r3, [pc, #376]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	4a5d      	ldr	r2, [pc, #372]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	6213      	str	r3, [r2, #32]
 80060f0:	e00b      	b.n	800610a <HAL_RCC_OscConfig+0x36e>
 80060f2:	4b5b      	ldr	r3, [pc, #364]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	4a5a      	ldr	r2, [pc, #360]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	6213      	str	r3, [r2, #32]
 80060fe:	4b58      	ldr	r3, [pc, #352]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	4a57      	ldr	r2, [pc, #348]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 8006104:	f023 0304 	bic.w	r3, r3, #4
 8006108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d015      	beq.n	800613e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006112:	f7fb f93f 	bl	8001394 <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006118:	e00a      	b.n	8006130 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611a:	f7fb f93b 	bl	8001394 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	f241 3288 	movw	r2, #5000	; 0x1388
 8006128:	4293      	cmp	r3, r2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e0b1      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006130:	4b4b      	ldr	r3, [pc, #300]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0ee      	beq.n	800611a <HAL_RCC_OscConfig+0x37e>
 800613c:	e014      	b.n	8006168 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800613e:	f7fb f929 	bl	8001394 <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006144:	e00a      	b.n	800615c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006146:	f7fb f925 	bl	8001394 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f241 3288 	movw	r2, #5000	; 0x1388
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e09b      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800615c:	4b40      	ldr	r3, [pc, #256]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1ee      	bne.n	8006146 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d105      	bne.n	800617a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800616e:	4b3c      	ldr	r3, [pc, #240]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	4a3b      	ldr	r2, [pc, #236]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 8006174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006178:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8087 	beq.w	8006292 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006184:	4b36      	ldr	r3, [pc, #216]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f003 030c 	and.w	r3, r3, #12
 800618c:	2b08      	cmp	r3, #8
 800618e:	d061      	beq.n	8006254 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d146      	bne.n	8006226 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006198:	4b33      	ldr	r3, [pc, #204]	; (8006268 <HAL_RCC_OscConfig+0x4cc>)
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619e:	f7fb f8f9 	bl	8001394 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a6:	f7fb f8f5 	bl	8001394 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e06d      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061b8:	4b29      	ldr	r3, [pc, #164]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1f0      	bne.n	80061a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061cc:	d108      	bne.n	80061e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061ce:	4b24      	ldr	r3, [pc, #144]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	4921      	ldr	r1, [pc, #132]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061e0:	4b1f      	ldr	r3, [pc, #124]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a19      	ldr	r1, [r3, #32]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	430b      	orrs	r3, r1
 80061f2:	491b      	ldr	r1, [pc, #108]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061f8:	4b1b      	ldr	r3, [pc, #108]	; (8006268 <HAL_RCC_OscConfig+0x4cc>)
 80061fa:	2201      	movs	r2, #1
 80061fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061fe:	f7fb f8c9 	bl	8001394 <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006206:	f7fb f8c5 	bl	8001394 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e03d      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006218:	4b11      	ldr	r3, [pc, #68]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0f0      	beq.n	8006206 <HAL_RCC_OscConfig+0x46a>
 8006224:	e035      	b.n	8006292 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006226:	4b10      	ldr	r3, [pc, #64]	; (8006268 <HAL_RCC_OscConfig+0x4cc>)
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622c:	f7fb f8b2 	bl	8001394 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006234:	f7fb f8ae 	bl	8001394 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e026      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006246:	4b06      	ldr	r3, [pc, #24]	; (8006260 <HAL_RCC_OscConfig+0x4c4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1f0      	bne.n	8006234 <HAL_RCC_OscConfig+0x498>
 8006252:	e01e      	b.n	8006292 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d107      	bne.n	800626c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e019      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
 8006260:	40021000 	.word	0x40021000
 8006264:	40007000 	.word	0x40007000
 8006268:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800626c:	4b0b      	ldr	r3, [pc, #44]	; (800629c <HAL_RCC_OscConfig+0x500>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	429a      	cmp	r2, r3
 800627e:	d106      	bne.n	800628e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628a:	429a      	cmp	r2, r3
 800628c:	d001      	beq.n	8006292 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40021000 	.word	0x40021000

080062a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0d0      	b.n	8006456 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062b4:	4b6a      	ldr	r3, [pc, #424]	; (8006460 <HAL_RCC_ClockConfig+0x1c0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d910      	bls.n	80062e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062c2:	4b67      	ldr	r3, [pc, #412]	; (8006460 <HAL_RCC_ClockConfig+0x1c0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f023 0207 	bic.w	r2, r3, #7
 80062ca:	4965      	ldr	r1, [pc, #404]	; (8006460 <HAL_RCC_ClockConfig+0x1c0>)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d2:	4b63      	ldr	r3, [pc, #396]	; (8006460 <HAL_RCC_ClockConfig+0x1c0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d001      	beq.n	80062e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0b8      	b.n	8006456 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d020      	beq.n	8006332 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062fc:	4b59      	ldr	r3, [pc, #356]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	4a58      	ldr	r2, [pc, #352]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 8006302:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006306:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006314:	4b53      	ldr	r3, [pc, #332]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	4a52      	ldr	r2, [pc, #328]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 800631a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800631e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006320:	4b50      	ldr	r3, [pc, #320]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	494d      	ldr	r1, [pc, #308]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 800632e:	4313      	orrs	r3, r2
 8006330:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d040      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d107      	bne.n	8006356 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006346:	4b47      	ldr	r3, [pc, #284]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d115      	bne.n	800637e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e07f      	b.n	8006456 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d107      	bne.n	800636e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800635e:	4b41      	ldr	r3, [pc, #260]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d109      	bne.n	800637e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e073      	b.n	8006456 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636e:	4b3d      	ldr	r3, [pc, #244]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e06b      	b.n	8006456 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800637e:	4b39      	ldr	r3, [pc, #228]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f023 0203 	bic.w	r2, r3, #3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	4936      	ldr	r1, [pc, #216]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 800638c:	4313      	orrs	r3, r2
 800638e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006390:	f7fb f800 	bl	8001394 <HAL_GetTick>
 8006394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006396:	e00a      	b.n	80063ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006398:	f7fa fffc 	bl	8001394 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e053      	b.n	8006456 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ae:	4b2d      	ldr	r3, [pc, #180]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f003 020c 	and.w	r2, r3, #12
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	429a      	cmp	r2, r3
 80063be:	d1eb      	bne.n	8006398 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063c0:	4b27      	ldr	r3, [pc, #156]	; (8006460 <HAL_RCC_ClockConfig+0x1c0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0307 	and.w	r3, r3, #7
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d210      	bcs.n	80063f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ce:	4b24      	ldr	r3, [pc, #144]	; (8006460 <HAL_RCC_ClockConfig+0x1c0>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f023 0207 	bic.w	r2, r3, #7
 80063d6:	4922      	ldr	r1, [pc, #136]	; (8006460 <HAL_RCC_ClockConfig+0x1c0>)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	4313      	orrs	r3, r2
 80063dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063de:	4b20      	ldr	r3, [pc, #128]	; (8006460 <HAL_RCC_ClockConfig+0x1c0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d001      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e032      	b.n	8006456 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d008      	beq.n	800640e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063fc:	4b19      	ldr	r3, [pc, #100]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	4916      	ldr	r1, [pc, #88]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 800640a:	4313      	orrs	r3, r2
 800640c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800641a:	4b12      	ldr	r3, [pc, #72]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	490e      	ldr	r1, [pc, #56]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 800642a:	4313      	orrs	r3, r2
 800642c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800642e:	f000 f821 	bl	8006474 <HAL_RCC_GetSysClockFreq>
 8006432:	4602      	mov	r2, r0
 8006434:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	091b      	lsrs	r3, r3, #4
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	490a      	ldr	r1, [pc, #40]	; (8006468 <HAL_RCC_ClockConfig+0x1c8>)
 8006440:	5ccb      	ldrb	r3, [r1, r3]
 8006442:	fa22 f303 	lsr.w	r3, r2, r3
 8006446:	4a09      	ldr	r2, [pc, #36]	; (800646c <HAL_RCC_ClockConfig+0x1cc>)
 8006448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800644a:	4b09      	ldr	r3, [pc, #36]	; (8006470 <HAL_RCC_ClockConfig+0x1d0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f7fa ff5e 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40022000 	.word	0x40022000
 8006464:	40021000 	.word	0x40021000
 8006468:	0800c65c 	.word	0x0800c65c
 800646c:	20000000 	.word	0x20000000
 8006470:	20000004 	.word	0x20000004

08006474 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006474:	b490      	push	{r4, r7}
 8006476:	b08a      	sub	sp, #40	; 0x28
 8006478:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800647a:	4b29      	ldr	r3, [pc, #164]	; (8006520 <HAL_RCC_GetSysClockFreq+0xac>)
 800647c:	1d3c      	adds	r4, r7, #4
 800647e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006484:	f240 2301 	movw	r3, #513	; 0x201
 8006488:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	2300      	movs	r3, #0
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	2300      	movs	r3, #0
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800649e:	4b21      	ldr	r3, [pc, #132]	; (8006524 <HAL_RCC_GetSysClockFreq+0xb0>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f003 030c 	and.w	r3, r3, #12
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d002      	beq.n	80064b4 <HAL_RCC_GetSysClockFreq+0x40>
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d003      	beq.n	80064ba <HAL_RCC_GetSysClockFreq+0x46>
 80064b2:	e02b      	b.n	800650c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064b4:	4b1c      	ldr	r3, [pc, #112]	; (8006528 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064b6:	623b      	str	r3, [r7, #32]
      break;
 80064b8:	e02b      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	0c9b      	lsrs	r3, r3, #18
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	3328      	adds	r3, #40	; 0x28
 80064c4:	443b      	add	r3, r7
 80064c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d012      	beq.n	80064fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064d6:	4b13      	ldr	r3, [pc, #76]	; (8006524 <HAL_RCC_GetSysClockFreq+0xb0>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	0c5b      	lsrs	r3, r3, #17
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	3328      	adds	r3, #40	; 0x28
 80064e2:	443b      	add	r3, r7
 80064e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80064e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	4a0e      	ldr	r2, [pc, #56]	; (8006528 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064ee:	fb03 f202 	mul.w	r2, r3, r2
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
 80064fa:	e004      	b.n	8006506 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	4a0b      	ldr	r2, [pc, #44]	; (800652c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006500:	fb02 f303 	mul.w	r3, r2, r3
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	623b      	str	r3, [r7, #32]
      break;
 800650a:	e002      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800650c:	4b06      	ldr	r3, [pc, #24]	; (8006528 <HAL_RCC_GetSysClockFreq+0xb4>)
 800650e:	623b      	str	r3, [r7, #32]
      break;
 8006510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006512:	6a3b      	ldr	r3, [r7, #32]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3728      	adds	r7, #40	; 0x28
 8006518:	46bd      	mov	sp, r7
 800651a:	bc90      	pop	{r4, r7}
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	0800c5ec 	.word	0x0800c5ec
 8006524:	40021000 	.word	0x40021000
 8006528:	007a1200 	.word	0x007a1200
 800652c:	003d0900 	.word	0x003d0900

08006530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006534:	4b02      	ldr	r3, [pc, #8]	; (8006540 <HAL_RCC_GetHCLKFreq+0x10>)
 8006536:	681b      	ldr	r3, [r3, #0]
}
 8006538:	4618      	mov	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr
 8006540:	20000000 	.word	0x20000000

08006544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006548:	f7ff fff2 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 800654c:	4602      	mov	r2, r0
 800654e:	4b05      	ldr	r3, [pc, #20]	; (8006564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	0a1b      	lsrs	r3, r3, #8
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	4903      	ldr	r1, [pc, #12]	; (8006568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800655a:	5ccb      	ldrb	r3, [r1, r3]
 800655c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006560:	4618      	mov	r0, r3
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40021000 	.word	0x40021000
 8006568:	0800c66c 	.word	0x0800c66c

0800656c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006574:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <RCC_Delay+0x34>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a0a      	ldr	r2, [pc, #40]	; (80065a4 <RCC_Delay+0x38>)
 800657a:	fba2 2303 	umull	r2, r3, r2, r3
 800657e:	0a5b      	lsrs	r3, r3, #9
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	fb02 f303 	mul.w	r3, r2, r3
 8006586:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006588:	bf00      	nop
  }
  while (Delay --);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	1e5a      	subs	r2, r3, #1
 800658e:	60fa      	str	r2, [r7, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1f9      	bne.n	8006588 <RCC_Delay+0x1c>
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr
 80065a0:	20000000 	.word	0x20000000
 80065a4:	10624dd3 	.word	0x10624dd3

080065a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	613b      	str	r3, [r7, #16]
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d07d      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80065c4:	2300      	movs	r3, #0
 80065c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065c8:	4b4f      	ldr	r3, [pc, #316]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10d      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065d4:	4b4c      	ldr	r3, [pc, #304]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	4a4b      	ldr	r2, [pc, #300]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065de:	61d3      	str	r3, [r2, #28]
 80065e0:	4b49      	ldr	r3, [pc, #292]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e8:	60bb      	str	r3, [r7, #8]
 80065ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ec:	2301      	movs	r3, #1
 80065ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f0:	4b46      	ldr	r3, [pc, #280]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d118      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065fc:	4b43      	ldr	r3, [pc, #268]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a42      	ldr	r2, [pc, #264]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006608:	f7fa fec4 	bl	8001394 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660e:	e008      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006610:	f7fa fec0 	bl	8001394 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	; 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e06d      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006622:	4b3a      	ldr	r3, [pc, #232]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0f0      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800662e:	4b36      	ldr	r3, [pc, #216]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006636:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d02e      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	429a      	cmp	r2, r3
 800664a:	d027      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800664c:	4b2e      	ldr	r3, [pc, #184]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006654:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006656:	4b2e      	ldr	r3, [pc, #184]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006658:	2201      	movs	r2, #1
 800665a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800665c:	4b2c      	ldr	r3, [pc, #176]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006662:	4a29      	ldr	r2, [pc, #164]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d014      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006672:	f7fa fe8f 	bl	8001394 <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006678:	e00a      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800667a:	f7fa fe8b 	bl	8001394 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	f241 3288 	movw	r2, #5000	; 0x1388
 8006688:	4293      	cmp	r3, r2
 800668a:	d901      	bls.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e036      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006690:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0ee      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800669c:	4b1a      	ldr	r3, [pc, #104]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	4917      	ldr	r1, [pc, #92]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d105      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066b4:	4b14      	ldr	r3, [pc, #80]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	4a13      	ldr	r2, [pc, #76]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d008      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066cc:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	490b      	ldr	r1, [pc, #44]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0310 	and.w	r3, r3, #16
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d008      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066ea:	4b07      	ldr	r3, [pc, #28]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	4904      	ldr	r1, [pc, #16]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	40021000 	.word	0x40021000
 800670c:	40007000 	.word	0x40007000
 8006710:	42420440 	.word	0x42420440

08006714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e041      	b.n	80067aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fa fd02 	bl	8001144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3304      	adds	r3, #4
 8006750:	4619      	mov	r1, r3
 8006752:	4610      	mov	r0, r2
 8006754:	f000 f8f2 	bl	800693c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <HAL_TIM_ConfigClockSource+0x18>
 80067c6:	2302      	movs	r3, #2
 80067c8:	e0b3      	b.n	8006932 <HAL_TIM_ConfigClockSource+0x180>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2202      	movs	r2, #2
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067f0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006802:	d03e      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0xd0>
 8006804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006808:	f200 8087 	bhi.w	800691a <HAL_TIM_ConfigClockSource+0x168>
 800680c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006810:	f000 8085 	beq.w	800691e <HAL_TIM_ConfigClockSource+0x16c>
 8006814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006818:	d87f      	bhi.n	800691a <HAL_TIM_ConfigClockSource+0x168>
 800681a:	2b70      	cmp	r3, #112	; 0x70
 800681c:	d01a      	beq.n	8006854 <HAL_TIM_ConfigClockSource+0xa2>
 800681e:	2b70      	cmp	r3, #112	; 0x70
 8006820:	d87b      	bhi.n	800691a <HAL_TIM_ConfigClockSource+0x168>
 8006822:	2b60      	cmp	r3, #96	; 0x60
 8006824:	d050      	beq.n	80068c8 <HAL_TIM_ConfigClockSource+0x116>
 8006826:	2b60      	cmp	r3, #96	; 0x60
 8006828:	d877      	bhi.n	800691a <HAL_TIM_ConfigClockSource+0x168>
 800682a:	2b50      	cmp	r3, #80	; 0x50
 800682c:	d03c      	beq.n	80068a8 <HAL_TIM_ConfigClockSource+0xf6>
 800682e:	2b50      	cmp	r3, #80	; 0x50
 8006830:	d873      	bhi.n	800691a <HAL_TIM_ConfigClockSource+0x168>
 8006832:	2b40      	cmp	r3, #64	; 0x40
 8006834:	d058      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0x136>
 8006836:	2b40      	cmp	r3, #64	; 0x40
 8006838:	d86f      	bhi.n	800691a <HAL_TIM_ConfigClockSource+0x168>
 800683a:	2b30      	cmp	r3, #48	; 0x30
 800683c:	d064      	beq.n	8006908 <HAL_TIM_ConfigClockSource+0x156>
 800683e:	2b30      	cmp	r3, #48	; 0x30
 8006840:	d86b      	bhi.n	800691a <HAL_TIM_ConfigClockSource+0x168>
 8006842:	2b20      	cmp	r3, #32
 8006844:	d060      	beq.n	8006908 <HAL_TIM_ConfigClockSource+0x156>
 8006846:	2b20      	cmp	r3, #32
 8006848:	d867      	bhi.n	800691a <HAL_TIM_ConfigClockSource+0x168>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d05c      	beq.n	8006908 <HAL_TIM_ConfigClockSource+0x156>
 800684e:	2b10      	cmp	r3, #16
 8006850:	d05a      	beq.n	8006908 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006852:	e062      	b.n	800691a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6818      	ldr	r0, [r3, #0]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	6899      	ldr	r1, [r3, #8]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f000 f943 	bl	8006aee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006876:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	609a      	str	r2, [r3, #8]
      break;
 8006880:	e04e      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	6899      	ldr	r1, [r3, #8]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f000 f92c 	bl	8006aee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068a4:	609a      	str	r2, [r3, #8]
      break;
 80068a6:	e03b      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6818      	ldr	r0, [r3, #0]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	6859      	ldr	r1, [r3, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	461a      	mov	r2, r3
 80068b6:	f000 f8a3 	bl	8006a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2150      	movs	r1, #80	; 0x50
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 f8fa 	bl	8006aba <TIM_ITRx_SetConfig>
      break;
 80068c6:	e02b      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	6859      	ldr	r1, [r3, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	461a      	mov	r2, r3
 80068d6:	f000 f8c1 	bl	8006a5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2160      	movs	r1, #96	; 0x60
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 f8ea 	bl	8006aba <TIM_ITRx_SetConfig>
      break;
 80068e6:	e01b      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	6859      	ldr	r1, [r3, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	461a      	mov	r2, r3
 80068f6:	f000 f883 	bl	8006a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2140      	movs	r1, #64	; 0x40
 8006900:	4618      	mov	r0, r3
 8006902:	f000 f8da 	bl	8006aba <TIM_ITRx_SetConfig>
      break;
 8006906:	e00b      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4619      	mov	r1, r3
 8006912:	4610      	mov	r0, r2
 8006914:	f000 f8d1 	bl	8006aba <TIM_ITRx_SetConfig>
        break;
 8006918:	e002      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800691a:	bf00      	nop
 800691c:	e000      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800691e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a29      	ldr	r2, [pc, #164]	; (80069f4 <TIM_Base_SetConfig+0xb8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00b      	beq.n	800696c <TIM_Base_SetConfig+0x30>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695a:	d007      	beq.n	800696c <TIM_Base_SetConfig+0x30>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a26      	ldr	r2, [pc, #152]	; (80069f8 <TIM_Base_SetConfig+0xbc>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d003      	beq.n	800696c <TIM_Base_SetConfig+0x30>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a25      	ldr	r2, [pc, #148]	; (80069fc <TIM_Base_SetConfig+0xc0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d108      	bne.n	800697e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1c      	ldr	r2, [pc, #112]	; (80069f4 <TIM_Base_SetConfig+0xb8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00b      	beq.n	800699e <TIM_Base_SetConfig+0x62>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698c:	d007      	beq.n	800699e <TIM_Base_SetConfig+0x62>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a19      	ldr	r2, [pc, #100]	; (80069f8 <TIM_Base_SetConfig+0xbc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d003      	beq.n	800699e <TIM_Base_SetConfig+0x62>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a18      	ldr	r2, [pc, #96]	; (80069fc <TIM_Base_SetConfig+0xc0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d108      	bne.n	80069b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a07      	ldr	r2, [pc, #28]	; (80069f4 <TIM_Base_SetConfig+0xb8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d103      	bne.n	80069e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	691a      	ldr	r2, [r3, #16]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	615a      	str	r2, [r3, #20]
}
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr
 80069f4:	40012c00 	.word	0x40012c00
 80069f8:	40000400 	.word	0x40000400
 80069fc:	40000800 	.word	0x40000800

08006a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	f023 0201 	bic.w	r2, r3, #1
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f023 030a 	bic.w	r3, r3, #10
 8006a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr

08006a5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f023 0210 	bic.w	r2, r3, #16
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	031b      	lsls	r3, r3, #12
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	621a      	str	r2, [r3, #32]
}
 8006ab0:	bf00      	nop
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr

08006aba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f043 0307 	orr.w	r3, r3, #7
 8006adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	609a      	str	r2, [r3, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bc80      	pop	{r7}
 8006aec:	4770      	bx	lr

08006aee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b087      	sub	sp, #28
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
 8006afa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	021a      	lsls	r2, r3, #8
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	431a      	orrs	r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	609a      	str	r2, [r3, #8]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e046      	b.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b90:	d009      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a12      	ldr	r2, [pc, #72]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a10      	ldr	r2, [pc, #64]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d10c      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800

08006be8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006be8:	b084      	sub	sp, #16
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	f107 0014 	add.w	r0, r7, #20
 8006bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	b004      	add	sp, #16
 8006c06:	4770      	bx	lr

08006c08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c18:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006c1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr

08006c34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c3c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006c40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	4013      	ands	r3, r2
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr

08006c80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c80:	b084      	sub	sp, #16
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	f107 0014 	add.w	r0, r7, #20
 8006c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	b004      	add	sp, #16
 8006cbe:	4770      	bx	lr

08006cc0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b09b      	sub	sp, #108	; 0x6c
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	78db      	ldrb	r3, [r3, #3]
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d81f      	bhi.n	8006d32 <USB_ActivateEndpoint+0x72>
 8006cf2:	a201      	add	r2, pc, #4	; (adr r2, 8006cf8 <USB_ActivateEndpoint+0x38>)
 8006cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf8:	08006d09 	.word	0x08006d09
 8006cfc:	08006d25 	.word	0x08006d25
 8006d00:	08006d3b 	.word	0x08006d3b
 8006d04:	08006d17 	.word	0x08006d17
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006d08:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d10:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006d14:	e012      	b.n	8006d3c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006d16:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d1a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006d1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006d22:	e00b      	b.n	8006d3c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006d24:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d2c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006d30:	e004      	b.n	8006d3c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006d38:	e000      	b.n	8006d3c <USB_ActivateEndpoint+0x7c>
      break;
 8006d3a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	441a      	add	r2, r3
 8006d46:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	441a      	add	r2, r3
 8006d8c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	7b1b      	ldrb	r3, [r3, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f040 8149 	bne.w	8007040 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	785b      	ldrb	r3, [r3, #1]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 8084 	beq.w	8006ec0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	011a      	lsls	r2, r3, #4
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dda:	613b      	str	r3, [r7, #16]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	88db      	ldrh	r3, [r3, #6]
 8006de0:	085b      	lsrs	r3, r3, #1
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	81fb      	strh	r3, [r7, #14]
 8006dfa:	89fb      	ldrh	r3, [r7, #14]
 8006dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01b      	beq.n	8006e3c <USB_ActivateEndpoint+0x17c>
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1a:	81bb      	strh	r3, [r7, #12]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	89bb      	ldrh	r3, [r7, #12]
 8006e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	78db      	ldrb	r3, [r3, #3]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d020      	beq.n	8006e86 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5a:	813b      	strh	r3, [r7, #8]
 8006e5c:	893b      	ldrh	r3, [r7, #8]
 8006e5e:	f083 0320 	eor.w	r3, r3, #32
 8006e62:	813b      	strh	r3, [r7, #8]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	441a      	add	r2, r3
 8006e6e:	893b      	ldrh	r3, [r7, #8]
 8006e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	8013      	strh	r3, [r2, #0]
 8006e84:	e27f      	b.n	8007386 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9c:	817b      	strh	r3, [r7, #10]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	441a      	add	r2, r3
 8006ea8:	897b      	ldrh	r3, [r7, #10]
 8006eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	8013      	strh	r3, [r2, #0]
 8006ebe:	e262      	b.n	8007386 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed0:	4413      	add	r3, r2
 8006ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	011a      	lsls	r2, r3, #4
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	88db      	ldrh	r3, [r3, #6]
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	4413      	add	r3, r2
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	011a      	lsls	r2, r3, #4
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	4413      	add	r3, r2
 8006f12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f16:	623b      	str	r3, [r7, #32]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d112      	bne.n	8006f46 <USB_ActivateEndpoint+0x286>
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	801a      	strh	r2, [r3, #0]
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	801a      	strh	r2, [r3, #0]
 8006f44:	e02f      	b.n	8006fa6 <USB_ActivateEndpoint+0x2e6>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f4c:	d813      	bhi.n	8006f76 <USB_ActivateEndpoint+0x2b6>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	663b      	str	r3, [r7, #96]	; 0x60
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <USB_ActivateEndpoint+0x2a8>
 8006f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f64:	3301      	adds	r3, #1
 8006f66:	663b      	str	r3, [r7, #96]	; 0x60
 8006f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	029b      	lsls	r3, r3, #10
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	801a      	strh	r2, [r3, #0]
 8006f74:	e017      	b.n	8006fa6 <USB_ActivateEndpoint+0x2e6>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	095b      	lsrs	r3, r3, #5
 8006f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	f003 031f 	and.w	r3, r3, #31
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d102      	bne.n	8006f90 <USB_ActivateEndpoint+0x2d0>
 8006f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8006f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	029b      	lsls	r3, r3, #10
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	83fb      	strh	r3, [r7, #30]
 8006fb4:	8bfb      	ldrh	r3, [r7, #30]
 8006fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d01b      	beq.n	8006ff6 <USB_ActivateEndpoint+0x336>
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd4:	83bb      	strh	r3, [r7, #28]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	441a      	add	r2, r3
 8006fe0:	8bbb      	ldrh	r3, [r7, #28]
 8006fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700c:	837b      	strh	r3, [r7, #26]
 800700e:	8b7b      	ldrh	r3, [r7, #26]
 8007010:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007014:	837b      	strh	r3, [r7, #26]
 8007016:	8b7b      	ldrh	r3, [r7, #26]
 8007018:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800701c:	837b      	strh	r3, [r7, #26]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	441a      	add	r2, r3
 8007028:	8b7b      	ldrh	r3, [r7, #26]
 800702a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703a:	b29b      	uxth	r3, r3
 800703c:	8013      	strh	r3, [r2, #0]
 800703e:	e1a2      	b.n	8007386 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b29b      	uxth	r3, r3
 800704e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007056:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	441a      	add	r2, r3
 8007064:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007070:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007078:	b29b      	uxth	r3, r3
 800707a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007086:	b29b      	uxth	r3, r3
 8007088:	461a      	mov	r2, r3
 800708a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800708c:	4413      	add	r3, r2
 800708e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	011a      	lsls	r2, r3, #4
 8007096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007098:	4413      	add	r3, r2
 800709a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800709e:	657b      	str	r3, [r7, #84]	; 0x54
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	891b      	ldrh	r3, [r3, #8]
 80070a4:	085b      	lsrs	r3, r3, #1
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	653b      	str	r3, [r7, #80]	; 0x50
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c0:	4413      	add	r3, r2
 80070c2:	653b      	str	r3, [r7, #80]	; 0x50
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	011a      	lsls	r2, r3, #4
 80070ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80070d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	895b      	ldrh	r3, [r3, #10]
 80070d8:	085b      	lsrs	r3, r3, #1
 80070da:	b29b      	uxth	r3, r3
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	b29a      	uxth	r2, r3
 80070e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	785b      	ldrb	r3, [r3, #1]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f040 8091 	bne.w	8007210 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80070fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80070fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d01b      	beq.n	800713e <USB_ActivateEndpoint+0x47e>
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	b29b      	uxth	r3, r3
 8007114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	441a      	add	r2, r3
 8007128:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800712a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800712e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713a:	b29b      	uxth	r3, r3
 800713c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	873b      	strh	r3, [r7, #56]	; 0x38
 800714c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800714e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007152:	2b00      	cmp	r3, #0
 8007154:	d01b      	beq.n	800718e <USB_ActivateEndpoint+0x4ce>
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	441a      	add	r2, r3
 8007178:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800717a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800717e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007186:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800718a:	b29b      	uxth	r3, r3
 800718c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80071a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80071a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80071ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80071b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	441a      	add	r2, r3
 80071c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80071c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ec:	867b      	strh	r3, [r7, #50]	; 0x32
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	441a      	add	r2, r3
 80071f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80071fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720a:	b29b      	uxth	r3, r3
 800720c:	8013      	strh	r3, [r2, #0]
 800720e:	e0ba      	b.n	8007386 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007220:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01d      	beq.n	8007268 <USB_ActivateEndpoint+0x5a8>
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007242:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	441a      	add	r2, r3
 8007250:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800725c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007264:	b29b      	uxth	r3, r3
 8007266:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007278:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d01d      	beq.n	80072c0 <USB_ActivateEndpoint+0x600>
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	441a      	add	r2, r3
 80072a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072bc:	b29b      	uxth	r3, r3
 80072be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	78db      	ldrb	r3, [r3, #3]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d024      	beq.n	8007312 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80072e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80072e6:	f083 0320 	eor.w	r3, r3, #32
 80072ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	441a      	add	r2, r3
 80072f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80072fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730c:	b29b      	uxth	r3, r3
 800730e:	8013      	strh	r3, [r2, #0]
 8007310:	e01d      	b.n	800734e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007328:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	441a      	add	r2, r3
 8007336:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800733a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800733e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734a:	b29b      	uxth	r3, r3
 800734c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007364:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	441a      	add	r2, r3
 8007370:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800737a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800737e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007382:	b29b      	uxth	r3, r3
 8007384:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007386:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800738a:	4618      	mov	r0, r3
 800738c:	376c      	adds	r7, #108	; 0x6c
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr

08007394 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007394:	b480      	push	{r7}
 8007396:	b08d      	sub	sp, #52	; 0x34
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	7b1b      	ldrb	r3, [r3, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f040 808e 	bne.w	80074c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	785b      	ldrb	r3, [r3, #1]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d044      	beq.n	800743a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	81bb      	strh	r3, [r7, #12]
 80073be:	89bb      	ldrh	r3, [r7, #12]
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01b      	beq.n	8007400 <USB_DeactivateEndpoint+0x6c>
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073de:	817b      	strh	r3, [r7, #10]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	897b      	ldrh	r3, [r7, #10]
 80073ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	b29b      	uxth	r3, r3
 800740e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007416:	813b      	strh	r3, [r7, #8]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	441a      	add	r2, r3
 8007422:	893b      	ldrh	r3, [r7, #8]
 8007424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800742c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007434:	b29b      	uxth	r3, r3
 8007436:	8013      	strh	r3, [r2, #0]
 8007438:	e192      	b.n	8007760 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	827b      	strh	r3, [r7, #18]
 8007448:	8a7b      	ldrh	r3, [r7, #18]
 800744a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01b      	beq.n	800748a <USB_DeactivateEndpoint+0xf6>
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007468:	823b      	strh	r3, [r7, #16]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	441a      	add	r2, r3
 8007474:	8a3b      	ldrh	r3, [r7, #16]
 8007476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	b29b      	uxth	r3, r3
 8007498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800749c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a0:	81fb      	strh	r3, [r7, #14]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	441a      	add	r2, r3
 80074ac:	89fb      	ldrh	r3, [r7, #14]
 80074ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074be:	b29b      	uxth	r3, r3
 80074c0:	8013      	strh	r3, [r2, #0]
 80074c2:	e14d      	b.n	8007760 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	785b      	ldrb	r3, [r3, #1]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f040 80a5 	bne.w	8007618 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	843b      	strh	r3, [r7, #32]
 80074dc:	8c3b      	ldrh	r3, [r7, #32]
 80074de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d01b      	beq.n	800751e <USB_DeactivateEndpoint+0x18a>
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fc:	83fb      	strh	r3, [r7, #30]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	441a      	add	r2, r3
 8007508:	8bfb      	ldrh	r3, [r7, #30]
 800750a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800750e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800751a:	b29b      	uxth	r3, r3
 800751c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	83bb      	strh	r3, [r7, #28]
 800752c:	8bbb      	ldrh	r3, [r7, #28]
 800752e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01b      	beq.n	800756e <USB_DeactivateEndpoint+0x1da>
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754c:	837b      	strh	r3, [r7, #26]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	441a      	add	r2, r3
 8007558:	8b7b      	ldrh	r3, [r7, #26]
 800755a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800755e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007566:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800756a:	b29b      	uxth	r3, r3
 800756c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007584:	833b      	strh	r3, [r7, #24]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	441a      	add	r2, r3
 8007590:	8b3b      	ldrh	r3, [r7, #24]
 8007592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800759a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800759e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075bc:	82fb      	strh	r3, [r7, #22]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	8afb      	ldrh	r3, [r7, #22]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f4:	82bb      	strh	r3, [r7, #20]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	441a      	add	r2, r3
 8007600:	8abb      	ldrh	r3, [r7, #20]
 8007602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800760a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007612:	b29b      	uxth	r3, r3
 8007614:	8013      	strh	r3, [r2, #0]
 8007616:	e0a3      	b.n	8007760 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007626:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01b      	beq.n	8007668 <USB_DeactivateEndpoint+0x2d4>
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29b      	uxth	r3, r3
 800763e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007646:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	441a      	add	r2, r3
 8007652:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800765c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007664:	b29b      	uxth	r3, r3
 8007666:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007676:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01b      	beq.n	80076b8 <USB_DeactivateEndpoint+0x324>
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007696:	853b      	strh	r3, [r7, #40]	; 0x28
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	441a      	add	r2, r3
 80076a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	441a      	add	r2, r3
 80076da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007706:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007724:	b29b      	uxth	r3, r3
 8007726:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	441a      	add	r2, r3
 800774a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800774c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775c:	b29b      	uxth	r3, r3
 800775e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3734      	adds	r7, #52	; 0x34
 8007766:	46bd      	mov	sp, r7
 8007768:	bc80      	pop	{r7}
 800776a:	4770      	bx	lr

0800776c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b0cc      	sub	sp, #304	; 0x130
 8007770:	af00      	add	r7, sp, #0
 8007772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800777a:	6018      	str	r0, [r3, #0]
 800777c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007784:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	785b      	ldrb	r3, [r3, #1]
 8007792:	2b01      	cmp	r3, #1
 8007794:	f041 817d 	bne.w	8008a92 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	699a      	ldr	r2, [r3, #24]
 80077a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d908      	bls.n	80077c6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80077b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80077c4:	e007      	b.n	80077d6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80077c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80077d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	7b1b      	ldrb	r3, [r3, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d152      	bne.n	800788c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80077e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6959      	ldr	r1, [r3, #20]
 80077f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	88da      	ldrh	r2, [r3, #6]
 80077fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007802:	b29b      	uxth	r3, r3
 8007804:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007808:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800780c:	6800      	ldr	r0, [r0, #0]
 800780e:	f001 ff23 	bl	8009658 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007816:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800781a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800781e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007834:	b29b      	uxth	r3, r3
 8007836:	4619      	mov	r1, r3
 8007838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007840:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007844:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007848:	6812      	ldr	r2, [r2, #0]
 800784a:	440a      	add	r2, r1
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	011a      	lsls	r2, r3, #4
 800785c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007860:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4413      	add	r3, r2
 8007868:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800786c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007870:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787a:	b29a      	uxth	r2, r3
 800787c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007880:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	801a      	strh	r2, [r3, #0]
 8007888:	f001 b8b5 	b.w	80089f6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800788c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	78db      	ldrb	r3, [r3, #3]
 8007898:	2b02      	cmp	r3, #2
 800789a:	f040 84c6 	bne.w	800822a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800789e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6a1a      	ldr	r2, [r3, #32]
 80078aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	f240 8443 	bls.w	8008142 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80078bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80078e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	441a      	add	r2, r3
 8007900:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007914:	b29b      	uxth	r3, r3
 8007916:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6a1a      	ldr	r2, [r3, #32]
 8007924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007928:	1ad2      	subs	r2, r2, r3
 800792a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 823e 	beq.w	8007dda <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800795e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007962:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007966:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800796a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800796e:	6812      	ldr	r2, [r2, #0]
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b00      	cmp	r3, #0
 8007980:	f040 809a 	bne.w	8007ab8 <USB_EPStartXfer+0x34c>
 8007984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800798c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007990:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007994:	6812      	ldr	r2, [r2, #0]
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	4619      	mov	r1, r3
 80079aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079b6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80079ba:	6812      	ldr	r2, [r2, #0]
 80079bc:	440a      	add	r2, r1
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	011a      	lsls	r2, r3, #4
 80079ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4413      	add	r3, r2
 80079da:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80079de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d122      	bne.n	8007a36 <USB_EPStartXfer+0x2ca>
 80079f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	801a      	strh	r2, [r3, #0]
 8007a34:	e079      	b.n	8007b2a <USB_EPStartXfer+0x3be>
 8007a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a3a:	2b3e      	cmp	r3, #62	; 0x3e
 8007a3c:	d81b      	bhi.n	8007a76 <USB_EPStartXfer+0x30a>
 8007a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a42:	085b      	lsrs	r3, r3, #1
 8007a44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d004      	beq.n	8007a5e <USB_EPStartXfer+0x2f2>
 8007a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a58:	3301      	adds	r3, #1
 8007a5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	029b      	lsls	r3, r3, #10
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	801a      	strh	r2, [r3, #0]
 8007a74:	e059      	b.n	8007b2a <USB_EPStartXfer+0x3be>
 8007a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a84:	f003 031f 	and.w	r3, r3, #31
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d104      	bne.n	8007a96 <USB_EPStartXfer+0x32a>
 8007a8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a90:	3b01      	subs	r3, #1
 8007a92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007a96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	029b      	lsls	r3, r3, #10
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	801a      	strh	r2, [r3, #0]
 8007ab6:	e038      	b.n	8007b2a <USB_EPStartXfer+0x3be>
 8007ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	785b      	ldrb	r3, [r3, #1]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d130      	bne.n	8007b2a <USB_EPStartXfer+0x3be>
 8007ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007acc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	4619      	mov	r1, r3
 8007ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ade:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007ae2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ae6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	440a      	add	r2, r1
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	011a      	lsls	r2, r3, #4
 8007afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b02:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	895b      	ldrh	r3, [r3, #10]
 8007b36:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6959      	ldr	r1, [r3, #20]
 8007b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b50:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b54:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b58:	6800      	ldr	r0, [r0, #0]
 8007b5a:	f001 fd7d 	bl	8009658 <USB_WritePMA>
            ep->xfer_buff += len;
 8007b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	695a      	ldr	r2, [r3, #20]
 8007b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6e:	441a      	add	r2, r3
 8007b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6a1a      	ldr	r2, [r3, #32]
 8007b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d90f      	bls.n	8007bb8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6a1a      	ldr	r2, [r3, #32]
 8007ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba8:	1ad2      	subs	r2, r2, r3
 8007baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	621a      	str	r2, [r3, #32]
 8007bb6:	e00e      	b.n	8007bd6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	785b      	ldrb	r3, [r3, #1]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f040 809a 	bne.w	8007d1c <USB_EPStartXfer+0x5b0>
 8007be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007bf0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bf4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007bf8:	6812      	ldr	r2, [r2, #0]
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c12:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007c16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c1a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007c1e:	6812      	ldr	r2, [r2, #0]
 8007c20:	440a      	add	r2, r1
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	011a      	lsls	r2, r3, #4
 8007c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c36:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d122      	bne.n	8007c9a <USB_EPStartXfer+0x52e>
 8007c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c58:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	801a      	strh	r2, [r3, #0]
 8007c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	801a      	strh	r2, [r3, #0]
 8007c98:	e083      	b.n	8007da2 <USB_EPStartXfer+0x636>
 8007c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8007ca0:	d81b      	bhi.n	8007cda <USB_EPStartXfer+0x56e>
 8007ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca6:	085b      	lsrs	r3, r3, #1
 8007ca8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d004      	beq.n	8007cc2 <USB_EPStartXfer+0x556>
 8007cb8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007cc2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	029b      	lsls	r3, r3, #10
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	801a      	strh	r2, [r3, #0]
 8007cd8:	e063      	b.n	8007da2 <USB_EPStartXfer+0x636>
 8007cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cde:	095b      	lsrs	r3, r3, #5
 8007ce0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ce8:	f003 031f 	and.w	r3, r3, #31
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d104      	bne.n	8007cfa <USB_EPStartXfer+0x58e>
 8007cf0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007cfa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	029b      	lsls	r3, r3, #10
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d12:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	801a      	strh	r2, [r3, #0]
 8007d1a:	e042      	b.n	8007da2 <USB_EPStartXfer+0x636>
 8007d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	785b      	ldrb	r3, [r3, #1]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d13a      	bne.n	8007da2 <USB_EPStartXfer+0x636>
 8007d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007d34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d38:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	4619      	mov	r1, r3
 8007d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d56:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007d5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d5e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007d62:	6812      	ldr	r2, [r2, #0]
 8007d64:	440a      	add	r2, r1
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	011a      	lsls	r2, r3, #4
 8007d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4413      	add	r3, r2
 8007d82:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	891b      	ldrh	r3, [r3, #8]
 8007dae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6959      	ldr	r1, [r3, #20]
 8007dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007dc8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007dcc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007dd0:	6800      	ldr	r0, [r0, #0]
 8007dd2:	f001 fc41 	bl	8009658 <USB_WritePMA>
 8007dd6:	f000 be0e 	b.w	80089f6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	785b      	ldrb	r3, [r3, #1]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d16d      	bne.n	8007ec6 <USB_EPStartXfer+0x75a>
 8007dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	461a      	mov	r2, r3
 8007e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e0a:	4413      	add	r3, r2
 8007e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	011a      	lsls	r2, r3, #4
 8007e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e1e:	4413      	add	r3, r2
 8007e20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e24:	647b      	str	r3, [r7, #68]	; 0x44
 8007e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d112      	bne.n	8007e54 <USB_EPStartXfer+0x6e8>
 8007e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e3c:	801a      	strh	r2, [r3, #0]
 8007e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e50:	801a      	strh	r2, [r3, #0]
 8007e52:	e063      	b.n	8007f1c <USB_EPStartXfer+0x7b0>
 8007e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e58:	2b3e      	cmp	r3, #62	; 0x3e
 8007e5a:	d817      	bhi.n	8007e8c <USB_EPStartXfer+0x720>
 8007e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e60:	085b      	lsrs	r3, r3, #1
 8007e62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d004      	beq.n	8007e7c <USB_EPStartXfer+0x710>
 8007e72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007e76:	3301      	adds	r3, #1
 8007e78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007e7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	029b      	lsls	r3, r3, #10
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e88:	801a      	strh	r2, [r3, #0]
 8007e8a:	e047      	b.n	8007f1c <USB_EPStartXfer+0x7b0>
 8007e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e90:	095b      	lsrs	r3, r3, #5
 8007e92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9a:	f003 031f 	and.w	r3, r3, #31
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d104      	bne.n	8007eac <USB_EPStartXfer+0x740>
 8007ea2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007eac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	029b      	lsls	r3, r3, #10
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ec2:	801a      	strh	r2, [r3, #0]
 8007ec4:	e02a      	b.n	8007f1c <USB_EPStartXfer+0x7b0>
 8007ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	785b      	ldrb	r3, [r3, #1]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d122      	bne.n	8007f1c <USB_EPStartXfer+0x7b0>
 8007ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef6:	4413      	add	r3, r2
 8007ef8:	653b      	str	r3, [r7, #80]	; 0x50
 8007efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	011a      	lsls	r2, r3, #4
 8007f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	891b      	ldrh	r3, [r3, #8]
 8007f28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6959      	ldr	r1, [r3, #20]
 8007f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f42:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f46:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f4a:	6800      	ldr	r0, [r0, #0]
 8007f4c:	f001 fb84 	bl	8009658 <USB_WritePMA>
            ep->xfer_buff += len;
 8007f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	695a      	ldr	r2, [r3, #20]
 8007f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f60:	441a      	add	r2, r3
 8007f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6a1a      	ldr	r2, [r3, #32]
 8007f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d90f      	bls.n	8007faa <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6a1a      	ldr	r2, [r3, #32]
 8007f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f9a:	1ad2      	subs	r2, r2, r3
 8007f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	621a      	str	r2, [r3, #32]
 8007fa8:	e00e      	b.n	8007fc8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8007fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	785b      	ldrb	r3, [r3, #1]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d16d      	bne.n	80080c0 <USB_EPStartXfer+0x954>
 8007fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	461a      	mov	r2, r3
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	4413      	add	r3, r2
 8008006:	63bb      	str	r3, [r7, #56]	; 0x38
 8008008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	011a      	lsls	r2, r3, #4
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	4413      	add	r3, r2
 800801a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800801e:	637b      	str	r3, [r7, #52]	; 0x34
 8008020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008024:	2b00      	cmp	r3, #0
 8008026:	d112      	bne.n	800804e <USB_EPStartXfer+0x8e2>
 8008028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29b      	uxth	r3, r3
 800802e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008032:	b29a      	uxth	r2, r3
 8008034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008036:	801a      	strh	r2, [r3, #0]
 8008038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008046:	b29a      	uxth	r2, r3
 8008048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804a:	801a      	strh	r2, [r3, #0]
 800804c:	e05d      	b.n	800810a <USB_EPStartXfer+0x99e>
 800804e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008052:	2b3e      	cmp	r3, #62	; 0x3e
 8008054:	d817      	bhi.n	8008086 <USB_EPStartXfer+0x91a>
 8008056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805a:	085b      	lsrs	r3, r3, #1
 800805c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d004      	beq.n	8008076 <USB_EPStartXfer+0x90a>
 800806c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008070:	3301      	adds	r3, #1
 8008072:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008076:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800807a:	b29b      	uxth	r3, r3
 800807c:	029b      	lsls	r3, r3, #10
 800807e:	b29a      	uxth	r2, r3
 8008080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e041      	b.n	800810a <USB_EPStartXfer+0x99e>
 8008086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800808a:	095b      	lsrs	r3, r3, #5
 800808c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008094:	f003 031f 	and.w	r3, r3, #31
 8008098:	2b00      	cmp	r3, #0
 800809a:	d104      	bne.n	80080a6 <USB_EPStartXfer+0x93a>
 800809c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80080a0:	3b01      	subs	r3, #1
 80080a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80080a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	029b      	lsls	r3, r3, #10
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e024      	b.n	800810a <USB_EPStartXfer+0x99e>
 80080c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d11c      	bne.n	800810a <USB_EPStartXfer+0x99e>
 80080d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080de:	b29b      	uxth	r3, r3
 80080e0:	461a      	mov	r2, r3
 80080e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080e4:	4413      	add	r3, r2
 80080e6:	643b      	str	r3, [r7, #64]	; 0x40
 80080e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	011a      	lsls	r2, r3, #4
 80080f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080f8:	4413      	add	r3, r2
 80080fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008104:	b29a      	uxth	r2, r3
 8008106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008108:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800810a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	895b      	ldrh	r3, [r3, #10]
 8008116:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800811a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6959      	ldr	r1, [r3, #20]
 8008126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800812a:	b29b      	uxth	r3, r3
 800812c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008130:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008134:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008138:	6800      	ldr	r0, [r0, #0]
 800813a:	f001 fa8d 	bl	8009658 <USB_WritePMA>
 800813e:	f000 bc5a 	b.w	80089f6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008156:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	b29b      	uxth	r3, r3
 8008170:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008178:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800817c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008180:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	441a      	add	r2, r3
 8008196:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800819a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800819e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80081ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	461a      	mov	r2, r3
 80081cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ce:	4413      	add	r3, r2
 80081d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	011a      	lsls	r2, r3, #4
 80081e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081e2:	4413      	add	r3, r2
 80081e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80081ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80081f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	891b      	ldrh	r3, [r3, #8]
 8008200:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6959      	ldr	r1, [r3, #20]
 8008210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008214:	b29b      	uxth	r3, r3
 8008216:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800821a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800821e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008222:	6800      	ldr	r0, [r0, #0]
 8008224:	f001 fa18 	bl	8009658 <USB_WritePMA>
 8008228:	e3e5      	b.n	80089f6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800822a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800824c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008250:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008258:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	441a      	add	r2, r3
 800826e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800827a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800827e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008282:	b29b      	uxth	r3, r3
 8008284:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800828a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6a1a      	ldr	r2, [r3, #32]
 8008292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008296:	1ad2      	subs	r2, r2, r3
 8008298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80082a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 81bc 	beq.w	8008644 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d16d      	bne.n	80083c6 <USB_EPStartXfer+0xc5a>
 80082ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80082f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008304:	b29b      	uxth	r3, r3
 8008306:	461a      	mov	r2, r3
 8008308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800830a:	4413      	add	r3, r2
 800830c:	67bb      	str	r3, [r7, #120]	; 0x78
 800830e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	011a      	lsls	r2, r3, #4
 800831c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800831e:	4413      	add	r3, r2
 8008320:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008324:	677b      	str	r3, [r7, #116]	; 0x74
 8008326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800832a:	2b00      	cmp	r3, #0
 800832c:	d112      	bne.n	8008354 <USB_EPStartXfer+0xbe8>
 800832e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	b29b      	uxth	r3, r3
 8008334:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008338:	b29a      	uxth	r2, r3
 800833a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800833c:	801a      	strh	r2, [r3, #0]
 800833e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800834c:	b29a      	uxth	r2, r3
 800834e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008350:	801a      	strh	r2, [r3, #0]
 8008352:	e060      	b.n	8008416 <USB_EPStartXfer+0xcaa>
 8008354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008358:	2b3e      	cmp	r3, #62	; 0x3e
 800835a:	d817      	bhi.n	800838c <USB_EPStartXfer+0xc20>
 800835c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008360:	085b      	lsrs	r3, r3, #1
 8008362:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d004      	beq.n	800837c <USB_EPStartXfer+0xc10>
 8008372:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008376:	3301      	adds	r3, #1
 8008378:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800837c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008380:	b29b      	uxth	r3, r3
 8008382:	029b      	lsls	r3, r3, #10
 8008384:	b29a      	uxth	r2, r3
 8008386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008388:	801a      	strh	r2, [r3, #0]
 800838a:	e044      	b.n	8008416 <USB_EPStartXfer+0xcaa>
 800838c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008390:	095b      	lsrs	r3, r3, #5
 8008392:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800839a:	f003 031f 	and.w	r3, r3, #31
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d104      	bne.n	80083ac <USB_EPStartXfer+0xc40>
 80083a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80083a6:	3b01      	subs	r3, #1
 80083a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80083ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	029b      	lsls	r3, r3, #10
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083be:	b29a      	uxth	r2, r3
 80083c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083c2:	801a      	strh	r2, [r3, #0]
 80083c4:	e027      	b.n	8008416 <USB_EPStartXfer+0xcaa>
 80083c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d11f      	bne.n	8008416 <USB_EPStartXfer+0xcaa>
 80083d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	461a      	mov	r2, r3
 80083e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083ec:	4413      	add	r3, r2
 80083ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	011a      	lsls	r2, r3, #4
 8008400:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008404:	4413      	add	r3, r2
 8008406:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800840a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800840c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008410:	b29a      	uxth	r2, r3
 8008412:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008414:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800841a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	895b      	ldrh	r3, [r3, #10]
 8008422:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6959      	ldr	r1, [r3, #20]
 8008432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008436:	b29b      	uxth	r3, r3
 8008438:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800843c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008440:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008444:	6800      	ldr	r0, [r0, #0]
 8008446:	f001 f907 	bl	8009658 <USB_WritePMA>
          ep->xfer_buff += len;
 800844a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	695a      	ldr	r2, [r3, #20]
 8008456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800845a:	441a      	add	r2, r3
 800845c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6a1a      	ldr	r2, [r3, #32]
 8008474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	429a      	cmp	r2, r3
 8008482:	d90f      	bls.n	80084a4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8008484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6a1a      	ldr	r2, [r3, #32]
 8008490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008494:	1ad2      	subs	r2, r2, r3
 8008496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	621a      	str	r2, [r3, #32]
 80084a2:	e00e      	b.n	80084c2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80084a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80084b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2200      	movs	r2, #0
 80084c0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80084c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f000 8295 	beq.w	80089f6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	785b      	ldrb	r3, [r3, #1]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d16d      	bne.n	80085b8 <USB_EPStartXfer+0xe4c>
 80084dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80084e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084fc:	4413      	add	r3, r2
 80084fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	011a      	lsls	r2, r3, #4
 800850e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008510:	4413      	add	r3, r2
 8008512:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008516:	667b      	str	r3, [r7, #100]	; 0x64
 8008518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800851c:	2b00      	cmp	r3, #0
 800851e:	d112      	bne.n	8008546 <USB_EPStartXfer+0xdda>
 8008520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800852a:	b29a      	uxth	r2, r3
 800852c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800852e:	801a      	strh	r2, [r3, #0]
 8008530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29b      	uxth	r3, r3
 8008536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800853a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800853e:	b29a      	uxth	r2, r3
 8008540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008542:	801a      	strh	r2, [r3, #0]
 8008544:	e063      	b.n	800860e <USB_EPStartXfer+0xea2>
 8008546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800854a:	2b3e      	cmp	r3, #62	; 0x3e
 800854c:	d817      	bhi.n	800857e <USB_EPStartXfer+0xe12>
 800854e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008552:	085b      	lsrs	r3, r3, #1
 8008554:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b00      	cmp	r3, #0
 8008562:	d004      	beq.n	800856e <USB_EPStartXfer+0xe02>
 8008564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008568:	3301      	adds	r3, #1
 800856a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800856e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008572:	b29b      	uxth	r3, r3
 8008574:	029b      	lsls	r3, r3, #10
 8008576:	b29a      	uxth	r2, r3
 8008578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800857a:	801a      	strh	r2, [r3, #0]
 800857c:	e047      	b.n	800860e <USB_EPStartXfer+0xea2>
 800857e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800858c:	f003 031f 	and.w	r3, r3, #31
 8008590:	2b00      	cmp	r3, #0
 8008592:	d104      	bne.n	800859e <USB_EPStartXfer+0xe32>
 8008594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008598:	3b01      	subs	r3, #1
 800859a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800859e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	029b      	lsls	r3, r3, #10
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085b4:	801a      	strh	r2, [r3, #0]
 80085b6:	e02a      	b.n	800860e <USB_EPStartXfer+0xea2>
 80085b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	785b      	ldrb	r3, [r3, #1]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d122      	bne.n	800860e <USB_EPStartXfer+0xea2>
 80085c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	673b      	str	r3, [r7, #112]	; 0x70
 80085d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	461a      	mov	r2, r3
 80085e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085e8:	4413      	add	r3, r2
 80085ea:	673b      	str	r3, [r7, #112]	; 0x70
 80085ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	011a      	lsls	r2, r3, #4
 80085fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085fc:	4413      	add	r3, r2
 80085fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008608:	b29a      	uxth	r2, r3
 800860a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800860c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800860e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	891b      	ldrh	r3, [r3, #8]
 800861a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800861e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6959      	ldr	r1, [r3, #20]
 800862a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800862e:	b29b      	uxth	r3, r3
 8008630:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008634:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008638:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800863c:	6800      	ldr	r0, [r0, #0]
 800863e:	f001 f80b 	bl	8009658 <USB_WritePMA>
 8008642:	e1d8      	b.n	80089f6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	785b      	ldrb	r3, [r3, #1]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d178      	bne.n	8008746 <USB_EPStartXfer+0xfda>
 8008654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008658:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008666:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008670:	b29b      	uxth	r3, r3
 8008672:	461a      	mov	r2, r3
 8008674:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008678:	4413      	add	r3, r2
 800867a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800867e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	011a      	lsls	r2, r3, #4
 800868c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008690:	4413      	add	r3, r2
 8008692:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008696:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800869a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d116      	bne.n	80086d0 <USB_EPStartXfer+0xf64>
 80086a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086b4:	801a      	strh	r2, [r3, #0]
 80086b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086cc:	801a      	strh	r2, [r3, #0]
 80086ce:	e06b      	b.n	80087a8 <USB_EPStartXfer+0x103c>
 80086d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d4:	2b3e      	cmp	r3, #62	; 0x3e
 80086d6:	d818      	bhi.n	800870a <USB_EPStartXfer+0xf9e>
 80086d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086dc:	085b      	lsrs	r3, r3, #1
 80086de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80086e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d004      	beq.n	80086f8 <USB_EPStartXfer+0xf8c>
 80086ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80086f2:	3301      	adds	r3, #1
 80086f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80086f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	029b      	lsls	r3, r3, #10
 8008700:	b29a      	uxth	r2, r3
 8008702:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008706:	801a      	strh	r2, [r3, #0]
 8008708:	e04e      	b.n	80087a8 <USB_EPStartXfer+0x103c>
 800870a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008718:	f003 031f 	and.w	r3, r3, #31
 800871c:	2b00      	cmp	r3, #0
 800871e:	d104      	bne.n	800872a <USB_EPStartXfer+0xfbe>
 8008720:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008724:	3b01      	subs	r3, #1
 8008726:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800872a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800872e:	b29b      	uxth	r3, r3
 8008730:	029b      	lsls	r3, r3, #10
 8008732:	b29b      	uxth	r3, r3
 8008734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800873c:	b29a      	uxth	r2, r3
 800873e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008742:	801a      	strh	r2, [r3, #0]
 8008744:	e030      	b.n	80087a8 <USB_EPStartXfer+0x103c>
 8008746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	785b      	ldrb	r3, [r3, #1]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d128      	bne.n	80087a8 <USB_EPStartXfer+0x103c>
 8008756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008772:	b29b      	uxth	r3, r3
 8008774:	461a      	mov	r2, r3
 8008776:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800877a:	4413      	add	r3, r2
 800877c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	011a      	lsls	r2, r3, #4
 800878e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008792:	4413      	add	r3, r2
 8008794:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008798:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800879c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80087a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	891b      	ldrh	r3, [r3, #8]
 80087b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6959      	ldr	r1, [r3, #20]
 80087c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80087ce:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80087d2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80087d6:	6800      	ldr	r0, [r0, #0]
 80087d8:	f000 ff3e 	bl	8009658 <USB_WritePMA>
          ep->xfer_buff += len;
 80087dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	695a      	ldr	r2, [r3, #20]
 80087e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ec:	441a      	add	r2, r3
 80087ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80087fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6a1a      	ldr	r2, [r3, #32]
 8008806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800880a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	429a      	cmp	r2, r3
 8008814:	d90f      	bls.n	8008836 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8008816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800881a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6a1a      	ldr	r2, [r3, #32]
 8008822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800882c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	621a      	str	r2, [r3, #32]
 8008834:	e00e      	b.n	8008854 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8008836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800883a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800884a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2200      	movs	r2, #0
 8008852:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 80cc 	beq.w	80089f6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800885e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008862:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800886c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	785b      	ldrb	r3, [r3, #1]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d178      	bne.n	800896e <USB_EPStartXfer+0x1202>
 800887c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008880:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800888a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008898:	b29b      	uxth	r3, r3
 800889a:	461a      	mov	r2, r3
 800889c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088a0:	4413      	add	r3, r2
 80088a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	011a      	lsls	r2, r3, #4
 80088b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088b8:	4413      	add	r3, r2
 80088ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d116      	bne.n	80088f8 <USB_EPStartXfer+0x118c>
 80088ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088dc:	801a      	strh	r2, [r3, #0]
 80088de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088f4:	801a      	strh	r2, [r3, #0]
 80088f6:	e064      	b.n	80089c2 <USB_EPStartXfer+0x1256>
 80088f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fc:	2b3e      	cmp	r3, #62	; 0x3e
 80088fe:	d818      	bhi.n	8008932 <USB_EPStartXfer+0x11c6>
 8008900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008904:	085b      	lsrs	r3, r3, #1
 8008906:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800890a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d004      	beq.n	8008920 <USB_EPStartXfer+0x11b4>
 8008916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800891a:	3301      	adds	r3, #1
 800891c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008924:	b29b      	uxth	r3, r3
 8008926:	029b      	lsls	r3, r3, #10
 8008928:	b29a      	uxth	r2, r3
 800892a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800892e:	801a      	strh	r2, [r3, #0]
 8008930:	e047      	b.n	80089c2 <USB_EPStartXfer+0x1256>
 8008932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008936:	095b      	lsrs	r3, r3, #5
 8008938:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800893c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008940:	f003 031f 	and.w	r3, r3, #31
 8008944:	2b00      	cmp	r3, #0
 8008946:	d104      	bne.n	8008952 <USB_EPStartXfer+0x11e6>
 8008948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800894c:	3b01      	subs	r3, #1
 800894e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008956:	b29b      	uxth	r3, r3
 8008958:	029b      	lsls	r3, r3, #10
 800895a:	b29b      	uxth	r3, r3
 800895c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008964:	b29a      	uxth	r2, r3
 8008966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800896a:	801a      	strh	r2, [r3, #0]
 800896c:	e029      	b.n	80089c2 <USB_EPStartXfer+0x1256>
 800896e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	785b      	ldrb	r3, [r3, #1]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d121      	bne.n	80089c2 <USB_EPStartXfer+0x1256>
 800897e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008982:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800898c:	b29b      	uxth	r3, r3
 800898e:	461a      	mov	r2, r3
 8008990:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008994:	4413      	add	r3, r2
 8008996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800899a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800899e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	011a      	lsls	r2, r3, #4
 80089a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089ac:	4413      	add	r3, r2
 80089ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80089b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	895b      	ldrh	r3, [r3, #10]
 80089ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6959      	ldr	r1, [r3, #20]
 80089de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089e8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80089ec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80089f0:	6800      	ldr	r0, [r0, #0]
 80089f2:	f000 fe31 	bl	8009658 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80089f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a18:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a24:	8013      	strh	r3, [r2, #0]
 8008a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008a2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a32:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008a36:	8812      	ldrh	r2, [r2, #0]
 8008a38:	f082 0210 	eor.w	r2, r2, #16
 8008a3c:	801a      	strh	r2, [r3, #0]
 8008a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a42:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008a46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a4a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008a4e:	8812      	ldrh	r2, [r2, #0]
 8008a50:	f082 0220 	eor.w	r2, r2, #32
 8008a54:	801a      	strh	r2, [r3, #0]
 8008a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	441a      	add	r2, r3
 8008a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a74:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	8013      	strh	r3, [r2, #0]
 8008a8e:	f000 bc9f 	b.w	80093d0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	7b1b      	ldrb	r3, [r3, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f040 80ae 	bne.w	8008c00 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	699a      	ldr	r2, [r3, #24]
 8008ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d917      	bls.n	8008af0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	699a      	ldr	r2, [r3, #24]
 8008adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ae0:	1ad2      	subs	r2, r2, r3
 8008ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	619a      	str	r2, [r3, #24]
 8008aee:	e00e      	b.n	8008b0e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b32:	4413      	add	r3, r2
 8008b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	011a      	lsls	r2, r3, #4
 8008b46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d116      	bne.n	8008b8a <USB_EPStartXfer+0x141e>
 8008b5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b6e:	801a      	strh	r2, [r3, #0]
 8008b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b86:	801a      	strh	r2, [r3, #0]
 8008b88:	e3e8      	b.n	800935c <USB_EPStartXfer+0x1bf0>
 8008b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8008b90:	d818      	bhi.n	8008bc4 <USB_EPStartXfer+0x1458>
 8008b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b96:	085b      	lsrs	r3, r3, #1
 8008b98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d004      	beq.n	8008bb2 <USB_EPStartXfer+0x1446>
 8008ba8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bac:	3301      	adds	r3, #1
 8008bae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008bb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	029b      	lsls	r3, r3, #10
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	e3cb      	b.n	800935c <USB_EPStartXfer+0x1bf0>
 8008bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc8:	095b      	lsrs	r3, r3, #5
 8008bca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bd2:	f003 031f 	and.w	r3, r3, #31
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d104      	bne.n	8008be4 <USB_EPStartXfer+0x1478>
 8008bda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bde:	3b01      	subs	r3, #1
 8008be0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008be4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	029b      	lsls	r3, r3, #10
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bfc:	801a      	strh	r2, [r3, #0]
 8008bfe:	e3ad      	b.n	800935c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	78db      	ldrb	r3, [r3, #3]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	f040 8200 	bne.w	8009012 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	785b      	ldrb	r3, [r3, #1]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f040 8091 	bne.w	8008d46 <USB_EPStartXfer+0x15da>
 8008c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	461a      	mov	r2, r3
 8008c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c48:	4413      	add	r3, r2
 8008c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	011a      	lsls	r2, r3, #4
 8008c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c60:	4413      	add	r3, r2
 8008c62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d116      	bne.n	8008ca8 <USB_EPStartXfer+0x153c>
 8008c7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c8c:	801a      	strh	r2, [r3, #0]
 8008c8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ca4:	801a      	strh	r2, [r3, #0]
 8008ca6:	e083      	b.n	8008db0 <USB_EPStartXfer+0x1644>
 8008ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8008cb6:	d820      	bhi.n	8008cfa <USB_EPStartXfer+0x158e>
 8008cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	085b      	lsrs	r3, r3, #1
 8008cc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d004      	beq.n	8008ce8 <USB_EPStartXfer+0x157c>
 8008cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	029b      	lsls	r3, r3, #10
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cf6:	801a      	strh	r2, [r3, #0]
 8008cf8:	e05a      	b.n	8008db0 <USB_EPStartXfer+0x1644>
 8008cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	095b      	lsrs	r3, r3, #5
 8008d08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	f003 031f 	and.w	r3, r3, #31
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d104      	bne.n	8008d2a <USB_EPStartXfer+0x15be>
 8008d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d24:	3b01      	subs	r3, #1
 8008d26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	029b      	lsls	r3, r3, #10
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d42:	801a      	strh	r2, [r3, #0]
 8008d44:	e034      	b.n	8008db0 <USB_EPStartXfer+0x1644>
 8008d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	785b      	ldrb	r3, [r3, #1]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d12c      	bne.n	8008db0 <USB_EPStartXfer+0x1644>
 8008d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	461a      	mov	r2, r3
 8008d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	011a      	lsls	r2, r3, #4
 8008d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d92:	4413      	add	r3, r2
 8008d94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008dae:	801a      	strh	r2, [r3, #0]
 8008db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	785b      	ldrb	r3, [r3, #1]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f040 8091 	bne.w	8008ef2 <USB_EPStartXfer+0x1786>
 8008dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	461a      	mov	r2, r3
 8008df0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008df4:	4413      	add	r3, r2
 8008df6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	011a      	lsls	r2, r3, #4
 8008e08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d116      	bne.n	8008e54 <USB_EPStartXfer+0x16e8>
 8008e26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e38:	801a      	strh	r2, [r3, #0]
 8008e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e3e:	881b      	ldrh	r3, [r3, #0]
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e50:	801a      	strh	r2, [r3, #0]
 8008e52:	e07c      	b.n	8008f4e <USB_EPStartXfer+0x17e2>
 8008e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	2b3e      	cmp	r3, #62	; 0x3e
 8008e62:	d820      	bhi.n	8008ea6 <USB_EPStartXfer+0x173a>
 8008e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	085b      	lsrs	r3, r3, #1
 8008e72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d004      	beq.n	8008e94 <USB_EPStartXfer+0x1728>
 8008e8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e8e:	3301      	adds	r3, #1
 8008e90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	029b      	lsls	r3, r3, #10
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ea2:	801a      	strh	r2, [r3, #0]
 8008ea4:	e053      	b.n	8008f4e <USB_EPStartXfer+0x17e2>
 8008ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	095b      	lsrs	r3, r3, #5
 8008eb4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	f003 031f 	and.w	r3, r3, #31
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d104      	bne.n	8008ed6 <USB_EPStartXfer+0x176a>
 8008ecc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ed6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	029b      	lsls	r3, r3, #10
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008eee:	801a      	strh	r2, [r3, #0]
 8008ef0:	e02d      	b.n	8008f4e <USB_EPStartXfer+0x17e2>
 8008ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d125      	bne.n	8008f4e <USB_EPStartXfer+0x17e2>
 8008f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	461a      	mov	r2, r3
 8008f14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008f18:	4413      	add	r3, r2
 8008f1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	011a      	lsls	r2, r3, #4
 8008f2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008f30:	4413      	add	r3, r2
 8008f32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f4c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 81fe 	beq.w	800935c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008f80:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d005      	beq.n	8008f98 <USB_EPStartXfer+0x182c>
 8008f8c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10d      	bne.n	8008fb4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008f98:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f040 81db 	bne.w	800935c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008fa6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f040 81d4 	bne.w	800935c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fda:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	441a      	add	r2, r3
 8008ff8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009008:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800900c:	b29b      	uxth	r3, r3
 800900e:	8013      	strh	r3, [r2, #0]
 8009010:	e1a4      	b.n	800935c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	78db      	ldrb	r3, [r3, #3]
 800901e:	2b01      	cmp	r3, #1
 8009020:	f040 819a 	bne.w	8009358 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	699a      	ldr	r2, [r3, #24]
 8009030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	429a      	cmp	r2, r3
 800903e:	d917      	bls.n	8009070 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8009040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	699a      	ldr	r2, [r3, #24]
 800905c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009060:	1ad2      	subs	r2, r2, r3
 8009062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	619a      	str	r2, [r3, #24]
 800906e:	e00e      	b.n	800908e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8009070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2200      	movs	r2, #0
 800908c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800908e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	785b      	ldrb	r3, [r3, #1]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d178      	bne.n	8009190 <USB_EPStartXfer+0x1a24>
 800909e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80090ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	461a      	mov	r2, r3
 80090be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80090c2:	4413      	add	r3, r2
 80090c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80090c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	011a      	lsls	r2, r3, #4
 80090d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80090da:	4413      	add	r3, r2
 80090dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d116      	bne.n	800911a <USB_EPStartXfer+0x19ae>
 80090ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	b29b      	uxth	r3, r3
 8009108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800910c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009110:	b29a      	uxth	r2, r3
 8009112:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009116:	801a      	strh	r2, [r3, #0]
 8009118:	e06b      	b.n	80091f2 <USB_EPStartXfer+0x1a86>
 800911a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800911e:	2b3e      	cmp	r3, #62	; 0x3e
 8009120:	d818      	bhi.n	8009154 <USB_EPStartXfer+0x19e8>
 8009122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009126:	085b      	lsrs	r3, r3, #1
 8009128:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800912c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b00      	cmp	r3, #0
 8009136:	d004      	beq.n	8009142 <USB_EPStartXfer+0x19d6>
 8009138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800913c:	3301      	adds	r3, #1
 800913e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009146:	b29b      	uxth	r3, r3
 8009148:	029b      	lsls	r3, r3, #10
 800914a:	b29a      	uxth	r2, r3
 800914c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009150:	801a      	strh	r2, [r3, #0]
 8009152:	e04e      	b.n	80091f2 <USB_EPStartXfer+0x1a86>
 8009154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009158:	095b      	lsrs	r3, r3, #5
 800915a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800915e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009162:	f003 031f 	and.w	r3, r3, #31
 8009166:	2b00      	cmp	r3, #0
 8009168:	d104      	bne.n	8009174 <USB_EPStartXfer+0x1a08>
 800916a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800916e:	3b01      	subs	r3, #1
 8009170:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009178:	b29b      	uxth	r3, r3
 800917a:	029b      	lsls	r3, r3, #10
 800917c:	b29b      	uxth	r3, r3
 800917e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009186:	b29a      	uxth	r2, r3
 8009188:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800918c:	801a      	strh	r2, [r3, #0]
 800918e:	e030      	b.n	80091f2 <USB_EPStartXfer+0x1a86>
 8009190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	785b      	ldrb	r3, [r3, #1]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d128      	bne.n	80091f2 <USB_EPStartXfer+0x1a86>
 80091a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80091ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091bc:	b29b      	uxth	r3, r3
 80091be:	461a      	mov	r2, r3
 80091c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c4:	4413      	add	r3, r2
 80091c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80091ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	011a      	lsls	r2, r3, #4
 80091d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091dc:	4413      	add	r3, r2
 80091de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80091e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80091f0:	801a      	strh	r2, [r3, #0]
 80091f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	785b      	ldrb	r3, [r3, #1]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d178      	bne.n	8009302 <USB_EPStartXfer+0x1b96>
 8009210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009214:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800921e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800922c:	b29b      	uxth	r3, r3
 800922e:	461a      	mov	r2, r3
 8009230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009234:	4413      	add	r3, r2
 8009236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800923a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800923e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	011a      	lsls	r2, r3, #4
 8009248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800924c:	4413      	add	r3, r2
 800924e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800925a:	2b00      	cmp	r3, #0
 800925c:	d116      	bne.n	800928c <USB_EPStartXfer+0x1b20>
 800925e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	b29b      	uxth	r3, r3
 8009266:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800926a:	b29a      	uxth	r2, r3
 800926c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009270:	801a      	strh	r2, [r3, #0]
 8009272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800927e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009282:	b29a      	uxth	r2, r3
 8009284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009288:	801a      	strh	r2, [r3, #0]
 800928a:	e067      	b.n	800935c <USB_EPStartXfer+0x1bf0>
 800928c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009290:	2b3e      	cmp	r3, #62	; 0x3e
 8009292:	d818      	bhi.n	80092c6 <USB_EPStartXfer+0x1b5a>
 8009294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009298:	085b      	lsrs	r3, r3, #1
 800929a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800929e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <USB_EPStartXfer+0x1b48>
 80092aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092ae:	3301      	adds	r3, #1
 80092b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80092b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	029b      	lsls	r3, r3, #10
 80092bc:	b29a      	uxth	r2, r3
 80092be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092c2:	801a      	strh	r2, [r3, #0]
 80092c4:	e04a      	b.n	800935c <USB_EPStartXfer+0x1bf0>
 80092c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ca:	095b      	lsrs	r3, r3, #5
 80092cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80092d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d104      	bne.n	80092e6 <USB_EPStartXfer+0x1b7a>
 80092dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092e0:	3b01      	subs	r3, #1
 80092e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80092e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	029b      	lsls	r3, r3, #10
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092fe:	801a      	strh	r2, [r3, #0]
 8009300:	e02c      	b.n	800935c <USB_EPStartXfer+0x1bf0>
 8009302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	785b      	ldrb	r3, [r3, #1]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d124      	bne.n	800935c <USB_EPStartXfer+0x1bf0>
 8009312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009320:	b29b      	uxth	r3, r3
 8009322:	461a      	mov	r2, r3
 8009324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009328:	4413      	add	r3, r2
 800932a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800932e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	011a      	lsls	r2, r3, #4
 800933c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009340:	4413      	add	r3, r2
 8009342:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009346:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800934a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800934e:	b29a      	uxth	r2, r3
 8009350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009354:	801a      	strh	r2, [r3, #0]
 8009356:	e001      	b.n	800935c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e03a      	b.n	80093d2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800935c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009360:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800936a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b29b      	uxth	r3, r3
 800937a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800937e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009382:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009386:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800938a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800938e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009392:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009396:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800939a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800939e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	441a      	add	r2, r3
 80093b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80093bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	785b      	ldrb	r3, [r3, #1]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d020      	beq.n	8009430 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009404:	81bb      	strh	r3, [r7, #12]
 8009406:	89bb      	ldrh	r3, [r7, #12]
 8009408:	f083 0310 	eor.w	r3, r3, #16
 800940c:	81bb      	strh	r3, [r7, #12]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	441a      	add	r2, r3
 8009418:	89bb      	ldrh	r3, [r7, #12]
 800941a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800941e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800942a:	b29b      	uxth	r3, r3
 800942c:	8013      	strh	r3, [r2, #0]
 800942e:	e01f      	b.n	8009470 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	b29b      	uxth	r3, r3
 800943e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009446:	81fb      	strh	r3, [r7, #14]
 8009448:	89fb      	ldrh	r3, [r7, #14]
 800944a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800944e:	81fb      	strh	r3, [r7, #14]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	441a      	add	r2, r3
 800945a:	89fb      	ldrh	r3, [r7, #14]
 800945c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800946c:	b29b      	uxth	r3, r3
 800946e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	bc80      	pop	{r7}
 800947a:	4770      	bx	lr

0800947c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	7b1b      	ldrb	r3, [r3, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	f040 809d 	bne.w	80095ca <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	785b      	ldrb	r3, [r3, #1]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d04c      	beq.n	8009532 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	823b      	strh	r3, [r7, #16]
 80094a6:	8a3b      	ldrh	r3, [r7, #16]
 80094a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d01b      	beq.n	80094e8 <USB_EPClearStall+0x6c>
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	881b      	ldrh	r3, [r3, #0]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094c6:	81fb      	strh	r3, [r7, #14]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	441a      	add	r2, r3
 80094d2:	89fb      	ldrh	r3, [r7, #14]
 80094d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	78db      	ldrb	r3, [r3, #3]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d06c      	beq.n	80095ca <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009506:	81bb      	strh	r3, [r7, #12]
 8009508:	89bb      	ldrh	r3, [r7, #12]
 800950a:	f083 0320 	eor.w	r3, r3, #32
 800950e:	81bb      	strh	r3, [r7, #12]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	441a      	add	r2, r3
 800951a:	89bb      	ldrh	r3, [r7, #12]
 800951c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800952c:	b29b      	uxth	r3, r3
 800952e:	8013      	strh	r3, [r2, #0]
 8009530:	e04b      	b.n	80095ca <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	881b      	ldrh	r3, [r3, #0]
 800953e:	82fb      	strh	r3, [r7, #22]
 8009540:	8afb      	ldrh	r3, [r7, #22]
 8009542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d01b      	beq.n	8009582 <USB_EPClearStall+0x106>
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	b29b      	uxth	r3, r3
 8009558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800955c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009560:	82bb      	strh	r3, [r7, #20]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	441a      	add	r2, r3
 800956c:	8abb      	ldrh	r3, [r7, #20]
 800956e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800957a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800957e:	b29b      	uxth	r3, r3
 8009580:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	b29b      	uxth	r3, r3
 8009590:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009598:	827b      	strh	r3, [r7, #18]
 800959a:	8a7b      	ldrh	r3, [r7, #18]
 800959c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80095a0:	827b      	strh	r3, [r7, #18]
 80095a2:	8a7b      	ldrh	r3, [r7, #18]
 80095a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80095a8:	827b      	strh	r3, [r7, #18]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	441a      	add	r2, r3
 80095b4:	8a7b      	ldrh	r3, [r7, #18]
 80095b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	371c      	adds	r7, #28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bc80      	pop	{r7}
 80095d4:	4770      	bx	lr

080095d6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	460b      	mov	r3, r1
 80095e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80095e2:	78fb      	ldrb	r3, [r7, #3]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d103      	bne.n	80095f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2280      	movs	r2, #128	; 0x80
 80095ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bc80      	pop	{r7}
 80095fa:	4770      	bx	lr

080095fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	bc80      	pop	{r7}
 800960e:	4770      	bx	lr

08009610 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	bc80      	pop	{r7}
 8009622:	4770      	bx	lr

08009624 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009632:	b29b      	uxth	r3, r3
 8009634:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009636:	68fb      	ldr	r3, [r7, #12]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	bc80      	pop	{r7}
 8009640:	4770      	bx	lr

08009642 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009642:	b480      	push	{r7}
 8009644:	b083      	sub	sp, #12
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	bc80      	pop	{r7}
 8009656:	4770      	bx	lr

08009658 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009658:	b480      	push	{r7}
 800965a:	b08d      	sub	sp, #52	; 0x34
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	4611      	mov	r1, r2
 8009664:	461a      	mov	r2, r3
 8009666:	460b      	mov	r3, r1
 8009668:	80fb      	strh	r3, [r7, #6]
 800966a:	4613      	mov	r3, r2
 800966c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800966e:	88bb      	ldrh	r3, [r7, #4]
 8009670:	3301      	adds	r3, #1
 8009672:	085b      	lsrs	r3, r3, #1
 8009674:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800967e:	88fb      	ldrh	r3, [r7, #6]
 8009680:	005a      	lsls	r2, r3, #1
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	4413      	add	r3, r2
 8009686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800968a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009690:	e01e      	b.n	80096d0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	3301      	adds	r3, #1
 800969c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	021b      	lsls	r3, r3, #8
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	461a      	mov	r2, r3
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	3302      	adds	r3, #2
 80096bc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	3302      	adds	r3, #2
 80096c2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	3301      	adds	r3, #1
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80096ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096cc:	3b01      	subs	r3, #1
 80096ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1dd      	bne.n	8009692 <USB_WritePMA+0x3a>
  }
}
 80096d6:	bf00      	nop
 80096d8:	bf00      	nop
 80096da:	3734      	adds	r7, #52	; 0x34
 80096dc:	46bd      	mov	sp, r7
 80096de:	bc80      	pop	{r7}
 80096e0:	4770      	bx	lr

080096e2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b08b      	sub	sp, #44	; 0x2c
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	60b9      	str	r1, [r7, #8]
 80096ec:	4611      	mov	r1, r2
 80096ee:	461a      	mov	r2, r3
 80096f0:	460b      	mov	r3, r1
 80096f2:	80fb      	strh	r3, [r7, #6]
 80096f4:	4613      	mov	r3, r2
 80096f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80096f8:	88bb      	ldrh	r3, [r7, #4]
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009708:	88fb      	ldrh	r3, [r7, #6]
 800970a:	005a      	lsls	r2, r3, #1
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	4413      	add	r3, r2
 8009710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009714:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	627b      	str	r3, [r7, #36]	; 0x24
 800971a:	e01b      	b.n	8009754 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800971c:	6a3b      	ldr	r3, [r7, #32]
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	b29b      	uxth	r3, r3
 8009722:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	3302      	adds	r3, #2
 8009728:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	b2da      	uxtb	r2, r3
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	3301      	adds	r3, #1
 8009736:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	0a1b      	lsrs	r3, r3, #8
 800973c:	b2da      	uxtb	r2, r3
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	3301      	adds	r3, #1
 8009746:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	3302      	adds	r3, #2
 800974c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	3b01      	subs	r3, #1
 8009752:	627b      	str	r3, [r7, #36]	; 0x24
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e0      	bne.n	800971c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800975a:	88bb      	ldrh	r3, [r7, #4]
 800975c:	f003 0301 	and.w	r3, r3, #1
 8009760:	b29b      	uxth	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d007      	beq.n	8009776 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	b29b      	uxth	r3, r3
 800976c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	b2da      	uxtb	r2, r3
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	701a      	strb	r2, [r3, #0]
  }
}
 8009776:	bf00      	nop
 8009778:	372c      	adds	r7, #44	; 0x2c
 800977a:	46bd      	mov	sp, r7
 800977c:	bc80      	pop	{r7}
 800977e:	4770      	bx	lr

08009780 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	7c1b      	ldrb	r3, [r3, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d115      	bne.n	80097c4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800979c:	2202      	movs	r2, #2
 800979e:	2181      	movs	r1, #129	; 0x81
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f001 fea2 	bl	800b4ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80097ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097b0:	2202      	movs	r2, #2
 80097b2:	2101      	movs	r1, #1
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f001 fe98 	bl	800b4ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80097c2:	e012      	b.n	80097ea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80097c4:	2340      	movs	r3, #64	; 0x40
 80097c6:	2202      	movs	r2, #2
 80097c8:	2181      	movs	r1, #129	; 0x81
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 fe8d 	bl	800b4ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80097d6:	2340      	movs	r3, #64	; 0x40
 80097d8:	2202      	movs	r2, #2
 80097da:	2101      	movs	r1, #1
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f001 fe84 	bl	800b4ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097ea:	2308      	movs	r3, #8
 80097ec:	2203      	movs	r2, #3
 80097ee:	2182      	movs	r1, #130	; 0x82
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f001 fe7a 	bl	800b4ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80097fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009800:	f001 ff9a 	bl	800b738 <USBD_static_malloc>
 8009804:	4602      	mov	r2, r0
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009812:	2b00      	cmp	r3, #0
 8009814:	d102      	bne.n	800981c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009816:	2301      	movs	r3, #1
 8009818:	73fb      	strb	r3, [r7, #15]
 800981a:	e026      	b.n	800986a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009822:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2200      	movs	r2, #0
 8009832:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2200      	movs	r2, #0
 800983a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	7c1b      	ldrb	r3, [r3, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d109      	bne.n	800985a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800984c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009850:	2101      	movs	r1, #1
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f001 ff3a 	bl	800b6cc <USBD_LL_PrepareReceive>
 8009858:	e007      	b.n	800986a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009860:	2340      	movs	r3, #64	; 0x40
 8009862:	2101      	movs	r1, #1
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f001 ff31 	bl	800b6cc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800986a:	7bfb      	ldrb	r3, [r7, #15]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009884:	2181      	movs	r1, #129	; 0x81
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f001 fe55 	bl	800b536 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009892:	2101      	movs	r1, #1
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f001 fe4e 	bl	800b536 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80098a2:	2182      	movs	r1, #130	; 0x82
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f001 fe46 	bl	800b536 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00e      	beq.n	80098d8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ca:	4618      	mov	r0, r3
 80098cc:	f001 ff40 	bl	800b750 <USBD_static_free>
    pdev->pClassData = NULL;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b086      	sub	sp, #24
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009908:	2b00      	cmp	r3, #0
 800990a:	d039      	beq.n	8009980 <USBD_CDC_Setup+0x9e>
 800990c:	2b20      	cmp	r3, #32
 800990e:	d17f      	bne.n	8009a10 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	88db      	ldrh	r3, [r3, #6]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d029      	beq.n	800996c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	b25b      	sxtb	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	da11      	bge.n	8009946 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800992e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	88d2      	ldrh	r2, [r2, #6]
 8009934:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009936:	6939      	ldr	r1, [r7, #16]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	88db      	ldrh	r3, [r3, #6]
 800993c:	461a      	mov	r2, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 fa09 	bl	800ad56 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009944:	e06b      	b.n	8009a1e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	785a      	ldrb	r2, [r3, #1]
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	88db      	ldrh	r3, [r3, #6]
 8009954:	b2da      	uxtb	r2, r3
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800995c:	6939      	ldr	r1, [r7, #16]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	88db      	ldrh	r3, [r3, #6]
 8009962:	461a      	mov	r2, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f001 fa24 	bl	800adb2 <USBD_CtlPrepareRx>
      break;
 800996a:	e058      	b.n	8009a1e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	7850      	ldrb	r0, [r2, #1]
 8009978:	2200      	movs	r2, #0
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	4798      	blx	r3
      break;
 800997e:	e04e      	b.n	8009a1e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	785b      	ldrb	r3, [r3, #1]
 8009984:	2b0b      	cmp	r3, #11
 8009986:	d02e      	beq.n	80099e6 <USBD_CDC_Setup+0x104>
 8009988:	2b0b      	cmp	r3, #11
 800998a:	dc38      	bgt.n	80099fe <USBD_CDC_Setup+0x11c>
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <USBD_CDC_Setup+0xb4>
 8009990:	2b0a      	cmp	r3, #10
 8009992:	d014      	beq.n	80099be <USBD_CDC_Setup+0xdc>
 8009994:	e033      	b.n	80099fe <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800999c:	2b03      	cmp	r3, #3
 800999e:	d107      	bne.n	80099b0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80099a0:	f107 030c 	add.w	r3, r7, #12
 80099a4:	2202      	movs	r2, #2
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 f9d4 	bl	800ad56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099ae:	e02e      	b.n	8009a0e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f001 f965 	bl	800ac82 <USBD_CtlError>
            ret = USBD_FAIL;
 80099b8:	2302      	movs	r3, #2
 80099ba:	75fb      	strb	r3, [r7, #23]
          break;
 80099bc:	e027      	b.n	8009a0e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	d107      	bne.n	80099d8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80099c8:	f107 030f 	add.w	r3, r7, #15
 80099cc:	2201      	movs	r2, #1
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f001 f9c0 	bl	800ad56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099d6:	e01a      	b.n	8009a0e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f001 f951 	bl	800ac82 <USBD_CtlError>
            ret = USBD_FAIL;
 80099e0:	2302      	movs	r3, #2
 80099e2:	75fb      	strb	r3, [r7, #23]
          break;
 80099e4:	e013      	b.n	8009a0e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d00d      	beq.n	8009a0c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f001 f945 	bl	800ac82 <USBD_CtlError>
            ret = USBD_FAIL;
 80099f8:	2302      	movs	r3, #2
 80099fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80099fc:	e006      	b.n	8009a0c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f001 f93e 	bl	800ac82 <USBD_CtlError>
          ret = USBD_FAIL;
 8009a06:	2302      	movs	r3, #2
 8009a08:	75fb      	strb	r3, [r7, #23]
          break;
 8009a0a:	e000      	b.n	8009a0e <USBD_CDC_Setup+0x12c>
          break;
 8009a0c:	bf00      	nop
      }
      break;
 8009a0e:	e006      	b.n	8009a1e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f001 f935 	bl	800ac82 <USBD_CtlError>
      ret = USBD_FAIL;
 8009a18:	2302      	movs	r3, #2
 8009a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a1c:	bf00      	nop
  }

  return ret;
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	460b      	mov	r3, r1
 8009a32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a3a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a42:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d03a      	beq.n	8009ac4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009a4e:	78fa      	ldrb	r2, [r7, #3]
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	440b      	add	r3, r1
 8009a5c:	331c      	adds	r3, #28
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d029      	beq.n	8009ab8 <USBD_CDC_DataIn+0x90>
 8009a64:	78fa      	ldrb	r2, [r7, #3]
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	331c      	adds	r3, #28
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	78f9      	ldrb	r1, [r7, #3]
 8009a78:	68b8      	ldr	r0, [r7, #8]
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	440b      	add	r3, r1
 8009a80:	00db      	lsls	r3, r3, #3
 8009a82:	4403      	add	r3, r0
 8009a84:	3338      	adds	r3, #56	; 0x38
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a8c:	fb01 f303 	mul.w	r3, r1, r3
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d110      	bne.n	8009ab8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009a96:	78fa      	ldrb	r2, [r7, #3]
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	440b      	add	r3, r1
 8009aa4:	331c      	adds	r3, #28
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009aaa:	78f9      	ldrb	r1, [r7, #3]
 8009aac:	2300      	movs	r3, #0
 8009aae:	2200      	movs	r2, #0
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f001 fde8 	bl	800b686 <USBD_LL_Transmit>
 8009ab6:	e003      	b.n	8009ac0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	e000      	b.n	8009ac6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009ac4:	2302      	movs	r3, #2
  }
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ae0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ae2:	78fb      	ldrb	r3, [r7, #3]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f001 fe13 	bl	800b712 <USBD_LL_GetRxDataSize>
 8009aec:	4602      	mov	r2, r0
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00d      	beq.n	8009b1a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009b12:	4611      	mov	r1, r2
 8009b14:	4798      	blx	r3

    return USBD_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	e000      	b.n	8009b1c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009b1a:	2302      	movs	r3, #2
  }
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b32:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d015      	beq.n	8009b6a <USBD_CDC_EP0_RxReady+0x46>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009b44:	2bff      	cmp	r3, #255	; 0xff
 8009b46:	d010      	beq.n	8009b6a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009b56:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b5e:	b292      	uxth	r2, r2
 8009b60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	22ff      	movs	r2, #255	; 0xff
 8009b66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2243      	movs	r2, #67	; 0x43
 8009b80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009b82:	4b03      	ldr	r3, [pc, #12]	; (8009b90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bc80      	pop	{r7}
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20000094 	.word	0x20000094

08009b94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2243      	movs	r2, #67	; 0x43
 8009ba0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009ba2:	4b03      	ldr	r3, [pc, #12]	; (8009bb0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bc80      	pop	{r7}
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	20000050 	.word	0x20000050

08009bb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2243      	movs	r2, #67	; 0x43
 8009bc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009bc2:	4b03      	ldr	r3, [pc, #12]	; (8009bd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bc80      	pop	{r7}
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	200000d8 	.word	0x200000d8

08009bd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	220a      	movs	r2, #10
 8009be0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009be2:	4b03      	ldr	r3, [pc, #12]	; (8009bf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bc80      	pop	{r7}
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	2000000c 	.word	0x2000000c

08009bf4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009bfe:	2302      	movs	r3, #2
 8009c00:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d005      	beq.n	8009c14 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bc80      	pop	{r7}
 8009c1e:	4770      	bx	lr

08009c20 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009c3e:	88fa      	ldrh	r2, [r7, #6]
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	371c      	adds	r7, #28
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bc80      	pop	{r7}
 8009c50:	4770      	bx	lr

08009c52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b085      	sub	sp, #20
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c62:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bc80      	pop	{r7}
 8009c76:	4770      	bx	lr

08009c78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d01c      	beq.n	8009ccc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d115      	bne.n	8009cc8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	2181      	movs	r1, #129	; 0x81
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 fce1 	bl	800b686 <USBD_LL_Transmit>

      return USBD_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	e002      	b.n	8009cce <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e000      	b.n	8009cce <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009ccc:	2302      	movs	r3, #2
  }
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d017      	beq.n	8009d20 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	7c1b      	ldrb	r3, [r3, #16]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d109      	bne.n	8009d0c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d02:	2101      	movs	r1, #1
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 fce1 	bl	800b6cc <USBD_LL_PrepareReceive>
 8009d0a:	e007      	b.n	8009d1c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d12:	2340      	movs	r3, #64	; 0x40
 8009d14:	2101      	movs	r1, #1
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f001 fcd8 	bl	800b6cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	e000      	b.n	8009d22 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009d20:	2302      	movs	r3, #2
  }
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	60f8      	str	r0, [r7, #12]
 8009d32:	60b9      	str	r1, [r7, #8]
 8009d34:	4613      	mov	r3, r2
 8009d36:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009d3e:	2302      	movs	r3, #2
 8009d40:	e01a      	b.n	8009d78 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d003      	beq.n	8009d54 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	79fa      	ldrb	r2, [r7, #7]
 8009d6e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f001 fb45 	bl	800b400 <USBD_LL_Init>

  return USBD_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d006      	beq.n	8009da2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	73fb      	strb	r3, [r7, #15]
 8009da0:	e001      	b.n	8009da6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009da2:	2302      	movs	r3, #2
 8009da4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bc80      	pop	{r7}
 8009db0:	4770      	bx	lr

08009db2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b082      	sub	sp, #8
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f001 fb7a 	bl	800b4b4 <USBD_LL_Start>

  return USBD_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bc80      	pop	{r7}
 8009ddc:	4770      	bx	lr

08009dde <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	460b      	mov	r3, r1
 8009de8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009dea:	2302      	movs	r3, #2
 8009dec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00c      	beq.n	8009e12 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	78fa      	ldrb	r2, [r7, #3]
 8009e02:	4611      	mov	r1, r2
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	4798      	blx	r3
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	78fa      	ldrb	r2, [r7, #3]
 8009e32:	4611      	mov	r1, r2
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	4798      	blx	r3

  return USBD_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b082      	sub	sp, #8
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 fed8 	bl	800ac0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e68:	461a      	mov	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009e76:	f003 031f 	and.w	r3, r3, #31
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d016      	beq.n	8009eac <USBD_LL_SetupStage+0x6a>
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d81c      	bhi.n	8009ebc <USBD_LL_SetupStage+0x7a>
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <USBD_LL_SetupStage+0x4a>
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d008      	beq.n	8009e9c <USBD_LL_SetupStage+0x5a>
 8009e8a:	e017      	b.n	8009ebc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f9cb 	bl	800a230 <USBD_StdDevReq>
      break;
 8009e9a:	e01a      	b.n	8009ed2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fa2d 	bl	800a304 <USBD_StdItfReq>
      break;
 8009eaa:	e012      	b.n	8009ed2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fa6d 	bl	800a394 <USBD_StdEPReq>
      break;
 8009eba:	e00a      	b.n	8009ed2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009ec2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f001 fb52 	bl	800b574 <USBD_LL_StallEP>
      break;
 8009ed0:	bf00      	nop
  }

  return USBD_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009eea:	7afb      	ldrb	r3, [r7, #11]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d14b      	bne.n	8009f88 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009ef6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d134      	bne.n	8009f6c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	68da      	ldr	r2, [r3, #12]
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d919      	bls.n	8009f42 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	68da      	ldr	r2, [r3, #12]
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	1ad2      	subs	r2, r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d203      	bcs.n	8009f30 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	e002      	b.n	8009f36 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	461a      	mov	r2, r3
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 ff57 	bl	800adee <USBD_CtlContinueRx>
 8009f40:	e038      	b.n	8009fb4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00a      	beq.n	8009f64 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d105      	bne.n	8009f64 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f000 ff54 	bl	800ae12 <USBD_CtlSendStatus>
 8009f6a:	e023      	b.n	8009fb4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f72:	2b05      	cmp	r3, #5
 8009f74:	d11e      	bne.n	8009fb4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009f7e:	2100      	movs	r1, #0
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f001 faf7 	bl	800b574 <USBD_LL_StallEP>
 8009f86:	e015      	b.n	8009fb4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00d      	beq.n	8009fb0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d108      	bne.n	8009fb0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fa4:	699b      	ldr	r3, [r3, #24]
 8009fa6:	7afa      	ldrb	r2, [r7, #11]
 8009fa8:	4611      	mov	r1, r2
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	4798      	blx	r3
 8009fae:	e001      	b.n	8009fb4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	e000      	b.n	8009fb6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b086      	sub	sp, #24
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	607a      	str	r2, [r7, #4]
 8009fca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d17f      	bne.n	800a0d2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3314      	adds	r3, #20
 8009fd6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d15c      	bne.n	800a09c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	68da      	ldr	r2, [r3, #12]
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d915      	bls.n	800a01a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	68da      	ldr	r2, [r3, #12]
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	1ad2      	subs	r2, r2, r3
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	b29b      	uxth	r3, r3
 800a002:	461a      	mov	r2, r3
 800a004:	6879      	ldr	r1, [r7, #4]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 fec1 	bl	800ad8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a00c:	2300      	movs	r3, #0
 800a00e:	2200      	movs	r2, #0
 800a010:	2100      	movs	r1, #0
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f001 fb5a 	bl	800b6cc <USBD_LL_PrepareReceive>
 800a018:	e04e      	b.n	800a0b8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	6912      	ldr	r2, [r2, #16]
 800a022:	fbb3 f1f2 	udiv	r1, r3, r2
 800a026:	fb01 f202 	mul.w	r2, r1, r2
 800a02a:	1a9b      	subs	r3, r3, r2
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d11c      	bne.n	800a06a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a038:	429a      	cmp	r2, r3
 800a03a:	d316      	bcc.n	800a06a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a046:	429a      	cmp	r2, r3
 800a048:	d20f      	bcs.n	800a06a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a04a:	2200      	movs	r2, #0
 800a04c:	2100      	movs	r1, #0
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f000 fe9d 	bl	800ad8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a05c:	2300      	movs	r3, #0
 800a05e:	2200      	movs	r2, #0
 800a060:	2100      	movs	r1, #0
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f001 fb32 	bl	800b6cc <USBD_LL_PrepareReceive>
 800a068:	e026      	b.n	800a0b8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00a      	beq.n	800a08c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a07c:	2b03      	cmp	r3, #3
 800a07e:	d105      	bne.n	800a08c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a08c:	2180      	movs	r1, #128	; 0x80
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f001 fa70 	bl	800b574 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f000 fecf 	bl	800ae38 <USBD_CtlReceiveStatus>
 800a09a:	e00d      	b.n	800a0b8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0a2:	2b04      	cmp	r3, #4
 800a0a4:	d004      	beq.n	800a0b0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d103      	bne.n	800a0b8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a0b0:	2180      	movs	r1, #128	; 0x80
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f001 fa5e 	bl	800b574 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d11d      	bne.n	800a0fe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f7ff fe81 	bl	8009dca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a0d0:	e015      	b.n	800a0fe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00d      	beq.n	800a0fa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a0e4:	2b03      	cmp	r3, #3
 800a0e6:	d108      	bne.n	800a0fa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	7afa      	ldrb	r2, [r7, #11]
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	4798      	blx	r3
 800a0f8:	e001      	b.n	800a0fe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	e000      	b.n	800a100 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a110:	2340      	movs	r3, #64	; 0x40
 800a112:	2200      	movs	r2, #0
 800a114:	2100      	movs	r1, #0
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f001 f9e7 	bl	800b4ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2240      	movs	r2, #64	; 0x40
 800a128:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a12c:	2340      	movs	r3, #64	; 0x40
 800a12e:	2200      	movs	r2, #0
 800a130:	2180      	movs	r1, #128	; 0x80
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 f9d9 	bl	800b4ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2240      	movs	r2, #64	; 0x40
 800a142:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d009      	beq.n	800a180 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	6852      	ldr	r2, [r2, #4]
 800a178:	b2d2      	uxtb	r2, r2
 800a17a:	4611      	mov	r1, r2
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	4798      	blx	r3
  }

  return USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a18a:	b480      	push	{r7}
 800a18c:	b083      	sub	sp, #12
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	460b      	mov	r3, r1
 800a194:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	78fa      	ldrb	r2, [r7, #3]
 800a19a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bc80      	pop	{r7}
 800a1a6:	4770      	bx	lr

0800a1a8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2204      	movs	r2, #4
 800a1c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bc80      	pop	{r7}
 800a1ce:	4770      	bx	lr

0800a1d0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d105      	bne.n	800a1ee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bc80      	pop	{r7}
 800a1f8:	4770      	bx	lr

0800a1fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b082      	sub	sp, #8
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a208:	2b03      	cmp	r3, #3
 800a20a:	d10b      	bne.n	800a224 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d005      	beq.n	800a224 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
	...

0800a230 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a246:	2b40      	cmp	r3, #64	; 0x40
 800a248:	d005      	beq.n	800a256 <USBD_StdDevReq+0x26>
 800a24a:	2b40      	cmp	r3, #64	; 0x40
 800a24c:	d84f      	bhi.n	800a2ee <USBD_StdDevReq+0xbe>
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d009      	beq.n	800a266 <USBD_StdDevReq+0x36>
 800a252:	2b20      	cmp	r3, #32
 800a254:	d14b      	bne.n	800a2ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	4798      	blx	r3
      break;
 800a264:	e048      	b.n	800a2f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	785b      	ldrb	r3, [r3, #1]
 800a26a:	2b09      	cmp	r3, #9
 800a26c:	d839      	bhi.n	800a2e2 <USBD_StdDevReq+0xb2>
 800a26e:	a201      	add	r2, pc, #4	; (adr r2, 800a274 <USBD_StdDevReq+0x44>)
 800a270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a274:	0800a2c5 	.word	0x0800a2c5
 800a278:	0800a2d9 	.word	0x0800a2d9
 800a27c:	0800a2e3 	.word	0x0800a2e3
 800a280:	0800a2cf 	.word	0x0800a2cf
 800a284:	0800a2e3 	.word	0x0800a2e3
 800a288:	0800a2a7 	.word	0x0800a2a7
 800a28c:	0800a29d 	.word	0x0800a29d
 800a290:	0800a2e3 	.word	0x0800a2e3
 800a294:	0800a2bb 	.word	0x0800a2bb
 800a298:	0800a2b1 	.word	0x0800a2b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f9dc 	bl	800a65c <USBD_GetDescriptor>
          break;
 800a2a4:	e022      	b.n	800a2ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fb3f 	bl	800a92c <USBD_SetAddress>
          break;
 800a2ae:	e01d      	b.n	800a2ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fb7e 	bl	800a9b4 <USBD_SetConfig>
          break;
 800a2b8:	e018      	b.n	800a2ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fc07 	bl	800aad0 <USBD_GetConfig>
          break;
 800a2c2:	e013      	b.n	800a2ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fc37 	bl	800ab3a <USBD_GetStatus>
          break;
 800a2cc:	e00e      	b.n	800a2ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a2ce:	6839      	ldr	r1, [r7, #0]
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fc65 	bl	800aba0 <USBD_SetFeature>
          break;
 800a2d6:	e009      	b.n	800a2ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fc74 	bl	800abc8 <USBD_ClrFeature>
          break;
 800a2e0:	e004      	b.n	800a2ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fccc 	bl	800ac82 <USBD_CtlError>
          break;
 800a2ea:	bf00      	nop
      }
      break;
 800a2ec:	e004      	b.n	800a2f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fcc6 	bl	800ac82 <USBD_CtlError>
      break;
 800a2f6:	bf00      	nop
  }

  return ret;
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop

0800a304 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a30e:	2300      	movs	r3, #0
 800a310:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a31a:	2b40      	cmp	r3, #64	; 0x40
 800a31c:	d005      	beq.n	800a32a <USBD_StdItfReq+0x26>
 800a31e:	2b40      	cmp	r3, #64	; 0x40
 800a320:	d82e      	bhi.n	800a380 <USBD_StdItfReq+0x7c>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <USBD_StdItfReq+0x26>
 800a326:	2b20      	cmp	r3, #32
 800a328:	d12a      	bne.n	800a380 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a330:	3b01      	subs	r3, #1
 800a332:	2b02      	cmp	r3, #2
 800a334:	d81d      	bhi.n	800a372 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	889b      	ldrh	r3, [r3, #4]
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d813      	bhi.n	800a368 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	4798      	blx	r3
 800a34e:	4603      	mov	r3, r0
 800a350:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	88db      	ldrh	r3, [r3, #6]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d110      	bne.n	800a37c <USBD_StdItfReq+0x78>
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10d      	bne.n	800a37c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fd56 	bl	800ae12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a366:	e009      	b.n	800a37c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fc89 	bl	800ac82 <USBD_CtlError>
          break;
 800a370:	e004      	b.n	800a37c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fc84 	bl	800ac82 <USBD_CtlError>
          break;
 800a37a:	e000      	b.n	800a37e <USBD_StdItfReq+0x7a>
          break;
 800a37c:	bf00      	nop
      }
      break;
 800a37e:	e004      	b.n	800a38a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fc7d 	bl	800ac82 <USBD_CtlError>
      break;
 800a388:	bf00      	nop
  }

  return USBD_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	889b      	ldrh	r3, [r3, #4]
 800a3a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3b0:	2b40      	cmp	r3, #64	; 0x40
 800a3b2:	d007      	beq.n	800a3c4 <USBD_StdEPReq+0x30>
 800a3b4:	2b40      	cmp	r3, #64	; 0x40
 800a3b6:	f200 8146 	bhi.w	800a646 <USBD_StdEPReq+0x2b2>
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00a      	beq.n	800a3d4 <USBD_StdEPReq+0x40>
 800a3be:	2b20      	cmp	r3, #32
 800a3c0:	f040 8141 	bne.w	800a646 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	4798      	blx	r3
      break;
 800a3d2:	e13d      	b.n	800a650 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3dc:	2b20      	cmp	r3, #32
 800a3de:	d10a      	bne.n	800a3f6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	4798      	blx	r3
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a3f2:	7bfb      	ldrb	r3, [r7, #15]
 800a3f4:	e12d      	b.n	800a652 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	785b      	ldrb	r3, [r3, #1]
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d007      	beq.n	800a40e <USBD_StdEPReq+0x7a>
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	f300 811b 	bgt.w	800a63a <USBD_StdEPReq+0x2a6>
 800a404:	2b00      	cmp	r3, #0
 800a406:	d072      	beq.n	800a4ee <USBD_StdEPReq+0x15a>
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d03a      	beq.n	800a482 <USBD_StdEPReq+0xee>
 800a40c:	e115      	b.n	800a63a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a414:	2b02      	cmp	r3, #2
 800a416:	d002      	beq.n	800a41e <USBD_StdEPReq+0x8a>
 800a418:	2b03      	cmp	r3, #3
 800a41a:	d015      	beq.n	800a448 <USBD_StdEPReq+0xb4>
 800a41c:	e02b      	b.n	800a476 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a41e:	7bbb      	ldrb	r3, [r7, #14]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00c      	beq.n	800a43e <USBD_StdEPReq+0xaa>
 800a424:	7bbb      	ldrb	r3, [r7, #14]
 800a426:	2b80      	cmp	r3, #128	; 0x80
 800a428:	d009      	beq.n	800a43e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a42a:	7bbb      	ldrb	r3, [r7, #14]
 800a42c:	4619      	mov	r1, r3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f001 f8a0 	bl	800b574 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a434:	2180      	movs	r1, #128	; 0x80
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f001 f89c 	bl	800b574 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a43c:	e020      	b.n	800a480 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fc1e 	bl	800ac82 <USBD_CtlError>
              break;
 800a446:	e01b      	b.n	800a480 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	885b      	ldrh	r3, [r3, #2]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10e      	bne.n	800a46e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a450:	7bbb      	ldrb	r3, [r7, #14]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00b      	beq.n	800a46e <USBD_StdEPReq+0xda>
 800a456:	7bbb      	ldrb	r3, [r7, #14]
 800a458:	2b80      	cmp	r3, #128	; 0x80
 800a45a:	d008      	beq.n	800a46e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	88db      	ldrh	r3, [r3, #6]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d104      	bne.n	800a46e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a464:	7bbb      	ldrb	r3, [r7, #14]
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f001 f883 	bl	800b574 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fccf 	bl	800ae12 <USBD_CtlSendStatus>

              break;
 800a474:	e004      	b.n	800a480 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fc02 	bl	800ac82 <USBD_CtlError>
              break;
 800a47e:	bf00      	nop
          }
          break;
 800a480:	e0e0      	b.n	800a644 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d002      	beq.n	800a492 <USBD_StdEPReq+0xfe>
 800a48c:	2b03      	cmp	r3, #3
 800a48e:	d015      	beq.n	800a4bc <USBD_StdEPReq+0x128>
 800a490:	e026      	b.n	800a4e0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00c      	beq.n	800a4b2 <USBD_StdEPReq+0x11e>
 800a498:	7bbb      	ldrb	r3, [r7, #14]
 800a49a:	2b80      	cmp	r3, #128	; 0x80
 800a49c:	d009      	beq.n	800a4b2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a49e:	7bbb      	ldrb	r3, [r7, #14]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 f866 	bl	800b574 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a4a8:	2180      	movs	r1, #128	; 0x80
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f001 f862 	bl	800b574 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4b0:	e01c      	b.n	800a4ec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fbe4 	bl	800ac82 <USBD_CtlError>
              break;
 800a4ba:	e017      	b.n	800a4ec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	885b      	ldrh	r3, [r3, #2]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d112      	bne.n	800a4ea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a4c4:	7bbb      	ldrb	r3, [r7, #14]
 800a4c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d004      	beq.n	800a4d8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a4ce:	7bbb      	ldrb	r3, [r7, #14]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f001 f86d 	bl	800b5b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fc9a 	bl	800ae12 <USBD_CtlSendStatus>
              }
              break;
 800a4de:	e004      	b.n	800a4ea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fbcd 	bl	800ac82 <USBD_CtlError>
              break;
 800a4e8:	e000      	b.n	800a4ec <USBD_StdEPReq+0x158>
              break;
 800a4ea:	bf00      	nop
          }
          break;
 800a4ec:	e0aa      	b.n	800a644 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d002      	beq.n	800a4fe <USBD_StdEPReq+0x16a>
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d032      	beq.n	800a562 <USBD_StdEPReq+0x1ce>
 800a4fc:	e097      	b.n	800a62e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4fe:	7bbb      	ldrb	r3, [r7, #14]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d007      	beq.n	800a514 <USBD_StdEPReq+0x180>
 800a504:	7bbb      	ldrb	r3, [r7, #14]
 800a506:	2b80      	cmp	r3, #128	; 0x80
 800a508:	d004      	beq.n	800a514 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a50a:	6839      	ldr	r1, [r7, #0]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fbb8 	bl	800ac82 <USBD_CtlError>
                break;
 800a512:	e091      	b.n	800a638 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	da0b      	bge.n	800a534 <USBD_StdEPReq+0x1a0>
 800a51c:	7bbb      	ldrb	r3, [r7, #14]
 800a51e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a522:	4613      	mov	r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	3310      	adds	r3, #16
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	4413      	add	r3, r2
 800a530:	3304      	adds	r3, #4
 800a532:	e00b      	b.n	800a54c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a53a:	4613      	mov	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	4413      	add	r3, r2
 800a54a:	3304      	adds	r3, #4
 800a54c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	2200      	movs	r2, #0
 800a552:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	2202      	movs	r2, #2
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fbfb 	bl	800ad56 <USBD_CtlSendData>
              break;
 800a560:	e06a      	b.n	800a638 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a562:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a566:	2b00      	cmp	r3, #0
 800a568:	da11      	bge.n	800a58e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	f003 020f 	and.w	r2, r3, #15
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	4613      	mov	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4413      	add	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	440b      	add	r3, r1
 800a57c:	3318      	adds	r3, #24
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d117      	bne.n	800a5b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fb7b 	bl	800ac82 <USBD_CtlError>
                  break;
 800a58c:	e054      	b.n	800a638 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a58e:	7bbb      	ldrb	r3, [r7, #14]
 800a590:	f003 020f 	and.w	r2, r3, #15
 800a594:	6879      	ldr	r1, [r7, #4]
 800a596:	4613      	mov	r3, r2
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	4413      	add	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	440b      	add	r3, r1
 800a5a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d104      	bne.n	800a5b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fb68 	bl	800ac82 <USBD_CtlError>
                  break;
 800a5b2:	e041      	b.n	800a638 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	da0b      	bge.n	800a5d4 <USBD_StdEPReq+0x240>
 800a5bc:	7bbb      	ldrb	r3, [r7, #14]
 800a5be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	3310      	adds	r3, #16
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	e00b      	b.n	800a5ec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5d4:	7bbb      	ldrb	r3, [r7, #14]
 800a5d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5da:	4613      	mov	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5ee:	7bbb      	ldrb	r3, [r7, #14]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <USBD_StdEPReq+0x266>
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
 800a5f6:	2b80      	cmp	r3, #128	; 0x80
 800a5f8:	d103      	bne.n	800a602 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	e00e      	b.n	800a620 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	4619      	mov	r1, r3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fff2 	bl	800b5f0 <USBD_LL_IsStallEP>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	2201      	movs	r2, #1
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	e002      	b.n	800a620 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2200      	movs	r2, #0
 800a61e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2202      	movs	r2, #2
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fb95 	bl	800ad56 <USBD_CtlSendData>
              break;
 800a62c:	e004      	b.n	800a638 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fb26 	bl	800ac82 <USBD_CtlError>
              break;
 800a636:	bf00      	nop
          }
          break;
 800a638:	e004      	b.n	800a644 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fb20 	bl	800ac82 <USBD_CtlError>
          break;
 800a642:	bf00      	nop
      }
      break;
 800a644:	e004      	b.n	800a650 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fb1a 	bl	800ac82 <USBD_CtlError>
      break;
 800a64e:	bf00      	nop
  }

  return ret;
 800a650:	7bfb      	ldrb	r3, [r7, #15]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
	...

0800a65c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a66e:	2300      	movs	r3, #0
 800a670:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	885b      	ldrh	r3, [r3, #2]
 800a676:	0a1b      	lsrs	r3, r3, #8
 800a678:	b29b      	uxth	r3, r3
 800a67a:	3b01      	subs	r3, #1
 800a67c:	2b06      	cmp	r3, #6
 800a67e:	f200 8128 	bhi.w	800a8d2 <USBD_GetDescriptor+0x276>
 800a682:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <USBD_GetDescriptor+0x2c>)
 800a684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a688:	0800a6a5 	.word	0x0800a6a5
 800a68c:	0800a6bd 	.word	0x0800a6bd
 800a690:	0800a6fd 	.word	0x0800a6fd
 800a694:	0800a8d3 	.word	0x0800a8d3
 800a698:	0800a8d3 	.word	0x0800a8d3
 800a69c:	0800a873 	.word	0x0800a873
 800a6a0:	0800a89f 	.word	0x0800a89f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	7c12      	ldrb	r2, [r2, #16]
 800a6b0:	f107 0108 	add.w	r1, r7, #8
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	4798      	blx	r3
 800a6b8:	60f8      	str	r0, [r7, #12]
      break;
 800a6ba:	e112      	b.n	800a8e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	7c1b      	ldrb	r3, [r3, #16]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10d      	bne.n	800a6e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6cc:	f107 0208 	add.w	r2, r7, #8
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	4798      	blx	r3
 800a6d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	2202      	movs	r2, #2
 800a6dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6de:	e100      	b.n	800a8e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e8:	f107 0208 	add.w	r2, r7, #8
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	4798      	blx	r3
 800a6f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	701a      	strb	r2, [r3, #0]
      break;
 800a6fa:	e0f2      	b.n	800a8e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	885b      	ldrh	r3, [r3, #2]
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b05      	cmp	r3, #5
 800a704:	f200 80ac 	bhi.w	800a860 <USBD_GetDescriptor+0x204>
 800a708:	a201      	add	r2, pc, #4	; (adr r2, 800a710 <USBD_GetDescriptor+0xb4>)
 800a70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70e:	bf00      	nop
 800a710:	0800a729 	.word	0x0800a729
 800a714:	0800a75d 	.word	0x0800a75d
 800a718:	0800a791 	.word	0x0800a791
 800a71c:	0800a7c5 	.word	0x0800a7c5
 800a720:	0800a7f9 	.word	0x0800a7f9
 800a724:	0800a82d 	.word	0x0800a82d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00b      	beq.n	800a74c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	7c12      	ldrb	r2, [r2, #16]
 800a740:	f107 0108 	add.w	r1, r7, #8
 800a744:	4610      	mov	r0, r2
 800a746:	4798      	blx	r3
 800a748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a74a:	e091      	b.n	800a870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fa97 	bl	800ac82 <USBD_CtlError>
            err++;
 800a754:	7afb      	ldrb	r3, [r7, #11]
 800a756:	3301      	adds	r3, #1
 800a758:	72fb      	strb	r3, [r7, #11]
          break;
 800a75a:	e089      	b.n	800a870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00b      	beq.n	800a780 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	7c12      	ldrb	r2, [r2, #16]
 800a774:	f107 0108 	add.w	r1, r7, #8
 800a778:	4610      	mov	r0, r2
 800a77a:	4798      	blx	r3
 800a77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a77e:	e077      	b.n	800a870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fa7d 	bl	800ac82 <USBD_CtlError>
            err++;
 800a788:	7afb      	ldrb	r3, [r7, #11]
 800a78a:	3301      	adds	r3, #1
 800a78c:	72fb      	strb	r3, [r7, #11]
          break;
 800a78e:	e06f      	b.n	800a870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00b      	beq.n	800a7b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	7c12      	ldrb	r2, [r2, #16]
 800a7a8:	f107 0108 	add.w	r1, r7, #8
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	4798      	blx	r3
 800a7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7b2:	e05d      	b.n	800a870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fa63 	bl	800ac82 <USBD_CtlError>
            err++;
 800a7bc:	7afb      	ldrb	r3, [r7, #11]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7c2:	e055      	b.n	800a870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00b      	beq.n	800a7e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	7c12      	ldrb	r2, [r2, #16]
 800a7dc:	f107 0108 	add.w	r1, r7, #8
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	4798      	blx	r3
 800a7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7e6:	e043      	b.n	800a870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fa49 	bl	800ac82 <USBD_CtlError>
            err++;
 800a7f0:	7afb      	ldrb	r3, [r7, #11]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7f6:	e03b      	b.n	800a870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7fe:	695b      	ldr	r3, [r3, #20]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00b      	beq.n	800a81c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	7c12      	ldrb	r2, [r2, #16]
 800a810:	f107 0108 	add.w	r1, r7, #8
 800a814:	4610      	mov	r0, r2
 800a816:	4798      	blx	r3
 800a818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a81a:	e029      	b.n	800a870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fa2f 	bl	800ac82 <USBD_CtlError>
            err++;
 800a824:	7afb      	ldrb	r3, [r7, #11]
 800a826:	3301      	adds	r3, #1
 800a828:	72fb      	strb	r3, [r7, #11]
          break;
 800a82a:	e021      	b.n	800a870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a832:	699b      	ldr	r3, [r3, #24]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00b      	beq.n	800a850 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a83e:	699b      	ldr	r3, [r3, #24]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	7c12      	ldrb	r2, [r2, #16]
 800a844:	f107 0108 	add.w	r1, r7, #8
 800a848:	4610      	mov	r0, r2
 800a84a:	4798      	blx	r3
 800a84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a84e:	e00f      	b.n	800a870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fa15 	bl	800ac82 <USBD_CtlError>
            err++;
 800a858:	7afb      	ldrb	r3, [r7, #11]
 800a85a:	3301      	adds	r3, #1
 800a85c:	72fb      	strb	r3, [r7, #11]
          break;
 800a85e:	e007      	b.n	800a870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fa0d 	bl	800ac82 <USBD_CtlError>
          err++;
 800a868:	7afb      	ldrb	r3, [r7, #11]
 800a86a:	3301      	adds	r3, #1
 800a86c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a86e:	e038      	b.n	800a8e2 <USBD_GetDescriptor+0x286>
 800a870:	e037      	b.n	800a8e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	7c1b      	ldrb	r3, [r3, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d109      	bne.n	800a88e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a882:	f107 0208 	add.w	r2, r7, #8
 800a886:	4610      	mov	r0, r2
 800a888:	4798      	blx	r3
 800a88a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a88c:	e029      	b.n	800a8e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f9f6 	bl	800ac82 <USBD_CtlError>
        err++;
 800a896:	7afb      	ldrb	r3, [r7, #11]
 800a898:	3301      	adds	r3, #1
 800a89a:	72fb      	strb	r3, [r7, #11]
      break;
 800a89c:	e021      	b.n	800a8e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	7c1b      	ldrb	r3, [r3, #16]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10d      	bne.n	800a8c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ae:	f107 0208 	add.w	r2, r7, #8
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	4798      	blx	r3
 800a8b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	2207      	movs	r2, #7
 800a8be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8c0:	e00f      	b.n	800a8e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f9dc 	bl	800ac82 <USBD_CtlError>
        err++;
 800a8ca:	7afb      	ldrb	r3, [r7, #11]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	72fb      	strb	r3, [r7, #11]
      break;
 800a8d0:	e007      	b.n	800a8e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f9d4 	bl	800ac82 <USBD_CtlError>
      err++;
 800a8da:	7afb      	ldrb	r3, [r7, #11]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	72fb      	strb	r3, [r7, #11]
      break;
 800a8e0:	bf00      	nop
  }

  if (err != 0U)
 800a8e2:	7afb      	ldrb	r3, [r7, #11]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d11c      	bne.n	800a922 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a8e8:	893b      	ldrh	r3, [r7, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d011      	beq.n	800a912 <USBD_GetDescriptor+0x2b6>
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	88db      	ldrh	r3, [r3, #6]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00d      	beq.n	800a912 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	88da      	ldrh	r2, [r3, #6]
 800a8fa:	893b      	ldrh	r3, [r7, #8]
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	bf28      	it	cs
 800a900:	4613      	movcs	r3, r2
 800a902:	b29b      	uxth	r3, r3
 800a904:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a906:	893b      	ldrh	r3, [r7, #8]
 800a908:	461a      	mov	r2, r3
 800a90a:	68f9      	ldr	r1, [r7, #12]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fa22 	bl	800ad56 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	88db      	ldrh	r3, [r3, #6]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d104      	bne.n	800a924 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fa79 	bl	800ae12 <USBD_CtlSendStatus>
 800a920:	e000      	b.n	800a924 <USBD_GetDescriptor+0x2c8>
    return;
 800a922:	bf00      	nop
    }
  }
}
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop

0800a92c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	889b      	ldrh	r3, [r3, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d130      	bne.n	800a9a0 <USBD_SetAddress+0x74>
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	88db      	ldrh	r3, [r3, #6]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d12c      	bne.n	800a9a0 <USBD_SetAddress+0x74>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	885b      	ldrh	r3, [r3, #2]
 800a94a:	2b7f      	cmp	r3, #127	; 0x7f
 800a94c:	d828      	bhi.n	800a9a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	885b      	ldrh	r3, [r3, #2]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a958:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a960:	2b03      	cmp	r3, #3
 800a962:	d104      	bne.n	800a96e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f98b 	bl	800ac82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a96c:	e01d      	b.n	800a9aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	7bfa      	ldrb	r2, [r7, #15]
 800a972:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fe64 	bl	800b648 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fa46 	bl	800ae12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a986:	7bfb      	ldrb	r3, [r7, #15]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d004      	beq.n	800a996 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2202      	movs	r2, #2
 800a990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a994:	e009      	b.n	800a9aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a99e:	e004      	b.n	800a9aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f96d 	bl	800ac82 <USBD_CtlError>
  }
}
 800a9a8:	bf00      	nop
 800a9aa:	bf00      	nop
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
	...

0800a9b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	885b      	ldrh	r3, [r3, #2]
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	4b41      	ldr	r3, [pc, #260]	; (800aacc <USBD_SetConfig+0x118>)
 800a9c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9c8:	4b40      	ldr	r3, [pc, #256]	; (800aacc <USBD_SetConfig+0x118>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d904      	bls.n	800a9da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a9d0:	6839      	ldr	r1, [r7, #0]
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f955 	bl	800ac82 <USBD_CtlError>
 800a9d8:	e075      	b.n	800aac6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d002      	beq.n	800a9ea <USBD_SetConfig+0x36>
 800a9e4:	2b03      	cmp	r3, #3
 800a9e6:	d023      	beq.n	800aa30 <USBD_SetConfig+0x7c>
 800a9e8:	e062      	b.n	800aab0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a9ea:	4b38      	ldr	r3, [pc, #224]	; (800aacc <USBD_SetConfig+0x118>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d01a      	beq.n	800aa28 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a9f2:	4b36      	ldr	r3, [pc, #216]	; (800aacc <USBD_SetConfig+0x118>)
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2203      	movs	r2, #3
 800aa00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa04:	4b31      	ldr	r3, [pc, #196]	; (800aacc <USBD_SetConfig+0x118>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f7ff f9e7 	bl	8009dde <USBD_SetClassConfig>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d104      	bne.n	800aa20 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f932 	bl	800ac82 <USBD_CtlError>
            return;
 800aa1e:	e052      	b.n	800aac6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f9f6 	bl	800ae12 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aa26:	e04e      	b.n	800aac6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f9f2 	bl	800ae12 <USBD_CtlSendStatus>
        break;
 800aa2e:	e04a      	b.n	800aac6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aa30:	4b26      	ldr	r3, [pc, #152]	; (800aacc <USBD_SetConfig+0x118>)
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d112      	bne.n	800aa5e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800aa40:	4b22      	ldr	r3, [pc, #136]	; (800aacc <USBD_SetConfig+0x118>)
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	461a      	mov	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800aa4a:	4b20      	ldr	r3, [pc, #128]	; (800aacc <USBD_SetConfig+0x118>)
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f7ff f9e3 	bl	8009e1c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f9db 	bl	800ae12 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aa5c:	e033      	b.n	800aac6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800aa5e:	4b1b      	ldr	r3, [pc, #108]	; (800aacc <USBD_SetConfig+0x118>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	461a      	mov	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d01d      	beq.n	800aaa8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7ff f9d1 	bl	8009e1c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800aa7a:	4b14      	ldr	r3, [pc, #80]	; (800aacc <USBD_SetConfig+0x118>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa84:	4b11      	ldr	r3, [pc, #68]	; (800aacc <USBD_SetConfig+0x118>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7ff f9a7 	bl	8009dde <USBD_SetClassConfig>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d104      	bne.n	800aaa0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f8f2 	bl	800ac82 <USBD_CtlError>
            return;
 800aa9e:	e012      	b.n	800aac6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f9b6 	bl	800ae12 <USBD_CtlSendStatus>
        break;
 800aaa6:	e00e      	b.n	800aac6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f9b2 	bl	800ae12 <USBD_CtlSendStatus>
        break;
 800aaae:	e00a      	b.n	800aac6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f8e5 	bl	800ac82 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800aab8:	4b04      	ldr	r3, [pc, #16]	; (800aacc <USBD_SetConfig+0x118>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	4619      	mov	r1, r3
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7ff f9ac 	bl	8009e1c <USBD_ClrClassConfig>
        break;
 800aac4:	bf00      	nop
    }
  }
}
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	20000300 	.word	0x20000300

0800aad0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	88db      	ldrh	r3, [r3, #6]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d004      	beq.n	800aaec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f8cc 	bl	800ac82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aaea:	e022      	b.n	800ab32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	dc02      	bgt.n	800aafc <USBD_GetConfig+0x2c>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	dc03      	bgt.n	800ab02 <USBD_GetConfig+0x32>
 800aafa:	e015      	b.n	800ab28 <USBD_GetConfig+0x58>
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d00b      	beq.n	800ab18 <USBD_GetConfig+0x48>
 800ab00:	e012      	b.n	800ab28 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	3308      	adds	r3, #8
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	4619      	mov	r1, r3
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f920 	bl	800ad56 <USBD_CtlSendData>
        break;
 800ab16:	e00c      	b.n	800ab32 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f918 	bl	800ad56 <USBD_CtlSendData>
        break;
 800ab26:	e004      	b.n	800ab32 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f8a9 	bl	800ac82 <USBD_CtlError>
        break;
 800ab30:	bf00      	nop
}
 800ab32:	bf00      	nop
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b082      	sub	sp, #8
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d81e      	bhi.n	800ab8e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	88db      	ldrh	r3, [r3, #6]
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d004      	beq.n	800ab62 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f891 	bl	800ac82 <USBD_CtlError>
        break;
 800ab60:	e01a      	b.n	800ab98 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d005      	beq.n	800ab7e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	f043 0202 	orr.w	r2, r3, #2
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	330c      	adds	r3, #12
 800ab82:	2202      	movs	r2, #2
 800ab84:	4619      	mov	r1, r3
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f8e5 	bl	800ad56 <USBD_CtlSendData>
      break;
 800ab8c:	e004      	b.n	800ab98 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ab8e:	6839      	ldr	r1, [r7, #0]
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 f876 	bl	800ac82 <USBD_CtlError>
      break;
 800ab96:	bf00      	nop
  }
}
 800ab98:	bf00      	nop
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	885b      	ldrh	r3, [r3, #2]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d106      	bne.n	800abc0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f929 	bl	800ae12 <USBD_CtlSendStatus>
  }
}
 800abc0:	bf00      	nop
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd8:	3b01      	subs	r3, #1
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d80b      	bhi.n	800abf6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	885b      	ldrh	r3, [r3, #2]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d10c      	bne.n	800ac00 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f90f 	bl	800ae12 <USBD_CtlSendStatus>
      }
      break;
 800abf4:	e004      	b.n	800ac00 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800abf6:	6839      	ldr	r1, [r7, #0]
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 f842 	bl	800ac82 <USBD_CtlError>
      break;
 800abfe:	e000      	b.n	800ac02 <USBD_ClrFeature+0x3a>
      break;
 800ac00:	bf00      	nop
  }
}
 800ac02:	bf00      	nop
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	b083      	sub	sp, #12
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	781a      	ldrb	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	785a      	ldrb	r2, [r3, #1]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	3302      	adds	r3, #2
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	3303      	adds	r3, #3
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	021b      	lsls	r3, r3, #8
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	4413      	add	r3, r2
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	3304      	adds	r3, #4
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	3305      	adds	r3, #5
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	021b      	lsls	r3, r3, #8
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	4413      	add	r3, r2
 800ac56:	b29a      	uxth	r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	3306      	adds	r3, #6
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	3307      	adds	r3, #7
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	021b      	lsls	r3, r3, #8
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	4413      	add	r3, r2
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	80da      	strh	r2, [r3, #6]

}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bc80      	pop	{r7}
 800ac80:	4770      	bx	lr

0800ac82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ac8c:	2180      	movs	r1, #128	; 0x80
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fc70 	bl	800b574 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ac94:	2100      	movs	r1, #0
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fc6c 	bl	800b574 <USBD_LL_StallEP>
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800acb0:	2300      	movs	r3, #0
 800acb2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d032      	beq.n	800ad20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 f834 	bl	800ad28 <USBD_GetLen>
 800acc0:	4603      	mov	r3, r0
 800acc2:	3301      	adds	r3, #1
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	005b      	lsls	r3, r3, #1
 800acc8:	b29a      	uxth	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800acce:	7dfb      	ldrb	r3, [r7, #23]
 800acd0:	1c5a      	adds	r2, r3, #1
 800acd2:	75fa      	strb	r2, [r7, #23]
 800acd4:	461a      	mov	r2, r3
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	4413      	add	r3, r2
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	7812      	ldrb	r2, [r2, #0]
 800acde:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ace0:	7dfb      	ldrb	r3, [r7, #23]
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	75fa      	strb	r2, [r7, #23]
 800ace6:	461a      	mov	r2, r3
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	4413      	add	r3, r2
 800acec:	2203      	movs	r2, #3
 800acee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800acf0:	e012      	b.n	800ad18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	1c5a      	adds	r2, r3, #1
 800acf6:	60fa      	str	r2, [r7, #12]
 800acf8:	7dfa      	ldrb	r2, [r7, #23]
 800acfa:	1c51      	adds	r1, r2, #1
 800acfc:	75f9      	strb	r1, [r7, #23]
 800acfe:	4611      	mov	r1, r2
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	440a      	add	r2, r1
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ad08:	7dfb      	ldrb	r3, [r7, #23]
 800ad0a:	1c5a      	adds	r2, r3, #1
 800ad0c:	75fa      	strb	r2, [r7, #23]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	4413      	add	r3, r2
 800ad14:	2200      	movs	r2, #0
 800ad16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1e8      	bne.n	800acf2 <USBD_GetString+0x4e>
    }
  }
}
 800ad20:	bf00      	nop
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad30:	2300      	movs	r3, #0
 800ad32:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ad34:	e005      	b.n	800ad42 <USBD_GetLen+0x1a>
  {
    len++;
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1f5      	bne.n	800ad36 <USBD_GetLen+0xe>
  }

  return len;
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bc80      	pop	{r7}
 800ad54:	4770      	bx	lr

0800ad56 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	4613      	mov	r3, r2
 800ad62:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2202      	movs	r2, #2
 800ad68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ad6c:	88fa      	ldrh	r2, [r7, #6]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ad72:	88fa      	ldrh	r2, [r7, #6]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad78:	88fb      	ldrh	r3, [r7, #6]
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f000 fc81 	bl	800b686 <USBD_LL_Transmit>

  return USBD_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b084      	sub	sp, #16
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	60f8      	str	r0, [r7, #12]
 800ad96:	60b9      	str	r1, [r7, #8]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad9c:	88fb      	ldrh	r3, [r7, #6]
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	2100      	movs	r1, #0
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f000 fc6f 	bl	800b686 <USBD_LL_Transmit>

  return USBD_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	60f8      	str	r0, [r7, #12]
 800adba:	60b9      	str	r1, [r7, #8]
 800adbc:	4613      	mov	r3, r2
 800adbe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2203      	movs	r2, #3
 800adc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800adc8:	88fa      	ldrh	r2, [r7, #6]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800add0:	88fa      	ldrh	r2, [r7, #6]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800add8:	88fb      	ldrh	r3, [r7, #6]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	2100      	movs	r1, #0
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f000 fc74 	bl	800b6cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	60b9      	str	r1, [r7, #8]
 800adf8:	4613      	mov	r3, r2
 800adfa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800adfc:	88fb      	ldrh	r3, [r7, #6]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	2100      	movs	r1, #0
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f000 fc62 	bl	800b6cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2204      	movs	r2, #4
 800ae1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae22:	2300      	movs	r3, #0
 800ae24:	2200      	movs	r2, #0
 800ae26:	2100      	movs	r1, #0
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fc2c 	bl	800b686 <USBD_LL_Transmit>

  return USBD_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2205      	movs	r2, #5
 800ae44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae48:	2300      	movs	r3, #0
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fc3c 	bl	800b6cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ae64:	2200      	movs	r2, #0
 800ae66:	4912      	ldr	r1, [pc, #72]	; (800aeb0 <MX_USB_DEVICE_Init+0x50>)
 800ae68:	4812      	ldr	r0, [pc, #72]	; (800aeb4 <MX_USB_DEVICE_Init+0x54>)
 800ae6a:	f7fe ff5e 	bl	8009d2a <USBD_Init>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ae74:	f7f6 f8e0 	bl	8001038 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ae78:	490f      	ldr	r1, [pc, #60]	; (800aeb8 <MX_USB_DEVICE_Init+0x58>)
 800ae7a:	480e      	ldr	r0, [pc, #56]	; (800aeb4 <MX_USB_DEVICE_Init+0x54>)
 800ae7c:	f7fe ff80 	bl	8009d80 <USBD_RegisterClass>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ae86:	f7f6 f8d7 	bl	8001038 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ae8a:	490c      	ldr	r1, [pc, #48]	; (800aebc <MX_USB_DEVICE_Init+0x5c>)
 800ae8c:	4809      	ldr	r0, [pc, #36]	; (800aeb4 <MX_USB_DEVICE_Init+0x54>)
 800ae8e:	f7fe feb1 	bl	8009bf4 <USBD_CDC_RegisterInterface>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d001      	beq.n	800ae9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ae98:	f7f6 f8ce 	bl	8001038 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ae9c:	4805      	ldr	r0, [pc, #20]	; (800aeb4 <MX_USB_DEVICE_Init+0x54>)
 800ae9e:	f7fe ff88 	bl	8009db2 <USBD_Start>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aea8:	f7f6 f8c6 	bl	8001038 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aeac:	bf00      	nop
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	2000012c 	.word	0x2000012c
 800aeb4:	20000304 	.word	0x20000304
 800aeb8:	20000018 	.word	0x20000018
 800aebc:	2000011c 	.word	0x2000011c

0800aec0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aec4:	2200      	movs	r2, #0
 800aec6:	4905      	ldr	r1, [pc, #20]	; (800aedc <CDC_Init_FS+0x1c>)
 800aec8:	4805      	ldr	r0, [pc, #20]	; (800aee0 <CDC_Init_FS+0x20>)
 800aeca:	f7fe fea9 	bl	8009c20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aece:	4905      	ldr	r1, [pc, #20]	; (800aee4 <CDC_Init_FS+0x24>)
 800aed0:	4803      	ldr	r0, [pc, #12]	; (800aee0 <CDC_Init_FS+0x20>)
 800aed2:	f7fe febe 	bl	8009c52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aed6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	200009c8 	.word	0x200009c8
 800aee0:	20000304 	.word	0x20000304
 800aee4:	200005c8 	.word	0x200005c8

0800aee8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aee8:	b480      	push	{r7}
 800aeea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aeec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bc80      	pop	{r7}
 800aef4:	4770      	bx	lr
	...

0800aef8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	4603      	mov	r3, r0
 800af00:	6039      	str	r1, [r7, #0]
 800af02:	71fb      	strb	r3, [r7, #7]
 800af04:	4613      	mov	r3, r2
 800af06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800af08:	79fb      	ldrb	r3, [r7, #7]
 800af0a:	2b23      	cmp	r3, #35	; 0x23
 800af0c:	d84a      	bhi.n	800afa4 <CDC_Control_FS+0xac>
 800af0e:	a201      	add	r2, pc, #4	; (adr r2, 800af14 <CDC_Control_FS+0x1c>)
 800af10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af14:	0800afa5 	.word	0x0800afa5
 800af18:	0800afa5 	.word	0x0800afa5
 800af1c:	0800afa5 	.word	0x0800afa5
 800af20:	0800afa5 	.word	0x0800afa5
 800af24:	0800afa5 	.word	0x0800afa5
 800af28:	0800afa5 	.word	0x0800afa5
 800af2c:	0800afa5 	.word	0x0800afa5
 800af30:	0800afa5 	.word	0x0800afa5
 800af34:	0800afa5 	.word	0x0800afa5
 800af38:	0800afa5 	.word	0x0800afa5
 800af3c:	0800afa5 	.word	0x0800afa5
 800af40:	0800afa5 	.word	0x0800afa5
 800af44:	0800afa5 	.word	0x0800afa5
 800af48:	0800afa5 	.word	0x0800afa5
 800af4c:	0800afa5 	.word	0x0800afa5
 800af50:	0800afa5 	.word	0x0800afa5
 800af54:	0800afa5 	.word	0x0800afa5
 800af58:	0800afa5 	.word	0x0800afa5
 800af5c:	0800afa5 	.word	0x0800afa5
 800af60:	0800afa5 	.word	0x0800afa5
 800af64:	0800afa5 	.word	0x0800afa5
 800af68:	0800afa5 	.word	0x0800afa5
 800af6c:	0800afa5 	.word	0x0800afa5
 800af70:	0800afa5 	.word	0x0800afa5
 800af74:	0800afa5 	.word	0x0800afa5
 800af78:	0800afa5 	.word	0x0800afa5
 800af7c:	0800afa5 	.word	0x0800afa5
 800af80:	0800afa5 	.word	0x0800afa5
 800af84:	0800afa5 	.word	0x0800afa5
 800af88:	0800afa5 	.word	0x0800afa5
 800af8c:	0800afa5 	.word	0x0800afa5
 800af90:	0800afa5 	.word	0x0800afa5
 800af94:	0800afa5 	.word	0x0800afa5
 800af98:	0800afa5 	.word	0x0800afa5
 800af9c:	0800afa5 	.word	0x0800afa5
 800afa0:	0800afa5 	.word	0x0800afa5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800afa4:	bf00      	nop
  }

  return (USBD_OK);
 800afa6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	bc80      	pop	{r7}
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop

0800afb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; ++i)
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]
 800afc2:	e00b      	b.n	800afdc <CDC_Receive_FS+0x28>
  {
	  Buffer_Write(FIFO_buf, Buf[i]);
 800afc4:	4b11      	ldr	r3, [pc, #68]	; (800b00c <CDC_Receive_FS+0x58>)
 800afc6:	6818      	ldr	r0, [r3, #0]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	4413      	add	r3, r2
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	4619      	mov	r1, r3
 800afd2:	f7f5 fdbd 	bl	8000b50 <Buffer_Write>
  for (int i = 0; i < *Len; ++i)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3301      	adds	r3, #1
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d8ee      	bhi.n	800afc4 <CDC_Receive_FS+0x10>
  }
  memset(Buf, 0, *Len);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	461a      	mov	r2, r3
 800afec:	2100      	movs	r1, #0
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fe7c 	bl	800bcec <memset>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aff4:	6879      	ldr	r1, [r7, #4]
 800aff6:	4806      	ldr	r0, [pc, #24]	; (800b010 <CDC_Receive_FS+0x5c>)
 800aff8:	f7fe fe2b 	bl	8009c52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800affc:	4804      	ldr	r0, [pc, #16]	; (800b010 <CDC_Receive_FS+0x5c>)
 800affe:	f7fe fe6a 	bl	8009cd6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b002:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	2000029c 	.word	0x2000029c
 800b010:	20000304 	.word	0x20000304

0800b014 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	460b      	mov	r3, r1
 800b01e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b024:	4b0d      	ldr	r3, [pc, #52]	; (800b05c <CDC_Transmit_FS+0x48>)
 800b026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b02a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b036:	2301      	movs	r3, #1
 800b038:	e00b      	b.n	800b052 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b03a:	887b      	ldrh	r3, [r7, #2]
 800b03c:	461a      	mov	r2, r3
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	4806      	ldr	r0, [pc, #24]	; (800b05c <CDC_Transmit_FS+0x48>)
 800b042:	f7fe fded 	bl	8009c20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b046:	4805      	ldr	r0, [pc, #20]	; (800b05c <CDC_Transmit_FS+0x48>)
 800b048:	f7fe fe16 	bl	8009c78 <USBD_CDC_TransmitPacket>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b050:	7bfb      	ldrb	r3, [r7, #15]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20000304 	.word	0x20000304

0800b060 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	4603      	mov	r3, r0
 800b068:	6039      	str	r1, [r7, #0]
 800b06a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	2212      	movs	r2, #18
 800b070:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b072:	4b03      	ldr	r3, [pc, #12]	; (800b080 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b074:	4618      	mov	r0, r3
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	bc80      	pop	{r7}
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	20000148 	.word	0x20000148

0800b084 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	4603      	mov	r3, r0
 800b08c:	6039      	str	r1, [r7, #0]
 800b08e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	2204      	movs	r2, #4
 800b094:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b096:	4b03      	ldr	r3, [pc, #12]	; (800b0a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b098:	4618      	mov	r0, r3
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bc80      	pop	{r7}
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	2000015c 	.word	0x2000015c

0800b0a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	6039      	str	r1, [r7, #0]
 800b0b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0b4:	79fb      	ldrb	r3, [r7, #7]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d105      	bne.n	800b0c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0ba:	683a      	ldr	r2, [r7, #0]
 800b0bc:	4907      	ldr	r1, [pc, #28]	; (800b0dc <USBD_FS_ProductStrDescriptor+0x34>)
 800b0be:	4808      	ldr	r0, [pc, #32]	; (800b0e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b0c0:	f7ff fdf0 	bl	800aca4 <USBD_GetString>
 800b0c4:	e004      	b.n	800b0d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0c6:	683a      	ldr	r2, [r7, #0]
 800b0c8:	4904      	ldr	r1, [pc, #16]	; (800b0dc <USBD_FS_ProductStrDescriptor+0x34>)
 800b0ca:	4805      	ldr	r0, [pc, #20]	; (800b0e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b0cc:	f7ff fdea 	bl	800aca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0d0:	4b02      	ldr	r3, [pc, #8]	; (800b0dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	20000dc8 	.word	0x20000dc8
 800b0e0:	0800c5fc 	.word	0x0800c5fc

0800b0e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	6039      	str	r1, [r7, #0]
 800b0ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	4904      	ldr	r1, [pc, #16]	; (800b104 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b0f4:	4804      	ldr	r0, [pc, #16]	; (800b108 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b0f6:	f7ff fdd5 	bl	800aca4 <USBD_GetString>
  return USBD_StrDesc;
 800b0fa:	4b02      	ldr	r3, [pc, #8]	; (800b104 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	20000dc8 	.word	0x20000dc8
 800b108:	0800c614 	.word	0x0800c614

0800b10c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	4603      	mov	r3, r0
 800b114:	6039      	str	r1, [r7, #0]
 800b116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	221a      	movs	r2, #26
 800b11c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b11e:	f000 f843 	bl	800b1a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b122:	4b02      	ldr	r3, [pc, #8]	; (800b12c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20000160 	.word	0x20000160

0800b130 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	4603      	mov	r3, r0
 800b138:	6039      	str	r1, [r7, #0]
 800b13a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d105      	bne.n	800b14e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	4907      	ldr	r1, [pc, #28]	; (800b164 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b146:	4808      	ldr	r0, [pc, #32]	; (800b168 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b148:	f7ff fdac 	bl	800aca4 <USBD_GetString>
 800b14c:	e004      	b.n	800b158 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	4904      	ldr	r1, [pc, #16]	; (800b164 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b152:	4805      	ldr	r0, [pc, #20]	; (800b168 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b154:	f7ff fda6 	bl	800aca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b158:	4b02      	ldr	r3, [pc, #8]	; (800b164 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	20000dc8 	.word	0x20000dc8
 800b168:	0800c628 	.word	0x0800c628

0800b16c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	4603      	mov	r3, r0
 800b174:	6039      	str	r1, [r7, #0]
 800b176:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b178:	79fb      	ldrb	r3, [r7, #7]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d105      	bne.n	800b18a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b17e:	683a      	ldr	r2, [r7, #0]
 800b180:	4907      	ldr	r1, [pc, #28]	; (800b1a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b182:	4808      	ldr	r0, [pc, #32]	; (800b1a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b184:	f7ff fd8e 	bl	800aca4 <USBD_GetString>
 800b188:	e004      	b.n	800b194 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	4904      	ldr	r1, [pc, #16]	; (800b1a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b18e:	4805      	ldr	r0, [pc, #20]	; (800b1a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b190:	f7ff fd88 	bl	800aca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b194:	4b02      	ldr	r3, [pc, #8]	; (800b1a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b196:	4618      	mov	r0, r3
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	20000dc8 	.word	0x20000dc8
 800b1a4:	0800c634 	.word	0x0800c634

0800b1a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1ae:	4b0f      	ldr	r3, [pc, #60]	; (800b1ec <Get_SerialNum+0x44>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b1b4:	4b0e      	ldr	r3, [pc, #56]	; (800b1f0 <Get_SerialNum+0x48>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b1ba:	4b0e      	ldr	r3, [pc, #56]	; (800b1f4 <Get_SerialNum+0x4c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d009      	beq.n	800b1e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b1ce:	2208      	movs	r2, #8
 800b1d0:	4909      	ldr	r1, [pc, #36]	; (800b1f8 <Get_SerialNum+0x50>)
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f000 f814 	bl	800b200 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b1d8:	2204      	movs	r2, #4
 800b1da:	4908      	ldr	r1, [pc, #32]	; (800b1fc <Get_SerialNum+0x54>)
 800b1dc:	68b8      	ldr	r0, [r7, #8]
 800b1de:	f000 f80f 	bl	800b200 <IntToUnicode>
  }
}
 800b1e2:	bf00      	nop
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	1ffff7e8 	.word	0x1ffff7e8
 800b1f0:	1ffff7ec 	.word	0x1ffff7ec
 800b1f4:	1ffff7f0 	.word	0x1ffff7f0
 800b1f8:	20000162 	.word	0x20000162
 800b1fc:	20000172 	.word	0x20000172

0800b200 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b200:	b480      	push	{r7}
 800b202:	b087      	sub	sp, #28
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	4613      	mov	r3, r2
 800b20c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b212:	2300      	movs	r3, #0
 800b214:	75fb      	strb	r3, [r7, #23]
 800b216:	e027      	b.n	800b268 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	0f1b      	lsrs	r3, r3, #28
 800b21c:	2b09      	cmp	r3, #9
 800b21e:	d80b      	bhi.n	800b238 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	0f1b      	lsrs	r3, r3, #28
 800b224:	b2da      	uxtb	r2, r3
 800b226:	7dfb      	ldrb	r3, [r7, #23]
 800b228:	005b      	lsls	r3, r3, #1
 800b22a:	4619      	mov	r1, r3
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	440b      	add	r3, r1
 800b230:	3230      	adds	r2, #48	; 0x30
 800b232:	b2d2      	uxtb	r2, r2
 800b234:	701a      	strb	r2, [r3, #0]
 800b236:	e00a      	b.n	800b24e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	0f1b      	lsrs	r3, r3, #28
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	7dfb      	ldrb	r3, [r7, #23]
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	4619      	mov	r1, r3
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	440b      	add	r3, r1
 800b248:	3237      	adds	r2, #55	; 0x37
 800b24a:	b2d2      	uxtb	r2, r2
 800b24c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	011b      	lsls	r3, r3, #4
 800b252:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b254:	7dfb      	ldrb	r3, [r7, #23]
 800b256:	005b      	lsls	r3, r3, #1
 800b258:	3301      	adds	r3, #1
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	4413      	add	r3, r2
 800b25e:	2200      	movs	r2, #0
 800b260:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b262:	7dfb      	ldrb	r3, [r7, #23]
 800b264:	3301      	adds	r3, #1
 800b266:	75fb      	strb	r3, [r7, #23]
 800b268:	7dfa      	ldrb	r2, [r7, #23]
 800b26a:	79fb      	ldrb	r3, [r7, #7]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d3d3      	bcc.n	800b218 <IntToUnicode+0x18>
  }
}
 800b270:	bf00      	nop
 800b272:	bf00      	nop
 800b274:	371c      	adds	r7, #28
 800b276:	46bd      	mov	sp, r7
 800b278:	bc80      	pop	{r7}
 800b27a:	4770      	bx	lr

0800b27c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a0d      	ldr	r2, [pc, #52]	; (800b2c0 <HAL_PCD_MspInit+0x44>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d113      	bne.n	800b2b6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b28e:	4b0d      	ldr	r3, [pc, #52]	; (800b2c4 <HAL_PCD_MspInit+0x48>)
 800b290:	69db      	ldr	r3, [r3, #28]
 800b292:	4a0c      	ldr	r2, [pc, #48]	; (800b2c4 <HAL_PCD_MspInit+0x48>)
 800b294:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b298:	61d3      	str	r3, [r2, #28]
 800b29a:	4b0a      	ldr	r3, [pc, #40]	; (800b2c4 <HAL_PCD_MspInit+0x48>)
 800b29c:	69db      	ldr	r3, [r3, #28]
 800b29e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2a2:	60fb      	str	r3, [r7, #12]
 800b2a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	2014      	movs	r0, #20
 800b2ac:	f7f6 f977 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b2b0:	2014      	movs	r0, #20
 800b2b2:	f7f6 f990 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b2b6:	bf00      	nop
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	40005c00 	.word	0x40005c00
 800b2c4:	40021000 	.word	0x40021000

0800b2c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b2dc:	4619      	mov	r1, r3
 800b2de:	4610      	mov	r0, r2
 800b2e0:	f7fe fdaf 	bl	8009e42 <USBD_LL_SetupStage>
}
 800b2e4:	bf00      	nop
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b2fe:	78fa      	ldrb	r2, [r7, #3]
 800b300:	6879      	ldr	r1, [r7, #4]
 800b302:	4613      	mov	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4413      	add	r3, r2
 800b308:	00db      	lsls	r3, r3, #3
 800b30a:	440b      	add	r3, r1
 800b30c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	78fb      	ldrb	r3, [r7, #3]
 800b314:	4619      	mov	r1, r3
 800b316:	f7fe fde1 	bl	8009edc <USBD_LL_DataOutStage>
}
 800b31a:	bf00      	nop
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b082      	sub	sp, #8
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	460b      	mov	r3, r1
 800b32c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b334:	78fa      	ldrb	r2, [r7, #3]
 800b336:	6879      	ldr	r1, [r7, #4]
 800b338:	4613      	mov	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	00db      	lsls	r3, r3, #3
 800b340:	440b      	add	r3, r1
 800b342:	333c      	adds	r3, #60	; 0x3c
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	78fb      	ldrb	r3, [r7, #3]
 800b348:	4619      	mov	r1, r3
 800b34a:	f7fe fe38 	bl	8009fbe <USBD_LL_DataInStage>
}
 800b34e:	bf00      	nop
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b082      	sub	sp, #8
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b364:	4618      	mov	r0, r3
 800b366:	f7fe ff48 	bl	800a1fa <USBD_LL_SOF>
}
 800b36a:	bf00      	nop
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b37a:	2301      	movs	r3, #1
 800b37c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	2b02      	cmp	r3, #2
 800b384:	d001      	beq.n	800b38a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b386:	f7f5 fe57 	bl	8001038 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b390:	7bfa      	ldrb	r2, [r7, #15]
 800b392:	4611      	mov	r1, r2
 800b394:	4618      	mov	r0, r3
 800b396:	f7fe fef8 	bl	800a18a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fe feb1 	bl	800a108 <USBD_LL_Reset>
}
 800b3a6:	bf00      	nop
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
	...

0800b3b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fe fef2 	bl	800a1a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d005      	beq.n	800b3d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3cc:	4b04      	ldr	r3, [pc, #16]	; (800b3e0 <HAL_PCD_SuspendCallback+0x30>)
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	4a03      	ldr	r2, [pc, #12]	; (800b3e0 <HAL_PCD_SuspendCallback+0x30>)
 800b3d2:	f043 0306 	orr.w	r3, r3, #6
 800b3d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b3d8:	bf00      	nop
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	e000ed00 	.word	0xe000ed00

0800b3e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fe feec 	bl	800a1d0 <USBD_LL_Resume>
}
 800b3f8:	bf00      	nop
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b408:	4a28      	ldr	r2, [pc, #160]	; (800b4ac <USBD_LL_Init+0xac>)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a26      	ldr	r2, [pc, #152]	; (800b4ac <USBD_LL_Init+0xac>)
 800b414:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b418:	4b24      	ldr	r3, [pc, #144]	; (800b4ac <USBD_LL_Init+0xac>)
 800b41a:	4a25      	ldr	r2, [pc, #148]	; (800b4b0 <USBD_LL_Init+0xb0>)
 800b41c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b41e:	4b23      	ldr	r3, [pc, #140]	; (800b4ac <USBD_LL_Init+0xac>)
 800b420:	2208      	movs	r2, #8
 800b422:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b424:	4b21      	ldr	r3, [pc, #132]	; (800b4ac <USBD_LL_Init+0xac>)
 800b426:	2202      	movs	r2, #2
 800b428:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b42a:	4b20      	ldr	r3, [pc, #128]	; (800b4ac <USBD_LL_Init+0xac>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b430:	4b1e      	ldr	r3, [pc, #120]	; (800b4ac <USBD_LL_Init+0xac>)
 800b432:	2200      	movs	r2, #0
 800b434:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b436:	4b1d      	ldr	r3, [pc, #116]	; (800b4ac <USBD_LL_Init+0xac>)
 800b438:	2200      	movs	r2, #0
 800b43a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b43c:	481b      	ldr	r0, [pc, #108]	; (800b4ac <USBD_LL_Init+0xac>)
 800b43e:	f7f8 ffe9 	bl	8004414 <HAL_PCD_Init>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b448:	f7f5 fdf6 	bl	8001038 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b452:	2318      	movs	r3, #24
 800b454:	2200      	movs	r2, #0
 800b456:	2100      	movs	r1, #0
 800b458:	f7fa fc5d 	bl	8005d16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b462:	2358      	movs	r3, #88	; 0x58
 800b464:	2200      	movs	r2, #0
 800b466:	2180      	movs	r1, #128	; 0x80
 800b468:	f7fa fc55 	bl	8005d16 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b472:	23c0      	movs	r3, #192	; 0xc0
 800b474:	2200      	movs	r2, #0
 800b476:	2181      	movs	r1, #129	; 0x81
 800b478:	f7fa fc4d 	bl	8005d16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b482:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b486:	2200      	movs	r2, #0
 800b488:	2101      	movs	r1, #1
 800b48a:	f7fa fc44 	bl	8005d16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b494:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b498:	2200      	movs	r2, #0
 800b49a:	2182      	movs	r1, #130	; 0x82
 800b49c:	f7fa fc3b 	bl	8005d16 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20000fc8 	.word	0x20000fc8
 800b4b0:	40005c00 	.word	0x40005c00

0800b4b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7f9 f8ad 	bl	800462a <HAL_PCD_Start>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f000 f94e 	bl	800b778 <USBD_Get_USB_Status>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	4608      	mov	r0, r1
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	70fb      	strb	r3, [r7, #3]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	70bb      	strb	r3, [r7, #2]
 800b500:	4613      	mov	r3, r2
 800b502:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b504:	2300      	movs	r3, #0
 800b506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b508:	2300      	movs	r3, #0
 800b50a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b512:	78bb      	ldrb	r3, [r7, #2]
 800b514:	883a      	ldrh	r2, [r7, #0]
 800b516:	78f9      	ldrb	r1, [r7, #3]
 800b518:	f7f9 fa25 	bl	8004966 <HAL_PCD_EP_Open>
 800b51c:	4603      	mov	r3, r0
 800b51e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b520:	7bfb      	ldrb	r3, [r7, #15]
 800b522:	4618      	mov	r0, r3
 800b524:	f000 f928 	bl	800b778 <USBD_Get_USB_Status>
 800b528:	4603      	mov	r3, r0
 800b52a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b52c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b084      	sub	sp, #16
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	460b      	mov	r3, r1
 800b540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b542:	2300      	movs	r3, #0
 800b544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b550:	78fa      	ldrb	r2, [r7, #3]
 800b552:	4611      	mov	r1, r2
 800b554:	4618      	mov	r0, r3
 800b556:	f7f9 fa6c 	bl	8004a32 <HAL_PCD_EP_Close>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	4618      	mov	r0, r3
 800b562:	f000 f909 	bl	800b778 <USBD_Get_USB_Status>
 800b566:	4603      	mov	r3, r0
 800b568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b56a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b584:	2300      	movs	r3, #0
 800b586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b58e:	78fa      	ldrb	r2, [r7, #3]
 800b590:	4611      	mov	r1, r2
 800b592:	4618      	mov	r0, r3
 800b594:	f7f9 fb2c 	bl	8004bf0 <HAL_PCD_EP_SetStall>
 800b598:	4603      	mov	r3, r0
 800b59a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 f8ea 	bl	800b778 <USBD_Get_USB_Status>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b084      	sub	sp, #16
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5cc:	78fa      	ldrb	r2, [r7, #3]
 800b5ce:	4611      	mov	r1, r2
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7f9 fb6d 	bl	8004cb0 <HAL_PCD_EP_ClrStall>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5da:	7bfb      	ldrb	r3, [r7, #15]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f000 f8cb 	bl	800b778 <USBD_Get_USB_Status>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b602:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	da0c      	bge.n	800b626 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b60c:	78fb      	ldrb	r3, [r7, #3]
 800b60e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b612:	68f9      	ldr	r1, [r7, #12]
 800b614:	1c5a      	adds	r2, r3, #1
 800b616:	4613      	mov	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	00db      	lsls	r3, r3, #3
 800b61e:	440b      	add	r3, r1
 800b620:	3302      	adds	r3, #2
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	e00b      	b.n	800b63e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b626:	78fb      	ldrb	r3, [r7, #3]
 800b628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b62c:	68f9      	ldr	r1, [r7, #12]
 800b62e:	4613      	mov	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	4413      	add	r3, r2
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	440b      	add	r3, r1
 800b638:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b63c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	bc80      	pop	{r7}
 800b646:	4770      	bx	lr

0800b648 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	460b      	mov	r3, r1
 800b652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b654:	2300      	movs	r3, #0
 800b656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b658:	2300      	movs	r3, #0
 800b65a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b662:	78fa      	ldrb	r2, [r7, #3]
 800b664:	4611      	mov	r1, r2
 800b666:	4618      	mov	r0, r3
 800b668:	f7f9 f958 	bl	800491c <HAL_PCD_SetAddress>
 800b66c:	4603      	mov	r3, r0
 800b66e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	4618      	mov	r0, r3
 800b674:	f000 f880 	bl	800b778 <USBD_Get_USB_Status>
 800b678:	4603      	mov	r3, r0
 800b67a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b67c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b086      	sub	sp, #24
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	60f8      	str	r0, [r7, #12]
 800b68e:	607a      	str	r2, [r7, #4]
 800b690:	461a      	mov	r2, r3
 800b692:	460b      	mov	r3, r1
 800b694:	72fb      	strb	r3, [r7, #11]
 800b696:	4613      	mov	r3, r2
 800b698:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b69a:	2300      	movs	r3, #0
 800b69c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6a8:	893b      	ldrh	r3, [r7, #8]
 800b6aa:	7af9      	ldrb	r1, [r7, #11]
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	f7f9 fa5c 	bl	8004b6a <HAL_PCD_EP_Transmit>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6b6:	7dfb      	ldrb	r3, [r7, #23]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f000 f85d 	bl	800b778 <USBD_Get_USB_Status>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3718      	adds	r7, #24
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	607a      	str	r2, [r7, #4]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	460b      	mov	r3, r1
 800b6da:	72fb      	strb	r3, [r7, #11]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6ee:	893b      	ldrh	r3, [r7, #8]
 800b6f0:	7af9      	ldrb	r1, [r7, #11]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	f7f9 f9e5 	bl	8004ac2 <HAL_PCD_EP_Receive>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 f83a 	bl	800b778 <USBD_Get_USB_Status>
 800b704:	4603      	mov	r3, r0
 800b706:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b708:	7dbb      	ldrb	r3, [r7, #22]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3718      	adds	r7, #24
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	460b      	mov	r3, r1
 800b71c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b724:	78fa      	ldrb	r2, [r7, #3]
 800b726:	4611      	mov	r1, r2
 800b728:	4618      	mov	r0, r3
 800b72a:	f7f9 fa07 	bl	8004b3c <HAL_PCD_EP_GetRxCount>
 800b72e:	4603      	mov	r3, r0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b740:	4b02      	ldr	r3, [pc, #8]	; (800b74c <USBD_static_malloc+0x14>)
}
 800b742:	4618      	mov	r0, r3
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	bc80      	pop	{r7}
 800b74a:	4770      	bx	lr
 800b74c:	200012b4 	.word	0x200012b4

0800b750 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]

}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bc80      	pop	{r7}
 800b760:	4770      	bx	lr

0800b762 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b762:	b480      	push	{r7}
 800b764:	b083      	sub	sp, #12
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	460b      	mov	r3, r1
 800b76c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b76e:	bf00      	nop
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	bc80      	pop	{r7}
 800b776:	4770      	bx	lr

0800b778 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b786:	79fb      	ldrb	r3, [r7, #7]
 800b788:	2b03      	cmp	r3, #3
 800b78a:	d817      	bhi.n	800b7bc <USBD_Get_USB_Status+0x44>
 800b78c:	a201      	add	r2, pc, #4	; (adr r2, 800b794 <USBD_Get_USB_Status+0x1c>)
 800b78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b792:	bf00      	nop
 800b794:	0800b7a5 	.word	0x0800b7a5
 800b798:	0800b7ab 	.word	0x0800b7ab
 800b79c:	0800b7b1 	.word	0x0800b7b1
 800b7a0:	0800b7b7 	.word	0x0800b7b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7a8:	e00b      	b.n	800b7c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b7aa:	2302      	movs	r3, #2
 800b7ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b7ae:	e008      	b.n	800b7c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b7b4:	e005      	b.n	800b7c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b7b6:	2302      	movs	r3, #2
 800b7b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b7ba:	e002      	b.n	800b7c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b7bc:	2302      	movs	r3, #2
 800b7be:	73fb      	strb	r3, [r7, #15]
    break;
 800b7c0:	bf00      	nop
  }
  return usb_status;
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bc80      	pop	{r7}
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop

0800b7d0 <ob1203_I2C_Write>:
{
	HAL_GPIO_WritePin(ob1203_RST_GPIO_PORT, ob1203_RST_PIN, RESET);
}

HAL_StatusTypeDef ob1203_I2C_Write(uint8_t * data, uint8_t count)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af02      	add	r7, sp, #8
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Master_Transmit(&cur_i2c, ob1203_address << 1, data, count, 10);
 800b7dc:	78fb      	ldrb	r3, [r7, #3]
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	220a      	movs	r2, #10
 800b7e2:	9200      	str	r2, [sp, #0]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	21a6      	movs	r1, #166	; 0xa6
 800b7e8:	4803      	ldr	r0, [pc, #12]	; (800b7f8 <ob1203_I2C_Write+0x28>)
 800b7ea:	f7f6 fa93 	bl	8001d14 <HAL_I2C_Master_Transmit>
 800b7ee:	4603      	mov	r3, r0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	200002a4 	.word	0x200002a4

0800b7fc <ob1203_I2C_Read>:

HAL_StatusTypeDef ob1203_I2C_Read(uint8_t * reg, uint8_t * buffer, uint8_t cmd_size, uint8_t count)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af04      	add	r7, sp, #16
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	4611      	mov	r1, r2
 800b808:	461a      	mov	r2, r3
 800b80a:	460b      	mov	r3, r1
 800b80c:	71fb      	strb	r3, [r7, #7]
 800b80e:	4613      	mov	r3, r2
 800b810:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Read(&cur_i2c, ob1203_address << 1, *reg, cmd_size, buffer, count, 10);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	b29a      	uxth	r2, r3
 800b818:	79fb      	ldrb	r3, [r7, #7]
 800b81a:	b299      	uxth	r1, r3
 800b81c:	79bb      	ldrb	r3, [r7, #6]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	200a      	movs	r0, #10
 800b822:	9002      	str	r0, [sp, #8]
 800b824:	9301      	str	r3, [sp, #4]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	460b      	mov	r3, r1
 800b82c:	21a6      	movs	r1, #166	; 0xa6
 800b82e:	4804      	ldr	r0, [pc, #16]	; (800b840 <ob1203_I2C_Read+0x44>)
 800b830:	f7f6 fb6e 	bl	8001f10 <HAL_I2C_Mem_Read>
 800b834:	4603      	mov	r3, r0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	200002a4 	.word	0x200002a4

0800b844 <ob1203_Delay_ms>:

void ob1203_Delay_ms(uint32_t ms)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7f5 fdab 	bl	80013a8 <HAL_Delay>
}
 800b852:	bf00      	nop
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
	...

0800b85c <ob1203_send_results>:

void ob1203_send_results(uint32_t ppg)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b0a4      	sub	sp, #144	; 0x90
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
	char send_buf[128];
	char buf_length;
	char channel_num;
	sprintf(send_buf, "%ld\r\n", ppg);
 800b864:	f107 0310 	add.w	r3, r7, #16
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	4915      	ldr	r1, [pc, #84]	; (800b8c0 <ob1203_send_results+0x64>)
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 fb31 	bl	800bed4 <siprintf>
	buf_length = strlen(send_buf);
 800b872:	f107 0310 	add.w	r3, r7, #16
 800b876:	4618      	mov	r0, r3
 800b878:	f7f4 fc6a 	bl	8000150 <strlen>
 800b87c:	4603      	mov	r3, r0
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	73fb      	strb	r3, [r7, #15]
	channel_num = 1;
 800b882:	2301      	movs	r3, #1
 800b884:	73bb      	strb	r3, [r7, #14]
	CDC_Transmit_FS((unsigned char*) send_buf, strlen(send_buf));
 800b886:	f107 0310 	add.w	r3, r7, #16
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7f4 fc60 	bl	8000150 <strlen>
 800b890:	4603      	mov	r3, r0
 800b892:	b29a      	uxth	r2, r3
 800b894:	f107 0310 	add.w	r3, r7, #16
 800b898:	4611      	mov	r1, r2
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7ff fbba 	bl	800b014 <CDC_Transmit_FS>
	CDC_Transmit_FS((unsigned char*) &buf_length, sizeof(buf_length));
 800b8a0:	f107 030f 	add.w	r3, r7, #15
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff fbb4 	bl	800b014 <CDC_Transmit_FS>
	CDC_Transmit_FS((unsigned char*) &channel_num, sizeof(channel_num));
 800b8ac:	f107 030e 	add.w	r3, r7, #14
 800b8b0:	2101      	movs	r1, #1
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff fbae 	bl	800b014 <CDC_Transmit_FS>
}
 800b8b8:	bf00      	nop
 800b8ba:	3790      	adds	r7, #144	; 0x90
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	0800c644 	.word	0x0800c644

0800b8c4 <ob1203_send_preambula>:
	sprintf(send_buf, "No result\n");
	CDC_Transmit_FS((unsigned char*) send_buf, strlen(send_buf));
}

void ob1203_send_preambula()
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
	char preambula[3];
	preambula[0] = 0xaa;
 800b8ca:	23aa      	movs	r3, #170	; 0xaa
 800b8cc:	713b      	strb	r3, [r7, #4]
	preambula[1] = 0x55;
 800b8ce:	2355      	movs	r3, #85	; 0x55
 800b8d0:	717b      	strb	r3, [r7, #5]
	preambula[2] = 0xaa;
 800b8d2:	23aa      	movs	r3, #170	; 0xaa
 800b8d4:	71bb      	strb	r3, [r7, #6]
	preambula[3] = 0x55;
 800b8d6:	2355      	movs	r3, #85	; 0x55
 800b8d8:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((unsigned char*) &preambula, sizeof(preambula));
 800b8da:	1d3b      	adds	r3, r7, #4
 800b8dc:	2103      	movs	r1, #3
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7ff fb98 	bl	800b014 <CDC_Transmit_FS>
}
 800b8e4:	bf00      	nop
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <heartrate11_default_cfg>:
    return I2C_MASTER_SUCCESS;
}
#endif

err_t heartrate11_default_cfg(heartrate11_t *ctx)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
    err_t error_flag = HEARTRATE11_OK;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	73fb      	strb	r3, [r7, #15]
    error_flag |= heartrate11_reset_device(ctx);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f8e7 	bl	800bacc <heartrate11_reset_device>
 800b8fe:	4603      	mov	r3, r0
 800b900:	461a      	mov	r2, r3
 800b902:	7bfb      	ldrb	r3, [r7, #15]
 800b904:	4313      	orrs	r3, r2
 800b906:	73fb      	strb	r3, [r7, #15]
#if defined(__MIKROC_PRO_FOR_ARM__)
    Delay_100ms();
#endif
#if defined(HAL_STM32F103)
    ob1203_Delay_ms(100);
 800b908:	2064      	movs	r0, #100	; 0x64
 800b90a:	f7ff ff9b 	bl	800b844 <ob1203_Delay_ms>
#endif
    error_flag |= heartrate11_write_register(ctx, HEARTRATE11_REG_MAIN_CTRL_1, HEARTRATE11_PS_SAI_OFF |
 800b90e:	2203      	movs	r2, #3
 800b910:	2116      	movs	r1, #22
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f8c7 	bl	800baa6 <heartrate11_write_register>
 800b918:	4603      	mov	r3, r0
 800b91a:	461a      	mov	r2, r3
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
 800b91e:	4313      	orrs	r3, r2
 800b920:	73fb      	strb	r3, [r7, #15]
                                                                                 HEARTRATE11_HR_MODE | 
                                                                                 HEARTRATE11_PPG_PS_ON);
    error_flag |= heartrate11_write_register(ctx, HEARTRATE11_REG_INT_CFG_1, HEARTRATE11_PPG_INT_ON);
 800b922:	2210      	movs	r2, #16
 800b924:	212c      	movs	r1, #44	; 0x2c
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f8bd 	bl	800baa6 <heartrate11_write_register>
 800b92c:	4603      	mov	r3, r0
 800b92e:	461a      	mov	r2, r3
 800b930:	7bfb      	ldrb	r3, [r7, #15]
 800b932:	4313      	orrs	r3, r2
 800b934:	73fb      	strb	r3, [r7, #15]
    error_flag |= heartrate11_set_led_current(ctx, HEARTRATE11_IR_LED, HEARTRATE11_IR_LED_DEFAULT_CURRENT);
 800b936:	4a16      	ldr	r2, [pc, #88]	; (800b990 <heartrate11_default_cfg+0xa4>)
 800b938:	2101      	movs	r1, #1
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f8d4 	bl	800bae8 <heartrate11_set_led_current>
 800b940:	4603      	mov	r3, r0
 800b942:	461a      	mov	r2, r3
 800b944:	7bfb      	ldrb	r3, [r7, #15]
 800b946:	4313      	orrs	r3, r2
 800b948:	73fb      	strb	r3, [r7, #15]
    error_flag |= heartrate11_write_register(ctx, HEARTRATE11_REG_PPG_PS_GAIN, HEARTRATE11_PPG_PS_GAIN_1 |
 800b94a:	2209      	movs	r2, #9
 800b94c:	212e      	movs	r1, #46	; 0x2e
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 f8a9 	bl	800baa6 <heartrate11_write_register>
 800b954:	4603      	mov	r3, r0
 800b956:	461a      	mov	r2, r3
 800b958:	7bfb      	ldrb	r3, [r7, #15]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	73fb      	strb	r3, [r7, #15]
                                                                                 HEARTRATE11_PPG_PS_GAIN_RESERVED);
    error_flag |= heartrate11_write_register(ctx, HEARTRATE11_REG_PPG_AVG, HEARTRATE11_PPG_AVG_32 |
 800b95e:	225a      	movs	r2, #90	; 0x5a
 800b960:	2135      	movs	r1, #53	; 0x35
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f89f 	bl	800baa6 <heartrate11_write_register>
 800b968:	4603      	mov	r3, r0
 800b96a:	461a      	mov	r2, r3
 800b96c:	7bfb      	ldrb	r3, [r7, #15]
 800b96e:	4313      	orrs	r3, r2
 800b970:	73fb      	strb	r3, [r7, #15]
                                                                             HEARTRATE11_PPG_AVG_RESERVED);
    error_flag |= heartrate11_write_register(ctx, HEARTRATE11_REG_PPG_PWIDTH_PERIOD, HEARTRATE11_PPG_PWIDTH_247US |
 800b972:	2242      	movs	r2, #66	; 0x42
 800b974:	2136      	movs	r1, #54	; 0x36
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f895 	bl	800baa6 <heartrate11_write_register>
 800b97c:	4603      	mov	r3, r0
 800b97e:	461a      	mov	r2, r3
 800b980:	7bfb      	ldrb	r3, [r7, #15]
 800b982:	4313      	orrs	r3, r2
 800b984:	73fb      	strb	r3, [r7, #15]
                                                                                       HEARTRATE11_PPG_RATE_1MS);
    return error_flag;
 800b986:	7bfb      	ldrb	r3, [r7, #15]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	42480000 	.word	0x42480000

0800b994 <heartrate11_generic_write>:

err_t heartrate11_generic_write(heartrate11_t *ctx, uint8_t reg, uint8_t *data_in, uint8_t len)
{
 800b994:	b590      	push	{r4, r7, lr}
 800b996:	b0c7      	sub	sp, #284	; 0x11c
 800b998:	af00      	add	r7, sp, #0
 800b99a:	f507 748c 	add.w	r4, r7, #280	; 0x118
 800b99e:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800b9a2:	6020      	str	r0, [r4, #0]
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800b9aa:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800b9ae:	600a      	str	r2, [r1, #0]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b9b6:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	701a      	strb	r2, [r3, #0]
 800b9be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b9c2:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800b9c6:	460a      	mov	r2, r1
 800b9c8:	701a      	strb	r2, [r3, #0]
    uint8_t data_buf[256] = { 0 };
 800b9ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b9ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	22fc      	movs	r2, #252	; 0xfc
 800b9da:	2100      	movs	r1, #0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 f985 	bl	800bcec <memset>
    data_buf[0] = reg;
 800b9e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b9e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9ea:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800b9ee:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 800b9f2:	7812      	ldrb	r2, [r2, #0]
 800b9f4:	701a      	strb	r2, [r3, #0]
    for(uint8_t cnt = 0; cnt < len; cnt++)
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800b9fc:	e015      	b.n	800ba2a <heartrate11_generic_write+0x96>
    {
        data_buf[cnt + 1] = data_in[cnt];
 800b9fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba02:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800ba06:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800ba0a:	6812      	ldr	r2, [r2, #0]
 800ba0c:	441a      	add	r2, r3
 800ba0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba12:	3301      	adds	r3, #1
 800ba14:	7811      	ldrb	r1, [r2, #0]
 800ba16:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800ba1a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800ba1e:	54d1      	strb	r1, [r2, r3]
    for(uint8_t cnt = 0; cnt < len; cnt++)
 800ba20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba24:	3301      	adds	r3, #1
 800ba26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800ba2a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ba2e:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800ba32:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d3e0      	bcc.n	800b9fe <heartrate11_generic_write+0x6a>
    }
#if defined(__MIKROC_PRO_FOR_ARM__)
    return i2c_master_write(&ctx->i2c, data_buf, len + 1);
#endif
#if defined(HAL_STM32F103)
    if(HEARTRATE11_OK == ob1203_I2C_Write(data_buf, len + 1))
 800ba3c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ba40:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	3301      	adds	r3, #1
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	f107 0314 	add.w	r3, r7, #20
 800ba4e:	4611      	mov	r1, r2
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff febd 	bl	800b7d0 <ob1203_I2C_Write>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <heartrate11_generic_write+0xcc>
    	return HEARTRATE11_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	e000      	b.n	800ba62 <heartrate11_generic_write+0xce>
#endif
    return HEARTRATE11_ERROR;
 800ba60:	23ff      	movs	r3, #255	; 0xff
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd90      	pop	{r4, r7, pc}

0800ba6c <heartrate11_generic_read>:

err_t heartrate11_generic_read(heartrate11_t *ctx, uint8_t reg, uint8_t *data_out, uint8_t len)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	607a      	str	r2, [r7, #4]
 800ba76:	461a      	mov	r2, r3
 800ba78:	460b      	mov	r3, r1
 800ba7a:	72fb      	strb	r3, [r7, #11]
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	72bb      	strb	r3, [r7, #10]
#if defined(__MIKROC_PRO_FOR_ARM__)
    return i2c_master_write_then_read(&ctx->i2c, &reg, 1, data_out, len);
#endif
#if defined(HAL_STM32F103)
    if(HEARTRATE11_OK == ob1203_I2C_Read(&reg, data_out, 1, len + 1))
 800ba80:	7abb      	ldrb	r3, [r7, #10]
 800ba82:	3301      	adds	r3, #1
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	f107 000b 	add.w	r0, r7, #11
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	6879      	ldr	r1, [r7, #4]
 800ba8e:	f7ff feb5 	bl	800b7fc <ob1203_I2C_Read>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <heartrate11_generic_read+0x30>
    	return HEARTRATE11_OK;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e000      	b.n	800ba9e <heartrate11_generic_read+0x32>
#endif
    return HEARTRATE11_ERROR;
 800ba9c:	23ff      	movs	r3, #255	; 0xff
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <heartrate11_write_register>:

err_t heartrate11_write_register(heartrate11_t *ctx, uint8_t reg, uint8_t data_in)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b082      	sub	sp, #8
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
 800baae:	460b      	mov	r3, r1
 800bab0:	70fb      	strb	r3, [r7, #3]
 800bab2:	4613      	mov	r3, r2
 800bab4:	70bb      	strb	r3, [r7, #2]
    return heartrate11_generic_write(ctx, reg, &data_in, 1);
 800bab6:	1cba      	adds	r2, r7, #2
 800bab8:	78f9      	ldrb	r1, [r7, #3]
 800baba:	2301      	movs	r3, #1
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f7ff ff69 	bl	800b994 <heartrate11_generic_write>
 800bac2:	4603      	mov	r3, r0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <heartrate11_reset_device>:
    return digital_in_read(&ctx->int_pin);
}
#endif

err_t heartrate11_reset_device(heartrate11_t *ctx)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
    return heartrate11_write_register(ctx, HEARTRATE11_REG_MAIN_CTRL_0, HEARTRATE11_SW_RESET);
 800bad4:	2280      	movs	r2, #128	; 0x80
 800bad6:	2115      	movs	r1, #21
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7ff ffe4 	bl	800baa6 <heartrate11_write_register>
 800bade:	4603      	mov	r3, r0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <heartrate11_set_led_current>:

err_t heartrate11_set_led_current(heartrate11_t *ctx, uint8_t led, float current)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	460b      	mov	r3, r1
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	72fb      	strb	r3, [r7, #11]
    if(((HEARTRATE11_RED_LED == led) &&(current > HEARTRATE11_RED_LED_MAX_CURRENT)) ||
 800baf6:	7afb      	ldrb	r3, [r7, #11]
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d106      	bne.n	800bb0a <heartrate11_set_led_current+0x22>
 800bafc:	4944      	ldr	r1, [pc, #272]	; (800bc10 <heartrate11_set_led_current+0x128>)
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7f4 ff88 	bl	8000a14 <__aeabi_fcmpgt>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d109      	bne.n	800bb1e <heartrate11_set_led_current+0x36>
 800bb0a:	7afb      	ldrb	r3, [r7, #11]
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d806      	bhi.n	800bb1e <heartrate11_set_led_current+0x36>
        (led > HEARTRATE11_RED_LED) || (current > HEARTRATE11_PS_IR_LED_MAX_CURRENT))
 800bb10:	4940      	ldr	r1, [pc, #256]	; (800bc14 <heartrate11_set_led_current+0x12c>)
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7f4 ff7e 	bl	8000a14 <__aeabi_fcmpgt>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <heartrate11_set_led_current+0x3a>
    {
        return HEARTRATE11_ERROR;
 800bb1e:	23ff      	movs	r3, #255	; 0xff
 800bb20:	e069      	b.n	800bbf6 <heartrate11_set_led_current+0x10e>
    }
    uint16_t raw_curr;
    uint8_t reg;
    if(HEARTRATE11_RED_LED == led)
 800bb22:	7afb      	ldrb	r3, [r7, #11]
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d128      	bne.n	800bb7a <heartrate11_set_led_current+0x92>
    {
        raw_curr =(uint16_t)((current / HEARTRATE11_RED_LED_MAX_CURRENT) * HEARTRATE11_RED_LED_CURRENT_RES +
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7f4 fc7d 	bl	8000428 <__aeabi_f2d>
 800bb2e:	f04f 0200 	mov.w	r2, #0
 800bb32:	4b39      	ldr	r3, [pc, #228]	; (800bc18 <heartrate11_set_led_current+0x130>)
 800bb34:	f7f4 fdfa 	bl	800072c <__aeabi_ddiv>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	4619      	mov	r1, r3
 800bb40:	a32f      	add	r3, pc, #188	; (adr r3, 800bc00 <heartrate11_set_led_current+0x118>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	f7f4 fcc7 	bl	80004d8 <__aeabi_dmul>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4610      	mov	r0, r2
 800bb50:	4619      	mov	r1, r3
 800bb52:	f04f 0200 	mov.w	r2, #0
 800bb56:	4b31      	ldr	r3, [pc, #196]	; (800bc1c <heartrate11_set_led_current+0x134>)
 800bb58:	f7f4 fb08 	bl	800016c <__adddf3>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	4610      	mov	r0, r2
 800bb62:	4619      	mov	r1, r3
 800bb64:	f7f4 feca 	bl	80008fc <__aeabi_d2uiz>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	82fb      	strh	r3, [r7, #22]
                                  HEARTRATE11_ROUND_TO_NEAREST_INT);
        raw_curr &= HEARTRATE11_RED_LED_CURRENT_RES;
 800bb6c:	8afb      	ldrh	r3, [r7, #22]
 800bb6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb72:	82fb      	strh	r3, [r7, #22]
        reg = HEARTRATE11_REG_PPG_RLED_CURR_0;
 800bb74:	2332      	movs	r3, #50	; 0x32
 800bb76:	757b      	strb	r3, [r7, #21]
 800bb78:	e02d      	b.n	800bbd6 <heartrate11_set_led_current+0xee>
    }
    else
    {
        raw_curr =(uint16_t)((current / HEARTRATE11_PS_IR_LED_MAX_CURRENT) * HEARTRATE11_PS_IR_LED_CURRENT_RES +
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7f4 fc54 	bl	8000428 <__aeabi_f2d>
 800bb80:	f04f 0200 	mov.w	r2, #0
 800bb84:	4b26      	ldr	r3, [pc, #152]	; (800bc20 <heartrate11_set_led_current+0x138>)
 800bb86:	f7f4 fdd1 	bl	800072c <__aeabi_ddiv>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	4610      	mov	r0, r2
 800bb90:	4619      	mov	r1, r3
 800bb92:	a31d      	add	r3, pc, #116	; (adr r3, 800bc08 <heartrate11_set_led_current+0x120>)
 800bb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb98:	f7f4 fc9e 	bl	80004d8 <__aeabi_dmul>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4610      	mov	r0, r2
 800bba2:	4619      	mov	r1, r3
 800bba4:	f04f 0200 	mov.w	r2, #0
 800bba8:	4b1c      	ldr	r3, [pc, #112]	; (800bc1c <heartrate11_set_led_current+0x134>)
 800bbaa:	f7f4 fadf 	bl	800016c <__adddf3>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	4610      	mov	r0, r2
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	f7f4 fea1 	bl	80008fc <__aeabi_d2uiz>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	82fb      	strh	r3, [r7, #22]
                                  HEARTRATE11_ROUND_TO_NEAREST_INT);
        raw_curr &= HEARTRATE11_PS_IR_LED_CURRENT_RES;
 800bbbe:	8afb      	ldrh	r3, [r7, #22]
 800bbc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbc4:	82fb      	strh	r3, [r7, #22]
        if(HEARTRATE11_PS_LED == led)
 800bbc6:	7afb      	ldrb	r3, [r7, #11]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d102      	bne.n	800bbd2 <heartrate11_set_led_current+0xea>
        {
            reg = HEARTRATE11_REG_PS_LED_CURR_0;
 800bbcc:	2317      	movs	r3, #23
 800bbce:	757b      	strb	r3, [r7, #21]
 800bbd0:	e001      	b.n	800bbd6 <heartrate11_set_led_current+0xee>
        }
        else
        {
            reg = HEARTRATE11_REG_PPG_IRLED_CURR_0;
 800bbd2:	2330      	movs	r3, #48	; 0x30
 800bbd4:	757b      	strb	r3, [r7, #21]
        }
    }
    uint8_t data_buf[2];
    data_buf[0] =(uint8_t)(raw_curr & 0xFF);
 800bbd6:	8afb      	ldrh	r3, [r7, #22]
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	743b      	strb	r3, [r7, #16]
    data_buf[1] =(uint8_t)((raw_curr >> 8) & 0xFF);
 800bbdc:	8afb      	ldrh	r3, [r7, #22]
 800bbde:	0a1b      	lsrs	r3, r3, #8
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	747b      	strb	r3, [r7, #17]
    return heartrate11_generic_write(ctx, reg, data_buf, 2);
 800bbe6:	f107 0210 	add.w	r2, r7, #16
 800bbea:	7d79      	ldrb	r1, [r7, #21]
 800bbec:	2302      	movs	r3, #2
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f7ff fed0 	bl	800b994 <heartrate11_generic_write>
 800bbf4:	4603      	mov	r3, r0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	00000000 	.word	0x00000000
 800bc04:	407ff000 	.word	0x407ff000
 800bc08:	00000000 	.word	0x00000000
 800bc0c:	408ff800 	.word	0x408ff800
 800bc10:	42fa0000 	.word	0x42fa0000
 800bc14:	437a0000 	.word	0x437a0000
 800bc18:	405f4000 	.word	0x405f4000
 800bc1c:	3fe00000 	.word	0x3fe00000
 800bc20:	406f4000 	.word	0x406f4000

0800bc24 <heartrate11_read_fifo>:
    *proximity =((uint16_t) data_buf[1] << 8) | data_buf[0];
    return error_flag;
}

err_t heartrate11_read_fifo(heartrate11_t *ctx, uint32_t *fifo_data)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
    uint8_t data_buf[3] = { 0 };
 800bc2e:	4b0e      	ldr	r3, [pc, #56]	; (800bc68 <heartrate11_read_fifo+0x44>)
 800bc30:	881b      	ldrh	r3, [r3, #0]
 800bc32:	81bb      	strh	r3, [r7, #12]
 800bc34:	2300      	movs	r3, #0
 800bc36:	73bb      	strb	r3, [r7, #14]
    err_t error_flag = heartrate11_generic_read(ctx, HEARTRATE11_REG_FIFO_DATA, data_buf, 3);
 800bc38:	f107 020c 	add.w	r2, r7, #12
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	213b      	movs	r1, #59	; 0x3b
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7ff ff13 	bl	800ba6c <heartrate11_generic_read>
 800bc46:	4603      	mov	r3, r0
 800bc48:	73fb      	strb	r3, [r7, #15]
    *fifo_data =((uint32_t) data_buf[2] << 16) | ((uint16_t) data_buf[1] << 8) | data_buf[0];
 800bc4a:	7bbb      	ldrb	r3, [r7, #14]
 800bc4c:	041b      	lsls	r3, r3, #16
 800bc4e:	7b7a      	ldrb	r2, [r7, #13]
 800bc50:	0212      	lsls	r2, r2, #8
 800bc52:	4313      	orrs	r3, r2
 800bc54:	7b3a      	ldrb	r2, [r7, #12]
 800bc56:	431a      	orrs	r2, r3
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	601a      	str	r2, [r3, #0]
    return error_flag;
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	0800c658 	.word	0x0800c658

0800bc6c <__errno>:
 800bc6c:	4b01      	ldr	r3, [pc, #4]	; (800bc74 <__errno+0x8>)
 800bc6e:	6818      	ldr	r0, [r3, #0]
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	2000017c 	.word	0x2000017c

0800bc78 <__libc_init_array>:
 800bc78:	b570      	push	{r4, r5, r6, lr}
 800bc7a:	2600      	movs	r6, #0
 800bc7c:	4d0c      	ldr	r5, [pc, #48]	; (800bcb0 <__libc_init_array+0x38>)
 800bc7e:	4c0d      	ldr	r4, [pc, #52]	; (800bcb4 <__libc_init_array+0x3c>)
 800bc80:	1b64      	subs	r4, r4, r5
 800bc82:	10a4      	asrs	r4, r4, #2
 800bc84:	42a6      	cmp	r6, r4
 800bc86:	d109      	bne.n	800bc9c <__libc_init_array+0x24>
 800bc88:	f000 fca4 	bl	800c5d4 <_init>
 800bc8c:	2600      	movs	r6, #0
 800bc8e:	4d0a      	ldr	r5, [pc, #40]	; (800bcb8 <__libc_init_array+0x40>)
 800bc90:	4c0a      	ldr	r4, [pc, #40]	; (800bcbc <__libc_init_array+0x44>)
 800bc92:	1b64      	subs	r4, r4, r5
 800bc94:	10a4      	asrs	r4, r4, #2
 800bc96:	42a6      	cmp	r6, r4
 800bc98:	d105      	bne.n	800bca6 <__libc_init_array+0x2e>
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bca0:	4798      	blx	r3
 800bca2:	3601      	adds	r6, #1
 800bca4:	e7ee      	b.n	800bc84 <__libc_init_array+0xc>
 800bca6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcaa:	4798      	blx	r3
 800bcac:	3601      	adds	r6, #1
 800bcae:	e7f2      	b.n	800bc96 <__libc_init_array+0x1e>
 800bcb0:	0800c6a8 	.word	0x0800c6a8
 800bcb4:	0800c6a8 	.word	0x0800c6a8
 800bcb8:	0800c6a8 	.word	0x0800c6a8
 800bcbc:	0800c6ac 	.word	0x0800c6ac

0800bcc0 <malloc>:
 800bcc0:	4b02      	ldr	r3, [pc, #8]	; (800bccc <malloc+0xc>)
 800bcc2:	4601      	mov	r1, r0
 800bcc4:	6818      	ldr	r0, [r3, #0]
 800bcc6:	f000 b881 	b.w	800bdcc <_malloc_r>
 800bcca:	bf00      	nop
 800bccc:	2000017c 	.word	0x2000017c

0800bcd0 <memcpy>:
 800bcd0:	440a      	add	r2, r1
 800bcd2:	4291      	cmp	r1, r2
 800bcd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcd8:	d100      	bne.n	800bcdc <memcpy+0xc>
 800bcda:	4770      	bx	lr
 800bcdc:	b510      	push	{r4, lr}
 800bcde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bce2:	4291      	cmp	r1, r2
 800bce4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bce8:	d1f9      	bne.n	800bcde <memcpy+0xe>
 800bcea:	bd10      	pop	{r4, pc}

0800bcec <memset>:
 800bcec:	4603      	mov	r3, r0
 800bcee:	4402      	add	r2, r0
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d100      	bne.n	800bcf6 <memset+0xa>
 800bcf4:	4770      	bx	lr
 800bcf6:	f803 1b01 	strb.w	r1, [r3], #1
 800bcfa:	e7f9      	b.n	800bcf0 <memset+0x4>

0800bcfc <_free_r>:
 800bcfc:	b538      	push	{r3, r4, r5, lr}
 800bcfe:	4605      	mov	r5, r0
 800bd00:	2900      	cmp	r1, #0
 800bd02:	d040      	beq.n	800bd86 <_free_r+0x8a>
 800bd04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd08:	1f0c      	subs	r4, r1, #4
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	bfb8      	it	lt
 800bd0e:	18e4      	addlt	r4, r4, r3
 800bd10:	f000 f900 	bl	800bf14 <__malloc_lock>
 800bd14:	4a1c      	ldr	r2, [pc, #112]	; (800bd88 <_free_r+0x8c>)
 800bd16:	6813      	ldr	r3, [r2, #0]
 800bd18:	b933      	cbnz	r3, 800bd28 <_free_r+0x2c>
 800bd1a:	6063      	str	r3, [r4, #4]
 800bd1c:	6014      	str	r4, [r2, #0]
 800bd1e:	4628      	mov	r0, r5
 800bd20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd24:	f000 b8fc 	b.w	800bf20 <__malloc_unlock>
 800bd28:	42a3      	cmp	r3, r4
 800bd2a:	d908      	bls.n	800bd3e <_free_r+0x42>
 800bd2c:	6820      	ldr	r0, [r4, #0]
 800bd2e:	1821      	adds	r1, r4, r0
 800bd30:	428b      	cmp	r3, r1
 800bd32:	bf01      	itttt	eq
 800bd34:	6819      	ldreq	r1, [r3, #0]
 800bd36:	685b      	ldreq	r3, [r3, #4]
 800bd38:	1809      	addeq	r1, r1, r0
 800bd3a:	6021      	streq	r1, [r4, #0]
 800bd3c:	e7ed      	b.n	800bd1a <_free_r+0x1e>
 800bd3e:	461a      	mov	r2, r3
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	b10b      	cbz	r3, 800bd48 <_free_r+0x4c>
 800bd44:	42a3      	cmp	r3, r4
 800bd46:	d9fa      	bls.n	800bd3e <_free_r+0x42>
 800bd48:	6811      	ldr	r1, [r2, #0]
 800bd4a:	1850      	adds	r0, r2, r1
 800bd4c:	42a0      	cmp	r0, r4
 800bd4e:	d10b      	bne.n	800bd68 <_free_r+0x6c>
 800bd50:	6820      	ldr	r0, [r4, #0]
 800bd52:	4401      	add	r1, r0
 800bd54:	1850      	adds	r0, r2, r1
 800bd56:	4283      	cmp	r3, r0
 800bd58:	6011      	str	r1, [r2, #0]
 800bd5a:	d1e0      	bne.n	800bd1e <_free_r+0x22>
 800bd5c:	6818      	ldr	r0, [r3, #0]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	4401      	add	r1, r0
 800bd62:	6011      	str	r1, [r2, #0]
 800bd64:	6053      	str	r3, [r2, #4]
 800bd66:	e7da      	b.n	800bd1e <_free_r+0x22>
 800bd68:	d902      	bls.n	800bd70 <_free_r+0x74>
 800bd6a:	230c      	movs	r3, #12
 800bd6c:	602b      	str	r3, [r5, #0]
 800bd6e:	e7d6      	b.n	800bd1e <_free_r+0x22>
 800bd70:	6820      	ldr	r0, [r4, #0]
 800bd72:	1821      	adds	r1, r4, r0
 800bd74:	428b      	cmp	r3, r1
 800bd76:	bf01      	itttt	eq
 800bd78:	6819      	ldreq	r1, [r3, #0]
 800bd7a:	685b      	ldreq	r3, [r3, #4]
 800bd7c:	1809      	addeq	r1, r1, r0
 800bd7e:	6021      	streq	r1, [r4, #0]
 800bd80:	6063      	str	r3, [r4, #4]
 800bd82:	6054      	str	r4, [r2, #4]
 800bd84:	e7cb      	b.n	800bd1e <_free_r+0x22>
 800bd86:	bd38      	pop	{r3, r4, r5, pc}
 800bd88:	200014d4 	.word	0x200014d4

0800bd8c <sbrk_aligned>:
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	4e0e      	ldr	r6, [pc, #56]	; (800bdc8 <sbrk_aligned+0x3c>)
 800bd90:	460c      	mov	r4, r1
 800bd92:	6831      	ldr	r1, [r6, #0]
 800bd94:	4605      	mov	r5, r0
 800bd96:	b911      	cbnz	r1, 800bd9e <sbrk_aligned+0x12>
 800bd98:	f000 f88c 	bl	800beb4 <_sbrk_r>
 800bd9c:	6030      	str	r0, [r6, #0]
 800bd9e:	4621      	mov	r1, r4
 800bda0:	4628      	mov	r0, r5
 800bda2:	f000 f887 	bl	800beb4 <_sbrk_r>
 800bda6:	1c43      	adds	r3, r0, #1
 800bda8:	d00a      	beq.n	800bdc0 <sbrk_aligned+0x34>
 800bdaa:	1cc4      	adds	r4, r0, #3
 800bdac:	f024 0403 	bic.w	r4, r4, #3
 800bdb0:	42a0      	cmp	r0, r4
 800bdb2:	d007      	beq.n	800bdc4 <sbrk_aligned+0x38>
 800bdb4:	1a21      	subs	r1, r4, r0
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	f000 f87c 	bl	800beb4 <_sbrk_r>
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d101      	bne.n	800bdc4 <sbrk_aligned+0x38>
 800bdc0:	f04f 34ff 	mov.w	r4, #4294967295
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	bd70      	pop	{r4, r5, r6, pc}
 800bdc8:	200014d8 	.word	0x200014d8

0800bdcc <_malloc_r>:
 800bdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd0:	1ccd      	adds	r5, r1, #3
 800bdd2:	f025 0503 	bic.w	r5, r5, #3
 800bdd6:	3508      	adds	r5, #8
 800bdd8:	2d0c      	cmp	r5, #12
 800bdda:	bf38      	it	cc
 800bddc:	250c      	movcc	r5, #12
 800bdde:	2d00      	cmp	r5, #0
 800bde0:	4607      	mov	r7, r0
 800bde2:	db01      	blt.n	800bde8 <_malloc_r+0x1c>
 800bde4:	42a9      	cmp	r1, r5
 800bde6:	d905      	bls.n	800bdf4 <_malloc_r+0x28>
 800bde8:	230c      	movs	r3, #12
 800bdea:	2600      	movs	r6, #0
 800bdec:	603b      	str	r3, [r7, #0]
 800bdee:	4630      	mov	r0, r6
 800bdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf4:	4e2e      	ldr	r6, [pc, #184]	; (800beb0 <_malloc_r+0xe4>)
 800bdf6:	f000 f88d 	bl	800bf14 <__malloc_lock>
 800bdfa:	6833      	ldr	r3, [r6, #0]
 800bdfc:	461c      	mov	r4, r3
 800bdfe:	bb34      	cbnz	r4, 800be4e <_malloc_r+0x82>
 800be00:	4629      	mov	r1, r5
 800be02:	4638      	mov	r0, r7
 800be04:	f7ff ffc2 	bl	800bd8c <sbrk_aligned>
 800be08:	1c43      	adds	r3, r0, #1
 800be0a:	4604      	mov	r4, r0
 800be0c:	d14d      	bne.n	800beaa <_malloc_r+0xde>
 800be0e:	6834      	ldr	r4, [r6, #0]
 800be10:	4626      	mov	r6, r4
 800be12:	2e00      	cmp	r6, #0
 800be14:	d140      	bne.n	800be98 <_malloc_r+0xcc>
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	4631      	mov	r1, r6
 800be1a:	4638      	mov	r0, r7
 800be1c:	eb04 0803 	add.w	r8, r4, r3
 800be20:	f000 f848 	bl	800beb4 <_sbrk_r>
 800be24:	4580      	cmp	r8, r0
 800be26:	d13a      	bne.n	800be9e <_malloc_r+0xd2>
 800be28:	6821      	ldr	r1, [r4, #0]
 800be2a:	3503      	adds	r5, #3
 800be2c:	1a6d      	subs	r5, r5, r1
 800be2e:	f025 0503 	bic.w	r5, r5, #3
 800be32:	3508      	adds	r5, #8
 800be34:	2d0c      	cmp	r5, #12
 800be36:	bf38      	it	cc
 800be38:	250c      	movcc	r5, #12
 800be3a:	4638      	mov	r0, r7
 800be3c:	4629      	mov	r1, r5
 800be3e:	f7ff ffa5 	bl	800bd8c <sbrk_aligned>
 800be42:	3001      	adds	r0, #1
 800be44:	d02b      	beq.n	800be9e <_malloc_r+0xd2>
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	442b      	add	r3, r5
 800be4a:	6023      	str	r3, [r4, #0]
 800be4c:	e00e      	b.n	800be6c <_malloc_r+0xa0>
 800be4e:	6822      	ldr	r2, [r4, #0]
 800be50:	1b52      	subs	r2, r2, r5
 800be52:	d41e      	bmi.n	800be92 <_malloc_r+0xc6>
 800be54:	2a0b      	cmp	r2, #11
 800be56:	d916      	bls.n	800be86 <_malloc_r+0xba>
 800be58:	1961      	adds	r1, r4, r5
 800be5a:	42a3      	cmp	r3, r4
 800be5c:	6025      	str	r5, [r4, #0]
 800be5e:	bf18      	it	ne
 800be60:	6059      	strne	r1, [r3, #4]
 800be62:	6863      	ldr	r3, [r4, #4]
 800be64:	bf08      	it	eq
 800be66:	6031      	streq	r1, [r6, #0]
 800be68:	5162      	str	r2, [r4, r5]
 800be6a:	604b      	str	r3, [r1, #4]
 800be6c:	4638      	mov	r0, r7
 800be6e:	f104 060b 	add.w	r6, r4, #11
 800be72:	f000 f855 	bl	800bf20 <__malloc_unlock>
 800be76:	f026 0607 	bic.w	r6, r6, #7
 800be7a:	1d23      	adds	r3, r4, #4
 800be7c:	1af2      	subs	r2, r6, r3
 800be7e:	d0b6      	beq.n	800bdee <_malloc_r+0x22>
 800be80:	1b9b      	subs	r3, r3, r6
 800be82:	50a3      	str	r3, [r4, r2]
 800be84:	e7b3      	b.n	800bdee <_malloc_r+0x22>
 800be86:	6862      	ldr	r2, [r4, #4]
 800be88:	42a3      	cmp	r3, r4
 800be8a:	bf0c      	ite	eq
 800be8c:	6032      	streq	r2, [r6, #0]
 800be8e:	605a      	strne	r2, [r3, #4]
 800be90:	e7ec      	b.n	800be6c <_malloc_r+0xa0>
 800be92:	4623      	mov	r3, r4
 800be94:	6864      	ldr	r4, [r4, #4]
 800be96:	e7b2      	b.n	800bdfe <_malloc_r+0x32>
 800be98:	4634      	mov	r4, r6
 800be9a:	6876      	ldr	r6, [r6, #4]
 800be9c:	e7b9      	b.n	800be12 <_malloc_r+0x46>
 800be9e:	230c      	movs	r3, #12
 800bea0:	4638      	mov	r0, r7
 800bea2:	603b      	str	r3, [r7, #0]
 800bea4:	f000 f83c 	bl	800bf20 <__malloc_unlock>
 800bea8:	e7a1      	b.n	800bdee <_malloc_r+0x22>
 800beaa:	6025      	str	r5, [r4, #0]
 800beac:	e7de      	b.n	800be6c <_malloc_r+0xa0>
 800beae:	bf00      	nop
 800beb0:	200014d4 	.word	0x200014d4

0800beb4 <_sbrk_r>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	2300      	movs	r3, #0
 800beb8:	4d05      	ldr	r5, [pc, #20]	; (800bed0 <_sbrk_r+0x1c>)
 800beba:	4604      	mov	r4, r0
 800bebc:	4608      	mov	r0, r1
 800bebe:	602b      	str	r3, [r5, #0]
 800bec0:	f7f5 f9ae 	bl	8001220 <_sbrk>
 800bec4:	1c43      	adds	r3, r0, #1
 800bec6:	d102      	bne.n	800bece <_sbrk_r+0x1a>
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	b103      	cbz	r3, 800bece <_sbrk_r+0x1a>
 800becc:	6023      	str	r3, [r4, #0]
 800bece:	bd38      	pop	{r3, r4, r5, pc}
 800bed0:	200014dc 	.word	0x200014dc

0800bed4 <siprintf>:
 800bed4:	b40e      	push	{r1, r2, r3}
 800bed6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800beda:	b500      	push	{lr}
 800bedc:	b09c      	sub	sp, #112	; 0x70
 800bede:	ab1d      	add	r3, sp, #116	; 0x74
 800bee0:	9002      	str	r0, [sp, #8]
 800bee2:	9006      	str	r0, [sp, #24]
 800bee4:	9107      	str	r1, [sp, #28]
 800bee6:	9104      	str	r1, [sp, #16]
 800bee8:	4808      	ldr	r0, [pc, #32]	; (800bf0c <siprintf+0x38>)
 800beea:	4909      	ldr	r1, [pc, #36]	; (800bf10 <siprintf+0x3c>)
 800beec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bef0:	9105      	str	r1, [sp, #20]
 800bef2:	6800      	ldr	r0, [r0, #0]
 800bef4:	a902      	add	r1, sp, #8
 800bef6:	9301      	str	r3, [sp, #4]
 800bef8:	f000 f874 	bl	800bfe4 <_svfiprintf_r>
 800befc:	2200      	movs	r2, #0
 800befe:	9b02      	ldr	r3, [sp, #8]
 800bf00:	701a      	strb	r2, [r3, #0]
 800bf02:	b01c      	add	sp, #112	; 0x70
 800bf04:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf08:	b003      	add	sp, #12
 800bf0a:	4770      	bx	lr
 800bf0c:	2000017c 	.word	0x2000017c
 800bf10:	ffff0208 	.word	0xffff0208

0800bf14 <__malloc_lock>:
 800bf14:	4801      	ldr	r0, [pc, #4]	; (800bf1c <__malloc_lock+0x8>)
 800bf16:	f000 bafb 	b.w	800c510 <__retarget_lock_acquire_recursive>
 800bf1a:	bf00      	nop
 800bf1c:	200014e0 	.word	0x200014e0

0800bf20 <__malloc_unlock>:
 800bf20:	4801      	ldr	r0, [pc, #4]	; (800bf28 <__malloc_unlock+0x8>)
 800bf22:	f000 baf6 	b.w	800c512 <__retarget_lock_release_recursive>
 800bf26:	bf00      	nop
 800bf28:	200014e0 	.word	0x200014e0

0800bf2c <__ssputs_r>:
 800bf2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf30:	688e      	ldr	r6, [r1, #8]
 800bf32:	4682      	mov	sl, r0
 800bf34:	429e      	cmp	r6, r3
 800bf36:	460c      	mov	r4, r1
 800bf38:	4690      	mov	r8, r2
 800bf3a:	461f      	mov	r7, r3
 800bf3c:	d838      	bhi.n	800bfb0 <__ssputs_r+0x84>
 800bf3e:	898a      	ldrh	r2, [r1, #12]
 800bf40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf44:	d032      	beq.n	800bfac <__ssputs_r+0x80>
 800bf46:	6825      	ldr	r5, [r4, #0]
 800bf48:	6909      	ldr	r1, [r1, #16]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	eba5 0901 	sub.w	r9, r5, r1
 800bf50:	6965      	ldr	r5, [r4, #20]
 800bf52:	444b      	add	r3, r9
 800bf54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf5c:	106d      	asrs	r5, r5, #1
 800bf5e:	429d      	cmp	r5, r3
 800bf60:	bf38      	it	cc
 800bf62:	461d      	movcc	r5, r3
 800bf64:	0553      	lsls	r3, r2, #21
 800bf66:	d531      	bpl.n	800bfcc <__ssputs_r+0xa0>
 800bf68:	4629      	mov	r1, r5
 800bf6a:	f7ff ff2f 	bl	800bdcc <_malloc_r>
 800bf6e:	4606      	mov	r6, r0
 800bf70:	b950      	cbnz	r0, 800bf88 <__ssputs_r+0x5c>
 800bf72:	230c      	movs	r3, #12
 800bf74:	f04f 30ff 	mov.w	r0, #4294967295
 800bf78:	f8ca 3000 	str.w	r3, [sl]
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf82:	81a3      	strh	r3, [r4, #12]
 800bf84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf88:	464a      	mov	r2, r9
 800bf8a:	6921      	ldr	r1, [r4, #16]
 800bf8c:	f7ff fea0 	bl	800bcd0 <memcpy>
 800bf90:	89a3      	ldrh	r3, [r4, #12]
 800bf92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf9a:	81a3      	strh	r3, [r4, #12]
 800bf9c:	6126      	str	r6, [r4, #16]
 800bf9e:	444e      	add	r6, r9
 800bfa0:	6026      	str	r6, [r4, #0]
 800bfa2:	463e      	mov	r6, r7
 800bfa4:	6165      	str	r5, [r4, #20]
 800bfa6:	eba5 0509 	sub.w	r5, r5, r9
 800bfaa:	60a5      	str	r5, [r4, #8]
 800bfac:	42be      	cmp	r6, r7
 800bfae:	d900      	bls.n	800bfb2 <__ssputs_r+0x86>
 800bfb0:	463e      	mov	r6, r7
 800bfb2:	4632      	mov	r2, r6
 800bfb4:	4641      	mov	r1, r8
 800bfb6:	6820      	ldr	r0, [r4, #0]
 800bfb8:	f000 faba 	bl	800c530 <memmove>
 800bfbc:	68a3      	ldr	r3, [r4, #8]
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	1b9b      	subs	r3, r3, r6
 800bfc2:	60a3      	str	r3, [r4, #8]
 800bfc4:	6823      	ldr	r3, [r4, #0]
 800bfc6:	4433      	add	r3, r6
 800bfc8:	6023      	str	r3, [r4, #0]
 800bfca:	e7db      	b.n	800bf84 <__ssputs_r+0x58>
 800bfcc:	462a      	mov	r2, r5
 800bfce:	f000 fac9 	bl	800c564 <_realloc_r>
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d1e1      	bne.n	800bf9c <__ssputs_r+0x70>
 800bfd8:	4650      	mov	r0, sl
 800bfda:	6921      	ldr	r1, [r4, #16]
 800bfdc:	f7ff fe8e 	bl	800bcfc <_free_r>
 800bfe0:	e7c7      	b.n	800bf72 <__ssputs_r+0x46>
	...

0800bfe4 <_svfiprintf_r>:
 800bfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe8:	4698      	mov	r8, r3
 800bfea:	898b      	ldrh	r3, [r1, #12]
 800bfec:	4607      	mov	r7, r0
 800bfee:	061b      	lsls	r3, r3, #24
 800bff0:	460d      	mov	r5, r1
 800bff2:	4614      	mov	r4, r2
 800bff4:	b09d      	sub	sp, #116	; 0x74
 800bff6:	d50e      	bpl.n	800c016 <_svfiprintf_r+0x32>
 800bff8:	690b      	ldr	r3, [r1, #16]
 800bffa:	b963      	cbnz	r3, 800c016 <_svfiprintf_r+0x32>
 800bffc:	2140      	movs	r1, #64	; 0x40
 800bffe:	f7ff fee5 	bl	800bdcc <_malloc_r>
 800c002:	6028      	str	r0, [r5, #0]
 800c004:	6128      	str	r0, [r5, #16]
 800c006:	b920      	cbnz	r0, 800c012 <_svfiprintf_r+0x2e>
 800c008:	230c      	movs	r3, #12
 800c00a:	603b      	str	r3, [r7, #0]
 800c00c:	f04f 30ff 	mov.w	r0, #4294967295
 800c010:	e0d1      	b.n	800c1b6 <_svfiprintf_r+0x1d2>
 800c012:	2340      	movs	r3, #64	; 0x40
 800c014:	616b      	str	r3, [r5, #20]
 800c016:	2300      	movs	r3, #0
 800c018:	9309      	str	r3, [sp, #36]	; 0x24
 800c01a:	2320      	movs	r3, #32
 800c01c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c020:	2330      	movs	r3, #48	; 0x30
 800c022:	f04f 0901 	mov.w	r9, #1
 800c026:	f8cd 800c 	str.w	r8, [sp, #12]
 800c02a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c1d0 <_svfiprintf_r+0x1ec>
 800c02e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c032:	4623      	mov	r3, r4
 800c034:	469a      	mov	sl, r3
 800c036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c03a:	b10a      	cbz	r2, 800c040 <_svfiprintf_r+0x5c>
 800c03c:	2a25      	cmp	r2, #37	; 0x25
 800c03e:	d1f9      	bne.n	800c034 <_svfiprintf_r+0x50>
 800c040:	ebba 0b04 	subs.w	fp, sl, r4
 800c044:	d00b      	beq.n	800c05e <_svfiprintf_r+0x7a>
 800c046:	465b      	mov	r3, fp
 800c048:	4622      	mov	r2, r4
 800c04a:	4629      	mov	r1, r5
 800c04c:	4638      	mov	r0, r7
 800c04e:	f7ff ff6d 	bl	800bf2c <__ssputs_r>
 800c052:	3001      	adds	r0, #1
 800c054:	f000 80aa 	beq.w	800c1ac <_svfiprintf_r+0x1c8>
 800c058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c05a:	445a      	add	r2, fp
 800c05c:	9209      	str	r2, [sp, #36]	; 0x24
 800c05e:	f89a 3000 	ldrb.w	r3, [sl]
 800c062:	2b00      	cmp	r3, #0
 800c064:	f000 80a2 	beq.w	800c1ac <_svfiprintf_r+0x1c8>
 800c068:	2300      	movs	r3, #0
 800c06a:	f04f 32ff 	mov.w	r2, #4294967295
 800c06e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c072:	f10a 0a01 	add.w	sl, sl, #1
 800c076:	9304      	str	r3, [sp, #16]
 800c078:	9307      	str	r3, [sp, #28]
 800c07a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c07e:	931a      	str	r3, [sp, #104]	; 0x68
 800c080:	4654      	mov	r4, sl
 800c082:	2205      	movs	r2, #5
 800c084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c088:	4851      	ldr	r0, [pc, #324]	; (800c1d0 <_svfiprintf_r+0x1ec>)
 800c08a:	f000 fa43 	bl	800c514 <memchr>
 800c08e:	9a04      	ldr	r2, [sp, #16]
 800c090:	b9d8      	cbnz	r0, 800c0ca <_svfiprintf_r+0xe6>
 800c092:	06d0      	lsls	r0, r2, #27
 800c094:	bf44      	itt	mi
 800c096:	2320      	movmi	r3, #32
 800c098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c09c:	0711      	lsls	r1, r2, #28
 800c09e:	bf44      	itt	mi
 800c0a0:	232b      	movmi	r3, #43	; 0x2b
 800c0a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ac:	d015      	beq.n	800c0da <_svfiprintf_r+0xf6>
 800c0ae:	4654      	mov	r4, sl
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	f04f 0c0a 	mov.w	ip, #10
 800c0b6:	9a07      	ldr	r2, [sp, #28]
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0be:	3b30      	subs	r3, #48	; 0x30
 800c0c0:	2b09      	cmp	r3, #9
 800c0c2:	d94e      	bls.n	800c162 <_svfiprintf_r+0x17e>
 800c0c4:	b1b0      	cbz	r0, 800c0f4 <_svfiprintf_r+0x110>
 800c0c6:	9207      	str	r2, [sp, #28]
 800c0c8:	e014      	b.n	800c0f4 <_svfiprintf_r+0x110>
 800c0ca:	eba0 0308 	sub.w	r3, r0, r8
 800c0ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	46a2      	mov	sl, r4
 800c0d6:	9304      	str	r3, [sp, #16]
 800c0d8:	e7d2      	b.n	800c080 <_svfiprintf_r+0x9c>
 800c0da:	9b03      	ldr	r3, [sp, #12]
 800c0dc:	1d19      	adds	r1, r3, #4
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	9103      	str	r1, [sp, #12]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	bfbb      	ittet	lt
 800c0e6:	425b      	neglt	r3, r3
 800c0e8:	f042 0202 	orrlt.w	r2, r2, #2
 800c0ec:	9307      	strge	r3, [sp, #28]
 800c0ee:	9307      	strlt	r3, [sp, #28]
 800c0f0:	bfb8      	it	lt
 800c0f2:	9204      	strlt	r2, [sp, #16]
 800c0f4:	7823      	ldrb	r3, [r4, #0]
 800c0f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c0f8:	d10c      	bne.n	800c114 <_svfiprintf_r+0x130>
 800c0fa:	7863      	ldrb	r3, [r4, #1]
 800c0fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c0fe:	d135      	bne.n	800c16c <_svfiprintf_r+0x188>
 800c100:	9b03      	ldr	r3, [sp, #12]
 800c102:	3402      	adds	r4, #2
 800c104:	1d1a      	adds	r2, r3, #4
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	9203      	str	r2, [sp, #12]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	bfb8      	it	lt
 800c10e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c112:	9305      	str	r3, [sp, #20]
 800c114:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c1d4 <_svfiprintf_r+0x1f0>
 800c118:	2203      	movs	r2, #3
 800c11a:	4650      	mov	r0, sl
 800c11c:	7821      	ldrb	r1, [r4, #0]
 800c11e:	f000 f9f9 	bl	800c514 <memchr>
 800c122:	b140      	cbz	r0, 800c136 <_svfiprintf_r+0x152>
 800c124:	2340      	movs	r3, #64	; 0x40
 800c126:	eba0 000a 	sub.w	r0, r0, sl
 800c12a:	fa03 f000 	lsl.w	r0, r3, r0
 800c12e:	9b04      	ldr	r3, [sp, #16]
 800c130:	3401      	adds	r4, #1
 800c132:	4303      	orrs	r3, r0
 800c134:	9304      	str	r3, [sp, #16]
 800c136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c13a:	2206      	movs	r2, #6
 800c13c:	4826      	ldr	r0, [pc, #152]	; (800c1d8 <_svfiprintf_r+0x1f4>)
 800c13e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c142:	f000 f9e7 	bl	800c514 <memchr>
 800c146:	2800      	cmp	r0, #0
 800c148:	d038      	beq.n	800c1bc <_svfiprintf_r+0x1d8>
 800c14a:	4b24      	ldr	r3, [pc, #144]	; (800c1dc <_svfiprintf_r+0x1f8>)
 800c14c:	bb1b      	cbnz	r3, 800c196 <_svfiprintf_r+0x1b2>
 800c14e:	9b03      	ldr	r3, [sp, #12]
 800c150:	3307      	adds	r3, #7
 800c152:	f023 0307 	bic.w	r3, r3, #7
 800c156:	3308      	adds	r3, #8
 800c158:	9303      	str	r3, [sp, #12]
 800c15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c15c:	4433      	add	r3, r6
 800c15e:	9309      	str	r3, [sp, #36]	; 0x24
 800c160:	e767      	b.n	800c032 <_svfiprintf_r+0x4e>
 800c162:	460c      	mov	r4, r1
 800c164:	2001      	movs	r0, #1
 800c166:	fb0c 3202 	mla	r2, ip, r2, r3
 800c16a:	e7a5      	b.n	800c0b8 <_svfiprintf_r+0xd4>
 800c16c:	2300      	movs	r3, #0
 800c16e:	f04f 0c0a 	mov.w	ip, #10
 800c172:	4619      	mov	r1, r3
 800c174:	3401      	adds	r4, #1
 800c176:	9305      	str	r3, [sp, #20]
 800c178:	4620      	mov	r0, r4
 800c17a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c17e:	3a30      	subs	r2, #48	; 0x30
 800c180:	2a09      	cmp	r2, #9
 800c182:	d903      	bls.n	800c18c <_svfiprintf_r+0x1a8>
 800c184:	2b00      	cmp	r3, #0
 800c186:	d0c5      	beq.n	800c114 <_svfiprintf_r+0x130>
 800c188:	9105      	str	r1, [sp, #20]
 800c18a:	e7c3      	b.n	800c114 <_svfiprintf_r+0x130>
 800c18c:	4604      	mov	r4, r0
 800c18e:	2301      	movs	r3, #1
 800c190:	fb0c 2101 	mla	r1, ip, r1, r2
 800c194:	e7f0      	b.n	800c178 <_svfiprintf_r+0x194>
 800c196:	ab03      	add	r3, sp, #12
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	462a      	mov	r2, r5
 800c19c:	4638      	mov	r0, r7
 800c19e:	4b10      	ldr	r3, [pc, #64]	; (800c1e0 <_svfiprintf_r+0x1fc>)
 800c1a0:	a904      	add	r1, sp, #16
 800c1a2:	f3af 8000 	nop.w
 800c1a6:	1c42      	adds	r2, r0, #1
 800c1a8:	4606      	mov	r6, r0
 800c1aa:	d1d6      	bne.n	800c15a <_svfiprintf_r+0x176>
 800c1ac:	89ab      	ldrh	r3, [r5, #12]
 800c1ae:	065b      	lsls	r3, r3, #25
 800c1b0:	f53f af2c 	bmi.w	800c00c <_svfiprintf_r+0x28>
 800c1b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1b6:	b01d      	add	sp, #116	; 0x74
 800c1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1bc:	ab03      	add	r3, sp, #12
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	462a      	mov	r2, r5
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	4b06      	ldr	r3, [pc, #24]	; (800c1e0 <_svfiprintf_r+0x1fc>)
 800c1c6:	a904      	add	r1, sp, #16
 800c1c8:	f000 f87c 	bl	800c2c4 <_printf_i>
 800c1cc:	e7eb      	b.n	800c1a6 <_svfiprintf_r+0x1c2>
 800c1ce:	bf00      	nop
 800c1d0:	0800c674 	.word	0x0800c674
 800c1d4:	0800c67a 	.word	0x0800c67a
 800c1d8:	0800c67e 	.word	0x0800c67e
 800c1dc:	00000000 	.word	0x00000000
 800c1e0:	0800bf2d 	.word	0x0800bf2d

0800c1e4 <_printf_common>:
 800c1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1e8:	4616      	mov	r6, r2
 800c1ea:	4699      	mov	r9, r3
 800c1ec:	688a      	ldr	r2, [r1, #8]
 800c1ee:	690b      	ldr	r3, [r1, #16]
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	bfb8      	it	lt
 800c1f6:	4613      	movlt	r3, r2
 800c1f8:	6033      	str	r3, [r6, #0]
 800c1fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1fe:	460c      	mov	r4, r1
 800c200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c204:	b10a      	cbz	r2, 800c20a <_printf_common+0x26>
 800c206:	3301      	adds	r3, #1
 800c208:	6033      	str	r3, [r6, #0]
 800c20a:	6823      	ldr	r3, [r4, #0]
 800c20c:	0699      	lsls	r1, r3, #26
 800c20e:	bf42      	ittt	mi
 800c210:	6833      	ldrmi	r3, [r6, #0]
 800c212:	3302      	addmi	r3, #2
 800c214:	6033      	strmi	r3, [r6, #0]
 800c216:	6825      	ldr	r5, [r4, #0]
 800c218:	f015 0506 	ands.w	r5, r5, #6
 800c21c:	d106      	bne.n	800c22c <_printf_common+0x48>
 800c21e:	f104 0a19 	add.w	sl, r4, #25
 800c222:	68e3      	ldr	r3, [r4, #12]
 800c224:	6832      	ldr	r2, [r6, #0]
 800c226:	1a9b      	subs	r3, r3, r2
 800c228:	42ab      	cmp	r3, r5
 800c22a:	dc28      	bgt.n	800c27e <_printf_common+0x9a>
 800c22c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c230:	1e13      	subs	r3, r2, #0
 800c232:	6822      	ldr	r2, [r4, #0]
 800c234:	bf18      	it	ne
 800c236:	2301      	movne	r3, #1
 800c238:	0692      	lsls	r2, r2, #26
 800c23a:	d42d      	bmi.n	800c298 <_printf_common+0xb4>
 800c23c:	4649      	mov	r1, r9
 800c23e:	4638      	mov	r0, r7
 800c240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c244:	47c0      	blx	r8
 800c246:	3001      	adds	r0, #1
 800c248:	d020      	beq.n	800c28c <_printf_common+0xa8>
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	68e5      	ldr	r5, [r4, #12]
 800c24e:	f003 0306 	and.w	r3, r3, #6
 800c252:	2b04      	cmp	r3, #4
 800c254:	bf18      	it	ne
 800c256:	2500      	movne	r5, #0
 800c258:	6832      	ldr	r2, [r6, #0]
 800c25a:	f04f 0600 	mov.w	r6, #0
 800c25e:	68a3      	ldr	r3, [r4, #8]
 800c260:	bf08      	it	eq
 800c262:	1aad      	subeq	r5, r5, r2
 800c264:	6922      	ldr	r2, [r4, #16]
 800c266:	bf08      	it	eq
 800c268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c26c:	4293      	cmp	r3, r2
 800c26e:	bfc4      	itt	gt
 800c270:	1a9b      	subgt	r3, r3, r2
 800c272:	18ed      	addgt	r5, r5, r3
 800c274:	341a      	adds	r4, #26
 800c276:	42b5      	cmp	r5, r6
 800c278:	d11a      	bne.n	800c2b0 <_printf_common+0xcc>
 800c27a:	2000      	movs	r0, #0
 800c27c:	e008      	b.n	800c290 <_printf_common+0xac>
 800c27e:	2301      	movs	r3, #1
 800c280:	4652      	mov	r2, sl
 800c282:	4649      	mov	r1, r9
 800c284:	4638      	mov	r0, r7
 800c286:	47c0      	blx	r8
 800c288:	3001      	adds	r0, #1
 800c28a:	d103      	bne.n	800c294 <_printf_common+0xb0>
 800c28c:	f04f 30ff 	mov.w	r0, #4294967295
 800c290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c294:	3501      	adds	r5, #1
 800c296:	e7c4      	b.n	800c222 <_printf_common+0x3e>
 800c298:	2030      	movs	r0, #48	; 0x30
 800c29a:	18e1      	adds	r1, r4, r3
 800c29c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2a0:	1c5a      	adds	r2, r3, #1
 800c2a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2a6:	4422      	add	r2, r4
 800c2a8:	3302      	adds	r3, #2
 800c2aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2ae:	e7c5      	b.n	800c23c <_printf_common+0x58>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	4622      	mov	r2, r4
 800c2b4:	4649      	mov	r1, r9
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	47c0      	blx	r8
 800c2ba:	3001      	adds	r0, #1
 800c2bc:	d0e6      	beq.n	800c28c <_printf_common+0xa8>
 800c2be:	3601      	adds	r6, #1
 800c2c0:	e7d9      	b.n	800c276 <_printf_common+0x92>
	...

0800c2c4 <_printf_i>:
 800c2c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2c8:	7e0f      	ldrb	r7, [r1, #24]
 800c2ca:	4691      	mov	r9, r2
 800c2cc:	2f78      	cmp	r7, #120	; 0x78
 800c2ce:	4680      	mov	r8, r0
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	469a      	mov	sl, r3
 800c2d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c2d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c2da:	d807      	bhi.n	800c2ec <_printf_i+0x28>
 800c2dc:	2f62      	cmp	r7, #98	; 0x62
 800c2de:	d80a      	bhi.n	800c2f6 <_printf_i+0x32>
 800c2e0:	2f00      	cmp	r7, #0
 800c2e2:	f000 80d9 	beq.w	800c498 <_printf_i+0x1d4>
 800c2e6:	2f58      	cmp	r7, #88	; 0x58
 800c2e8:	f000 80a4 	beq.w	800c434 <_printf_i+0x170>
 800c2ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c2f4:	e03a      	b.n	800c36c <_printf_i+0xa8>
 800c2f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c2fa:	2b15      	cmp	r3, #21
 800c2fc:	d8f6      	bhi.n	800c2ec <_printf_i+0x28>
 800c2fe:	a101      	add	r1, pc, #4	; (adr r1, 800c304 <_printf_i+0x40>)
 800c300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c304:	0800c35d 	.word	0x0800c35d
 800c308:	0800c371 	.word	0x0800c371
 800c30c:	0800c2ed 	.word	0x0800c2ed
 800c310:	0800c2ed 	.word	0x0800c2ed
 800c314:	0800c2ed 	.word	0x0800c2ed
 800c318:	0800c2ed 	.word	0x0800c2ed
 800c31c:	0800c371 	.word	0x0800c371
 800c320:	0800c2ed 	.word	0x0800c2ed
 800c324:	0800c2ed 	.word	0x0800c2ed
 800c328:	0800c2ed 	.word	0x0800c2ed
 800c32c:	0800c2ed 	.word	0x0800c2ed
 800c330:	0800c47f 	.word	0x0800c47f
 800c334:	0800c3a1 	.word	0x0800c3a1
 800c338:	0800c461 	.word	0x0800c461
 800c33c:	0800c2ed 	.word	0x0800c2ed
 800c340:	0800c2ed 	.word	0x0800c2ed
 800c344:	0800c4a1 	.word	0x0800c4a1
 800c348:	0800c2ed 	.word	0x0800c2ed
 800c34c:	0800c3a1 	.word	0x0800c3a1
 800c350:	0800c2ed 	.word	0x0800c2ed
 800c354:	0800c2ed 	.word	0x0800c2ed
 800c358:	0800c469 	.word	0x0800c469
 800c35c:	682b      	ldr	r3, [r5, #0]
 800c35e:	1d1a      	adds	r2, r3, #4
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	602a      	str	r2, [r5, #0]
 800c364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c36c:	2301      	movs	r3, #1
 800c36e:	e0a4      	b.n	800c4ba <_printf_i+0x1f6>
 800c370:	6820      	ldr	r0, [r4, #0]
 800c372:	6829      	ldr	r1, [r5, #0]
 800c374:	0606      	lsls	r6, r0, #24
 800c376:	f101 0304 	add.w	r3, r1, #4
 800c37a:	d50a      	bpl.n	800c392 <_printf_i+0xce>
 800c37c:	680e      	ldr	r6, [r1, #0]
 800c37e:	602b      	str	r3, [r5, #0]
 800c380:	2e00      	cmp	r6, #0
 800c382:	da03      	bge.n	800c38c <_printf_i+0xc8>
 800c384:	232d      	movs	r3, #45	; 0x2d
 800c386:	4276      	negs	r6, r6
 800c388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c38c:	230a      	movs	r3, #10
 800c38e:	485e      	ldr	r0, [pc, #376]	; (800c508 <_printf_i+0x244>)
 800c390:	e019      	b.n	800c3c6 <_printf_i+0x102>
 800c392:	680e      	ldr	r6, [r1, #0]
 800c394:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c398:	602b      	str	r3, [r5, #0]
 800c39a:	bf18      	it	ne
 800c39c:	b236      	sxthne	r6, r6
 800c39e:	e7ef      	b.n	800c380 <_printf_i+0xbc>
 800c3a0:	682b      	ldr	r3, [r5, #0]
 800c3a2:	6820      	ldr	r0, [r4, #0]
 800c3a4:	1d19      	adds	r1, r3, #4
 800c3a6:	6029      	str	r1, [r5, #0]
 800c3a8:	0601      	lsls	r1, r0, #24
 800c3aa:	d501      	bpl.n	800c3b0 <_printf_i+0xec>
 800c3ac:	681e      	ldr	r6, [r3, #0]
 800c3ae:	e002      	b.n	800c3b6 <_printf_i+0xf2>
 800c3b0:	0646      	lsls	r6, r0, #25
 800c3b2:	d5fb      	bpl.n	800c3ac <_printf_i+0xe8>
 800c3b4:	881e      	ldrh	r6, [r3, #0]
 800c3b6:	2f6f      	cmp	r7, #111	; 0x6f
 800c3b8:	bf0c      	ite	eq
 800c3ba:	2308      	moveq	r3, #8
 800c3bc:	230a      	movne	r3, #10
 800c3be:	4852      	ldr	r0, [pc, #328]	; (800c508 <_printf_i+0x244>)
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c3c6:	6865      	ldr	r5, [r4, #4]
 800c3c8:	2d00      	cmp	r5, #0
 800c3ca:	bfa8      	it	ge
 800c3cc:	6821      	ldrge	r1, [r4, #0]
 800c3ce:	60a5      	str	r5, [r4, #8]
 800c3d0:	bfa4      	itt	ge
 800c3d2:	f021 0104 	bicge.w	r1, r1, #4
 800c3d6:	6021      	strge	r1, [r4, #0]
 800c3d8:	b90e      	cbnz	r6, 800c3de <_printf_i+0x11a>
 800c3da:	2d00      	cmp	r5, #0
 800c3dc:	d04d      	beq.n	800c47a <_printf_i+0x1b6>
 800c3de:	4615      	mov	r5, r2
 800c3e0:	fbb6 f1f3 	udiv	r1, r6, r3
 800c3e4:	fb03 6711 	mls	r7, r3, r1, r6
 800c3e8:	5dc7      	ldrb	r7, [r0, r7]
 800c3ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c3ee:	4637      	mov	r7, r6
 800c3f0:	42bb      	cmp	r3, r7
 800c3f2:	460e      	mov	r6, r1
 800c3f4:	d9f4      	bls.n	800c3e0 <_printf_i+0x11c>
 800c3f6:	2b08      	cmp	r3, #8
 800c3f8:	d10b      	bne.n	800c412 <_printf_i+0x14e>
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	07de      	lsls	r6, r3, #31
 800c3fe:	d508      	bpl.n	800c412 <_printf_i+0x14e>
 800c400:	6923      	ldr	r3, [r4, #16]
 800c402:	6861      	ldr	r1, [r4, #4]
 800c404:	4299      	cmp	r1, r3
 800c406:	bfde      	ittt	le
 800c408:	2330      	movle	r3, #48	; 0x30
 800c40a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c40e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c412:	1b52      	subs	r2, r2, r5
 800c414:	6122      	str	r2, [r4, #16]
 800c416:	464b      	mov	r3, r9
 800c418:	4621      	mov	r1, r4
 800c41a:	4640      	mov	r0, r8
 800c41c:	f8cd a000 	str.w	sl, [sp]
 800c420:	aa03      	add	r2, sp, #12
 800c422:	f7ff fedf 	bl	800c1e4 <_printf_common>
 800c426:	3001      	adds	r0, #1
 800c428:	d14c      	bne.n	800c4c4 <_printf_i+0x200>
 800c42a:	f04f 30ff 	mov.w	r0, #4294967295
 800c42e:	b004      	add	sp, #16
 800c430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c434:	4834      	ldr	r0, [pc, #208]	; (800c508 <_printf_i+0x244>)
 800c436:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c43a:	6829      	ldr	r1, [r5, #0]
 800c43c:	6823      	ldr	r3, [r4, #0]
 800c43e:	f851 6b04 	ldr.w	r6, [r1], #4
 800c442:	6029      	str	r1, [r5, #0]
 800c444:	061d      	lsls	r5, r3, #24
 800c446:	d514      	bpl.n	800c472 <_printf_i+0x1ae>
 800c448:	07df      	lsls	r7, r3, #31
 800c44a:	bf44      	itt	mi
 800c44c:	f043 0320 	orrmi.w	r3, r3, #32
 800c450:	6023      	strmi	r3, [r4, #0]
 800c452:	b91e      	cbnz	r6, 800c45c <_printf_i+0x198>
 800c454:	6823      	ldr	r3, [r4, #0]
 800c456:	f023 0320 	bic.w	r3, r3, #32
 800c45a:	6023      	str	r3, [r4, #0]
 800c45c:	2310      	movs	r3, #16
 800c45e:	e7af      	b.n	800c3c0 <_printf_i+0xfc>
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	f043 0320 	orr.w	r3, r3, #32
 800c466:	6023      	str	r3, [r4, #0]
 800c468:	2378      	movs	r3, #120	; 0x78
 800c46a:	4828      	ldr	r0, [pc, #160]	; (800c50c <_printf_i+0x248>)
 800c46c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c470:	e7e3      	b.n	800c43a <_printf_i+0x176>
 800c472:	0659      	lsls	r1, r3, #25
 800c474:	bf48      	it	mi
 800c476:	b2b6      	uxthmi	r6, r6
 800c478:	e7e6      	b.n	800c448 <_printf_i+0x184>
 800c47a:	4615      	mov	r5, r2
 800c47c:	e7bb      	b.n	800c3f6 <_printf_i+0x132>
 800c47e:	682b      	ldr	r3, [r5, #0]
 800c480:	6826      	ldr	r6, [r4, #0]
 800c482:	1d18      	adds	r0, r3, #4
 800c484:	6961      	ldr	r1, [r4, #20]
 800c486:	6028      	str	r0, [r5, #0]
 800c488:	0635      	lsls	r5, r6, #24
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	d501      	bpl.n	800c492 <_printf_i+0x1ce>
 800c48e:	6019      	str	r1, [r3, #0]
 800c490:	e002      	b.n	800c498 <_printf_i+0x1d4>
 800c492:	0670      	lsls	r0, r6, #25
 800c494:	d5fb      	bpl.n	800c48e <_printf_i+0x1ca>
 800c496:	8019      	strh	r1, [r3, #0]
 800c498:	2300      	movs	r3, #0
 800c49a:	4615      	mov	r5, r2
 800c49c:	6123      	str	r3, [r4, #16]
 800c49e:	e7ba      	b.n	800c416 <_printf_i+0x152>
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	1d1a      	adds	r2, r3, #4
 800c4a6:	602a      	str	r2, [r5, #0]
 800c4a8:	681d      	ldr	r5, [r3, #0]
 800c4aa:	6862      	ldr	r2, [r4, #4]
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	f000 f831 	bl	800c514 <memchr>
 800c4b2:	b108      	cbz	r0, 800c4b8 <_printf_i+0x1f4>
 800c4b4:	1b40      	subs	r0, r0, r5
 800c4b6:	6060      	str	r0, [r4, #4]
 800c4b8:	6863      	ldr	r3, [r4, #4]
 800c4ba:	6123      	str	r3, [r4, #16]
 800c4bc:	2300      	movs	r3, #0
 800c4be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4c2:	e7a8      	b.n	800c416 <_printf_i+0x152>
 800c4c4:	462a      	mov	r2, r5
 800c4c6:	4649      	mov	r1, r9
 800c4c8:	4640      	mov	r0, r8
 800c4ca:	6923      	ldr	r3, [r4, #16]
 800c4cc:	47d0      	blx	sl
 800c4ce:	3001      	adds	r0, #1
 800c4d0:	d0ab      	beq.n	800c42a <_printf_i+0x166>
 800c4d2:	6823      	ldr	r3, [r4, #0]
 800c4d4:	079b      	lsls	r3, r3, #30
 800c4d6:	d413      	bmi.n	800c500 <_printf_i+0x23c>
 800c4d8:	68e0      	ldr	r0, [r4, #12]
 800c4da:	9b03      	ldr	r3, [sp, #12]
 800c4dc:	4298      	cmp	r0, r3
 800c4de:	bfb8      	it	lt
 800c4e0:	4618      	movlt	r0, r3
 800c4e2:	e7a4      	b.n	800c42e <_printf_i+0x16a>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	4632      	mov	r2, r6
 800c4e8:	4649      	mov	r1, r9
 800c4ea:	4640      	mov	r0, r8
 800c4ec:	47d0      	blx	sl
 800c4ee:	3001      	adds	r0, #1
 800c4f0:	d09b      	beq.n	800c42a <_printf_i+0x166>
 800c4f2:	3501      	adds	r5, #1
 800c4f4:	68e3      	ldr	r3, [r4, #12]
 800c4f6:	9903      	ldr	r1, [sp, #12]
 800c4f8:	1a5b      	subs	r3, r3, r1
 800c4fa:	42ab      	cmp	r3, r5
 800c4fc:	dcf2      	bgt.n	800c4e4 <_printf_i+0x220>
 800c4fe:	e7eb      	b.n	800c4d8 <_printf_i+0x214>
 800c500:	2500      	movs	r5, #0
 800c502:	f104 0619 	add.w	r6, r4, #25
 800c506:	e7f5      	b.n	800c4f4 <_printf_i+0x230>
 800c508:	0800c685 	.word	0x0800c685
 800c50c:	0800c696 	.word	0x0800c696

0800c510 <__retarget_lock_acquire_recursive>:
 800c510:	4770      	bx	lr

0800c512 <__retarget_lock_release_recursive>:
 800c512:	4770      	bx	lr

0800c514 <memchr>:
 800c514:	4603      	mov	r3, r0
 800c516:	b510      	push	{r4, lr}
 800c518:	b2c9      	uxtb	r1, r1
 800c51a:	4402      	add	r2, r0
 800c51c:	4293      	cmp	r3, r2
 800c51e:	4618      	mov	r0, r3
 800c520:	d101      	bne.n	800c526 <memchr+0x12>
 800c522:	2000      	movs	r0, #0
 800c524:	e003      	b.n	800c52e <memchr+0x1a>
 800c526:	7804      	ldrb	r4, [r0, #0]
 800c528:	3301      	adds	r3, #1
 800c52a:	428c      	cmp	r4, r1
 800c52c:	d1f6      	bne.n	800c51c <memchr+0x8>
 800c52e:	bd10      	pop	{r4, pc}

0800c530 <memmove>:
 800c530:	4288      	cmp	r0, r1
 800c532:	b510      	push	{r4, lr}
 800c534:	eb01 0402 	add.w	r4, r1, r2
 800c538:	d902      	bls.n	800c540 <memmove+0x10>
 800c53a:	4284      	cmp	r4, r0
 800c53c:	4623      	mov	r3, r4
 800c53e:	d807      	bhi.n	800c550 <memmove+0x20>
 800c540:	1e43      	subs	r3, r0, #1
 800c542:	42a1      	cmp	r1, r4
 800c544:	d008      	beq.n	800c558 <memmove+0x28>
 800c546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c54a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c54e:	e7f8      	b.n	800c542 <memmove+0x12>
 800c550:	4601      	mov	r1, r0
 800c552:	4402      	add	r2, r0
 800c554:	428a      	cmp	r2, r1
 800c556:	d100      	bne.n	800c55a <memmove+0x2a>
 800c558:	bd10      	pop	{r4, pc}
 800c55a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c55e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c562:	e7f7      	b.n	800c554 <memmove+0x24>

0800c564 <_realloc_r>:
 800c564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c568:	4680      	mov	r8, r0
 800c56a:	4614      	mov	r4, r2
 800c56c:	460e      	mov	r6, r1
 800c56e:	b921      	cbnz	r1, 800c57a <_realloc_r+0x16>
 800c570:	4611      	mov	r1, r2
 800c572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c576:	f7ff bc29 	b.w	800bdcc <_malloc_r>
 800c57a:	b92a      	cbnz	r2, 800c588 <_realloc_r+0x24>
 800c57c:	f7ff fbbe 	bl	800bcfc <_free_r>
 800c580:	4625      	mov	r5, r4
 800c582:	4628      	mov	r0, r5
 800c584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c588:	f000 f81b 	bl	800c5c2 <_malloc_usable_size_r>
 800c58c:	4284      	cmp	r4, r0
 800c58e:	4607      	mov	r7, r0
 800c590:	d802      	bhi.n	800c598 <_realloc_r+0x34>
 800c592:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c596:	d812      	bhi.n	800c5be <_realloc_r+0x5a>
 800c598:	4621      	mov	r1, r4
 800c59a:	4640      	mov	r0, r8
 800c59c:	f7ff fc16 	bl	800bdcc <_malloc_r>
 800c5a0:	4605      	mov	r5, r0
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d0ed      	beq.n	800c582 <_realloc_r+0x1e>
 800c5a6:	42bc      	cmp	r4, r7
 800c5a8:	4622      	mov	r2, r4
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	bf28      	it	cs
 800c5ae:	463a      	movcs	r2, r7
 800c5b0:	f7ff fb8e 	bl	800bcd0 <memcpy>
 800c5b4:	4631      	mov	r1, r6
 800c5b6:	4640      	mov	r0, r8
 800c5b8:	f7ff fba0 	bl	800bcfc <_free_r>
 800c5bc:	e7e1      	b.n	800c582 <_realloc_r+0x1e>
 800c5be:	4635      	mov	r5, r6
 800c5c0:	e7df      	b.n	800c582 <_realloc_r+0x1e>

0800c5c2 <_malloc_usable_size_r>:
 800c5c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5c6:	1f18      	subs	r0, r3, #4
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	bfbc      	itt	lt
 800c5cc:	580b      	ldrlt	r3, [r1, r0]
 800c5ce:	18c0      	addlt	r0, r0, r3
 800c5d0:	4770      	bx	lr
	...

0800c5d4 <_init>:
 800c5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d6:	bf00      	nop
 800c5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5da:	bc08      	pop	{r3}
 800c5dc:	469e      	mov	lr, r3
 800c5de:	4770      	bx	lr

0800c5e0 <_fini>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	bf00      	nop
 800c5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e6:	bc08      	pop	{r3}
 800c5e8:	469e      	mov	lr, r3
 800c5ea:	4770      	bx	lr
