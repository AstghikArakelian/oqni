
ob1203.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd20  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800be30  0800be30  0001be30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bea4  0800bea4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bea4  0800bea4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bea4  0800bea4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bea4  0800bea4  0001bea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bea8  0800bea8  0001bea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800beac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001304  200001e0  0800c08c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014e4  0800c08c  000214e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164d9  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000392c  00000000  00000000  000366e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  0003a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003b450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c536  00000000  00000000  0003c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2b3  00000000  00000000  00058c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000916c1  00000000  00000000  00072ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010459a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005764  00000000  00000000  001045ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800be18 	.word	0x0800be18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800be18 	.word	0x0800be18

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__gesf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpsf2+0x4>
 8000932:	bf00      	nop

08000934 <__lesf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpsf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpsf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000948:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800094c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000950:	bf18      	it	ne
 8000952:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000956:	d011      	beq.n	800097c <__cmpsf2+0x40>
 8000958:	b001      	add	sp, #4
 800095a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800095e:	bf18      	it	ne
 8000960:	ea90 0f01 	teqne	r0, r1
 8000964:	bf58      	it	pl
 8000966:	ebb2 0003 	subspl.w	r0, r2, r3
 800096a:	bf88      	it	hi
 800096c:	17c8      	asrhi	r0, r1, #31
 800096e:	bf38      	it	cc
 8000970:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000974:	bf18      	it	ne
 8000976:	f040 0001 	orrne.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000980:	d102      	bne.n	8000988 <__cmpsf2+0x4c>
 8000982:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000986:	d105      	bne.n	8000994 <__cmpsf2+0x58>
 8000988:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800098c:	d1e4      	bne.n	8000958 <__cmpsf2+0x1c>
 800098e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000992:	d0e1      	beq.n	8000958 <__cmpsf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cfrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4608      	mov	r0, r1
 80009a0:	4661      	mov	r1, ip
 80009a2:	e7ff      	b.n	80009a4 <__aeabi_cfcmpeq>

080009a4 <__aeabi_cfcmpeq>:
 80009a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80009a6:	f7ff ffc9 	bl	800093c <__cmpsf2>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	bf48      	it	mi
 80009ae:	f110 0f00 	cmnmi.w	r0, #0
 80009b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080009b4 <__aeabi_fcmpeq>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff fff4 	bl	80009a4 <__aeabi_cfcmpeq>
 80009bc:	bf0c      	ite	eq
 80009be:	2001      	moveq	r0, #1
 80009c0:	2000      	movne	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_fcmplt>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffea 	bl	80009a4 <__aeabi_cfcmpeq>
 80009d0:	bf34      	ite	cc
 80009d2:	2001      	movcc	r0, #1
 80009d4:	2000      	movcs	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_fcmple>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffe0 	bl	80009a4 <__aeabi_cfcmpeq>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_fcmpge>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffd2 	bl	800099c <__aeabi_cfrcmple>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_fcmpgt>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffc8 	bl	800099c <__aeabi_cfrcmple>
 8000a0c:	bf34      	ite	cc
 8000a0e:	2001      	movcc	r0, #1
 8000a10:	2000      	movcs	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <Buffer_Init>:

/* Private variables ---------------------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
BUF_HandleTypeDef Buffer_Init(size_t size)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	BUF_HandleTypeDef circular_buffer = malloc(sizeof(circular_buf));
 8000a20:	2010      	movs	r0, #16
 8000a22:	f00b f929 	bl	800bc78 <malloc>
 8000a26:	4603      	mov	r3, r0
 8000a28:	60fb      	str	r3, [r7, #12]
	// If size is 1024, capacity will be 1025, and indices' range is [0..1024]
	circular_buffer->buffer = (uint8_t*)malloc(size + 1);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f00b f922 	bl	800bc78 <malloc>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	601a      	str	r2, [r3, #0]
	circular_buffer->capacity = size + 1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	60da      	str	r2, [r3, #12]
	Buffer_Clear(circular_buffer);
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f000 f830 	bl	8000aaa <Buffer_Clear>
	return circular_buffer;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <Buffer_Size>:

size_t Buffer_Size(BUF_HandleTypeDef buf)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	size_t size = (buf->capacity + buf->write_index - buf->read_index) % buf->capacity;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	68d2      	ldr	r2, [r2, #12]
 8000a70:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a74:	fb01 f202 	mul.w	r2, r1, r2
 8000a78:	1a9b      	subs	r3, r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
	return size;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <Buffer_IsEmpty>:

int Buffer_IsEmpty(BUF_HandleTypeDef buf)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == 0;
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ffdf 	bl	8000a54 <Buffer_Size>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf0c      	ite	eq
 8000a9c:	2301      	moveq	r3, #1
 8000a9e:	2300      	movne	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <Buffer_Clear>:

void Buffer_Clear(BUF_HandleTypeDef buf)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
	buf->write_index = 0;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
	buf->read_index = 0;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <Buffer_IsFull>:

int Buffer_IsFull(BUF_HandleTypeDef buf)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	return Buffer_Size(buf) == buf->capacity - 1;
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ffbf 	bl	8000a54 <Buffer_Size>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2301      	moveq	r3, #1
 8000ae4:	2300      	movne	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <Buffer_Read>:

uint8_t Buffer_Read(BUF_HandleTypeDef buf)
 {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]
	if(!Buffer_IsEmpty(buf))
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ffc3 	bl	8000a88 <Buffer_IsEmpty>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d116      	bne.n	8000b36 <Buffer_Read+0x46>
	{
		data = buf->buffer[buf->read_index];
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	73fb      	strb	r3, [r7, #15]
		buf->read_index++;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
		buf->read_index %= buf->capacity;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	68d2      	ldr	r2, [r2, #12]
 8000b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b2c:	fb01 f202 	mul.w	r2, r1, r2
 8000b30:	1a9a      	subs	r2, r3, r2
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	609a      	str	r2, [r3, #8]
	}
	return data;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <Buffer_Write>:

void Buffer_Write(BUF_HandleTypeDef buf, uint8_t data)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
	if(Buffer_IsFull(buf))
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ffbb 	bl	8000ac8 <Buffer_IsFull>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <Buffer_Write+0x1e>
	{
	    Buffer_Read(buf);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ffc9 	bl	8000af0 <Buffer_Read>
	}
	buf->buffer[buf->write_index] = data;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	78fa      	ldrb	r2, [r7, #3]
 8000b6a:	701a      	strb	r2, [r3, #0]
	buf->write_index++;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	605a      	str	r2, [r3, #4]
	buf->write_index %= buf->capacity;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68d2      	ldr	r2, [r2, #12]
 8000b7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b82:	fb01 f202 	mul.w	r2, r1, r2
 8000b86:	1a9a      	subs	r2, r3, r2
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	605a      	str	r2, [r3, #4]
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <Command_Check>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int Command_Check()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
	int command_count = COMMAND_FIRST_BYTE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
	int command_status = COMMAND_NOTRECEIVED;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
	while (! Buffer_IsEmpty(FIFO_buf) && command_status == COMMAND_NOTRECEIVED)
 8000ba2:	e038      	b.n	8000c16 <Command_Check+0x82>
	{
		uint8_t data = Buffer_Read(FIFO_buf);
 8000ba4:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <Command_Check+0xa4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ffa1 	bl	8000af0 <Buffer_Read>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
		switch (command_count)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d023      	beq.n	8000c00 <Command_Check+0x6c>
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	dc2b      	bgt.n	8000c16 <Command_Check+0x82>
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <Command_Check+0x38>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d00f      	beq.n	8000bea <Command_Check+0x56>
 8000bca:	e024      	b.n	8000c16 <Command_Check+0x82>
		{
		case COMMAND_FIRST_BYTE:
			command_count = (data == 0)? 1: 0;
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	60fb      	str	r3, [r7, #12]
			command_count = (data == 255)? 2: 0;
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2bff      	cmp	r3, #255	; 0xff
 8000bde:	d101      	bne.n	8000be4 <Command_Check+0x50>
 8000be0:	2302      	movs	r3, #2
 8000be2:	e000      	b.n	8000be6 <Command_Check+0x52>
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
			break;
 8000be8:	e015      	b.n	8000c16 <Command_Check+0x82>
		case COMMAND_SECOND_BYTE:
			command_status = (data == 7)? COMMAND_RECEIVED: COMMAND_NOTRECEIVED;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b07      	cmp	r3, #7
 8000bee:	bf14      	ite	ne
 8000bf0:	2301      	movne	r3, #1
 8000bf2:	2300      	moveq	r3, #0
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	60bb      	str	r3, [r7, #8]
			command = COMMAND_START;
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <Command_Check+0xa8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
			break;
 8000bfe:	e00a      	b.n	8000c16 <Command_Check+0x82>
		case COMMAND_SWITCH:
			command_status = (data == 0)? COMMAND_RECEIVED: COMMAND_NOTRECEIVED;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	60bb      	str	r3, [r7, #8]
			command = COMMAND_STOP;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <Command_Check+0xa8>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
			break;
 8000c14:	bf00      	nop
	while (! Buffer_IsEmpty(FIFO_buf) && command_status == COMMAND_NOTRECEIVED)
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <Command_Check+0xa4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff34 	bl	8000a88 <Buffer_IsEmpty>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <Command_Check+0x98>
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d0bb      	beq.n	8000ba4 <Command_Check+0x10>
		}
	}
	return command_status;
 8000c2c:	68bb      	ldr	r3, [r7, #8]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000029c 	.word	0x2000029c
 8000c3c:	200002a0 	.word	0x200002a0

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  FIFO_buf = Buffer_Init(128);
 8000c46:	2080      	movs	r0, #128	; 0x80
 8000c48:	f7ff fee6 	bl	8000a18 <Buffer_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4a32      	ldr	r2, [pc, #200]	; (8000d18 <main+0xd8>)
 8000c50:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c52:	f000 fb41 	bl	80012d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c56:	f000 f86b 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5a:	f000 f93d 	bl	8000ed8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c5e:	f000 f8c1 	bl	8000de4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c62:	f000 f8ed 	bl	8000e40 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000c66:	f00a f8f5 	bl	800ae54 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  cur_i2c = hi2c1;
 8000c6a:	4a2c      	ldr	r2, [pc, #176]	; (8000d1c <main+0xdc>)
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <main+0xe0>)
 8000c6e:	4610      	mov	r0, r2
 8000c70:	4619      	mov	r1, r3
 8000c72:	2354      	movs	r3, #84	; 0x54
 8000c74:	461a      	mov	r2, r3
 8000c76:	f00b f807 	bl	800bc88 <memcpy>
  adc_rdy = 0;
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <main+0xe4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
  uint32_t ppg;
  int setup = SETUP_NOTDONE;
 8000c80:	2301      	movs	r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
  command = COMMAND_START;
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <main+0xe8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
//		  memset(&ppg, 0, sizeof(ppg));
//		  heartrate11_read_fifo(0, &ppg);
//		  ob1203_send_results(ppg);
//		  adc_rdy = 0;
//	  }
	if(Command_Check() == COMMAND_RECEIVED)
 8000c8a:	f7ff ff83 	bl	8000b94 <Command_Check>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <main+0x5a>
	{
		SM_Case = ST_IDLE;
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <main+0xec>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
	}
	switch(SM_Case)
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <main+0xec>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d031      	beq.n	8000d06 <main+0xc6>
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	dcf1      	bgt.n	8000c8a <main+0x4a>
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <main+0x70>
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d00f      	beq.n	8000cce <main+0x8e>
 8000cae:	e032      	b.n	8000d16 <main+0xd6>
	{
		case ST_IDLE:
			if (command == COMMAND_START)
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <main+0xe8>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <main+0x7e>
			{
				SM_Case = ST_START;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <main+0xec>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
			}
			if (command == COMMAND_STOP)
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <main+0xe8>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d124      	bne.n	8000d10 <main+0xd0>
			{
				SM_Case = ST_STOP;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <main+0xec>)
 8000cc8:	2202      	movs	r2, #2
 8000cca:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ccc:	e020      	b.n	8000d10 <main+0xd0>
		case ST_START:
			if (setup == SETUP_NOTDONE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d105      	bne.n	8000ce0 <main+0xa0>
			{
				ob1203_send_preambula();
 8000cd4:	f00a fdd1 	bl	800b87a <ob1203_send_preambula>
				OB1203_Setup();
 8000cd8:	f000 f99d 	bl	8001016 <OB1203_Setup>
				setup = SETUP_DONE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
			}
			if(adc_rdy)
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <main+0xe4>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d015      	beq.n	8000d14 <main+0xd4>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	603b      	str	r3, [r7, #0]
			{
				memset(&ppg, 0, sizeof(ppg));
				heartrate11_read_fifo(0, &ppg);
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f00a ff73 	bl	800bbdc <heartrate11_read_fifo>
				ob1203_send_results(ppg);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f00a fda8 	bl	800b84e <ob1203_send_results>
				adc_rdy = 0;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <main+0xe4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000d04:	e006      	b.n	8000d14 <main+0xd4>
		case ST_STOP:
			OB1203_RST();
 8000d06:	f000 f97b 	bl	8001000 <OB1203_RST>
			setup = SETUP_NOTDONE;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
			break;
 8000d0e:	e002      	b.n	8000d16 <main+0xd6>
			break;
 8000d10:	bf00      	nop
 8000d12:	e7ba      	b.n	8000c8a <main+0x4a>
			break;
 8000d14:	bf00      	nop
	if(Command_Check() == COMMAND_RECEIVED)
 8000d16:	e7b8      	b.n	8000c8a <main+0x4a>
 8000d18:	2000029c 	.word	0x2000029c
 8000d1c:	200002a4 	.word	0x200002a4
 8000d20:	200001fc 	.word	0x200001fc
 8000d24:	200002a1 	.word	0x200002a1
 8000d28:	200002a0 	.word	0x200002a0
 8000d2c:	20000298 	.word	0x20000298

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b094      	sub	sp, #80	; 0x50
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3a:	2228      	movs	r2, #40	; 0x28
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00a ffb0 	bl	800bca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d60:	2301      	movs	r3, #1
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d72:	2302      	movs	r3, #2
 8000d74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d86:	4618      	mov	r0, r3
 8000d88:	f005 f802 	bl	8005d90 <HAL_RCC_OscConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d92:	f000 f94b 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d96:	230f      	movs	r3, #15
 8000d98:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2102      	movs	r1, #2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f005 fa6e 	bl	8006294 <HAL_RCC_ClockConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000dbe:	f000 f935 	bl	800102c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f005 fbe5 	bl	800659c <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000dd8:	f000 f928 	bl	800102c <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3750      	adds	r7, #80	; 0x50
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <MX_I2C1_Init+0x54>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000df0:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <MX_I2C1_Init+0x58>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e22:	f000 fe2d 	bl	8001a80 <HAL_I2C_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e2c:	f000 f8fe 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200001fc 	.word	0x200001fc
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	00061a80 	.word	0x00061a80

08000e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e84:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000e86:	f005 fc3f 	bl	8006708 <HAL_TIM_Base_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e90:	f000 f8cc 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000ea2:	f005 fc80 	bl	80067a6 <HAL_TIM_ConfigClockSource>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000eac:	f000 f8be 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_TIM2_Init+0x94>)
 8000ebe:	f005 fe2f 	bl	8006b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ec8:	f000 f8b0 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000250 	.word	0x20000250

08000ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eec:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <MX_GPIO_Init+0x114>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a3e      	ldr	r2, [pc, #248]	; (8000fec <MX_GPIO_Init+0x114>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <MX_GPIO_Init+0x114>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f04:	4b39      	ldr	r3, [pc, #228]	; (8000fec <MX_GPIO_Init+0x114>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a38      	ldr	r2, [pc, #224]	; (8000fec <MX_GPIO_Init+0x114>)
 8000f0a:	f043 0320 	orr.w	r3, r3, #32
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b36      	ldr	r3, [pc, #216]	; (8000fec <MX_GPIO_Init+0x114>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0320 	and.w	r3, r3, #32
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b33      	ldr	r3, [pc, #204]	; (8000fec <MX_GPIO_Init+0x114>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a32      	ldr	r2, [pc, #200]	; (8000fec <MX_GPIO_Init+0x114>)
 8000f22:	f043 0308 	orr.w	r3, r3, #8
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b30      	ldr	r3, [pc, #192]	; (8000fec <MX_GPIO_Init+0x114>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <MX_GPIO_Init+0x114>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a2c      	ldr	r2, [pc, #176]	; (8000fec <MX_GPIO_Init+0x114>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <MX_GPIO_Init+0x114>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f52:	4827      	ldr	r0, [pc, #156]	; (8000ff0 <MX_GPIO_Init+0x118>)
 8000f54:	f000 fd5a 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5e:	4825      	ldr	r0, [pc, #148]	; (8000ff4 <MX_GPIO_Init+0x11c>)
 8000f60:	f000 fd54 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481c      	ldr	r0, [pc, #112]	; (8000ff0 <MX_GPIO_Init+0x118>)
 8000f7e:	f000 fbc1 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f88:	2312      	movs	r3, #18
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4619      	mov	r1, r3
 8000f96:	4818      	ldr	r0, [pc, #96]	; (8000ff8 <MX_GPIO_Init+0x120>)
 8000f98:	f000 fbb4 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <MX_GPIO_Init+0x11c>)
 8000fb6:	f000 fba5 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_GPIO_Init+0x124>)
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <MX_GPIO_Init+0x120>)
 8000fce:	f000 fb99 	bl	8001704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2009      	movs	r0, #9
 8000fd8:	f000 fadb 	bl	8001592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fdc:	2009      	movs	r0, #9
 8000fde:	f000 faf4 	bl	80015ca <HAL_NVIC_EnableIRQ>

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40011000 	.word	0x40011000
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	40010c00 	.word	0x40010c00
 8000ffc:	10210000 	.word	0x10210000

08001000 <OB1203_RST>:

/* USER CODE BEGIN 4 */
void OB1203_RST(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	heartrate11_t heartrate11;
	heartrate11_reset_device(&heartrate11);
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	4618      	mov	r0, r3
 800100a:	f00a fd3b 	bl	800ba84 <heartrate11_reset_device>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <OB1203_Setup>:

void OB1203_Setup(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
	heartrate11_t heartrate11;
	heartrate11_default_cfg(&heartrate11);
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4618      	mov	r0, r3
 8001020:	f00a fc40 	bl	800b8a4 <heartrate11_default_cfg>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_MspInit+0x5c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <HAL_MspInit+0x5c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6193      	str	r3, [r2, #24]
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_MspInit+0x5c>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_MspInit+0x5c>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_MspInit+0x5c>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	61d3      	str	r3, [r2, #28]
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_MspInit+0x5c>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_MspInit+0x60>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_MspInit+0x60>)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000

0800109c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_I2C_MspInit+0x90>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d133      	bne.n	8001124 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <HAL_I2C_MspInit+0x94>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_I2C_MspInit+0x94>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_I2C_MspInit+0x94>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d4:	23c0      	movs	r3, #192	; 0xc0
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d8:	2312      	movs	r3, #18
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	4813      	ldr	r0, [pc, #76]	; (8001134 <HAL_I2C_MspInit+0x98>)
 80010e8:	f000 fb0c 	bl	8001704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_I2C_MspInit+0x94>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <HAL_I2C_MspInit+0x94>)
 80010f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f6:	61d3      	str	r3, [r2, #28]
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <HAL_I2C_MspInit+0x94>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	201f      	movs	r0, #31
 800110a:	f000 fa42 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800110e:	201f      	movs	r0, #31
 8001110:	f000 fa5b 	bl	80015ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2020      	movs	r0, #32
 800111a:	f000 fa3a 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800111e:	2020      	movs	r0, #32
 8001120:	f000 fa53 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40005400 	.word	0x40005400
 8001130:	40021000 	.word	0x40021000
 8001134:	40010c00 	.word	0x40010c00

08001138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001148:	d10b      	bne.n	8001162 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_TIM_Base_MspInit+0x34>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_TIM_Base_MspInit+0x34>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	61d3      	str	r3, [r2, #28]
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_TIM_Base_MspInit+0x34>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	40021000 	.word	0x40021000

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b6:	f000 f8d5 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  adc_rdy = 1;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <EXTI3_IRQHandler+0x14>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80011ca:	2008      	movs	r0, #8
 80011cc:	f000 fc36 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200002a1 	.word	0x200002a1

080011d8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80011de:	f003 fa44 	bl	800466a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000fc8 	.word	0x20000fc8

080011ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <I2C1_EV_IRQHandler+0x10>)
 80011f2:	f001 f8ef 	bl	80023d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200001fc 	.word	0x200001fc

08001200 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <I2C1_ER_IRQHandler+0x10>)
 8001206:	f001 fa56 	bl	80026b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200001fc 	.word	0x200001fc

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f00a fcee 	bl	800bc24 <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20005000 	.word	0x20005000
 8001274:	00000400 	.word	0x00000400
 8001278:	200002f8 	.word	0x200002f8
 800127c:	200014e8 	.word	0x200014e8

08001280 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	; (80012c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	; (80012d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012b2:	f7ff ffe5 	bl	8001280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f00a fcbb 	bl	800bc30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ba:	f7ff fcc1 	bl	8000c40 <main>
  bx lr
 80012be:	4770      	bx	lr
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80012c8:	0800beac 	.word	0x0800beac
  ldr r2, =_sbss
 80012cc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80012d0:	200014e4 	.word	0x200014e4

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_Init+0x28>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_Init+0x28>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f947 	bl	800157c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	200f      	movs	r0, #15
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff fea0 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f95f 	bl	80015e6 <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f927 	bl	8001592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	20000008 	.word	0x20000008
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_IncTick+0x1c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_IncTick+0x20>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_IncTick+0x20>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	20000008 	.word	0x20000008
 8001384:	200002fc 	.word	0x200002fc

08001388 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b02      	ldr	r3, [pc, #8]	; (8001398 <HAL_GetTick+0x10>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	200002fc 	.word	0x200002fc

0800139c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff fff0 	bl	8001388 <HAL_GetTick>
 80013a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b4:	d005      	beq.n	80013c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_Delay+0x44>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c2:	bf00      	nop
 80013c4:	f7ff ffe0 	bl	8001388 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d8f7      	bhi.n	80013c4 <HAL_Delay+0x28>
  {
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000008 	.word	0x20000008

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4906      	ldr	r1, [pc, #24]	; (800147c <__NVIC_EnableIRQ+0x34>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001548:	d301      	bcc.n	800154e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154a:	2301      	movs	r3, #1
 800154c:	e00f      	b.n	800156e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <SysTick_Config+0x40>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001556:	210f      	movs	r1, #15
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f7ff ff90 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <SysTick_Config+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SysTick_Config+0x40>)
 8001568:	2207      	movs	r2, #7
 800156a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff2d 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a4:	f7ff ff42 	bl	800142c <__NVIC_GetPriorityGrouping>
 80015a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ff90 	bl	80014d4 <NVIC_EncodePriority>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff5f 	bl	8001480 <__NVIC_SetPriority>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff35 	bl	8001448 <__NVIC_EnableIRQ>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffa2 	bl	8001538 <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001612:	2b02      	cmp	r3, #2
 8001614:	d005      	beq.n	8001622 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2204      	movs	r2, #4
 800161a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e051      	b.n	80016c6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 020e 	bic.w	r2, r2, #14
 8001630:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <HAL_DMA_Abort_IT+0xd0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d029      	beq.n	80016a0 <HAL_DMA_Abort_IT+0xa0>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a20      	ldr	r2, [pc, #128]	; (80016d4 <HAL_DMA_Abort_IT+0xd4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d022      	beq.n	800169c <HAL_DMA_Abort_IT+0x9c>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <HAL_DMA_Abort_IT+0xd8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d01a      	beq.n	8001696 <HAL_DMA_Abort_IT+0x96>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_DMA_Abort_IT+0xdc>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d012      	beq.n	8001690 <HAL_DMA_Abort_IT+0x90>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <HAL_DMA_Abort_IT+0xe0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00a      	beq.n	800168a <HAL_DMA_Abort_IT+0x8a>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1a      	ldr	r2, [pc, #104]	; (80016e4 <HAL_DMA_Abort_IT+0xe4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d102      	bne.n	8001684 <HAL_DMA_Abort_IT+0x84>
 800167e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001682:	e00e      	b.n	80016a2 <HAL_DMA_Abort_IT+0xa2>
 8001684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001688:	e00b      	b.n	80016a2 <HAL_DMA_Abort_IT+0xa2>
 800168a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168e:	e008      	b.n	80016a2 <HAL_DMA_Abort_IT+0xa2>
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	e005      	b.n	80016a2 <HAL_DMA_Abort_IT+0xa2>
 8001696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169a:	e002      	b.n	80016a2 <HAL_DMA_Abort_IT+0xa2>
 800169c:	2310      	movs	r3, #16
 800169e:	e000      	b.n	80016a2 <HAL_DMA_Abort_IT+0xa2>
 80016a0:	2301      	movs	r3, #1
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_DMA_Abort_IT+0xe8>)
 80016a4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	4798      	blx	r3
    } 
  }
  return status;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40020008 	.word	0x40020008
 80016d4:	4002001c 	.word	0x4002001c
 80016d8:	40020030 	.word	0x40020030
 80016dc:	40020044 	.word	0x40020044
 80016e0:	40020058 	.word	0x40020058
 80016e4:	4002006c 	.word	0x4002006c
 80016e8:	40020000 	.word	0x40020000

080016ec <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b08b      	sub	sp, #44	; 0x2c
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001716:	e169      	b.n	80019ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001718:	2201      	movs	r2, #1
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8158 	bne.w	80019e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4a9a      	ldr	r2, [pc, #616]	; (80019a4 <HAL_GPIO_Init+0x2a0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d05e      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 8001740:	4a98      	ldr	r2, [pc, #608]	; (80019a4 <HAL_GPIO_Init+0x2a0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d875      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 8001746:	4a98      	ldr	r2, [pc, #608]	; (80019a8 <HAL_GPIO_Init+0x2a4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d058      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 800174c:	4a96      	ldr	r2, [pc, #600]	; (80019a8 <HAL_GPIO_Init+0x2a4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d86f      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 8001752:	4a96      	ldr	r2, [pc, #600]	; (80019ac <HAL_GPIO_Init+0x2a8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d052      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 8001758:	4a94      	ldr	r2, [pc, #592]	; (80019ac <HAL_GPIO_Init+0x2a8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d869      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 800175e:	4a94      	ldr	r2, [pc, #592]	; (80019b0 <HAL_GPIO_Init+0x2ac>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d04c      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 8001764:	4a92      	ldr	r2, [pc, #584]	; (80019b0 <HAL_GPIO_Init+0x2ac>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d863      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 800176a:	4a92      	ldr	r2, [pc, #584]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d046      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 8001770:	4a90      	ldr	r2, [pc, #576]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d85d      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 8001776:	2b12      	cmp	r3, #18
 8001778:	d82a      	bhi.n	80017d0 <HAL_GPIO_Init+0xcc>
 800177a:	2b12      	cmp	r3, #18
 800177c:	d859      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <HAL_GPIO_Init+0x80>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	080017ff 	.word	0x080017ff
 8001788:	080017d9 	.word	0x080017d9
 800178c:	080017eb 	.word	0x080017eb
 8001790:	0800182d 	.word	0x0800182d
 8001794:	08001833 	.word	0x08001833
 8001798:	08001833 	.word	0x08001833
 800179c:	08001833 	.word	0x08001833
 80017a0:	08001833 	.word	0x08001833
 80017a4:	08001833 	.word	0x08001833
 80017a8:	08001833 	.word	0x08001833
 80017ac:	08001833 	.word	0x08001833
 80017b0:	08001833 	.word	0x08001833
 80017b4:	08001833 	.word	0x08001833
 80017b8:	08001833 	.word	0x08001833
 80017bc:	08001833 	.word	0x08001833
 80017c0:	08001833 	.word	0x08001833
 80017c4:	08001833 	.word	0x08001833
 80017c8:	080017e1 	.word	0x080017e1
 80017cc:	080017f5 	.word	0x080017f5
 80017d0:	4a79      	ldr	r2, [pc, #484]	; (80019b8 <HAL_GPIO_Init+0x2b4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017d6:	e02c      	b.n	8001832 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	623b      	str	r3, [r7, #32]
          break;
 80017de:	e029      	b.n	8001834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	3304      	adds	r3, #4
 80017e6:	623b      	str	r3, [r7, #32]
          break;
 80017e8:	e024      	b.n	8001834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	3308      	adds	r3, #8
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e01f      	b.n	8001834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	330c      	adds	r3, #12
 80017fa:	623b      	str	r3, [r7, #32]
          break;
 80017fc:	e01a      	b.n	8001834 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001806:	2304      	movs	r3, #4
 8001808:	623b      	str	r3, [r7, #32]
          break;
 800180a:	e013      	b.n	8001834 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001814:	2308      	movs	r3, #8
 8001816:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	611a      	str	r2, [r3, #16]
          break;
 800181e:	e009      	b.n	8001834 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001820:	2308      	movs	r3, #8
 8001822:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	615a      	str	r2, [r3, #20]
          break;
 800182a:	e003      	b.n	8001834 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
          break;
 8001830:	e000      	b.n	8001834 <HAL_GPIO_Init+0x130>
          break;
 8001832:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2bff      	cmp	r3, #255	; 0xff
 8001838:	d801      	bhi.n	800183e <HAL_GPIO_Init+0x13a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	e001      	b.n	8001842 <HAL_GPIO_Init+0x13e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3304      	adds	r3, #4
 8001842:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2bff      	cmp	r3, #255	; 0xff
 8001848:	d802      	bhi.n	8001850 <HAL_GPIO_Init+0x14c>
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	e002      	b.n	8001856 <HAL_GPIO_Init+0x152>
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	3b08      	subs	r3, #8
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	210f      	movs	r1, #15
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	401a      	ands	r2, r3
 8001868:	6a39      	ldr	r1, [r7, #32]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	431a      	orrs	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80b1 	beq.w	80019e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001884:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <HAL_GPIO_Init+0x2b8>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_GPIO_Init+0x2b8>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <HAL_GPIO_Init+0x2b8>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800189c:	4a48      	ldr	r2, [pc, #288]	; (80019c0 <HAL_GPIO_Init+0x2bc>)
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a40      	ldr	r2, [pc, #256]	; (80019c4 <HAL_GPIO_Init+0x2c0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d013      	beq.n	80018f0 <HAL_GPIO_Init+0x1ec>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a3f      	ldr	r2, [pc, #252]	; (80019c8 <HAL_GPIO_Init+0x2c4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d00d      	beq.n	80018ec <HAL_GPIO_Init+0x1e8>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a3e      	ldr	r2, [pc, #248]	; (80019cc <HAL_GPIO_Init+0x2c8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d007      	beq.n	80018e8 <HAL_GPIO_Init+0x1e4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a3d      	ldr	r2, [pc, #244]	; (80019d0 <HAL_GPIO_Init+0x2cc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_GPIO_Init+0x1e0>
 80018e0:	2303      	movs	r3, #3
 80018e2:	e006      	b.n	80018f2 <HAL_GPIO_Init+0x1ee>
 80018e4:	2304      	movs	r3, #4
 80018e6:	e004      	b.n	80018f2 <HAL_GPIO_Init+0x1ee>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x1ee>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_GPIO_Init+0x1ee>
 80018f0:	2300      	movs	r3, #0
 80018f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f4:	f002 0203 	and.w	r2, r2, #3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4093      	lsls	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001902:	492f      	ldr	r1, [pc, #188]	; (80019c0 <HAL_GPIO_Init+0x2bc>)
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800191c:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	492c      	ldr	r1, [pc, #176]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800192a:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	43db      	mvns	r3, r3
 8001932:	4928      	ldr	r1, [pc, #160]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001934:	4013      	ands	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4922      	ldr	r1, [pc, #136]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	491e      	ldr	r1, [pc, #120]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 800195c:	4013      	ands	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	4918      	ldr	r1, [pc, #96]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	4914      	ldr	r1, [pc, #80]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001984:	4013      	ands	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d021      	beq.n	80019d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	490e      	ldr	r1, [pc, #56]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	60cb      	str	r3, [r1, #12]
 80019a0:	e021      	b.n	80019e6 <HAL_GPIO_Init+0x2e2>
 80019a2:	bf00      	nop
 80019a4:	10320000 	.word	0x10320000
 80019a8:	10310000 	.word	0x10310000
 80019ac:	10220000 	.word	0x10220000
 80019b0:	10210000 	.word	0x10210000
 80019b4:	10120000 	.word	0x10120000
 80019b8:	10110000 	.word	0x10110000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010000 	.word	0x40010000
 80019c4:	40010800 	.word	0x40010800
 80019c8:	40010c00 	.word	0x40010c00
 80019cc:	40011000 	.word	0x40011000
 80019d0:	40011400 	.word	0x40011400
 80019d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_GPIO_Init+0x304>)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	43db      	mvns	r3, r3
 80019e0:	4909      	ldr	r1, [pc, #36]	; (8001a08 <HAL_GPIO_Init+0x304>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	3301      	adds	r3, #1
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f47f ae8e 	bne.w	8001718 <HAL_GPIO_Init+0x14>
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	372c      	adds	r7, #44	; 0x2c
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a1c:	787b      	ldrb	r3, [r7, #1]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a28:	e003      	b.n	8001a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a2a:	887b      	ldrh	r3, [r7, #2]
 8001a2c:	041a      	lsls	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f806 	bl	8001a6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e12b      	b.n	8001cea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff faf8 	bl	800109c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2224      	movs	r2, #36	; 0x24
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ae4:	f004 fd28 	bl	8006538 <HAL_RCC_GetPCLK1Freq>
 8001ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4a81      	ldr	r2, [pc, #516]	; (8001cf4 <HAL_I2C_Init+0x274>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d807      	bhi.n	8001b04 <HAL_I2C_Init+0x84>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a80      	ldr	r2, [pc, #512]	; (8001cf8 <HAL_I2C_Init+0x278>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	bf94      	ite	ls
 8001afc:	2301      	movls	r3, #1
 8001afe:	2300      	movhi	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	e006      	b.n	8001b12 <HAL_I2C_Init+0x92>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4a7d      	ldr	r2, [pc, #500]	; (8001cfc <HAL_I2C_Init+0x27c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	bf94      	ite	ls
 8001b0c:	2301      	movls	r3, #1
 8001b0e:	2300      	movhi	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0e7      	b.n	8001cea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4a78      	ldr	r2, [pc, #480]	; (8001d00 <HAL_I2C_Init+0x280>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9b      	lsrs	r3, r3, #18
 8001b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a6a      	ldr	r2, [pc, #424]	; (8001cf4 <HAL_I2C_Init+0x274>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d802      	bhi.n	8001b54 <HAL_I2C_Init+0xd4>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3301      	adds	r3, #1
 8001b52:	e009      	b.n	8001b68 <HAL_I2C_Init+0xe8>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	4a69      	ldr	r2, [pc, #420]	; (8001d04 <HAL_I2C_Init+0x284>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	3301      	adds	r3, #1
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	495c      	ldr	r1, [pc, #368]	; (8001cf4 <HAL_I2C_Init+0x274>)
 8001b84:	428b      	cmp	r3, r1
 8001b86:	d819      	bhi.n	8001bbc <HAL_I2C_Init+0x13c>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e59      	subs	r1, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b96:	1c59      	adds	r1, r3, #1
 8001b98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <HAL_I2C_Init+0x138>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1e59      	subs	r1, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb6:	e051      	b.n	8001c5c <HAL_I2C_Init+0x1dc>
 8001bb8:	2304      	movs	r3, #4
 8001bba:	e04f      	b.n	8001c5c <HAL_I2C_Init+0x1dc>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d111      	bne.n	8001be8 <HAL_I2C_Init+0x168>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1e58      	subs	r0, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	440b      	add	r3, r1
 8001bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e012      	b.n	8001c0e <HAL_I2C_Init+0x18e>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	1e58      	subs	r0, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	0099      	lsls	r1, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf0c      	ite	eq
 8001c08:	2301      	moveq	r3, #1
 8001c0a:	2300      	movne	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2C_Init+0x196>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e022      	b.n	8001c5c <HAL_I2C_Init+0x1dc>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10e      	bne.n	8001c3c <HAL_I2C_Init+0x1bc>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1e58      	subs	r0, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6859      	ldr	r1, [r3, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	440b      	add	r3, r1
 8001c2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c30:	3301      	adds	r3, #1
 8001c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c3a:	e00f      	b.n	8001c5c <HAL_I2C_Init+0x1dc>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1e58      	subs	r0, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6859      	ldr	r1, [r3, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	0099      	lsls	r1, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c52:	3301      	adds	r3, #1
 8001c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	6809      	ldr	r1, [r1, #0]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6911      	ldr	r1, [r2, #16]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68d2      	ldr	r2, [r2, #12]
 8001c96:	4311      	orrs	r1, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	000186a0 	.word	0x000186a0
 8001cf8:	001e847f 	.word	0x001e847f
 8001cfc:	003d08ff 	.word	0x003d08ff
 8001d00:	431bde83 	.word	0x431bde83
 8001d04:	10624dd3 	.word	0x10624dd3

08001d08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	461a      	mov	r2, r3
 8001d14:	460b      	mov	r3, r1
 8001d16:	817b      	strh	r3, [r7, #10]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff fb34 	bl	8001388 <HAL_GetTick>
 8001d20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	f040 80e0 	bne.w	8001ef0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2319      	movs	r3, #25
 8001d36:	2201      	movs	r2, #1
 8001d38:	4970      	ldr	r1, [pc, #448]	; (8001efc <HAL_I2C_Master_Transmit+0x1f4>)
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f002 f93c 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d46:	2302      	movs	r3, #2
 8001d48:	e0d3      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_I2C_Master_Transmit+0x50>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e0cc      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x1ea>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d007      	beq.n	8001d7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2221      	movs	r2, #33	; 0x21
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2210      	movs	r2, #16
 8001d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	893a      	ldrh	r2, [r7, #8]
 8001dae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4a50      	ldr	r2, [pc, #320]	; (8001f00 <HAL_I2C_Master_Transmit+0x1f8>)
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dc0:	8979      	ldrh	r1, [r7, #10]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	6a3a      	ldr	r2, [r7, #32]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f001 fee4 	bl	8003b94 <I2C_MasterRequestWrite>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e08d      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001dec:	e066      	b.n	8001ebc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	6a39      	ldr	r1, [r7, #32]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f002 f9b6 	bl	8004164 <I2C_WaitOnTXEFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00d      	beq.n	8001e1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d107      	bne.n	8001e16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e06b      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d11b      	bne.n	8001e90 <HAL_I2C_Master_Transmit+0x188>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d017      	beq.n	8001e90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	6a39      	ldr	r1, [r7, #32]
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f002 f9a6 	bl	80041e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00d      	beq.n	8001ebc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d107      	bne.n	8001eb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e01a      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d194      	bne.n	8001dee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e000      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	00100002 	.word	0x00100002
 8001f00:	ffff0000 	.word	0xffff0000

08001f04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	; 0x30
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	4611      	mov	r1, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	817b      	strh	r3, [r7, #10]
 8001f16:	460b      	mov	r3, r1
 8001f18:	813b      	strh	r3, [r7, #8]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f22:	f7ff fa31 	bl	8001388 <HAL_GetTick>
 8001f26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	f040 8244 	bne.w	80023be <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2319      	movs	r3, #25
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4982      	ldr	r1, [pc, #520]	; (8002148 <HAL_I2C_Mem_Read+0x244>)
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f002 f839 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e237      	b.n	80023c0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_I2C_Mem_Read+0x5a>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e230      	b.n	80023c0 <HAL_I2C_Mem_Read+0x4bc>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d007      	beq.n	8001f84 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2222      	movs	r2, #34	; 0x22
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2240      	movs	r2, #64	; 0x40
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4a62      	ldr	r2, [pc, #392]	; (800214c <HAL_I2C_Mem_Read+0x248>)
 8001fc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fc6:	88f8      	ldrh	r0, [r7, #6]
 8001fc8:	893a      	ldrh	r2, [r7, #8]
 8001fca:	8979      	ldrh	r1, [r7, #10]
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f001 fe5e 	bl	8003c98 <I2C_RequestMemoryRead>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e1ec      	b.n	80023c0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d113      	bne.n	8002016 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	e1c0      	b.n	8002398 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201a:	2b01      	cmp	r3, #1
 800201c:	d11e      	bne.n	800205c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800202e:	b672      	cpsid	i
}
 8002030:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002056:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002058:	b662      	cpsie	i
}
 800205a:	e035      	b.n	80020c8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	2b02      	cmp	r3, #2
 8002062:	d11e      	bne.n	80020a2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002072:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002074:	b672      	cpsid	i
}
 8002076:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800209e:	b662      	cpsie	i
}
 80020a0:	e012      	b.n	80020c8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020b0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80020c8:	e166      	b.n	8002398 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	f200 811f 	bhi.w	8002312 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d123      	bne.n	8002124 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f002 f8f3 	bl	80042cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e167      	b.n	80023c0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002122:	e139      	b.n	8002398 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002128:	2b02      	cmp	r3, #2
 800212a:	d152      	bne.n	80021d2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	2200      	movs	r2, #0
 8002134:	4906      	ldr	r1, [pc, #24]	; (8002150 <HAL_I2C_Mem_Read+0x24c>)
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f001 ff3e 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e13c      	b.n	80023c0 <HAL_I2C_Mem_Read+0x4bc>
 8002146:	bf00      	nop
 8002148:	00100002 	.word	0x00100002
 800214c:	ffff0000 	.word	0xffff0000
 8002150:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002154:	b672      	cpsid	i
}
 8002156:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800219a:	b662      	cpsie	i
}
 800219c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021d0:	e0e2      	b.n	8002398 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d8:	2200      	movs	r2, #0
 80021da:	497b      	ldr	r1, [pc, #492]	; (80023c8 <HAL_I2C_Mem_Read+0x4c4>)
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f001 feeb 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0e9      	b.n	80023c0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021fc:	b672      	cpsid	i
}
 80021fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002232:	4b66      	ldr	r3, [pc, #408]	; (80023cc <HAL_I2C_Mem_Read+0x4c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	08db      	lsrs	r3, r3, #3
 8002238:	4a65      	ldr	r2, [pc, #404]	; (80023d0 <HAL_I2C_Mem_Read+0x4cc>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0a1a      	lsrs	r2, r3, #8
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	00da      	lsls	r2, r3, #3
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	3b01      	subs	r3, #1
 8002250:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d118      	bne.n	800228a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f043 0220 	orr.w	r2, r3, #32
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800227a:	b662      	cpsie	i
}
 800227c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e09a      	b.n	80023c0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b04      	cmp	r3, #4
 8002296:	d1d9      	bne.n	800224c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022da:	b662      	cpsie	i
}
 80022dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002310:	e042      	b.n	8002398 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002314:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f001 ffd8 	bl	80042cc <I2C_WaitOnRXNEFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e04c      	b.n	80023c0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b04      	cmp	r3, #4
 8002364:	d118      	bne.n	8002398 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	f47f ae94 	bne.w	80020ca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	00010004 	.word	0x00010004
 80023cc:	20000000 	.word	0x20000000
 80023d0:	14f8b589 	.word	0x14f8b589

080023d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	2b10      	cmp	r3, #16
 8002402:	d003      	beq.n	800240c <HAL_I2C_EV_IRQHandler+0x38>
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	2b40      	cmp	r3, #64	; 0x40
 8002408:	f040 80c1 	bne.w	800258e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <HAL_I2C_EV_IRQHandler+0x6e>
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800242c:	d003      	beq.n	8002436 <HAL_I2C_EV_IRQHandler+0x62>
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002434:	d101      	bne.n	800243a <HAL_I2C_EV_IRQHandler+0x66>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_I2C_EV_IRQHandler+0x68>
 800243a:	2300      	movs	r3, #0
 800243c:	2b01      	cmp	r3, #1
 800243e:	f000 8132 	beq.w	80026a6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00c      	beq.n	8002466 <HAL_I2C_EV_IRQHandler+0x92>
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	0a5b      	lsrs	r3, r3, #9
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f001 ffbb 	bl	80043d4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fd77 	bl	8002f52 <I2C_Master_SB>
 8002464:	e092      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	08db      	lsrs	r3, r3, #3
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_I2C_EV_IRQHandler+0xb2>
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	0a5b      	lsrs	r3, r3, #9
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fdec 	bl	800305c <I2C_Master_ADD10>
 8002484:	e082      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_I2C_EV_IRQHandler+0xd2>
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	0a5b      	lsrs	r3, r3, #9
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fe05 	bl	80030ae <I2C_Master_ADDR>
 80024a4:	e072      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d03b      	beq.n	800252a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024c0:	f000 80f3 	beq.w	80026aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	09db      	lsrs	r3, r3, #7
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00f      	beq.n	80024f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	0a9b      	lsrs	r3, r3, #10
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d009      	beq.n	80024f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d103      	bne.n	80024f0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f9f1 	bl	80028d0 <I2C_MasterTransmit_TXE>
 80024ee:	e04d      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80d6 	beq.w	80026aa <HAL_I2C_EV_IRQHandler+0x2d6>
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	0a5b      	lsrs	r3, r3, #9
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 80cf 	beq.w	80026aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800250c:	7bbb      	ldrb	r3, [r7, #14]
 800250e:	2b21      	cmp	r3, #33	; 0x21
 8002510:	d103      	bne.n	800251a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fa78 	bl	8002a08 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002518:	e0c7      	b.n	80026aa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	f040 80c4 	bne.w	80026aa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fae6 	bl	8002af4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002528:	e0bf      	b.n	80026aa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002538:	f000 80b7 	beq.w	80026aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00f      	beq.n	8002568 <HAL_I2C_EV_IRQHandler+0x194>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	0a9b      	lsrs	r3, r3, #10
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <HAL_I2C_EV_IRQHandler+0x194>
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d103      	bne.n	8002568 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fb5b 	bl	8002c1c <I2C_MasterReceive_RXNE>
 8002566:	e011      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 809a 	beq.w	80026aa <HAL_I2C_EV_IRQHandler+0x2d6>
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	0a5b      	lsrs	r3, r3, #9
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8093 	beq.w	80026aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fbfa 	bl	8002d7e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800258a:	e08e      	b.n	80026aa <HAL_I2C_EV_IRQHandler+0x2d6>
 800258c:	e08d      	b.n	80026aa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	e007      	b.n	80025b0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d012      	beq.n	80025e2 <HAL_I2C_EV_IRQHandler+0x20e>
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	0a5b      	lsrs	r3, r3, #9
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00c      	beq.n	80025e2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80025d8:	69b9      	ldr	r1, [r7, #24]
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 ffbe 	bl	800355c <I2C_Slave_ADDR>
 80025e0:	e066      	b.n	80026b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_I2C_EV_IRQHandler+0x22e>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	0a5b      	lsrs	r3, r3, #9
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fff8 	bl	80035f0 <I2C_Slave_STOPF>
 8002600:	e056      	b.n	80026b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002602:	7bbb      	ldrb	r3, [r7, #14]
 8002604:	2b21      	cmp	r3, #33	; 0x21
 8002606:	d002      	beq.n	800260e <HAL_I2C_EV_IRQHandler+0x23a>
 8002608:	7bbb      	ldrb	r3, [r7, #14]
 800260a:	2b29      	cmp	r3, #41	; 0x29
 800260c:	d125      	bne.n	800265a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	09db      	lsrs	r3, r3, #7
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00f      	beq.n	800263a <HAL_I2C_EV_IRQHandler+0x266>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	0a9b      	lsrs	r3, r3, #10
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_I2C_EV_IRQHandler+0x266>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fed6 	bl	80033e4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002638:	e039      	b.n	80026ae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d033      	beq.n	80026ae <HAL_I2C_EV_IRQHandler+0x2da>
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	0a5b      	lsrs	r3, r3, #9
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d02d      	beq.n	80026ae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 ff03 	bl	800345e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002658:	e029      	b.n	80026ae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00f      	beq.n	8002686 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	0a9b      	lsrs	r3, r3, #10
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d103      	bne.n	8002686 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 ff0d 	bl	800349e <I2C_SlaveReceive_RXNE>
 8002684:	e014      	b.n	80026b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00e      	beq.n	80026b0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	0a5b      	lsrs	r3, r3, #9
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 ff3b 	bl	800351a <I2C_SlaveReceive_BTF>
 80026a4:	e004      	b.n	80026b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80026a6:	bf00      	nop
 80026a8:	e002      	b.n	80026b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026aa:	bf00      	nop
 80026ac:	e000      	b.n	80026b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b08a      	sub	sp, #40	; 0x28
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026d8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <HAL_I2C_ER_IRQHandler+0x5e>
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d010      	beq.n	8002714 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002702:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002712:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	0a5b      	lsrs	r3, r3, #9
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00e      	beq.n	800273e <HAL_I2C_ER_IRQHandler+0x88>
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	f043 0302 	orr.w	r3, r3, #2
 8002732:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800273c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	0a9b      	lsrs	r3, r3, #10
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d03f      	beq.n	80027ca <HAL_I2C_ER_IRQHandler+0x114>
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d039      	beq.n	80027ca <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002756:	7efb      	ldrb	r3, [r7, #27]
 8002758:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002768:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002770:	7ebb      	ldrb	r3, [r7, #26]
 8002772:	2b20      	cmp	r3, #32
 8002774:	d112      	bne.n	800279c <HAL_I2C_ER_IRQHandler+0xe6>
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10f      	bne.n	800279c <HAL_I2C_ER_IRQHandler+0xe6>
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	2b21      	cmp	r3, #33	; 0x21
 8002780:	d008      	beq.n	8002794 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	2b29      	cmp	r3, #41	; 0x29
 8002786:	d005      	beq.n	8002794 <HAL_I2C_ER_IRQHandler+0xde>
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	2b28      	cmp	r3, #40	; 0x28
 800278c:	d106      	bne.n	800279c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b21      	cmp	r3, #33	; 0x21
 8002792:	d103      	bne.n	800279c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f001 f85b 	bl	8003850 <I2C_Slave_AF>
 800279a:	e016      	b.n	80027ca <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80027ae:	7efb      	ldrb	r3, [r7, #27]
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d002      	beq.n	80027ba <HAL_I2C_ER_IRQHandler+0x104>
 80027b4:	7efb      	ldrb	r3, [r7, #27]
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d107      	bne.n	80027ca <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	0adb      	lsrs	r3, r3, #11
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00e      	beq.n	80027f4 <HAL_I2C_ER_IRQHandler+0x13e>
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80027f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f001 f892 	bl	8003930 <I2C_ITError>
  }
}
 800280c:	bf00      	nop
 800280e:	3728      	adds	r7, #40	; 0x28
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	70fb      	strb	r3, [r7, #3]
 8002868:	4613      	mov	r3, r2
 800286a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d150      	bne.n	8002998 <I2C_MasterTransmit_TXE+0xc8>
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b21      	cmp	r3, #33	; 0x21
 80028fa:	d14d      	bne.n	8002998 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d01d      	beq.n	800293e <I2C_MasterTransmit_TXE+0x6e>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b20      	cmp	r3, #32
 8002906:	d01a      	beq.n	800293e <I2C_MasterTransmit_TXE+0x6e>
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800290e:	d016      	beq.n	800293e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800291e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2211      	movs	r2, #17
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ff6c 	bl	8002814 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800293c:	e060      	b.n	8002a00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800294c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d107      	bne.n	8002988 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff ff81 	bl	8002888 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002986:	e03b      	b.n	8002a00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ff3f 	bl	8002814 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002996:	e033      	b.n	8002a00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	2b21      	cmp	r3, #33	; 0x21
 800299c:	d005      	beq.n	80029aa <I2C_MasterTransmit_TXE+0xda>
 800299e:	7bbb      	ldrb	r3, [r7, #14]
 80029a0:	2b40      	cmp	r3, #64	; 0x40
 80029a2:	d12d      	bne.n	8002a00 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b22      	cmp	r3, #34	; 0x22
 80029a8:	d12a      	bne.n	8002a00 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d108      	bne.n	80029c6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80029c4:	e01c      	b.n	8002a00 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b40      	cmp	r3, #64	; 0x40
 80029d0:	d103      	bne.n	80029da <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f88e 	bl	8002af4 <I2C_MemoryTransmit_TXE_BTF>
}
 80029d8:	e012      	b.n	8002a00 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029fe:	e7ff      	b.n	8002a00 <I2C_MasterTransmit_TXE+0x130>
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b21      	cmp	r3, #33	; 0x21
 8002a20:	d164      	bne.n	8002aec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d012      	beq.n	8002a52 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002a50:	e04c      	b.n	8002aec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d01d      	beq.n	8002a94 <I2C_MasterTransmit_BTF+0x8c>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d01a      	beq.n	8002a94 <I2C_MasterTransmit_BTF+0x8c>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a64:	d016      	beq.n	8002a94 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a74:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2211      	movs	r2, #17
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff fec1 	bl	8002814 <HAL_I2C_MasterTxCpltCallback>
}
 8002a92:	e02b      	b.n	8002aec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aa2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d107      	bne.n	8002ade <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff fed6 	bl	8002888 <HAL_I2C_MemTxCpltCallback>
}
 8002adc:	e006      	b.n	8002aec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff fe94 	bl	8002814 <HAL_I2C_MasterTxCpltCallback>
}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d11d      	bne.n	8002b48 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d10b      	bne.n	8002b2c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b24:	1c9a      	adds	r2, r3, #2
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002b2a:	e073      	b.n	8002c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	121b      	asrs	r3, r3, #8
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b46:	e065      	b.n	8002c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d10b      	bne.n	8002b68 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b66:	e055      	b.n	8002c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d151      	bne.n	8002c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b22      	cmp	r3, #34	; 0x22
 8002b74:	d10d      	bne.n	8002b92 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b84:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b90:	e040      	b.n	8002c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b21      	cmp	r3, #33	; 0x21
 8002ba0:	d112      	bne.n	8002bc8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002bc6:	e025      	b.n	8002c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d120      	bne.n	8002c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2b21      	cmp	r3, #33	; 0x21
 8002bd6:	d11d      	bne.n	8002c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002be6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff fe3a 	bl	8002888 <HAL_I2C_MemTxCpltCallback>
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b22      	cmp	r3, #34	; 0x22
 8002c2e:	f040 80a2 	bne.w	8002d76 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d921      	bls.n	8002c84 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	f040 8082 	bne.w	8002d76 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c80:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002c82:	e078      	b.n	8002d76 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d074      	beq.n	8002d76 <I2C_MasterReceive_RXNE+0x15a>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d002      	beq.n	8002c98 <I2C_MasterReceive_RXNE+0x7c>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d16e      	bne.n	8002d76 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f001 fae5 	bl	8004268 <I2C_WaitOnSTOPRequestThroughIT>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d142      	bne.n	8002d2a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cc2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d10a      	bne.n	8002d14 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff fdc4 	bl	800289a <HAL_I2C_MemRxCpltCallback>
}
 8002d12:	e030      	b.n	8002d76 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2212      	movs	r2, #18
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff fd7f 	bl	8002826 <HAL_I2C_MasterRxCpltCallback>
}
 8002d28:	e025      	b.n	8002d76 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d38:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff fd9b 	bl	80028ac <HAL_I2C_ErrorCallback>
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d11b      	bne.n	8002dce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002dcc:	e0bd      	b.n	8002f4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d129      	bne.n	8002e2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d00a      	beq.n	8002e04 <I2C_MasterReceive_BTF+0x86>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d007      	beq.n	8002e04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e2a:	e08e      	b.n	8002f4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d176      	bne.n	8002f24 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d002      	beq.n	8002e42 <I2C_MasterReceive_BTF+0xc4>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d108      	bne.n	8002e54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e019      	b.n	8002e88 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d002      	beq.n	8002e60 <I2C_MasterReceive_BTF+0xe2>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d108      	bne.n	8002e72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e00a      	b.n	8002e88 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d007      	beq.n	8002e88 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ee2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	d10a      	bne.n	8002f0e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff fcc7 	bl	800289a <HAL_I2C_MemRxCpltCallback>
}
 8002f0c:	e01d      	b.n	8002f4a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2212      	movs	r2, #18
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fc82 	bl	8002826 <HAL_I2C_MasterRxCpltCallback>
}
 8002f22:	e012      	b.n	8002f4a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d117      	bne.n	8002f96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f80:	e067      	b.n	8003052 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]
}
 8002f94:	e05d      	b.n	8003052 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f9e:	d133      	bne.n	8003008 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b21      	cmp	r3, #33	; 0x21
 8002faa:	d109      	bne.n	8002fc0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fbc:	611a      	str	r2, [r3, #16]
 8002fbe:	e008      	b.n	8002fd2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <I2C_Master_SB+0x92>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d108      	bne.n	8002ff6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d032      	beq.n	8003052 <I2C_Master_SB+0x100>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d02d      	beq.n	8003052 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003004:	605a      	str	r2, [r3, #4]
}
 8003006:	e024      	b.n	8003052 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10e      	bne.n	800302e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	b29b      	uxth	r3, r3
 8003016:	11db      	asrs	r3, r3, #7
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f003 0306 	and.w	r3, r3, #6
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f063 030f 	orn	r3, r3, #15
 8003024:	b2da      	uxtb	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	611a      	str	r2, [r3, #16]
}
 800302c:	e011      	b.n	8003052 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10d      	bne.n	8003052 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	b29b      	uxth	r3, r3
 800303c:	11db      	asrs	r3, r3, #7
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f003 0306 	and.w	r3, r3, #6
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f063 030e 	orn	r3, r3, #14
 800304a:	b2da      	uxtb	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	611a      	str	r2, [r3, #16]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	b2da      	uxtb	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <I2C_Master_ADD10+0x26>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00c      	beq.n	80030a4 <I2C_Master_ADD10+0x48>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a2:	605a      	str	r2, [r3, #4]
  }
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b091      	sub	sp, #68	; 0x44
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b22      	cmp	r3, #34	; 0x22
 80030d6:	f040 8174 	bne.w	80033c2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10f      	bne.n	8003102 <I2C_Master_ADDR+0x54>
 80030e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d10b      	bne.n	8003102 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ea:	2300      	movs	r3, #0
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	633b      	str	r3, [r7, #48]	; 0x30
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	e16b      	b.n	80033da <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003106:	2b00      	cmp	r3, #0
 8003108:	d11d      	bne.n	8003146 <I2C_Master_ADDR+0x98>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003112:	d118      	bne.n	8003146 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003114:	2300      	movs	r3, #0
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003128:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003138:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	651a      	str	r2, [r3, #80]	; 0x50
 8003144:	e149      	b.n	80033da <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d113      	bne.n	8003178 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003150:	2300      	movs	r3, #0
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e120      	b.n	80033ba <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	f040 808a 	bne.w	8003298 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003186:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800318a:	d137      	bne.n	80031fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031aa:	d113      	bne.n	80031d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031bc:	2300      	movs	r3, #0
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	e0f2      	b.n	80033ba <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d4:	2300      	movs	r3, #0
 80031d6:	623b      	str	r3, [r7, #32]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	623b      	str	r3, [r7, #32]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	623b      	str	r3, [r7, #32]
 80031e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e0de      	b.n	80033ba <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80031fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d02e      	beq.n	8003260 <I2C_Master_ADDR+0x1b2>
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	2b20      	cmp	r3, #32
 8003206:	d02b      	beq.n	8003260 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320a:	2b12      	cmp	r3, #18
 800320c:	d102      	bne.n	8003214 <I2C_Master_ADDR+0x166>
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003210:	2b01      	cmp	r3, #1
 8003212:	d125      	bne.n	8003260 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	2b04      	cmp	r3, #4
 8003218:	d00e      	beq.n	8003238 <I2C_Master_ADDR+0x18a>
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	2b02      	cmp	r3, #2
 800321e:	d00b      	beq.n	8003238 <I2C_Master_ADDR+0x18a>
 8003220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003222:	2b10      	cmp	r3, #16
 8003224:	d008      	beq.n	8003238 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e007      	b.n	8003248 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003246:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003248:	2300      	movs	r3, #0
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	e0ac      	b.n	80033ba <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e090      	b.n	80033ba <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d158      	bne.n	8003354 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d021      	beq.n	80032ec <I2C_Master_ADDR+0x23e>
 80032a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d01e      	beq.n	80032ec <I2C_Master_ADDR+0x23e>
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d01b      	beq.n	80032ec <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	e012      	b.n	8003312 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003320:	d14b      	bne.n	80033ba <I2C_Master_ADDR+0x30c>
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003328:	d00b      	beq.n	8003342 <I2C_Master_ADDR+0x294>
 800332a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332c:	2b01      	cmp	r3, #1
 800332e:	d008      	beq.n	8003342 <I2C_Master_ADDR+0x294>
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	2b08      	cmp	r3, #8
 8003334:	d005      	beq.n	8003342 <I2C_Master_ADDR+0x294>
 8003336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003338:	2b10      	cmp	r3, #16
 800333a:	d002      	beq.n	8003342 <I2C_Master_ADDR+0x294>
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	2b20      	cmp	r3, #32
 8003340:	d13b      	bne.n	80033ba <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	e032      	b.n	80033ba <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003362:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003372:	d117      	bne.n	80033a4 <I2C_Master_ADDR+0x2f6>
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800337a:	d00b      	beq.n	8003394 <I2C_Master_ADDR+0x2e6>
 800337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337e:	2b01      	cmp	r3, #1
 8003380:	d008      	beq.n	8003394 <I2C_Master_ADDR+0x2e6>
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	2b08      	cmp	r3, #8
 8003386:	d005      	beq.n	8003394 <I2C_Master_ADDR+0x2e6>
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	2b10      	cmp	r3, #16
 800338c:	d002      	beq.n	8003394 <I2C_Master_ADDR+0x2e6>
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b20      	cmp	r3, #32
 8003392:	d107      	bne.n	80033a4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033a2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80033c0:	e00b      	b.n	80033da <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
}
 80033d8:	e7ff      	b.n	80033da <I2C_Master_ADDR+0x32c>
 80033da:	bf00      	nop
 80033dc:	3744      	adds	r7, #68	; 0x44
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02b      	beq.n	8003456 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	781a      	ldrb	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d114      	bne.n	8003456 <I2C_SlaveTransmit_TXE+0x72>
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b29      	cmp	r3, #41	; 0x29
 8003430:	d111      	bne.n	8003456 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003440:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2221      	movs	r2, #33	; 0x21
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2228      	movs	r2, #40	; 0x28
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff f9f1 	bl	8002838 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d011      	beq.n	8003494 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr

0800349e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d02c      	beq.n	8003512 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d114      	bne.n	8003512 <I2C_SlaveReceive_RXNE+0x74>
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b2a      	cmp	r3, #42	; 0x2a
 80034ec:	d111      	bne.n	8003512 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2222      	movs	r2, #34	; 0x22
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2228      	movs	r2, #40	; 0x28
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff f99c 	bl	800284a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d012      	beq.n	8003552 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003576:	2b28      	cmp	r3, #40	; 0x28
 8003578:	d127      	bne.n	80035ca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003588:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	09db      	lsrs	r3, r3, #7
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d103      	bne.n	80035ae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	81bb      	strh	r3, [r7, #12]
 80035ac:	e002      	b.n	80035b4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80035bc:	89ba      	ldrh	r2, [r7, #12]
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff f94a 	bl	800285c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80035c8:	e00e      	b.n	80035e8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800360e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003610:	2300      	movs	r3, #0
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800364c:	d172      	bne.n	8003734 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	2b22      	cmp	r3, #34	; 0x22
 8003652:	d002      	beq.n	800365a <I2C_Slave_STOPF+0x6a>
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b2a      	cmp	r3, #42	; 0x2a
 8003658:	d135      	bne.n	80036c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f043 0204 	orr.w	r2, r3, #4
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800368c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe f82a 	bl	80016ec <HAL_DMA_GetState>
 8003698:	4603      	mov	r3, r0
 800369a:	2b01      	cmp	r3, #1
 800369c:	d049      	beq.n	8003732 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	4a69      	ldr	r2, [pc, #420]	; (8003848 <I2C_Slave_STOPF+0x258>)
 80036a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fd ffa8 	bl	8001600 <HAL_DMA_Abort_IT>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d03d      	beq.n	8003732 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036c0:	4610      	mov	r0, r2
 80036c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036c4:	e035      	b.n	8003732 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f043 0204 	orr.w	r2, r3, #4
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd fff4 	bl	80016ec <HAL_DMA_GetState>
 8003704:	4603      	mov	r3, r0
 8003706:	2b01      	cmp	r3, #1
 8003708:	d014      	beq.n	8003734 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	4a4e      	ldr	r2, [pc, #312]	; (8003848 <I2C_Slave_STOPF+0x258>)
 8003710:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	4618      	mov	r0, r3
 8003718:	f7fd ff72 	bl	8001600 <HAL_DMA_Abort_IT>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800372c:	4610      	mov	r0, r2
 800372e:	4798      	blx	r3
 8003730:	e000      	b.n	8003734 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003732:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d03e      	beq.n	80037bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d112      	bne.n	8003772 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d112      	bne.n	80037a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f043 0204 	orr.w	r2, r3, #4
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f8b3 	bl	8003930 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80037ca:	e039      	b.n	8003840 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b2a      	cmp	r3, #42	; 0x2a
 80037d0:	d109      	bne.n	80037e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2228      	movs	r2, #40	; 0x28
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff f832 	bl	800284a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b28      	cmp	r3, #40	; 0x28
 80037f0:	d111      	bne.n	8003816 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <I2C_Slave_STOPF+0x25c>)
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff f831 	bl	8002876 <HAL_I2C_ListenCpltCallback>
}
 8003814:	e014      	b.n	8003840 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	2b22      	cmp	r3, #34	; 0x22
 800381c:	d002      	beq.n	8003824 <I2C_Slave_STOPF+0x234>
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b22      	cmp	r3, #34	; 0x22
 8003822:	d10d      	bne.n	8003840 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff f805 	bl	800284a <HAL_I2C_SlaveRxCpltCallback>
}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	08003e69 	.word	0x08003e69
 800384c:	ffff0000 	.word	0xffff0000

08003850 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d002      	beq.n	8003872 <I2C_Slave_AF+0x22>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b20      	cmp	r3, #32
 8003870:	d129      	bne.n	80038c6 <I2C_Slave_AF+0x76>
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b28      	cmp	r3, #40	; 0x28
 8003876:	d126      	bne.n	80038c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a2c      	ldr	r2, [pc, #176]	; (800392c <I2C_Slave_AF+0xdc>)
 800387c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800388c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003896:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe ffd9 	bl	8002876 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80038c4:	e02e      	b.n	8003924 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b21      	cmp	r3, #33	; 0x21
 80038ca:	d126      	bne.n	800391a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a17      	ldr	r2, [pc, #92]	; (800392c <I2C_Slave_AF+0xdc>)
 80038d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2221      	movs	r2, #33	; 0x21
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003900:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003910:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fe ff90 	bl	8002838 <HAL_I2C_SlaveTxCpltCallback>
}
 8003918:	e004      	b.n	8003924 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003922:	615a      	str	r2, [r3, #20]
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	ffff0000 	.word	0xffff0000

08003930 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003946:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003948:	7bbb      	ldrb	r3, [r7, #14]
 800394a:	2b10      	cmp	r3, #16
 800394c:	d002      	beq.n	8003954 <I2C_ITError+0x24>
 800394e:	7bbb      	ldrb	r3, [r7, #14]
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d10a      	bne.n	800396a <I2C_ITError+0x3a>
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b22      	cmp	r3, #34	; 0x22
 8003958:	d107      	bne.n	800396a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003968:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003970:	2b28      	cmp	r3, #40	; 0x28
 8003972:	d107      	bne.n	8003984 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2228      	movs	r2, #40	; 0x28
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003982:	e015      	b.n	80039b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003992:	d00a      	beq.n	80039aa <I2C_ITError+0x7a>
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b60      	cmp	r3, #96	; 0x60
 8003998:	d007      	beq.n	80039aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039be:	d161      	bne.n	8003a84 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d020      	beq.n	8003a1e <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	4a6a      	ldr	r2, [pc, #424]	; (8003b8c <I2C_ITError+0x25c>)
 80039e2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fd fe09 	bl	8001600 <HAL_DMA_Abort_IT>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8089 	beq.w	8003b08 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4798      	blx	r3
 8003a1c:	e074      	b.n	8003b08 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	4a5a      	ldr	r2, [pc, #360]	; (8003b8c <I2C_ITError+0x25c>)
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd fde8 	bl	8001600 <HAL_DMA_Abort_IT>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d068      	beq.n	8003b08 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d10b      	bne.n	8003a5c <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4798      	blx	r3
 8003a82:	e041      	b.n	8003b08 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b60      	cmp	r3, #96	; 0x60
 8003a8e:	d125      	bne.n	8003adc <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d10b      	bne.n	8003ac4 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fe fef2 	bl	80028be <HAL_I2C_AbortCpltCallback>
 8003ada:	e015      	b.n	8003b08 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b40      	cmp	r3, #64	; 0x40
 8003ae8:	d10b      	bne.n	8003b02 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fe fed2 	bl	80028ac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10e      	bne.n	8003b36 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b44:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4c:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d113      	bne.n	8003b82 <I2C_ITError+0x252>
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b28      	cmp	r3, #40	; 0x28
 8003b5e:	d110      	bne.n	8003b82 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <I2C_ITError+0x260>)
 8003b64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7fe fe7a 	bl	8002876 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	08003e69 	.word	0x08003e69
 8003b90:	ffff0000 	.word	0xffff0000

08003b94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d006      	beq.n	8003bbe <I2C_MasterRequestWrite+0x2a>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d003      	beq.n	8003bbe <I2C_MasterRequestWrite+0x2a>
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bbc:	d108      	bne.n	8003bd0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e00b      	b.n	8003be8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	2b12      	cmp	r3, #18
 8003bd6:	d107      	bne.n	8003be8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f9df 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0e:	d103      	bne.n	8003c18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e035      	b.n	8003c88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c24:	d108      	bne.n	8003c38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c26:	897b      	ldrh	r3, [r7, #10]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c34:	611a      	str	r2, [r3, #16]
 8003c36:	e01b      	b.n	8003c70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c38:	897b      	ldrh	r3, [r7, #10]
 8003c3a:	11db      	asrs	r3, r3, #7
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f003 0306 	and.w	r3, r3, #6
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	f063 030f 	orn	r3, r3, #15
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	490e      	ldr	r1, [pc, #56]	; (8003c90 <I2C_MasterRequestWrite+0xfc>)
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fa05 	bl	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e010      	b.n	8003c88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c66:	897b      	ldrh	r3, [r7, #10]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4907      	ldr	r1, [pc, #28]	; (8003c94 <I2C_MasterRequestWrite+0x100>)
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f9f5 	bl	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	00010008 	.word	0x00010008
 8003c94:	00010002 	.word	0x00010002

08003c98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	817b      	strh	r3, [r7, #10]
 8003caa:	460b      	mov	r3, r1
 8003cac:	813b      	strh	r3, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f96a 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00d      	beq.n	8003d06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf8:	d103      	bne.n	8003d02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0aa      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	6a3a      	ldr	r2, [r7, #32]
 8003d1a:	4952      	ldr	r1, [pc, #328]	; (8003e64 <I2C_RequestMemoryRead+0x1cc>)
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f9a2 	bl	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e097      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	6a39      	ldr	r1, [r7, #32]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 fa0c 	bl	8004164 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d107      	bne.n	8003d6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e076      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d105      	bne.n	8003d80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d74:	893b      	ldrh	r3, [r7, #8]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	611a      	str	r2, [r3, #16]
 8003d7e:	e021      	b.n	8003dc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d80:	893b      	ldrh	r3, [r7, #8]
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d90:	6a39      	ldr	r1, [r7, #32]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f9e6 	bl	8004164 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d107      	bne.n	8003db6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e050      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dba:	893b      	ldrh	r3, [r7, #8]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	6a39      	ldr	r1, [r7, #32]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f9cb 	bl	8004164 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00d      	beq.n	8003df0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d107      	bne.n	8003dec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e035      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dfe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f8d3 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00d      	beq.n	8003e34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e26:	d103      	bne.n	8003e30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e013      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e34:	897b      	ldrh	r3, [r7, #10]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	6a3a      	ldr	r2, [r7, #32]
 8003e48:	4906      	ldr	r1, [pc, #24]	; (8003e64 <I2C_RequestMemoryRead+0x1cc>)
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f90b 	bl	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	00010002 	.word	0x00010002

08003e68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e80:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e82:	4b4b      	ldr	r3, [pc, #300]	; (8003fb0 <I2C_DMAAbort+0x148>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	08db      	lsrs	r3, r3, #3
 8003e88:	4a4a      	ldr	r2, [pc, #296]	; (8003fb4 <I2C_DMAAbort+0x14c>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	0a1a      	lsrs	r2, r3, #8
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	00da      	lsls	r2, r3, #3
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f043 0220 	orr.w	r2, r3, #32
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003eae:	e00a      	b.n	8003ec6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec4:	d0ea      	beq.n	8003e9c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	2200      	movs	r2, #0
 8003f0a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	2200      	movs	r2, #0
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b60      	cmp	r3, #96	; 0x60
 8003f36:	d10e      	bne.n	8003f56 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7fe fcb5 	bl	80028be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f54:	e027      	b.n	8003fa6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f56:	7cfb      	ldrb	r3, [r7, #19]
 8003f58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f5c:	2b28      	cmp	r3, #40	; 0x28
 8003f5e:	d117      	bne.n	8003f90 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2228      	movs	r2, #40	; 0x28
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f8e:	e007      	b.n	8003fa0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003fa0:	6978      	ldr	r0, [r7, #20]
 8003fa2:	f7fe fc83 	bl	80028ac <HAL_I2C_ErrorCallback>
}
 8003fa6:	bf00      	nop
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	14f8b589 	.word	0x14f8b589

08003fb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc8:	e025      	b.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d021      	beq.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd2:	f7fd f9d9 	bl	8001388 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d116      	bne.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e023      	b.n	800405e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d10d      	bne.n	800403c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	43da      	mvns	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	bf0c      	ite	eq
 8004032:	2301      	moveq	r3, #1
 8004034:	2300      	movne	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	e00c      	b.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	43da      	mvns	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4013      	ands	r3, r2
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf0c      	ite	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	2300      	movne	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	429a      	cmp	r2, r3
 800405a:	d0b6      	beq.n	8003fca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004074:	e051      	b.n	800411a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004084:	d123      	bne.n	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004094:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f043 0204 	orr.w	r2, r3, #4
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e046      	b.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d021      	beq.n	800411a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d6:	f7fd f957 	bl	8001388 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d302      	bcc.n	80040ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d116      	bne.n	800411a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e020      	b.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d10c      	bne.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	43da      	mvns	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4013      	ands	r3, r2
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	bf14      	ite	ne
 8004136:	2301      	movne	r3, #1
 8004138:	2300      	moveq	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	e00b      	b.n	8004156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	43da      	mvns	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4013      	ands	r3, r2
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf14      	ite	ne
 8004150:	2301      	movne	r3, #1
 8004152:	2300      	moveq	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d18d      	bne.n	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004170:	e02d      	b.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f900 	bl	8004378 <I2C_IsAcknowledgeFailed>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e02d      	b.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d021      	beq.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fd f8fd 	bl	8001388 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d116      	bne.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f043 0220 	orr.w	r2, r3, #32
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e007      	b.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d1ca      	bne.n	8004172 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041f2:	e02d      	b.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f8bf 	bl	8004378 <I2C_IsAcknowledgeFailed>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e02d      	b.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d021      	beq.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420c:	f7fd f8bc 	bl	8001388 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d116      	bne.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	f043 0220 	orr.w	r2, r3, #32
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e007      	b.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b04      	cmp	r3, #4
 800425c:	d1ca      	bne.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004274:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	4a13      	ldr	r2, [pc, #76]	; (80042c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	0a1a      	lsrs	r2, r3, #8
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b01      	subs	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d107      	bne.n	80042a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f043 0220 	orr.w	r2, r3, #32
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e008      	b.n	80042b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b4:	d0e9      	beq.n	800428a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000000 	.word	0x20000000
 80042c8:	14f8b589 	.word	0x14f8b589

080042cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042d8:	e042      	b.n	8004360 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d119      	bne.n	800431c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0210 	mvn.w	r2, #16
 80042f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e029      	b.n	8004370 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431c:	f7fd f834 	bl	8001388 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	d302      	bcc.n	8004332 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d116      	bne.n	8004360 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e007      	b.n	8004370 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436a:	2b40      	cmp	r3, #64	; 0x40
 800436c:	d1b5      	bne.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438e:	d11b      	bne.n	80043c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004398:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	f043 0204 	orr.w	r2, r3, #4
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80043e4:	d103      	bne.n	80043ee <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80043ec:	e007      	b.n	80043fe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80043f6:	d102      	bne.n	80043fe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2208      	movs	r2, #8
 80043fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800440a:	b08b      	sub	sp, #44	; 0x2c
 800440c:	af06      	add	r7, sp, #24
 800440e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e0fd      	b.n	8004616 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f006 ff1e 	bl	800b270 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2203      	movs	r2, #3
 8004438:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f002 fbf1 	bl	8006c28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	687e      	ldr	r6, [r7, #4]
 800444e:	466d      	mov	r5, sp
 8004450:	f106 0410 	add.w	r4, r6, #16
 8004454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	602b      	str	r3, [r5, #0]
 800445c:	1d33      	adds	r3, r6, #4
 800445e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004460:	6838      	ldr	r0, [r7, #0]
 8004462:	f002 fbbb 	bl	8006bdc <USB_CoreInit>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0ce      	b.n	8004616 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2100      	movs	r1, #0
 800447e:	4618      	mov	r0, r3
 8004480:	f002 fbec 	bl	8006c5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004484:	2300      	movs	r3, #0
 8004486:	73fb      	strb	r3, [r7, #15]
 8004488:	e04c      	b.n	8004524 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	440b      	add	r3, r1
 800449a:	3301      	adds	r3, #1
 800449c:	2201      	movs	r2, #1
 800449e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	440b      	add	r3, r1
 80044b0:	7bfa      	ldrb	r2, [r7, #15]
 80044b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044b4:	7bfa      	ldrb	r2, [r7, #15]
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	b298      	uxth	r0, r3
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	440b      	add	r3, r1
 80044c6:	3336      	adds	r3, #54	; 0x36
 80044c8:	4602      	mov	r2, r0
 80044ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	440b      	add	r3, r1
 80044dc:	3303      	adds	r3, #3
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044e2:	7bfa      	ldrb	r2, [r7, #15]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	440b      	add	r3, r1
 80044f0:	3338      	adds	r3, #56	; 0x38
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	440b      	add	r3, r1
 8004504:	333c      	adds	r3, #60	; 0x3c
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800450a:	7bfa      	ldrb	r2, [r7, #15]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	440b      	add	r3, r1
 8004518:	3340      	adds	r3, #64	; 0x40
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	3301      	adds	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
 8004524:	7bfa      	ldrb	r2, [r7, #15]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	429a      	cmp	r2, r3
 800452c:	d3ad      	bcc.n	800448a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
 8004532:	e044      	b.n	80045be <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	440b      	add	r3, r1
 8004542:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004546:	2200      	movs	r2, #0
 8004548:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800454a:	7bfa      	ldrb	r2, [r7, #15]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	440b      	add	r3, r1
 8004558:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800455c:	7bfa      	ldrb	r2, [r7, #15]
 800455e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004560:	7bfa      	ldrb	r2, [r7, #15]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	440b      	add	r3, r1
 800456e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004576:	7bfa      	ldrb	r2, [r7, #15]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	440b      	add	r3, r1
 8004584:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800458c:	7bfa      	ldrb	r2, [r7, #15]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	440b      	add	r3, r1
 800459a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045a2:	7bfa      	ldrb	r2, [r7, #15]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	440b      	add	r3, r1
 80045b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	3301      	adds	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	7bfa      	ldrb	r2, [r7, #15]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d3b5      	bcc.n	8004534 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	687e      	ldr	r6, [r7, #4]
 80045d0:	466d      	mov	r5, sp
 80045d2:	f106 0410 	add.w	r4, r6, #16
 80045d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	602b      	str	r3, [r5, #0]
 80045de:	1d33      	adds	r3, r6, #4
 80045e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045e2:	6838      	ldr	r0, [r7, #0]
 80045e4:	f002 fb46 	bl	8006c74 <USB_DevInit>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e00d      	b.n	8004616 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f004 fff8 	bl	8009604 <USB_DevDisconnect>

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800461e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_PCD_Start+0x16>
 8004630:	2302      	movs	r3, #2
 8004632:	e016      	b.n	8004662 <HAL_PCD_Start+0x44>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f002 fadb 	bl	8006bfc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004646:	2101      	movs	r1, #1
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f007 f884 	bl	800b756 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f004 ffcc 	bl	80095f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b088      	sub	sp, #32
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f004 ffce 	bl	8009618 <USB_ReadInterrupts>
 800467c:	4603      	mov	r3, r0
 800467e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004686:	d102      	bne.n	800468e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fb5f 	bl	8004d4c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f004 ffc0 	bl	8009618 <USB_ReadInterrupts>
 8004698:	4603      	mov	r3, r0
 800469a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a2:	d112      	bne.n	80046ca <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b6:	b292      	uxth	r2, r2
 80046b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f006 fe52 	bl	800b366 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80046c2:	2100      	movs	r1, #0
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f923 	bl	8004910 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f004 ffa2 	bl	8009618 <USB_ReadInterrupts>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046de:	d10b      	bne.n	80046f8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046f2:	b292      	uxth	r2, r2
 80046f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f004 ff8b 	bl	8009618 <USB_ReadInterrupts>
 8004702:	4603      	mov	r3, r0
 8004704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470c:	d10b      	bne.n	8004726 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004716:	b29a      	uxth	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004720:	b292      	uxth	r2, r2
 8004722:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f004 ff74 	bl	8009618 <USB_ReadInterrupts>
 8004730:	4603      	mov	r3, r0
 8004732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473a:	d126      	bne.n	800478a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004744:	b29a      	uxth	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0204 	bic.w	r2, r2, #4
 800474e:	b292      	uxth	r2, r2
 8004750:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800475c:	b29a      	uxth	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0208 	bic.w	r2, r2, #8
 8004766:	b292      	uxth	r2, r2
 8004768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f006 fe33 	bl	800b3d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004784:	b292      	uxth	r2, r2
 8004786:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f004 ff42 	bl	8009618 <USB_ReadInterrupts>
 8004794:	4603      	mov	r3, r0
 8004796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800479a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479e:	f040 8082 	bne.w	80048a6 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80047a2:	2300      	movs	r3, #0
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e010      	b.n	80047ca <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	7ffb      	ldrb	r3, [r7, #31]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	441a      	add	r2, r3
 80047b4:	7ffb      	ldrb	r3, [r7, #31]
 80047b6:	8812      	ldrh	r2, [r2, #0]
 80047b8:	b292      	uxth	r2, r2
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	3320      	adds	r3, #32
 80047be:	443b      	add	r3, r7
 80047c0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80047c4:	7ffb      	ldrb	r3, [r7, #31]
 80047c6:	3301      	adds	r3, #1
 80047c8:	77fb      	strb	r3, [r7, #31]
 80047ca:	7ffb      	ldrb	r3, [r7, #31]
 80047cc:	2b07      	cmp	r3, #7
 80047ce:	d9eb      	bls.n	80047a8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	b292      	uxth	r2, r2
 80047e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0201 	bic.w	r2, r2, #1
 80047fa:	b292      	uxth	r2, r2
 80047fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004800:	bf00      	nop
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800480a:	b29b      	uxth	r3, r3
 800480c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f6      	beq.n	8004802 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800481c:	b29a      	uxth	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004826:	b292      	uxth	r2, r2
 8004828:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800482c:	2300      	movs	r3, #0
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e00f      	b.n	8004852 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004832:	7ffb      	ldrb	r3, [r7, #31]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	4611      	mov	r1, r2
 800483a:	7ffa      	ldrb	r2, [r7, #31]
 800483c:	0092      	lsls	r2, r2, #2
 800483e:	440a      	add	r2, r1
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	3320      	adds	r3, #32
 8004844:	443b      	add	r3, r7
 8004846:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800484a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800484c:	7ffb      	ldrb	r3, [r7, #31]
 800484e:	3301      	adds	r3, #1
 8004850:	77fb      	strb	r3, [r7, #31]
 8004852:	7ffb      	ldrb	r3, [r7, #31]
 8004854:	2b07      	cmp	r3, #7
 8004856:	d9ec      	bls.n	8004832 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0208 	orr.w	r2, r2, #8
 800486a:	b292      	uxth	r2, r2
 800486c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004878:	b29a      	uxth	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004882:	b292      	uxth	r2, r2
 8004884:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0204 	orr.w	r2, r2, #4
 800489a:	b292      	uxth	r2, r2
 800489c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f006 fd7f 	bl	800b3a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f004 feb4 	bl	8009618 <USB_ReadInterrupts>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ba:	d10e      	bne.n	80048da <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048ce:	b292      	uxth	r2, r2
 80048d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f006 fd38 	bl	800b34a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f004 fe9a 	bl	8009618 <USB_ReadInterrupts>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ee:	d10b      	bne.n	8004908 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004902:	b292      	uxth	r2, r2
 8004904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004908:	bf00      	nop
 800490a:	3720      	adds	r7, #32
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_PCD_SetAddress+0x1a>
 8004926:	2302      	movs	r3, #2
 8004928:	e013      	b.n	8004952 <HAL_PCD_SetAddress+0x42>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	4611      	mov	r1, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f004 fe41 	bl	80095ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	4608      	mov	r0, r1
 8004964:	4611      	mov	r1, r2
 8004966:	461a      	mov	r2, r3
 8004968:	4603      	mov	r3, r0
 800496a:	70fb      	strb	r3, [r7, #3]
 800496c:	460b      	mov	r3, r1
 800496e:	803b      	strh	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800497c:	2b00      	cmp	r3, #0
 800497e:	da0e      	bge.n	800499e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	4413      	add	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	705a      	strb	r2, [r3, #1]
 800499c:	e00e      	b.n	80049bc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	f003 0207 	and.w	r2, r3, #7
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	4413      	add	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049c8:	883a      	ldrh	r2, [r7, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	78ba      	ldrb	r2, [r7, #2]
 80049d2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d004      	beq.n	80049e6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049e6:	78bb      	ldrb	r3, [r7, #2]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d102      	bne.n	80049f2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_PCD_EP_Open+0xa6>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e00e      	b.n	8004a1e <HAL_PCD_EP_Open+0xc4>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68f9      	ldr	r1, [r7, #12]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f002 f950 	bl	8006cb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004a1c:	7afb      	ldrb	r3, [r7, #11]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	da0e      	bge.n	8004a58 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	705a      	strb	r2, [r3, #1]
 8004a56:	e00e      	b.n	8004a76 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	f003 0207 	and.w	r2, r3, #7
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_PCD_EP_Close+0x6a>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e00e      	b.n	8004aae <HAL_PCD_EP_Close+0x88>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68f9      	ldr	r1, [r7, #12]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f002 fc72 	bl	8007388 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b086      	sub	sp, #24
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ac6:	7afb      	ldrb	r3, [r7, #11]
 8004ac8:	f003 0207 	and.w	r2, r3, #7
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2200      	movs	r2, #0
 8004aee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2200      	movs	r2, #0
 8004af4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004af6:	7afb      	ldrb	r3, [r7, #11]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b02:	7afb      	ldrb	r3, [r7, #11]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6979      	ldr	r1, [r7, #20]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f002 fe24 	bl	8007760 <USB_EPStartXfer>
 8004b18:	e005      	b.n	8004b26 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6979      	ldr	r1, [r7, #20]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f002 fe1d 	bl	8007760 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	f003 0207 	and.w	r2, r3, #7
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	440b      	add	r3, r1
 8004b4e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004b52:	681b      	ldr	r3, [r3, #0]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr

08004b5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b086      	sub	sp, #24
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b6e:	7afb      	ldrb	r3, [r7, #11]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004baa:	7afb      	ldrb	r3, [r7, #11]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bb6:	7afb      	ldrb	r3, [r7, #11]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d106      	bne.n	8004bce <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6979      	ldr	r1, [r7, #20]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f002 fdca 	bl	8007760 <USB_EPStartXfer>
 8004bcc:	e005      	b.n	8004bda <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6979      	ldr	r1, [r7, #20]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f002 fdc3 	bl	8007760 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	f003 0207 	and.w	r2, r3, #7
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d901      	bls.n	8004c02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e04c      	b.n	8004c9c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	da0e      	bge.n	8004c28 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	705a      	strb	r2, [r3, #1]
 8004c26:	e00c      	b.n	8004c42 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c28:	78fa      	ldrb	r2, [r7, #3]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4413      	add	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_PCD_EP_SetStall+0x7e>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e01c      	b.n	8004c9c <HAL_PCD_EP_SetStall+0xb8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68f9      	ldr	r1, [r7, #12]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f004 fbad 	bl	80093d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c76:	78fb      	ldrb	r3, [r7, #3]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d108      	bne.n	8004c92 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f004 fcd2 	bl	8009636 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	f003 020f 	and.w	r2, r3, #15
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d901      	bls.n	8004cc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e040      	b.n	8004d44 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	da0e      	bge.n	8004ce8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	705a      	strb	r2, [r3, #1]
 8004ce6:	e00e      	b.n	8004d06 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	f003 0207 	and.w	r2, r3, #7
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_PCD_EP_ClrStall+0x82>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e00e      	b.n	8004d44 <HAL_PCD_EP_ClrStall+0xa0>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f004 fb9b 	bl	8009470 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08e      	sub	sp, #56	; 0x38
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d54:	e2ec      	b.n	8005330 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d5e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004d60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004d6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f040 8161 	bne.w	8005038 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d152      	bne.n	8004e26 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	81fb      	strh	r3, [r7, #14]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	89fb      	ldrh	r3, [r7, #14]
 8004d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3328      	adds	r3, #40	; 0x28
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3302      	adds	r3, #2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	441a      	add	r2, r3
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004de4:	2100      	movs	r1, #0
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f006 fa95 	bl	800b316 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 829b 	beq.w	8005330 <PCD_EP_ISR_Handler+0x5e4>
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 8296 	bne.w	8005330 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	b292      	uxth	r2, r2
 8004e18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e24:	e284      	b.n	8005330 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d034      	beq.n	8004eaa <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4413      	add	r3, r2
 8004e54:	3306      	adds	r3, #6
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f004 fc29 	bl	80096d6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e90:	4013      	ands	r3, r2
 8004e92:	823b      	strh	r3, [r7, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	8a3a      	ldrh	r2, [r7, #16]
 8004e9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e9e:	b292      	uxth	r2, r2
 8004ea0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f006 fa0a 	bl	800b2bc <HAL_PCD_SetupStageCallback>
 8004ea8:	e242      	b.n	8005330 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004eaa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f280 823e 	bge.w	8005330 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	83bb      	strh	r3, [r7, #28]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	8bba      	ldrh	r2, [r7, #28]
 8004eca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ece:	b292      	uxth	r2, r2
 8004ed0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3306      	adds	r3, #6
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d019      	beq.n	8004f3a <PCD_EP_ISR_Handler+0x1ee>
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d015      	beq.n	8004f3a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	6959      	ldr	r1, [r3, #20]
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f004 fbd9 	bl	80096d6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	441a      	add	r2, r3
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f32:	2100      	movs	r1, #0
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f006 f9d3 	bl	800b2e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f040 81f2 	bne.w	8005330 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	4413      	add	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d112      	bne.n	8004f9a <PCD_EP_ISR_Handler+0x24e>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	801a      	strh	r2, [r3, #0]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	801a      	strh	r2, [r3, #0]
 8004f98:	e02f      	b.n	8004ffa <PCD_EP_ISR_Handler+0x2ae>
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b3e      	cmp	r3, #62	; 0x3e
 8004fa0:	d813      	bhi.n	8004fca <PCD_EP_ISR_Handler+0x27e>
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <PCD_EP_ISR_Handler+0x270>
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	3301      	adds	r3, #1
 8004fba:	633b      	str	r3, [r7, #48]	; 0x30
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	029b      	lsls	r3, r3, #10
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	801a      	strh	r2, [r3, #0]
 8004fc8:	e017      	b.n	8004ffa <PCD_EP_ISR_Handler+0x2ae>
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <PCD_EP_ISR_Handler+0x298>
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	029b      	lsls	r3, r3, #10
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500a:	827b      	strh	r3, [r7, #18]
 800500c:	8a7b      	ldrh	r3, [r7, #18]
 800500e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005012:	827b      	strh	r3, [r7, #18]
 8005014:	8a7b      	ldrh	r3, [r7, #18]
 8005016:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800501a:	827b      	strh	r3, [r7, #18]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	8a7b      	ldrh	r3, [r7, #18]
 8005022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005032:	b29b      	uxth	r3, r3
 8005034:	8013      	strh	r3, [r2, #0]
 8005036:	e17b      	b.n	8005330 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800504a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800504e:	2b00      	cmp	r3, #0
 8005050:	f280 80ea 	bge.w	8005228 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29a      	uxth	r2, r3
 8005066:	f640 738f 	movw	r3, #3983	; 0xf8f
 800506a:	4013      	ands	r3, r2
 800506c:	853b      	strh	r3, [r7, #40]	; 0x28
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800507e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005082:	b292      	uxth	r2, r2
 8005084:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005086:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	7b1b      	ldrb	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d122      	bne.n	80050ea <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4413      	add	r3, r2
 80050b8:	3306      	adds	r3, #6
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050cc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80050ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8087 	beq.w	80051e4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	6959      	ldr	r1, [r3, #20]
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	88da      	ldrh	r2, [r3, #6]
 80050e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050e4:	f004 faf7 	bl	80096d6 <USB_ReadPMA>
 80050e8:	e07c      	b.n	80051e4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	78db      	ldrb	r3, [r3, #3]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d108      	bne.n	8005104 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80050f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050f4:	461a      	mov	r2, r3
 80050f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f927 	bl	800534c <HAL_PCD_EP_DB_Receive>
 80050fe:	4603      	mov	r3, r0
 8005100:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005102:	e06f      	b.n	80051e4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	b29b      	uxth	r3, r3
 8005116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	441a      	add	r2, r3
 800512e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005140:	b29b      	uxth	r3, r3
 8005142:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d021      	beq.n	80051a2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005166:	b29b      	uxth	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	3302      	adds	r3, #2
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005186:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005188:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800518a:	2b00      	cmp	r3, #0
 800518c:	d02a      	beq.n	80051e4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	6959      	ldr	r1, [r3, #20]
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	891a      	ldrh	r2, [r3, #8]
 800519a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800519c:	f004 fa9b 	bl	80096d6 <USB_ReadPMA>
 80051a0:	e020      	b.n	80051e4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	3306      	adds	r3, #6
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80051cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d008      	beq.n	80051e4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	6959      	ldr	r1, [r3, #20]
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	895a      	ldrh	r2, [r3, #10]
 80051de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051e0:	f004 fa79 	bl	80096d6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051ea:	441a      	add	r2, r3
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051f6:	441a      	add	r2, r3
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d004      	beq.n	800520e <PCD_EP_ISR_Handler+0x4c2>
 8005204:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	429a      	cmp	r2, r3
 800520c:	d206      	bcs.n	800521c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f006 f863 	bl	800b2e0 <HAL_PCD_DataOutStageCallback>
 800521a:	e005      	b.n	8005228 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005222:	4618      	mov	r0, r3
 8005224:	f002 fa9c 	bl	8007760 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005228:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800522a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522e:	2b00      	cmp	r3, #0
 8005230:	d07e      	beq.n	8005330 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005232:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	4413      	add	r3, r2
 8005244:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800525c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005260:	843b      	strh	r3, [r7, #32]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	441a      	add	r2, r3
 8005270:	8c3b      	ldrh	r3, [r7, #32]
 8005272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527a:	b29b      	uxth	r3, r3
 800527c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	78db      	ldrb	r3, [r3, #3]
 8005282:	2b03      	cmp	r3, #3
 8005284:	d00c      	beq.n	80052a0 <PCD_EP_ISR_Handler+0x554>
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	78db      	ldrb	r3, [r3, #3]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005292:	2b02      	cmp	r3, #2
 8005294:	d146      	bne.n	8005324 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005296:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	d141      	bne.n	8005324 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	4413      	add	r3, r2
 80052b4:	3302      	adds	r3, #2
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	8bfb      	ldrh	r3, [r7, #30]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d906      	bls.n	80052e2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	699a      	ldr	r2, [r3, #24]
 80052d8:	8bfb      	ldrh	r3, [r7, #30]
 80052da:	1ad2      	subs	r2, r2, r3
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	619a      	str	r2, [r3, #24]
 80052e0:	e002      	b.n	80052e8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	2200      	movs	r2, #0
 80052e6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f006 f80d 	bl	800b316 <HAL_PCD_DataInStageCallback>
 80052fc:	e018      	b.n	8005330 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	8bfb      	ldrh	r3, [r7, #30]
 8005304:	441a      	add	r2, r3
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	69da      	ldr	r2, [r3, #28]
 800530e:	8bfb      	ldrh	r3, [r7, #30]
 8005310:	441a      	add	r2, r3
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800531c:	4618      	mov	r0, r3
 800531e:	f002 fa1f 	bl	8007760 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005322:	e005      	b.n	8005330 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005324:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005326:	461a      	mov	r2, r3
 8005328:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f91b 	bl	8005566 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005338:	b29b      	uxth	r3, r3
 800533a:	b21b      	sxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	f6ff ad0a 	blt.w	8004d56 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3738      	adds	r7, #56	; 0x38
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	4613      	mov	r3, r2
 8005358:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d07e      	beq.n	8005462 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536c:	b29b      	uxth	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4413      	add	r3, r2
 8005378:	3302      	adds	r3, #2
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800538c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	8b7b      	ldrh	r3, [r7, #26]
 8005394:	429a      	cmp	r2, r3
 8005396:	d306      	bcc.n	80053a6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	8b7b      	ldrh	r3, [r7, #26]
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	619a      	str	r2, [r3, #24]
 80053a4:	e002      	b.n	80053ac <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2200      	movs	r2, #0
 80053aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d123      	bne.n	80053fc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ce:	833b      	strh	r3, [r7, #24]
 80053d0:	8b3b      	ldrh	r3, [r7, #24]
 80053d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053d6:	833b      	strh	r3, [r7, #24]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	441a      	add	r2, r3
 80053e6:	8b3b      	ldrh	r3, [r7, #24]
 80053e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01f      	beq.n	8005446 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	82fb      	strh	r3, [r7, #22]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	441a      	add	r2, r3
 8005430:	8afb      	ldrh	r3, [r7, #22]
 8005432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005442:	b29b      	uxth	r3, r3
 8005444:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005446:	8b7b      	ldrh	r3, [r7, #26]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8087 	beq.w	800555c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	6959      	ldr	r1, [r3, #20]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	891a      	ldrh	r2, [r3, #8]
 800545a:	8b7b      	ldrh	r3, [r7, #26]
 800545c:	f004 f93b 	bl	80096d6 <USB_ReadPMA>
 8005460:	e07c      	b.n	800555c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	4413      	add	r3, r2
 8005476:	3306      	adds	r3, #6
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800548a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	8b7b      	ldrh	r3, [r7, #26]
 8005492:	429a      	cmp	r2, r3
 8005494:	d306      	bcc.n	80054a4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	8b7b      	ldrh	r3, [r7, #26]
 800549c:	1ad2      	subs	r2, r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	619a      	str	r2, [r3, #24]
 80054a2:	e002      	b.n	80054aa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d123      	bne.n	80054fa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054cc:	83fb      	strh	r3, [r7, #30]
 80054ce:	8bfb      	ldrh	r3, [r7, #30]
 80054d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054d4:	83fb      	strh	r3, [r7, #30]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	441a      	add	r2, r3
 80054e4:	8bfb      	ldrh	r3, [r7, #30]
 80054e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11f      	bne.n	8005544 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551e:	83bb      	strh	r3, [r7, #28]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	441a      	add	r2, r3
 800552e:	8bbb      	ldrh	r3, [r7, #28]
 8005530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005540:	b29b      	uxth	r3, r3
 8005542:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005544:	8b7b      	ldrh	r3, [r7, #26]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d008      	beq.n	800555c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6959      	ldr	r1, [r3, #20]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	895a      	ldrh	r2, [r3, #10]
 8005556:	8b7b      	ldrh	r3, [r7, #26]
 8005558:	f004 f8bd 	bl	80096d6 <USB_ReadPMA>
    }
  }

  return count;
 800555c:	8b7b      	ldrh	r3, [r7, #26]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3720      	adds	r7, #32
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b0a2      	sub	sp, #136	; 0x88
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	4613      	mov	r3, r2
 8005572:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 81c7 	beq.w	800590e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005588:	b29b      	uxth	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	4413      	add	r3, r2
 8005594:	3302      	adds	r3, #2
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d907      	bls.n	80055c8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055c0:	1ad2      	subs	r2, r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	619a      	str	r2, [r3, #24]
 80055c6:	e002      	b.n	80055ce <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2200      	movs	r2, #0
 80055cc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f040 80b9 	bne.w	800574a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d126      	bne.n	800562e <HAL_PCD_EP_DB_Transmit+0xc8>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	4413      	add	r3, r2
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	011a      	lsls	r2, r3, #4
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	4413      	add	r3, r2
 8005602:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005612:	b29a      	uxth	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	801a      	strh	r2, [r3, #0]
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005626:	b29a      	uxth	r2, r3
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	801a      	strh	r2, [r3, #0]
 800562c:	e01a      	b.n	8005664 <HAL_PCD_EP_DB_Transmit+0xfe>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	785b      	ldrb	r3, [r3, #1]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d116      	bne.n	8005664 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	633b      	str	r3, [r7, #48]	; 0x30
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005644:	b29b      	uxth	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	4413      	add	r3, r2
 800564c:	633b      	str	r3, [r7, #48]	; 0x30
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	011a      	lsls	r2, r3, #4
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	4413      	add	r3, r2
 8005658:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2200      	movs	r2, #0
 8005662:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	623b      	str	r3, [r7, #32]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	785b      	ldrb	r3, [r3, #1]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d126      	bne.n	80056c0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005680:	b29b      	uxth	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	4413      	add	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	011a      	lsls	r2, r3, #4
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	4413      	add	r3, r2
 8005694:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	801a      	strh	r2, [r3, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	801a      	strh	r2, [r3, #0]
 80056be:	e017      	b.n	80056f0 <HAL_PCD_EP_DB_Transmit+0x18a>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d113      	bne.n	80056f0 <HAL_PCD_EP_DB_Transmit+0x18a>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	461a      	mov	r2, r3
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	4413      	add	r3, r2
 80056d8:	623b      	str	r3, [r7, #32]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	011a      	lsls	r2, r3, #4
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	4413      	add	r3, r2
 80056e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2200      	movs	r2, #0
 80056ee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	4619      	mov	r1, r3
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f005 fe0d 	bl	800b316 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 82d4 	beq.w	8005cb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	827b      	strh	r3, [r7, #18]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	441a      	add	r2, r3
 8005732:	8a7b      	ldrh	r3, [r7, #18]
 8005734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005744:	b29b      	uxth	r3, r3
 8005746:	8013      	strh	r3, [r2, #0]
 8005748:	e2b2      	b.n	8005cb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d021      	beq.n	8005798 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	441a      	add	r2, r3
 8005780:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800578c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005794:	b29b      	uxth	r3, r3
 8005796:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800579e:	2b01      	cmp	r3, #1
 80057a0:	f040 8286 	bne.w	8005cb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	695a      	ldr	r2, [r3, #20]
 80057a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057ac:	441a      	add	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	69da      	ldr	r2, [r3, #28]
 80057b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057ba:	441a      	add	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d309      	bcc.n	80057e0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	6a1a      	ldr	r2, [r3, #32]
 80057d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d8:	1ad2      	subs	r2, r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	621a      	str	r2, [r3, #32]
 80057de:	e015      	b.n	800580c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d107      	bne.n	80057f8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80057e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057f6:	e009      	b.n	800580c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2200      	movs	r2, #0
 800580a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	785b      	ldrb	r3, [r3, #1]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d155      	bne.n	80058c0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	63bb      	str	r3, [r7, #56]	; 0x38
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005822:	b29b      	uxth	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	4413      	add	r3, r2
 800582a:	63bb      	str	r3, [r7, #56]	; 0x38
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	011a      	lsls	r2, r3, #4
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	4413      	add	r3, r2
 8005836:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800583a:	637b      	str	r3, [r7, #52]	; 0x34
 800583c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800583e:	2b00      	cmp	r3, #0
 8005840:	d112      	bne.n	8005868 <HAL_PCD_EP_DB_Transmit+0x302>
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800584c:	b29a      	uxth	r2, r3
 800584e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005860:	b29a      	uxth	r2, r3
 8005862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	e047      	b.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586a:	2b3e      	cmp	r3, #62	; 0x3e
 800586c:	d811      	bhi.n	8005892 <HAL_PCD_EP_DB_Transmit+0x32c>
 800586e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
 8005874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <HAL_PCD_EP_DB_Transmit+0x31e>
 800587e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005880:	3301      	adds	r3, #1
 8005882:	64bb      	str	r3, [r7, #72]	; 0x48
 8005884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005886:	b29b      	uxth	r3, r3
 8005888:	029b      	lsls	r3, r3, #10
 800588a:	b29a      	uxth	r2, r3
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	e032      	b.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	64bb      	str	r3, [r7, #72]	; 0x48
 8005898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <HAL_PCD_EP_DB_Transmit+0x342>
 80058a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a4:	3b01      	subs	r3, #1
 80058a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80058a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	029b      	lsls	r3, r3, #10
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e01b      	b.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x392>
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	785b      	ldrb	r3, [r3, #1]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d117      	bne.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x392>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	643b      	str	r3, [r7, #64]	; 0x40
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058dc:	4413      	add	r3, r2
 80058de:	643b      	str	r3, [r7, #64]	; 0x40
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	011a      	lsls	r2, r3, #4
 80058e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e8:	4413      	add	r3, r2
 80058ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6959      	ldr	r1, [r3, #20]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	891a      	ldrh	r2, [r3, #8]
 8005904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005906:	b29b      	uxth	r3, r3
 8005908:	f003 fea0 	bl	800964c <USB_WritePMA>
 800590c:	e1d0      	b.n	8005cb0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005916:	b29b      	uxth	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4413      	add	r3, r2
 8005922:	3306      	adds	r3, #6
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	6812      	ldr	r2, [r2, #0]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005936:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005942:	429a      	cmp	r2, r3
 8005944:	d307      	bcc.n	8005956 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800594e:	1ad2      	subs	r2, r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	619a      	str	r2, [r3, #24]
 8005954:	e002      	b.n	800595c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2200      	movs	r2, #0
 800595a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f040 80c4 	bne.w	8005aee <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d126      	bne.n	80059bc <HAL_PCD_EP_DB_Transmit+0x456>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597c:	b29b      	uxth	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005982:	4413      	add	r3, r2
 8005984:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	011a      	lsls	r2, r3, #4
 800598c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598e:	4413      	add	r3, r2
 8005990:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005994:	66bb      	str	r3, [r7, #104]	; 0x68
 8005996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	e01a      	b.n	80059f2 <HAL_PCD_EP_DB_Transmit+0x48c>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d116      	bne.n	80059f2 <HAL_PCD_EP_DB_Transmit+0x48c>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	677b      	str	r3, [r7, #116]	; 0x74
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d8:	4413      	add	r3, r2
 80059da:	677b      	str	r3, [r7, #116]	; 0x74
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	011a      	lsls	r2, r3, #4
 80059e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e4:	4413      	add	r3, r2
 80059e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059ea:	673b      	str	r3, [r7, #112]	; 0x70
 80059ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059ee:	2200      	movs	r2, #0
 80059f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	785b      	ldrb	r3, [r3, #1]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d12f      	bne.n	8005a60 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a18:	4413      	add	r3, r2
 8005a1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	011a      	lsls	r2, r3, #4
 8005a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a28:	4413      	add	r3, r2
 8005a2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	e017      	b.n	8005a90 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	785b      	ldrb	r3, [r3, #1]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d113      	bne.n	8005a90 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a76:	4413      	add	r3, r2
 8005a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	011a      	lsls	r2, r3, #4
 8005a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a82:	4413      	add	r3, r2
 8005a84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	4619      	mov	r1, r3
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f005 fc3d 	bl	800b316 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f040 8104 	bne.w	8005cb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	441a      	add	r2, r3
 8005ad4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	8013      	strh	r3, [r2, #0]
 8005aec:	e0e0      	b.n	8005cb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d121      	bne.n	8005b3c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	441a      	add	r2, r3
 8005b24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	f040 80b4 	bne.w	8005cb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	695a      	ldr	r2, [r3, #20]
 8005b4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b50:	441a      	add	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b5e:	441a      	add	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	6a1a      	ldr	r2, [r3, #32]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d309      	bcc.n	8005b84 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6a1a      	ldr	r2, [r3, #32]
 8005b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b7c:	1ad2      	subs	r2, r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	621a      	str	r2, [r3, #32]
 8005b82:	e015      	b.n	8005bb0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d107      	bne.n	8005b9c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005b8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b9a:	e009      	b.n	8005bb0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	667b      	str	r3, [r7, #100]	; 0x64
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d155      	bne.n	8005c6a <HAL_PCD_EP_DB_Transmit+0x704>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd2:	4413      	add	r3, r2
 8005bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	011a      	lsls	r2, r3, #4
 8005bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005be4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d112      	bne.n	8005c12 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bfa:	801a      	strh	r2, [r3, #0]
 8005bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	e044      	b.n	8005c9c <HAL_PCD_EP_DB_Transmit+0x736>
 8005c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c14:	2b3e      	cmp	r3, #62	; 0x3e
 8005c16:	d811      	bhi.n	8005c3c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	029b      	lsls	r3, r3, #10
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c38:	801a      	strh	r2, [r3, #0]
 8005c3a:	e02f      	b.n	8005c9c <HAL_PCD_EP_DB_Transmit+0x736>
 8005c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	657b      	str	r3, [r7, #84]	; 0x54
 8005c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c44:	f003 031f 	and.w	r3, r3, #31
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d102      	bne.n	8005c52 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	657b      	str	r3, [r7, #84]	; 0x54
 8005c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	029b      	lsls	r3, r3, #10
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c66:	801a      	strh	r2, [r3, #0]
 8005c68:	e018      	b.n	8005c9c <HAL_PCD_EP_DB_Transmit+0x736>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d114      	bne.n	8005c9c <HAL_PCD_EP_DB_Transmit+0x736>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c80:	4413      	add	r3, r2
 8005c82:	667b      	str	r3, [r7, #100]	; 0x64
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	011a      	lsls	r2, r3, #4
 8005c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c92:	663b      	str	r3, [r7, #96]	; 0x60
 8005c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c9a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6959      	ldr	r1, [r3, #20]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	895a      	ldrh	r2, [r3, #10]
 8005ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f003 fcce 	bl	800964c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cca:	823b      	strh	r3, [r7, #16]
 8005ccc:	8a3b      	ldrh	r3, [r7, #16]
 8005cce:	f083 0310 	eor.w	r3, r3, #16
 8005cd2:	823b      	strh	r3, [r7, #16]
 8005cd4:	8a3b      	ldrh	r3, [r7, #16]
 8005cd6:	f083 0320 	eor.w	r3, r3, #32
 8005cda:	823b      	strh	r3, [r7, #16]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	441a      	add	r2, r3
 8005cea:	8a3b      	ldrh	r3, [r7, #16]
 8005cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3788      	adds	r7, #136	; 0x88
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b087      	sub	sp, #28
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	607b      	str	r3, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	817b      	strh	r3, [r7, #10]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005d1c:	897b      	ldrh	r3, [r7, #10]
 8005d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00b      	beq.n	8005d40 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d28:	897b      	ldrh	r3, [r7, #10]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	e009      	b.n	8005d54 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d40:	897a      	ldrh	r2, [r7, #10]
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4413      	add	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005d54:	893b      	ldrh	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d107      	bne.n	8005d6a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	80da      	strh	r2, [r3, #6]
 8005d68:	e00b      	b.n	8005d82 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	0c1b      	lsrs	r3, r3, #16
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bc80      	pop	{r7}
 8005d8c:	4770      	bx	lr
	...

08005d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e272      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8087 	beq.w	8005ebe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005db0:	4b92      	ldr	r3, [pc, #584]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f003 030c 	and.w	r3, r3, #12
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d00c      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005dbc:	4b8f      	ldr	r3, [pc, #572]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 030c 	and.w	r3, r3, #12
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d112      	bne.n	8005dee <HAL_RCC_OscConfig+0x5e>
 8005dc8:	4b8c      	ldr	r3, [pc, #560]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd4:	d10b      	bne.n	8005dee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd6:	4b89      	ldr	r3, [pc, #548]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d06c      	beq.n	8005ebc <HAL_RCC_OscConfig+0x12c>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d168      	bne.n	8005ebc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e24c      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_OscConfig+0x76>
 8005df8:	4b80      	ldr	r3, [pc, #512]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a7f      	ldr	r2, [pc, #508]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	e02e      	b.n	8005e64 <HAL_RCC_OscConfig+0xd4>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x98>
 8005e0e:	4b7b      	ldr	r3, [pc, #492]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7a      	ldr	r2, [pc, #488]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b78      	ldr	r3, [pc, #480]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a77      	ldr	r2, [pc, #476]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e01d      	b.n	8005e64 <HAL_RCC_OscConfig+0xd4>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e30:	d10c      	bne.n	8005e4c <HAL_RCC_OscConfig+0xbc>
 8005e32:	4b72      	ldr	r3, [pc, #456]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a71      	ldr	r2, [pc, #452]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4b6f      	ldr	r3, [pc, #444]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a6e      	ldr	r2, [pc, #440]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e00b      	b.n	8005e64 <HAL_RCC_OscConfig+0xd4>
 8005e4c:	4b6b      	ldr	r3, [pc, #428]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a6a      	ldr	r2, [pc, #424]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	4b68      	ldr	r3, [pc, #416]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a67      	ldr	r2, [pc, #412]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d013      	beq.n	8005e94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6c:	f7fb fa8c 	bl	8001388 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e74:	f7fb fa88 	bl	8001388 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b64      	cmp	r3, #100	; 0x64
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e200      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e86:	4b5d      	ldr	r3, [pc, #372]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0xe4>
 8005e92:	e014      	b.n	8005ebe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e94:	f7fb fa78 	bl	8001388 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e9c:	f7fb fa74 	bl	8001388 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b64      	cmp	r3, #100	; 0x64
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e1ec      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eae:	4b53      	ldr	r3, [pc, #332]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x10c>
 8005eba:	e000      	b.n	8005ebe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d063      	beq.n	8005f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eca:	4b4c      	ldr	r3, [pc, #304]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00b      	beq.n	8005eee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005ed6:	4b49      	ldr	r3, [pc, #292]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 030c 	and.w	r3, r3, #12
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d11c      	bne.n	8005f1c <HAL_RCC_OscConfig+0x18c>
 8005ee2:	4b46      	ldr	r3, [pc, #280]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d116      	bne.n	8005f1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eee:	4b43      	ldr	r3, [pc, #268]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_RCC_OscConfig+0x176>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d001      	beq.n	8005f06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e1c0      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f06:	4b3d      	ldr	r3, [pc, #244]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	4939      	ldr	r1, [pc, #228]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f1a:	e03a      	b.n	8005f92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d020      	beq.n	8005f66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f24:	4b36      	ldr	r3, [pc, #216]	; (8006000 <HAL_RCC_OscConfig+0x270>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2a:	f7fb fa2d 	bl	8001388 <HAL_GetTick>
 8005f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f32:	f7fb fa29 	bl	8001388 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e1a1      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f44:	4b2d      	ldr	r3, [pc, #180]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f0      	beq.n	8005f32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f50:	4b2a      	ldr	r3, [pc, #168]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	4927      	ldr	r1, [pc, #156]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	600b      	str	r3, [r1, #0]
 8005f64:	e015      	b.n	8005f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f66:	4b26      	ldr	r3, [pc, #152]	; (8006000 <HAL_RCC_OscConfig+0x270>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6c:	f7fb fa0c 	bl	8001388 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f74:	f7fb fa08 	bl	8001388 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e180      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f86:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d03a      	beq.n	8006014 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d019      	beq.n	8005fda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fa6:	4b17      	ldr	r3, [pc, #92]	; (8006004 <HAL_RCC_OscConfig+0x274>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fac:	f7fb f9ec 	bl	8001388 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fb4:	f7fb f9e8 	bl	8001388 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e160      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	f000 fac4 	bl	8006560 <RCC_Delay>
 8005fd8:	e01c      	b.n	8006014 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fda:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <HAL_RCC_OscConfig+0x274>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe0:	f7fb f9d2 	bl	8001388 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe6:	e00f      	b.n	8006008 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fe8:	f7fb f9ce 	bl	8001388 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d908      	bls.n	8006008 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e146      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
 8005ffa:	bf00      	nop
 8005ffc:	40021000 	.word	0x40021000
 8006000:	42420000 	.word	0x42420000
 8006004:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006008:	4b92      	ldr	r3, [pc, #584]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e9      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80a6 	beq.w	800616e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006022:	2300      	movs	r3, #0
 8006024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006026:	4b8b      	ldr	r3, [pc, #556]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10d      	bne.n	800604e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006032:	4b88      	ldr	r3, [pc, #544]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	4a87      	ldr	r2, [pc, #540]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800603c:	61d3      	str	r3, [r2, #28]
 800603e:	4b85      	ldr	r3, [pc, #532]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800604a:	2301      	movs	r3, #1
 800604c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800604e:	4b82      	ldr	r3, [pc, #520]	; (8006258 <HAL_RCC_OscConfig+0x4c8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d118      	bne.n	800608c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800605a:	4b7f      	ldr	r3, [pc, #508]	; (8006258 <HAL_RCC_OscConfig+0x4c8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a7e      	ldr	r2, [pc, #504]	; (8006258 <HAL_RCC_OscConfig+0x4c8>)
 8006060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006066:	f7fb f98f 	bl	8001388 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606e:	f7fb f98b 	bl	8001388 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b64      	cmp	r3, #100	; 0x64
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e103      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006080:	4b75      	ldr	r3, [pc, #468]	; (8006258 <HAL_RCC_OscConfig+0x4c8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0f0      	beq.n	800606e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d106      	bne.n	80060a2 <HAL_RCC_OscConfig+0x312>
 8006094:	4b6f      	ldr	r3, [pc, #444]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	4a6e      	ldr	r2, [pc, #440]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6213      	str	r3, [r2, #32]
 80060a0:	e02d      	b.n	80060fe <HAL_RCC_OscConfig+0x36e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10c      	bne.n	80060c4 <HAL_RCC_OscConfig+0x334>
 80060aa:	4b6a      	ldr	r3, [pc, #424]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	4a69      	ldr	r2, [pc, #420]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	6213      	str	r3, [r2, #32]
 80060b6:	4b67      	ldr	r3, [pc, #412]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	4a66      	ldr	r2, [pc, #408]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060bc:	f023 0304 	bic.w	r3, r3, #4
 80060c0:	6213      	str	r3, [r2, #32]
 80060c2:	e01c      	b.n	80060fe <HAL_RCC_OscConfig+0x36e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2b05      	cmp	r3, #5
 80060ca:	d10c      	bne.n	80060e6 <HAL_RCC_OscConfig+0x356>
 80060cc:	4b61      	ldr	r3, [pc, #388]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	4a60      	ldr	r2, [pc, #384]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060d2:	f043 0304 	orr.w	r3, r3, #4
 80060d6:	6213      	str	r3, [r2, #32]
 80060d8:	4b5e      	ldr	r3, [pc, #376]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	4a5d      	ldr	r2, [pc, #372]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	6213      	str	r3, [r2, #32]
 80060e4:	e00b      	b.n	80060fe <HAL_RCC_OscConfig+0x36e>
 80060e6:	4b5b      	ldr	r3, [pc, #364]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	4a5a      	ldr	r2, [pc, #360]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	6213      	str	r3, [r2, #32]
 80060f2:	4b58      	ldr	r3, [pc, #352]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	4a57      	ldr	r2, [pc, #348]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060f8:	f023 0304 	bic.w	r3, r3, #4
 80060fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d015      	beq.n	8006132 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006106:	f7fb f93f 	bl	8001388 <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800610c:	e00a      	b.n	8006124 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610e:	f7fb f93b 	bl	8001388 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	f241 3288 	movw	r2, #5000	; 0x1388
 800611c:	4293      	cmp	r3, r2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e0b1      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006124:	4b4b      	ldr	r3, [pc, #300]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0ee      	beq.n	800610e <HAL_RCC_OscConfig+0x37e>
 8006130:	e014      	b.n	800615c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006132:	f7fb f929 	bl	8001388 <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006138:	e00a      	b.n	8006150 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613a:	f7fb f925 	bl	8001388 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f241 3288 	movw	r2, #5000	; 0x1388
 8006148:	4293      	cmp	r3, r2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e09b      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006150:	4b40      	ldr	r3, [pc, #256]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1ee      	bne.n	800613a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d105      	bne.n	800616e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006162:	4b3c      	ldr	r3, [pc, #240]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	4a3b      	ldr	r2, [pc, #236]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800616c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8087 	beq.w	8006286 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006178:	4b36      	ldr	r3, [pc, #216]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f003 030c 	and.w	r3, r3, #12
 8006180:	2b08      	cmp	r3, #8
 8006182:	d061      	beq.n	8006248 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d146      	bne.n	800621a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800618c:	4b33      	ldr	r3, [pc, #204]	; (800625c <HAL_RCC_OscConfig+0x4cc>)
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006192:	f7fb f8f9 	bl	8001388 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800619a:	f7fb f8f5 	bl	8001388 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e06d      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ac:	4b29      	ldr	r3, [pc, #164]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f0      	bne.n	800619a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c0:	d108      	bne.n	80061d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061c2:	4b24      	ldr	r3, [pc, #144]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	4921      	ldr	r1, [pc, #132]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061d4:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a19      	ldr	r1, [r3, #32]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	430b      	orrs	r3, r1
 80061e6:	491b      	ldr	r1, [pc, #108]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <HAL_RCC_OscConfig+0x4cc>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f2:	f7fb f8c9 	bl	8001388 <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061fa:	f7fb f8c5 	bl	8001388 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e03d      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800620c:	4b11      	ldr	r3, [pc, #68]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0f0      	beq.n	80061fa <HAL_RCC_OscConfig+0x46a>
 8006218:	e035      	b.n	8006286 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800621a:	4b10      	ldr	r3, [pc, #64]	; (800625c <HAL_RCC_OscConfig+0x4cc>)
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006220:	f7fb f8b2 	bl	8001388 <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006228:	f7fb f8ae 	bl	8001388 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e026      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800623a:	4b06      	ldr	r3, [pc, #24]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1f0      	bne.n	8006228 <HAL_RCC_OscConfig+0x498>
 8006246:	e01e      	b.n	8006286 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d107      	bne.n	8006260 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e019      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
 8006254:	40021000 	.word	0x40021000
 8006258:	40007000 	.word	0x40007000
 800625c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <HAL_RCC_OscConfig+0x500>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	429a      	cmp	r2, r3
 8006272:	d106      	bne.n	8006282 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627e:	429a      	cmp	r2, r3
 8006280:	d001      	beq.n	8006286 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40021000 	.word	0x40021000

08006294 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0d0      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062a8:	4b6a      	ldr	r3, [pc, #424]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d910      	bls.n	80062d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b6:	4b67      	ldr	r3, [pc, #412]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f023 0207 	bic.w	r2, r3, #7
 80062be:	4965      	ldr	r1, [pc, #404]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c6:	4b63      	ldr	r3, [pc, #396]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d001      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0b8      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d020      	beq.n	8006326 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062f0:	4b59      	ldr	r3, [pc, #356]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4a58      	ldr	r2, [pc, #352]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80062f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006308:	4b53      	ldr	r3, [pc, #332]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	4a52      	ldr	r2, [pc, #328]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800630e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006312:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006314:	4b50      	ldr	r3, [pc, #320]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	494d      	ldr	r1, [pc, #308]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006322:	4313      	orrs	r3, r2
 8006324:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d040      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d107      	bne.n	800634a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633a:	4b47      	ldr	r3, [pc, #284]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d115      	bne.n	8006372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e07f      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d107      	bne.n	8006362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006352:	4b41      	ldr	r3, [pc, #260]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d109      	bne.n	8006372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e073      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006362:	4b3d      	ldr	r3, [pc, #244]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e06b      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006372:	4b39      	ldr	r3, [pc, #228]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f023 0203 	bic.w	r2, r3, #3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	4936      	ldr	r1, [pc, #216]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006380:	4313      	orrs	r3, r2
 8006382:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006384:	f7fb f800 	bl	8001388 <HAL_GetTick>
 8006388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638a:	e00a      	b.n	80063a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800638c:	f7fa fffc 	bl	8001388 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	f241 3288 	movw	r2, #5000	; 0x1388
 800639a:	4293      	cmp	r3, r2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e053      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063a2:	4b2d      	ldr	r3, [pc, #180]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f003 020c 	and.w	r2, r3, #12
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d1eb      	bne.n	800638c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063b4:	4b27      	ldr	r3, [pc, #156]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d210      	bcs.n	80063e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063c2:	4b24      	ldr	r3, [pc, #144]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f023 0207 	bic.w	r2, r3, #7
 80063ca:	4922      	ldr	r1, [pc, #136]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063d2:	4b20      	ldr	r3, [pc, #128]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d001      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e032      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063f0:	4b19      	ldr	r3, [pc, #100]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4916      	ldr	r1, [pc, #88]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800640e:	4b12      	ldr	r3, [pc, #72]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	490e      	ldr	r1, [pc, #56]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800641e:	4313      	orrs	r3, r2
 8006420:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006422:	f000 f821 	bl	8006468 <HAL_RCC_GetSysClockFreq>
 8006426:	4602      	mov	r2, r0
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	490a      	ldr	r1, [pc, #40]	; (800645c <HAL_RCC_ClockConfig+0x1c8>)
 8006434:	5ccb      	ldrb	r3, [r1, r3]
 8006436:	fa22 f303 	lsr.w	r3, r2, r3
 800643a:	4a09      	ldr	r2, [pc, #36]	; (8006460 <HAL_RCC_ClockConfig+0x1cc>)
 800643c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800643e:	4b09      	ldr	r3, [pc, #36]	; (8006464 <HAL_RCC_ClockConfig+0x1d0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f7fa ff5e 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40022000 	.word	0x40022000
 8006458:	40021000 	.word	0x40021000
 800645c:	0800be8c 	.word	0x0800be8c
 8006460:	20000000 	.word	0x20000000
 8006464:	20000004 	.word	0x20000004

08006468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006468:	b490      	push	{r4, r7}
 800646a:	b08a      	sub	sp, #40	; 0x28
 800646c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800646e:	4b29      	ldr	r3, [pc, #164]	; (8006514 <HAL_RCC_GetSysClockFreq+0xac>)
 8006470:	1d3c      	adds	r4, r7, #4
 8006472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006478:	f240 2301 	movw	r3, #513	; 0x201
 800647c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
 8006482:	2300      	movs	r3, #0
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	2300      	movs	r3, #0
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006492:	4b21      	ldr	r3, [pc, #132]	; (8006518 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	f003 030c 	and.w	r3, r3, #12
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d002      	beq.n	80064a8 <HAL_RCC_GetSysClockFreq+0x40>
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d003      	beq.n	80064ae <HAL_RCC_GetSysClockFreq+0x46>
 80064a6:	e02b      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064a8:	4b1c      	ldr	r3, [pc, #112]	; (800651c <HAL_RCC_GetSysClockFreq+0xb4>)
 80064aa:	623b      	str	r3, [r7, #32]
      break;
 80064ac:	e02b      	b.n	8006506 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	0c9b      	lsrs	r3, r3, #18
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	3328      	adds	r3, #40	; 0x28
 80064b8:	443b      	add	r3, r7
 80064ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064be:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d012      	beq.n	80064f0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064ca:	4b13      	ldr	r3, [pc, #76]	; (8006518 <HAL_RCC_GetSysClockFreq+0xb0>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	0c5b      	lsrs	r3, r3, #17
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	3328      	adds	r3, #40	; 0x28
 80064d6:	443b      	add	r3, r7
 80064d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80064dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	4a0e      	ldr	r2, [pc, #56]	; (800651c <HAL_RCC_GetSysClockFreq+0xb4>)
 80064e2:	fb03 f202 	mul.w	r2, r3, r2
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
 80064ee:	e004      	b.n	80064fa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	4a0b      	ldr	r2, [pc, #44]	; (8006520 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	623b      	str	r3, [r7, #32]
      break;
 80064fe:	e002      	b.n	8006506 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006500:	4b06      	ldr	r3, [pc, #24]	; (800651c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006502:	623b      	str	r3, [r7, #32]
      break;
 8006504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006506:	6a3b      	ldr	r3, [r7, #32]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3728      	adds	r7, #40	; 0x28
 800650c:	46bd      	mov	sp, r7
 800650e:	bc90      	pop	{r4, r7}
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	0800be30 	.word	0x0800be30
 8006518:	40021000 	.word	0x40021000
 800651c:	007a1200 	.word	0x007a1200
 8006520:	003d0900 	.word	0x003d0900

08006524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006528:	4b02      	ldr	r3, [pc, #8]	; (8006534 <HAL_RCC_GetHCLKFreq+0x10>)
 800652a:	681b      	ldr	r3, [r3, #0]
}
 800652c:	4618      	mov	r0, r3
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr
 8006534:	20000000 	.word	0x20000000

08006538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800653c:	f7ff fff2 	bl	8006524 <HAL_RCC_GetHCLKFreq>
 8006540:	4602      	mov	r2, r0
 8006542:	4b05      	ldr	r3, [pc, #20]	; (8006558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	0a1b      	lsrs	r3, r3, #8
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	4903      	ldr	r1, [pc, #12]	; (800655c <HAL_RCC_GetPCLK1Freq+0x24>)
 800654e:	5ccb      	ldrb	r3, [r1, r3]
 8006550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006554:	4618      	mov	r0, r3
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40021000 	.word	0x40021000
 800655c:	0800be9c 	.word	0x0800be9c

08006560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <RCC_Delay+0x34>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <RCC_Delay+0x38>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	0a5b      	lsrs	r3, r3, #9
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	fb02 f303 	mul.w	r3, r2, r3
 800657a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800657c:	bf00      	nop
  }
  while (Delay --);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1e5a      	subs	r2, r3, #1
 8006582:	60fa      	str	r2, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f9      	bne.n	800657c <RCC_Delay+0x1c>
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr
 8006594:	20000000 	.word	0x20000000
 8006598:	10624dd3 	.word	0x10624dd3

0800659c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d07d      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80065b8:	2300      	movs	r3, #0
 80065ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065bc:	4b4f      	ldr	r3, [pc, #316]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10d      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065c8:	4b4c      	ldr	r3, [pc, #304]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	4a4b      	ldr	r2, [pc, #300]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d2:	61d3      	str	r3, [r2, #28]
 80065d4:	4b49      	ldr	r3, [pc, #292]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065e0:	2301      	movs	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e4:	4b46      	ldr	r3, [pc, #280]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d118      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065f0:	4b43      	ldr	r3, [pc, #268]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a42      	ldr	r2, [pc, #264]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065fc:	f7fa fec4 	bl	8001388 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006602:	e008      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006604:	f7fa fec0 	bl	8001388 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b64      	cmp	r3, #100	; 0x64
 8006610:	d901      	bls.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e06d      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006616:	4b3a      	ldr	r3, [pc, #232]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f0      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006622:	4b36      	ldr	r3, [pc, #216]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800662a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d02e      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	429a      	cmp	r2, r3
 800663e:	d027      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006640:	4b2e      	ldr	r3, [pc, #184]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006648:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800664a:	4b2e      	ldr	r3, [pc, #184]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800664c:	2201      	movs	r2, #1
 800664e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006650:	4b2c      	ldr	r3, [pc, #176]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006656:	4a29      	ldr	r2, [pc, #164]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d014      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006666:	f7fa fe8f 	bl	8001388 <HAL_GetTick>
 800666a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800666c:	e00a      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800666e:	f7fa fe8b 	bl	8001388 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	f241 3288 	movw	r2, #5000	; 0x1388
 800667c:	4293      	cmp	r3, r2
 800667e:	d901      	bls.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e036      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006684:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0ee      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006690:	4b1a      	ldr	r3, [pc, #104]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	4917      	ldr	r1, [pc, #92]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d105      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066a8:	4b14      	ldr	r3, [pc, #80]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	4a13      	ldr	r2, [pc, #76]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066c0:	4b0e      	ldr	r3, [pc, #56]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	490b      	ldr	r1, [pc, #44]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d008      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066de:	4b07      	ldr	r3, [pc, #28]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	4904      	ldr	r1, [pc, #16]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	40021000 	.word	0x40021000
 8006700:	40007000 	.word	0x40007000
 8006704:	42420440 	.word	0x42420440

08006708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e041      	b.n	800679e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fa fd02 	bl	8001138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3304      	adds	r3, #4
 8006744:	4619      	mov	r1, r3
 8006746:	4610      	mov	r0, r2
 8006748:	f000 f8f2 	bl	8006930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_TIM_ConfigClockSource+0x18>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e0b3      	b.n	8006926 <HAL_TIM_ConfigClockSource+0x180>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067e4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f6:	d03e      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0xd0>
 80067f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fc:	f200 8087 	bhi.w	800690e <HAL_TIM_ConfigClockSource+0x168>
 8006800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006804:	f000 8085 	beq.w	8006912 <HAL_TIM_ConfigClockSource+0x16c>
 8006808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680c:	d87f      	bhi.n	800690e <HAL_TIM_ConfigClockSource+0x168>
 800680e:	2b70      	cmp	r3, #112	; 0x70
 8006810:	d01a      	beq.n	8006848 <HAL_TIM_ConfigClockSource+0xa2>
 8006812:	2b70      	cmp	r3, #112	; 0x70
 8006814:	d87b      	bhi.n	800690e <HAL_TIM_ConfigClockSource+0x168>
 8006816:	2b60      	cmp	r3, #96	; 0x60
 8006818:	d050      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0x116>
 800681a:	2b60      	cmp	r3, #96	; 0x60
 800681c:	d877      	bhi.n	800690e <HAL_TIM_ConfigClockSource+0x168>
 800681e:	2b50      	cmp	r3, #80	; 0x50
 8006820:	d03c      	beq.n	800689c <HAL_TIM_ConfigClockSource+0xf6>
 8006822:	2b50      	cmp	r3, #80	; 0x50
 8006824:	d873      	bhi.n	800690e <HAL_TIM_ConfigClockSource+0x168>
 8006826:	2b40      	cmp	r3, #64	; 0x40
 8006828:	d058      	beq.n	80068dc <HAL_TIM_ConfigClockSource+0x136>
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	d86f      	bhi.n	800690e <HAL_TIM_ConfigClockSource+0x168>
 800682e:	2b30      	cmp	r3, #48	; 0x30
 8006830:	d064      	beq.n	80068fc <HAL_TIM_ConfigClockSource+0x156>
 8006832:	2b30      	cmp	r3, #48	; 0x30
 8006834:	d86b      	bhi.n	800690e <HAL_TIM_ConfigClockSource+0x168>
 8006836:	2b20      	cmp	r3, #32
 8006838:	d060      	beq.n	80068fc <HAL_TIM_ConfigClockSource+0x156>
 800683a:	2b20      	cmp	r3, #32
 800683c:	d867      	bhi.n	800690e <HAL_TIM_ConfigClockSource+0x168>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d05c      	beq.n	80068fc <HAL_TIM_ConfigClockSource+0x156>
 8006842:	2b10      	cmp	r3, #16
 8006844:	d05a      	beq.n	80068fc <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006846:	e062      	b.n	800690e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	6899      	ldr	r1, [r3, #8]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f000 f943 	bl	8006ae2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800686a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	609a      	str	r2, [r3, #8]
      break;
 8006874:	e04e      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6899      	ldr	r1, [r3, #8]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f000 f92c 	bl	8006ae2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006898:	609a      	str	r2, [r3, #8]
      break;
 800689a:	e03b      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	6859      	ldr	r1, [r3, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	461a      	mov	r2, r3
 80068aa:	f000 f8a3 	bl	80069f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2150      	movs	r1, #80	; 0x50
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 f8fa 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 80068ba:	e02b      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	6859      	ldr	r1, [r3, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	461a      	mov	r2, r3
 80068ca:	f000 f8c1 	bl	8006a50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2160      	movs	r1, #96	; 0x60
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 f8ea 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 80068da:	e01b      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	6859      	ldr	r1, [r3, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	461a      	mov	r2, r3
 80068ea:	f000 f883 	bl	80069f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2140      	movs	r1, #64	; 0x40
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 f8da 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 80068fa:	e00b      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4619      	mov	r1, r3
 8006906:	4610      	mov	r0, r2
 8006908:	f000 f8d1 	bl	8006aae <TIM_ITRx_SetConfig>
        break;
 800690c:	e002      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800690e:	bf00      	nop
 8006910:	e000      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a29      	ldr	r2, [pc, #164]	; (80069e8 <TIM_Base_SetConfig+0xb8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00b      	beq.n	8006960 <TIM_Base_SetConfig+0x30>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694e:	d007      	beq.n	8006960 <TIM_Base_SetConfig+0x30>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a26      	ldr	r2, [pc, #152]	; (80069ec <TIM_Base_SetConfig+0xbc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_Base_SetConfig+0x30>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a25      	ldr	r2, [pc, #148]	; (80069f0 <TIM_Base_SetConfig+0xc0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d108      	bne.n	8006972 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1c      	ldr	r2, [pc, #112]	; (80069e8 <TIM_Base_SetConfig+0xb8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00b      	beq.n	8006992 <TIM_Base_SetConfig+0x62>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006980:	d007      	beq.n	8006992 <TIM_Base_SetConfig+0x62>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a19      	ldr	r2, [pc, #100]	; (80069ec <TIM_Base_SetConfig+0xbc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d003      	beq.n	8006992 <TIM_Base_SetConfig+0x62>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <TIM_Base_SetConfig+0xc0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d108      	bne.n	80069a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a07      	ldr	r2, [pc, #28]	; (80069e8 <TIM_Base_SetConfig+0xb8>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d103      	bne.n	80069d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	615a      	str	r2, [r3, #20]
}
 80069de:	bf00      	nop
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800

080069f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f023 0201 	bic.w	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f023 030a 	bic.w	r3, r3, #10
 8006a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	f023 0210 	bic.w	r2, r3, #16
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	031b      	lsls	r3, r3, #12
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	621a      	str	r2, [r3, #32]
}
 8006aa4:	bf00      	nop
 8006aa6:	371c      	adds	r7, #28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr

08006aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f043 0307 	orr.w	r3, r3, #7
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	609a      	str	r2, [r3, #8]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr

08006ae2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b087      	sub	sp, #28
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
 8006aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006afc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	021a      	lsls	r2, r3, #8
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	609a      	str	r2, [r3, #8]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e046      	b.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a16      	ldr	r2, [pc, #88]	; (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00e      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b84:	d009      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a12      	ldr	r2, [pc, #72]	; (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d004      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a10      	ldr	r2, [pc, #64]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d10c      	bne.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bc80      	pop	{r7}
 8006bce:	4770      	bx	lr
 8006bd0:	40012c00 	.word	0x40012c00
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800

08006bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006bdc:	b084      	sub	sp, #16
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	f107 0014 	add.w	r0, r7, #20
 8006bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	b004      	add	sp, #16
 8006bfa:	4770      	bx	lr

08006bfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c0c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006c10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr

08006c28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006c34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	43db      	mvns	r3, r3
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4013      	ands	r3, r2
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr

08006c74 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c74:	b084      	sub	sp, #16
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	f107 0014 	add.w	r0, r7, #20
 8006c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	b004      	add	sp, #16
 8006cb2:	4770      	bx	lr

08006cb4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b09b      	sub	sp, #108	; 0x6c
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cda:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	78db      	ldrb	r3, [r3, #3]
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d81f      	bhi.n	8006d26 <USB_ActivateEndpoint+0x72>
 8006ce6:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <USB_ActivateEndpoint+0x38>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006cfd 	.word	0x08006cfd
 8006cf0:	08006d19 	.word	0x08006d19
 8006cf4:	08006d2f 	.word	0x08006d2f
 8006cf8:	08006d0b 	.word	0x08006d0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006cfc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d04:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006d08:	e012      	b.n	8006d30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006d0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d0e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006d12:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006d16:	e00b      	b.n	8006d30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006d18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d20:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006d24:	e004      	b.n	8006d30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006d2c:	e000      	b.n	8006d30 <USB_ActivateEndpoint+0x7c>
      break;
 8006d2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	441a      	add	r2, r3
 8006d3a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	4313      	orrs	r3, r2
 8006d72:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	7b1b      	ldrb	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f040 8149 	bne.w	8007034 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 8084 	beq.w	8006eb4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	011a      	lsls	r2, r3, #4
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	88db      	ldrh	r3, [r3, #6]
 8006dd4:	085b      	lsrs	r3, r3, #1
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	81fb      	strh	r3, [r7, #14]
 8006dee:	89fb      	ldrh	r3, [r7, #14]
 8006df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d01b      	beq.n	8006e30 <USB_ActivateEndpoint+0x17c>
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	81bb      	strh	r3, [r7, #12]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	441a      	add	r2, r3
 8006e1a:	89bb      	ldrh	r3, [r7, #12]
 8006e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	78db      	ldrb	r3, [r3, #3]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d020      	beq.n	8006e7a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4e:	813b      	strh	r3, [r7, #8]
 8006e50:	893b      	ldrh	r3, [r7, #8]
 8006e52:	f083 0320 	eor.w	r3, r3, #32
 8006e56:	813b      	strh	r3, [r7, #8]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	441a      	add	r2, r3
 8006e62:	893b      	ldrh	r3, [r7, #8]
 8006e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	8013      	strh	r3, [r2, #0]
 8006e78:	e27f      	b.n	800737a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e90:	817b      	strh	r3, [r7, #10]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	441a      	add	r2, r3
 8006e9c:	897b      	ldrh	r3, [r7, #10]
 8006e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	8013      	strh	r3, [r2, #0]
 8006eb2:	e262      	b.n	800737a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	4413      	add	r3, r2
 8006ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	011a      	lsls	r2, r3, #4
 8006ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	88db      	ldrh	r3, [r3, #6]
 8006edc:	085b      	lsrs	r3, r3, #1
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	4413      	add	r3, r2
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	011a      	lsls	r2, r3, #4
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	4413      	add	r3, r2
 8006f06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f0a:	623b      	str	r3, [r7, #32]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d112      	bne.n	8006f3a <USB_ActivateEndpoint+0x286>
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	801a      	strh	r2, [r3, #0]
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	801a      	strh	r2, [r3, #0]
 8006f38:	e02f      	b.n	8006f9a <USB_ActivateEndpoint+0x2e6>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b3e      	cmp	r3, #62	; 0x3e
 8006f40:	d813      	bhi.n	8006f6a <USB_ActivateEndpoint+0x2b6>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	085b      	lsrs	r3, r3, #1
 8006f48:	663b      	str	r3, [r7, #96]	; 0x60
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <USB_ActivateEndpoint+0x2a8>
 8006f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f58:	3301      	adds	r3, #1
 8006f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	029b      	lsls	r3, r3, #10
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	e017      	b.n	8006f9a <USB_ActivateEndpoint+0x2e6>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	663b      	str	r3, [r7, #96]	; 0x60
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d102      	bne.n	8006f84 <USB_ActivateEndpoint+0x2d0>
 8006f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f80:	3b01      	subs	r3, #1
 8006f82:	663b      	str	r3, [r7, #96]	; 0x60
 8006f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	029b      	lsls	r3, r3, #10
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	83fb      	strh	r3, [r7, #30]
 8006fa8:	8bfb      	ldrh	r3, [r7, #30]
 8006faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d01b      	beq.n	8006fea <USB_ActivateEndpoint+0x336>
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc8:	83bb      	strh	r3, [r7, #28]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	441a      	add	r2, r3
 8006fd4:	8bbb      	ldrh	r3, [r7, #28]
 8006fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007000:	837b      	strh	r3, [r7, #26]
 8007002:	8b7b      	ldrh	r3, [r7, #26]
 8007004:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007008:	837b      	strh	r3, [r7, #26]
 800700a:	8b7b      	ldrh	r3, [r7, #26]
 800700c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007010:	837b      	strh	r3, [r7, #26]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	441a      	add	r2, r3
 800701c:	8b7b      	ldrh	r3, [r7, #26]
 800701e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800702a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702e:	b29b      	uxth	r3, r3
 8007030:	8013      	strh	r3, [r2, #0]
 8007032:	e1a2      	b.n	800737a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	441a      	add	r2, r3
 8007058:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800705c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007064:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800706c:	b29b      	uxth	r3, r3
 800706e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	65bb      	str	r3, [r7, #88]	; 0x58
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800707a:	b29b      	uxth	r3, r3
 800707c:	461a      	mov	r2, r3
 800707e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007080:	4413      	add	r3, r2
 8007082:	65bb      	str	r3, [r7, #88]	; 0x58
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	011a      	lsls	r2, r3, #4
 800708a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800708c:	4413      	add	r3, r2
 800708e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007092:	657b      	str	r3, [r7, #84]	; 0x54
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	891b      	ldrh	r3, [r3, #8]
 8007098:	085b      	lsrs	r3, r3, #1
 800709a:	b29b      	uxth	r3, r3
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	b29a      	uxth	r2, r3
 80070a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070a2:	801a      	strh	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	653b      	str	r3, [r7, #80]	; 0x50
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	461a      	mov	r2, r3
 80070b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070b4:	4413      	add	r3, r2
 80070b6:	653b      	str	r3, [r7, #80]	; 0x50
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	011a      	lsls	r2, r3, #4
 80070be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80070c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	895b      	ldrh	r3, [r3, #10]
 80070cc:	085b      	lsrs	r3, r3, #1
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8091 	bne.w	8007204 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80070f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80070f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d01b      	beq.n	8007132 <USB_ActivateEndpoint+0x47e>
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	b29b      	uxth	r3, r3
 8007108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007110:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	441a      	add	r2, r3
 800711c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800711e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800712a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712e:	b29b      	uxth	r3, r3
 8007130:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007140:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01b      	beq.n	8007182 <USB_ActivateEndpoint+0x4ce>
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800715c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007160:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	441a      	add	r2, r3
 800716c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800716e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800717a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800717e:	b29b      	uxth	r3, r3
 8007180:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007198:	86bb      	strh	r3, [r7, #52]	; 0x34
 800719a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800719c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80071a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80071a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	441a      	add	r2, r3
 80071b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80071b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e0:	867b      	strh	r3, [r7, #50]	; 0x32
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	441a      	add	r2, r3
 80071ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80071ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fe:	b29b      	uxth	r3, r3
 8007200:	8013      	strh	r3, [r2, #0]
 8007202:	e0ba      	b.n	800737a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007214:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01d      	beq.n	800725c <USB_ActivateEndpoint+0x5a8>
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007236:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	441a      	add	r2, r3
 8007244:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007258:	b29b      	uxth	r3, r3
 800725a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800726c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01d      	beq.n	80072b4 <USB_ActivateEndpoint+0x600>
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800728a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	441a      	add	r2, r3
 800729c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	78db      	ldrb	r3, [r3, #3]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d024      	beq.n	8007306 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80072d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80072da:	f083 0320 	eor.w	r3, r3, #32
 80072de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	441a      	add	r2, r3
 80072ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80072f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007300:	b29b      	uxth	r3, r3
 8007302:	8013      	strh	r3, [r2, #0]
 8007304:	e01d      	b.n	8007342 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	441a      	add	r2, r3
 800732a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800732e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800733a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733e:	b29b      	uxth	r3, r3
 8007340:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007358:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	441a      	add	r2, r3
 8007364:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800736a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800736e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007376:	b29b      	uxth	r3, r3
 8007378:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800737a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800737e:	4618      	mov	r0, r3
 8007380:	376c      	adds	r7, #108	; 0x6c
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr

08007388 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007388:	b480      	push	{r7}
 800738a:	b08d      	sub	sp, #52	; 0x34
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	7b1b      	ldrb	r3, [r3, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f040 808e 	bne.w	80074b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d044      	beq.n	800742e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	81bb      	strh	r3, [r7, #12]
 80073b2:	89bb      	ldrh	r3, [r7, #12]
 80073b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01b      	beq.n	80073f4 <USB_DeactivateEndpoint+0x6c>
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d2:	817b      	strh	r3, [r7, #10]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	441a      	add	r2, r3
 80073de:	897b      	ldrh	r3, [r7, #10]
 80073e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800740a:	813b      	strh	r3, [r7, #8]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	441a      	add	r2, r3
 8007416:	893b      	ldrh	r3, [r7, #8]
 8007418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007428:	b29b      	uxth	r3, r3
 800742a:	8013      	strh	r3, [r2, #0]
 800742c:	e192      	b.n	8007754 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	827b      	strh	r3, [r7, #18]
 800743c:	8a7b      	ldrh	r3, [r7, #18]
 800743e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01b      	beq.n	800747e <USB_DeactivateEndpoint+0xf6>
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	b29b      	uxth	r3, r3
 8007454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745c:	823b      	strh	r3, [r7, #16]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	441a      	add	r2, r3
 8007468:	8a3b      	ldrh	r3, [r7, #16]
 800746a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800746e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800747a:	b29b      	uxth	r3, r3
 800747c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007494:	81fb      	strh	r3, [r7, #14]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	441a      	add	r2, r3
 80074a0:	89fb      	ldrh	r3, [r7, #14]
 80074a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	8013      	strh	r3, [r2, #0]
 80074b6:	e14d      	b.n	8007754 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f040 80a5 	bne.w	800760c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	843b      	strh	r3, [r7, #32]
 80074d0:	8c3b      	ldrh	r3, [r7, #32]
 80074d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d01b      	beq.n	8007512 <USB_DeactivateEndpoint+0x18a>
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f0:	83fb      	strh	r3, [r7, #30]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	441a      	add	r2, r3
 80074fc:	8bfb      	ldrh	r3, [r7, #30]
 80074fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007506:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800750a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800750e:	b29b      	uxth	r3, r3
 8007510:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	83bb      	strh	r3, [r7, #28]
 8007520:	8bbb      	ldrh	r3, [r7, #28]
 8007522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	d01b      	beq.n	8007562 <USB_DeactivateEndpoint+0x1da>
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800753c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007540:	837b      	strh	r3, [r7, #26]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	441a      	add	r2, r3
 800754c:	8b7b      	ldrh	r3, [r7, #26]
 800754e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800755a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800755e:	b29b      	uxth	r3, r3
 8007560:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	b29b      	uxth	r3, r3
 8007570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007578:	833b      	strh	r3, [r7, #24]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	441a      	add	r2, r3
 8007584:	8b3b      	ldrh	r3, [r7, #24]
 8007586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007592:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007596:	b29b      	uxth	r3, r3
 8007598:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b0:	82fb      	strh	r3, [r7, #22]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	441a      	add	r2, r3
 80075bc:	8afb      	ldrh	r3, [r7, #22]
 80075be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075e8:	82bb      	strh	r3, [r7, #20]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	441a      	add	r2, r3
 80075f4:	8abb      	ldrh	r3, [r7, #20]
 80075f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007606:	b29b      	uxth	r3, r3
 8007608:	8013      	strh	r3, [r2, #0]
 800760a:	e0a3      	b.n	8007754 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800761a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800761c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d01b      	beq.n	800765c <USB_DeactivateEndpoint+0x2d4>
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	b29b      	uxth	r3, r3
 8007632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	441a      	add	r2, r3
 8007646:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007658:	b29b      	uxth	r3, r3
 800765a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	857b      	strh	r3, [r7, #42]	; 0x2a
 800766a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800766c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01b      	beq.n	80076ac <USB_DeactivateEndpoint+0x324>
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	b29b      	uxth	r3, r3
 8007682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768a:	853b      	strh	r3, [r7, #40]	; 0x28
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	441a      	add	r2, r3
 8007696:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800769c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	441a      	add	r2, r3
 80076ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	441a      	add	r2, r3
 8007706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800770c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007718:	b29b      	uxth	r3, r3
 800771a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	847b      	strh	r3, [r7, #34]	; 0x22
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	441a      	add	r2, r3
 800773e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800774c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007750:	b29b      	uxth	r3, r3
 8007752:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3734      	adds	r7, #52	; 0x34
 800775a:	46bd      	mov	sp, r7
 800775c:	bc80      	pop	{r7}
 800775e:	4770      	bx	lr

08007760 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b0cc      	sub	sp, #304	; 0x130
 8007764:	af00      	add	r7, sp, #0
 8007766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800776e:	6018      	str	r0, [r3, #0]
 8007770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007778:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800777a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	785b      	ldrb	r3, [r3, #1]
 8007786:	2b01      	cmp	r3, #1
 8007788:	f041 817d 	bne.w	8008a86 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800778c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699a      	ldr	r2, [r3, #24]
 8007798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d908      	bls.n	80077ba <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80077a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80077b8:	e007      	b.n	80077ca <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80077ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80077ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	7b1b      	ldrb	r3, [r3, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d152      	bne.n	8007880 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80077da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6959      	ldr	r1, [r3, #20]
 80077e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	88da      	ldrh	r2, [r3, #6]
 80077f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80077fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007800:	6800      	ldr	r0, [r0, #0]
 8007802:	f001 ff23 	bl	800964c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800780e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007812:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007816:	6812      	ldr	r2, [r2, #0]
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007828:	b29b      	uxth	r3, r3
 800782a:	4619      	mov	r1, r3
 800782c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007830:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007834:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007838:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	440a      	add	r2, r1
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	011a      	lsls	r2, r3, #4
 8007850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007854:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4413      	add	r3, r2
 800785c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007864:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786e:	b29a      	uxth	r2, r3
 8007870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007874:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	801a      	strh	r2, [r3, #0]
 800787c:	f001 b8b5 	b.w	80089ea <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	78db      	ldrb	r3, [r3, #3]
 800788c:	2b02      	cmp	r3, #2
 800788e:	f040 84c6 	bne.w	800821e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6a1a      	ldr	r2, [r3, #32]
 800789e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	f240 8443 	bls.w	8008136 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80078b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80078da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	441a      	add	r2, r3
 80078f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007900:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007908:	b29b      	uxth	r3, r3
 800790a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800790c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6a1a      	ldr	r2, [r3, #32]
 8007918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791c:	1ad2      	subs	r2, r2, r3
 800791e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800792a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 823e 	beq.w	8007dce <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007956:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800795a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800795e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007962:	6812      	ldr	r2, [r2, #0]
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	785b      	ldrb	r3, [r3, #1]
 8007972:	2b00      	cmp	r3, #0
 8007974:	f040 809a 	bne.w	8007aac <USB_EPStartXfer+0x34c>
 8007978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007980:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007984:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007990:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800799a:	b29b      	uxth	r3, r3
 800799c:	4619      	mov	r1, r3
 800799e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079aa:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	440a      	add	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	011a      	lsls	r2, r3, #4
 80079c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4413      	add	r3, r2
 80079ce:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80079d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d122      	bne.n	8007a2a <USB_EPStartXfer+0x2ca>
 80079e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	801a      	strh	r2, [r3, #0]
 8007a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	e079      	b.n	8007b1e <USB_EPStartXfer+0x3be>
 8007a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a2e:	2b3e      	cmp	r3, #62	; 0x3e
 8007a30:	d81b      	bhi.n	8007a6a <USB_EPStartXfer+0x30a>
 8007a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a36:	085b      	lsrs	r3, r3, #1
 8007a38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d004      	beq.n	8007a52 <USB_EPStartXfer+0x2f2>
 8007a48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007a52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	029b      	lsls	r3, r3, #10
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	e059      	b.n	8007b1e <USB_EPStartXfer+0x3be>
 8007a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <USB_EPStartXfer+0x32a>
 8007a80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a84:	3b01      	subs	r3, #1
 8007a86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007a8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	029b      	lsls	r3, r3, #10
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	801a      	strh	r2, [r3, #0]
 8007aaa:	e038      	b.n	8007b1e <USB_EPStartXfer+0x3be>
 8007aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	785b      	ldrb	r3, [r3, #1]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d130      	bne.n	8007b1e <USB_EPStartXfer+0x3be>
 8007abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	4619      	mov	r1, r3
 8007ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007ad6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ada:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007ade:	6812      	ldr	r2, [r2, #0]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	011a      	lsls	r2, r3, #4
 8007af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4413      	add	r3, r2
 8007afe:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	895b      	ldrh	r3, [r3, #10]
 8007b2a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6959      	ldr	r1, [r3, #20]
 8007b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b44:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b48:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b4c:	6800      	ldr	r0, [r0, #0]
 8007b4e:	f001 fd7d 	bl	800964c <USB_WritePMA>
            ep->xfer_buff += len;
 8007b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695a      	ldr	r2, [r3, #20]
 8007b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b62:	441a      	add	r2, r3
 8007b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6a1a      	ldr	r2, [r3, #32]
 8007b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d90f      	bls.n	8007bac <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6a1a      	ldr	r2, [r3, #32]
 8007b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b9c:	1ad2      	subs	r2, r2, r3
 8007b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	621a      	str	r2, [r3, #32]
 8007baa:	e00e      	b.n	8007bca <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	785b      	ldrb	r3, [r3, #1]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f040 809a 	bne.w	8007d10 <USB_EPStartXfer+0x5b0>
 8007bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007be4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007be8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007bec:	6812      	ldr	r2, [r2, #0]
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	4619      	mov	r1, r3
 8007c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c06:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007c0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c0e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007c12:	6812      	ldr	r2, [r2, #0]
 8007c14:	440a      	add	r2, r1
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	011a      	lsls	r2, r3, #4
 8007c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4413      	add	r3, r2
 8007c32:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d122      	bne.n	8007c8e <USB_EPStartXfer+0x52e>
 8007c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	801a      	strh	r2, [r3, #0]
 8007c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	e083      	b.n	8007d96 <USB_EPStartXfer+0x636>
 8007c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c92:	2b3e      	cmp	r3, #62	; 0x3e
 8007c94:	d81b      	bhi.n	8007cce <USB_EPStartXfer+0x56e>
 8007c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c9a:	085b      	lsrs	r3, r3, #1
 8007c9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <USB_EPStartXfer+0x556>
 8007cac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007cb6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	029b      	lsls	r3, r3, #10
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	801a      	strh	r2, [r3, #0]
 8007ccc:	e063      	b.n	8007d96 <USB_EPStartXfer+0x636>
 8007cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd2:	095b      	lsrs	r3, r3, #5
 8007cd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cdc:	f003 031f 	and.w	r3, r3, #31
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <USB_EPStartXfer+0x58e>
 8007ce4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007cee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	029b      	lsls	r3, r3, #10
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	801a      	strh	r2, [r3, #0]
 8007d0e:	e042      	b.n	8007d96 <USB_EPStartXfer+0x636>
 8007d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d13a      	bne.n	8007d96 <USB_EPStartXfer+0x636>
 8007d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007d28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d2c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007d30:	6812      	ldr	r2, [r2, #0]
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	4619      	mov	r1, r3
 8007d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007d4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d52:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	440a      	add	r2, r1
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	011a      	lsls	r2, r3, #4
 8007d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4413      	add	r3, r2
 8007d76:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	891b      	ldrh	r3, [r3, #8]
 8007da2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6959      	ldr	r1, [r3, #20]
 8007db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007dbc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007dc0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007dc4:	6800      	ldr	r0, [r0, #0]
 8007dc6:	f001 fc41 	bl	800964c <USB_WritePMA>
 8007dca:	f000 be0e 	b.w	80089ea <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	785b      	ldrb	r3, [r3, #1]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d16d      	bne.n	8007eba <USB_EPStartXfer+0x75a>
 8007dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dfe:	4413      	add	r3, r2
 8007e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	011a      	lsls	r2, r3, #4
 8007e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e12:	4413      	add	r3, r2
 8007e14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e18:	647b      	str	r3, [r7, #68]	; 0x44
 8007e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d112      	bne.n	8007e48 <USB_EPStartXfer+0x6e8>
 8007e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e30:	801a      	strh	r2, [r3, #0]
 8007e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e44:	801a      	strh	r2, [r3, #0]
 8007e46:	e063      	b.n	8007f10 <USB_EPStartXfer+0x7b0>
 8007e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007e4e:	d817      	bhi.n	8007e80 <USB_EPStartXfer+0x720>
 8007e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e54:	085b      	lsrs	r3, r3, #1
 8007e56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d004      	beq.n	8007e70 <USB_EPStartXfer+0x710>
 8007e66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007e70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	029b      	lsls	r3, r3, #10
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e7c:	801a      	strh	r2, [r3, #0]
 8007e7e:	e047      	b.n	8007f10 <USB_EPStartXfer+0x7b0>
 8007e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e84:	095b      	lsrs	r3, r3, #5
 8007e86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e8e:	f003 031f 	and.w	r3, r3, #31
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d104      	bne.n	8007ea0 <USB_EPStartXfer+0x740>
 8007e96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007ea0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	029b      	lsls	r3, r3, #10
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eb6:	801a      	strh	r2, [r3, #0]
 8007eb8:	e02a      	b.n	8007f10 <USB_EPStartXfer+0x7b0>
 8007eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	785b      	ldrb	r3, [r3, #1]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d122      	bne.n	8007f10 <USB_EPStartXfer+0x7b0>
 8007eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ece:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eea:	4413      	add	r3, r2
 8007eec:	653b      	str	r3, [r7, #80]	; 0x50
 8007eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	011a      	lsls	r2, r3, #4
 8007efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007efe:	4413      	add	r3, r2
 8007f00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	891b      	ldrh	r3, [r3, #8]
 8007f1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6959      	ldr	r1, [r3, #20]
 8007f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f36:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f3a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f3e:	6800      	ldr	r0, [r0, #0]
 8007f40:	f001 fb84 	bl	800964c <USB_WritePMA>
            ep->xfer_buff += len;
 8007f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	695a      	ldr	r2, [r3, #20]
 8007f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f54:	441a      	add	r2, r3
 8007f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6a1a      	ldr	r2, [r3, #32]
 8007f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d90f      	bls.n	8007f9e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6a1a      	ldr	r2, [r3, #32]
 8007f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	621a      	str	r2, [r3, #32]
 8007f9c:	e00e      	b.n	8007fbc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8007fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	785b      	ldrb	r3, [r3, #1]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d16d      	bne.n	80080b4 <USB_EPStartXfer+0x954>
 8007fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff8:	4413      	add	r3, r2
 8007ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	011a      	lsls	r2, r3, #4
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	4413      	add	r3, r2
 800800e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008012:	637b      	str	r3, [r7, #52]	; 0x34
 8008014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008018:	2b00      	cmp	r3, #0
 800801a:	d112      	bne.n	8008042 <USB_EPStartXfer+0x8e2>
 800801c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008026:	b29a      	uxth	r2, r3
 8008028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802a:	801a      	strh	r2, [r3, #0]
 800802c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803a:	b29a      	uxth	r2, r3
 800803c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803e:	801a      	strh	r2, [r3, #0]
 8008040:	e05d      	b.n	80080fe <USB_EPStartXfer+0x99e>
 8008042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008046:	2b3e      	cmp	r3, #62	; 0x3e
 8008048:	d817      	bhi.n	800807a <USB_EPStartXfer+0x91a>
 800804a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800804e:	085b      	lsrs	r3, r3, #1
 8008050:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <USB_EPStartXfer+0x90a>
 8008060:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008064:	3301      	adds	r3, #1
 8008066:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800806a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800806e:	b29b      	uxth	r3, r3
 8008070:	029b      	lsls	r3, r3, #10
 8008072:	b29a      	uxth	r2, r3
 8008074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008076:	801a      	strh	r2, [r3, #0]
 8008078:	e041      	b.n	80080fe <USB_EPStartXfer+0x99e>
 800807a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800807e:	095b      	lsrs	r3, r3, #5
 8008080:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008088:	f003 031f 	and.w	r3, r3, #31
 800808c:	2b00      	cmp	r3, #0
 800808e:	d104      	bne.n	800809a <USB_EPStartXfer+0x93a>
 8008090:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008094:	3b01      	subs	r3, #1
 8008096:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800809a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800809e:	b29b      	uxth	r3, r3
 80080a0:	029b      	lsls	r3, r3, #10
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b0:	801a      	strh	r2, [r3, #0]
 80080b2:	e024      	b.n	80080fe <USB_EPStartXfer+0x99e>
 80080b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	785b      	ldrb	r3, [r3, #1]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d11c      	bne.n	80080fe <USB_EPStartXfer+0x99e>
 80080c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d8:	4413      	add	r3, r2
 80080da:	643b      	str	r3, [r7, #64]	; 0x40
 80080dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	011a      	lsls	r2, r3, #4
 80080ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ec:	4413      	add	r3, r2
 80080ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	895b      	ldrh	r3, [r3, #10]
 800810a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800810e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6959      	ldr	r1, [r3, #20]
 800811a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800811e:	b29b      	uxth	r3, r3
 8008120:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008124:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008128:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800812c:	6800      	ldr	r0, [r0, #0]
 800812e:	f001 fa8d 	bl	800964c <USB_WritePMA>
 8008132:	f000 bc5a 	b.w	80089ea <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800813a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008174:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	441a      	add	r2, r3
 800818a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800818e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800819a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819e:	b29b      	uxth	r3, r3
 80081a0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80081a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081bc:	b29b      	uxth	r3, r3
 80081be:	461a      	mov	r2, r3
 80081c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081c2:	4413      	add	r3, r2
 80081c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	011a      	lsls	r2, r3, #4
 80081d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081d6:	4413      	add	r3, r2
 80081d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80081de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80081e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	891b      	ldrh	r3, [r3, #8]
 80081f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6959      	ldr	r1, [r3, #20]
 8008204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008208:	b29b      	uxth	r3, r3
 800820a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800820e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008212:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008216:	6800      	ldr	r0, [r0, #0]
 8008218:	f001 fa18 	bl	800964c <USB_WritePMA>
 800821c:	e3e5      	b.n	80089ea <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800821e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	b29b      	uxth	r3, r3
 800823c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008244:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	441a      	add	r2, r3
 8008262:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800826a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800826e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008276:	b29b      	uxth	r3, r3
 8008278:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800827a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800827e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6a1a      	ldr	r2, [r3, #32]
 8008286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828a:	1ad2      	subs	r2, r2, r3
 800828c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 81bc 	beq.w	8008638 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	785b      	ldrb	r3, [r3, #1]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d16d      	bne.n	80083ba <USB_EPStartXfer+0xc5a>
 80082de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80082ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	461a      	mov	r2, r3
 80082fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082fe:	4413      	add	r3, r2
 8008300:	67bb      	str	r3, [r7, #120]	; 0x78
 8008302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	011a      	lsls	r2, r3, #4
 8008310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008312:	4413      	add	r3, r2
 8008314:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008318:	677b      	str	r3, [r7, #116]	; 0x74
 800831a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d112      	bne.n	8008348 <USB_EPStartXfer+0xbe8>
 8008322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	b29b      	uxth	r3, r3
 8008328:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800832c:	b29a      	uxth	r2, r3
 800832e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008330:	801a      	strh	r2, [r3, #0]
 8008332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800833c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008340:	b29a      	uxth	r2, r3
 8008342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008344:	801a      	strh	r2, [r3, #0]
 8008346:	e060      	b.n	800840a <USB_EPStartXfer+0xcaa>
 8008348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800834c:	2b3e      	cmp	r3, #62	; 0x3e
 800834e:	d817      	bhi.n	8008380 <USB_EPStartXfer+0xc20>
 8008350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008354:	085b      	lsrs	r3, r3, #1
 8008356:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800835a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d004      	beq.n	8008370 <USB_EPStartXfer+0xc10>
 8008366:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800836a:	3301      	adds	r3, #1
 800836c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008370:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008374:	b29b      	uxth	r3, r3
 8008376:	029b      	lsls	r3, r3, #10
 8008378:	b29a      	uxth	r2, r3
 800837a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800837c:	801a      	strh	r2, [r3, #0]
 800837e:	e044      	b.n	800840a <USB_EPStartXfer+0xcaa>
 8008380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800838a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800838e:	f003 031f 	and.w	r3, r3, #31
 8008392:	2b00      	cmp	r3, #0
 8008394:	d104      	bne.n	80083a0 <USB_EPStartXfer+0xc40>
 8008396:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800839a:	3b01      	subs	r3, #1
 800839c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80083a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	029b      	lsls	r3, r3, #10
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083b6:	801a      	strh	r2, [r3, #0]
 80083b8:	e027      	b.n	800840a <USB_EPStartXfer+0xcaa>
 80083ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	785b      	ldrb	r3, [r3, #1]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d11f      	bne.n	800840a <USB_EPStartXfer+0xcaa>
 80083ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083d8:	b29b      	uxth	r3, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083e0:	4413      	add	r3, r2
 80083e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	011a      	lsls	r2, r3, #4
 80083f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083f8:	4413      	add	r3, r2
 80083fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008404:	b29a      	uxth	r2, r3
 8008406:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008408:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800840a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800840e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	895b      	ldrh	r3, [r3, #10]
 8008416:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800841a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800841e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6959      	ldr	r1, [r3, #20]
 8008426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800842a:	b29b      	uxth	r3, r3
 800842c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008430:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008434:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008438:	6800      	ldr	r0, [r0, #0]
 800843a:	f001 f907 	bl	800964c <USB_WritePMA>
          ep->xfer_buff += len;
 800843e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	695a      	ldr	r2, [r3, #20]
 800844a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800844e:	441a      	add	r2, r3
 8008450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800845c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	429a      	cmp	r2, r3
 8008476:	d90f      	bls.n	8008498 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8008478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6a1a      	ldr	r2, [r3, #32]
 8008484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008488:	1ad2      	subs	r2, r2, r3
 800848a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800848e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	621a      	str	r2, [r3, #32]
 8008496:	e00e      	b.n	80084b6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8008498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80084a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2200      	movs	r2, #0
 80084b4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80084b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 8295 	beq.w	80089ea <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	785b      	ldrb	r3, [r3, #1]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d16d      	bne.n	80085ac <USB_EPStartXfer+0xe4c>
 80084d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	66bb      	str	r3, [r7, #104]	; 0x68
 80084dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	461a      	mov	r2, r3
 80084ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084f0:	4413      	add	r3, r2
 80084f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80084f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	011a      	lsls	r2, r3, #4
 8008502:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008504:	4413      	add	r3, r2
 8008506:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800850a:	667b      	str	r3, [r7, #100]	; 0x64
 800850c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d112      	bne.n	800853a <USB_EPStartXfer+0xdda>
 8008514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	b29b      	uxth	r3, r3
 800851a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800851e:	b29a      	uxth	r2, r3
 8008520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800852e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008532:	b29a      	uxth	r2, r3
 8008534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008536:	801a      	strh	r2, [r3, #0]
 8008538:	e063      	b.n	8008602 <USB_EPStartXfer+0xea2>
 800853a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853e:	2b3e      	cmp	r3, #62	; 0x3e
 8008540:	d817      	bhi.n	8008572 <USB_EPStartXfer+0xe12>
 8008542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008546:	085b      	lsrs	r3, r3, #1
 8008548:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800854c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <USB_EPStartXfer+0xe02>
 8008558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800855c:	3301      	adds	r3, #1
 800855e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008566:	b29b      	uxth	r3, r3
 8008568:	029b      	lsls	r3, r3, #10
 800856a:	b29a      	uxth	r2, r3
 800856c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800856e:	801a      	strh	r2, [r3, #0]
 8008570:	e047      	b.n	8008602 <USB_EPStartXfer+0xea2>
 8008572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008576:	095b      	lsrs	r3, r3, #5
 8008578:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800857c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008580:	f003 031f 	and.w	r3, r3, #31
 8008584:	2b00      	cmp	r3, #0
 8008586:	d104      	bne.n	8008592 <USB_EPStartXfer+0xe32>
 8008588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800858c:	3b01      	subs	r3, #1
 800858e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008596:	b29b      	uxth	r3, r3
 8008598:	029b      	lsls	r3, r3, #10
 800859a:	b29b      	uxth	r3, r3
 800859c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	e02a      	b.n	8008602 <USB_EPStartXfer+0xea2>
 80085ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d122      	bne.n	8008602 <USB_EPStartXfer+0xea2>
 80085bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	673b      	str	r3, [r7, #112]	; 0x70
 80085c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085dc:	4413      	add	r3, r2
 80085de:	673b      	str	r3, [r7, #112]	; 0x70
 80085e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	011a      	lsls	r2, r3, #4
 80085ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085f0:	4413      	add	r3, r2
 80085f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008600:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	891b      	ldrh	r3, [r3, #8]
 800860e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6959      	ldr	r1, [r3, #20]
 800861e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008622:	b29b      	uxth	r3, r3
 8008624:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008628:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800862c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008630:	6800      	ldr	r0, [r0, #0]
 8008632:	f001 f80b 	bl	800964c <USB_WritePMA>
 8008636:	e1d8      	b.n	80089ea <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	785b      	ldrb	r3, [r3, #1]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d178      	bne.n	800873a <USB_EPStartXfer+0xfda>
 8008648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800865a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008664:	b29b      	uxth	r3, r3
 8008666:	461a      	mov	r2, r3
 8008668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800866c:	4413      	add	r3, r2
 800866e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	011a      	lsls	r2, r3, #4
 8008680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008684:	4413      	add	r3, r2
 8008686:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800868a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800868e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008692:	2b00      	cmp	r3, #0
 8008694:	d116      	bne.n	80086c4 <USB_EPStartXfer+0xf64>
 8008696:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	b29b      	uxth	r3, r3
 800869e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086a8:	801a      	strh	r2, [r3, #0]
 80086aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086c0:	801a      	strh	r2, [r3, #0]
 80086c2:	e06b      	b.n	800879c <USB_EPStartXfer+0x103c>
 80086c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086c8:	2b3e      	cmp	r3, #62	; 0x3e
 80086ca:	d818      	bhi.n	80086fe <USB_EPStartXfer+0xf9e>
 80086cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80086d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d004      	beq.n	80086ec <USB_EPStartXfer+0xf8c>
 80086e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80086e6:	3301      	adds	r3, #1
 80086e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80086ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	029b      	lsls	r3, r3, #10
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086fa:	801a      	strh	r2, [r3, #0]
 80086fc:	e04e      	b.n	800879c <USB_EPStartXfer+0x103c>
 80086fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008702:	095b      	lsrs	r3, r3, #5
 8008704:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800870c:	f003 031f 	and.w	r3, r3, #31
 8008710:	2b00      	cmp	r3, #0
 8008712:	d104      	bne.n	800871e <USB_EPStartXfer+0xfbe>
 8008714:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008718:	3b01      	subs	r3, #1
 800871a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800871e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008722:	b29b      	uxth	r3, r3
 8008724:	029b      	lsls	r3, r3, #10
 8008726:	b29b      	uxth	r3, r3
 8008728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800872c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008730:	b29a      	uxth	r2, r3
 8008732:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008736:	801a      	strh	r2, [r3, #0]
 8008738:	e030      	b.n	800879c <USB_EPStartXfer+0x103c>
 800873a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d128      	bne.n	800879c <USB_EPStartXfer+0x103c>
 800874a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008766:	b29b      	uxth	r3, r3
 8008768:	461a      	mov	r2, r3
 800876a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800876e:	4413      	add	r3, r2
 8008770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	011a      	lsls	r2, r3, #4
 8008782:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008786:	4413      	add	r3, r2
 8008788:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800878c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008794:	b29a      	uxth	r2, r3
 8008796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800879a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800879c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	891b      	ldrh	r3, [r3, #8]
 80087a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6959      	ldr	r1, [r3, #20]
 80087b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087bc:	b29b      	uxth	r3, r3
 80087be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80087c2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80087c6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80087ca:	6800      	ldr	r0, [r0, #0]
 80087cc:	f000 ff3e 	bl	800964c <USB_WritePMA>
          ep->xfer_buff += len;
 80087d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	695a      	ldr	r2, [r3, #20]
 80087dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087e0:	441a      	add	r2, r3
 80087e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80087ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6a1a      	ldr	r2, [r3, #32]
 80087fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	429a      	cmp	r2, r3
 8008808:	d90f      	bls.n	800882a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800880a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800880e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6a1a      	ldr	r2, [r3, #32]
 8008816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	621a      	str	r2, [r3, #32]
 8008828:	e00e      	b.n	8008848 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800882a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800882e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800883a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800883e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2200      	movs	r2, #0
 8008846:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 80cc 	beq.w	80089ea <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008856:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	785b      	ldrb	r3, [r3, #1]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d178      	bne.n	8008962 <USB_EPStartXfer+0x1202>
 8008870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800887e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008882:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800888c:	b29b      	uxth	r3, r3
 800888e:	461a      	mov	r2, r3
 8008890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008894:	4413      	add	r3, r2
 8008896:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800889a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	011a      	lsls	r2, r3, #4
 80088a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088ac:	4413      	add	r3, r2
 80088ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d116      	bne.n	80088ec <USB_EPStartXfer+0x118c>
 80088be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088d0:	801a      	strh	r2, [r3, #0]
 80088d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	b29b      	uxth	r3, r3
 80088da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088e8:	801a      	strh	r2, [r3, #0]
 80088ea:	e064      	b.n	80089b6 <USB_EPStartXfer+0x1256>
 80088ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f0:	2b3e      	cmp	r3, #62	; 0x3e
 80088f2:	d818      	bhi.n	8008926 <USB_EPStartXfer+0x11c6>
 80088f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f8:	085b      	lsrs	r3, r3, #1
 80088fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80088fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d004      	beq.n	8008914 <USB_EPStartXfer+0x11b4>
 800890a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800890e:	3301      	adds	r3, #1
 8008910:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008918:	b29b      	uxth	r3, r3
 800891a:	029b      	lsls	r3, r3, #10
 800891c:	b29a      	uxth	r2, r3
 800891e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008922:	801a      	strh	r2, [r3, #0]
 8008924:	e047      	b.n	80089b6 <USB_EPStartXfer+0x1256>
 8008926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800892a:	095b      	lsrs	r3, r3, #5
 800892c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008934:	f003 031f 	and.w	r3, r3, #31
 8008938:	2b00      	cmp	r3, #0
 800893a:	d104      	bne.n	8008946 <USB_EPStartXfer+0x11e6>
 800893c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008940:	3b01      	subs	r3, #1
 8008942:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800894a:	b29b      	uxth	r3, r3
 800894c:	029b      	lsls	r3, r3, #10
 800894e:	b29b      	uxth	r3, r3
 8008950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008958:	b29a      	uxth	r2, r3
 800895a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800895e:	801a      	strh	r2, [r3, #0]
 8008960:	e029      	b.n	80089b6 <USB_EPStartXfer+0x1256>
 8008962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	785b      	ldrb	r3, [r3, #1]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d121      	bne.n	80089b6 <USB_EPStartXfer+0x1256>
 8008972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008980:	b29b      	uxth	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008988:	4413      	add	r3, r2
 800898a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800898e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	011a      	lsls	r2, r3, #4
 800899c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089a0:	4413      	add	r3, r2
 80089a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80089aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	895b      	ldrh	r3, [r3, #10]
 80089c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6959      	ldr	r1, [r3, #20]
 80089d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80089e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80089e4:	6800      	ldr	r0, [r0, #0]
 80089e6:	f000 fe31 	bl	800964c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80089ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a0c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a18:	8013      	strh	r3, [r2, #0]
 8008a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008a22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a26:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008a2a:	8812      	ldrh	r2, [r2, #0]
 8008a2c:	f082 0210 	eor.w	r2, r2, #16
 8008a30:	801a      	strh	r2, [r3, #0]
 8008a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a36:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008a3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a3e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008a42:	8812      	ldrh	r2, [r2, #0]
 8008a44:	f082 0220 	eor.w	r2, r2, #32
 8008a48:	801a      	strh	r2, [r3, #0]
 8008a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	441a      	add	r2, r3
 8008a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a68:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	8013      	strh	r3, [r2, #0]
 8008a82:	f000 bc9f 	b.w	80093c4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	7b1b      	ldrb	r3, [r3, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f040 80ae 	bne.w	8008bf4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	699a      	ldr	r2, [r3, #24]
 8008aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d917      	bls.n	8008ae4 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	699a      	ldr	r2, [r3, #24]
 8008ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad4:	1ad2      	subs	r2, r2, r3
 8008ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	619a      	str	r2, [r3, #24]
 8008ae2:	e00e      	b.n	8008b02 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2200      	movs	r2, #0
 8008b00:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	461a      	mov	r2, r3
 8008b22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b26:	4413      	add	r3, r2
 8008b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	011a      	lsls	r2, r3, #4
 8008b3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b3e:	4413      	add	r3, r2
 8008b40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d116      	bne.n	8008b7e <USB_EPStartXfer+0x141e>
 8008b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b62:	801a      	strh	r2, [r3, #0]
 8008b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b7a:	801a      	strh	r2, [r3, #0]
 8008b7c:	e3e8      	b.n	8009350 <USB_EPStartXfer+0x1bf0>
 8008b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b82:	2b3e      	cmp	r3, #62	; 0x3e
 8008b84:	d818      	bhi.n	8008bb8 <USB_EPStartXfer+0x1458>
 8008b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b8a:	085b      	lsrs	r3, r3, #1
 8008b8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d004      	beq.n	8008ba6 <USB_EPStartXfer+0x1446>
 8008b9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008ba6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	029b      	lsls	r3, r3, #10
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bb4:	801a      	strh	r2, [r3, #0]
 8008bb6:	e3cb      	b.n	8009350 <USB_EPStartXfer+0x1bf0>
 8008bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bbc:	095b      	lsrs	r3, r3, #5
 8008bbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc6:	f003 031f 	and.w	r3, r3, #31
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d104      	bne.n	8008bd8 <USB_EPStartXfer+0x1478>
 8008bce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008bd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	029b      	lsls	r3, r3, #10
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bf0:	801a      	strh	r2, [r3, #0]
 8008bf2:	e3ad      	b.n	8009350 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	78db      	ldrb	r3, [r3, #3]
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	f040 8200 	bne.w	8009006 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f040 8091 	bne.w	8008d3a <USB_EPStartXfer+0x15da>
 8008c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	461a      	mov	r2, r3
 8008c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	011a      	lsls	r2, r3, #4
 8008c50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c54:	4413      	add	r3, r2
 8008c56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d116      	bne.n	8008c9c <USB_EPStartXfer+0x153c>
 8008c6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c80:	801a      	strh	r2, [r3, #0]
 8008c82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c98:	801a      	strh	r2, [r3, #0]
 8008c9a:	e083      	b.n	8008da4 <USB_EPStartXfer+0x1644>
 8008c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	2b3e      	cmp	r3, #62	; 0x3e
 8008caa:	d820      	bhi.n	8008cee <USB_EPStartXfer+0x158e>
 8008cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	085b      	lsrs	r3, r3, #1
 8008cba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d004      	beq.n	8008cdc <USB_EPStartXfer+0x157c>
 8008cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	029b      	lsls	r3, r3, #10
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cea:	801a      	strh	r2, [r3, #0]
 8008cec:	e05a      	b.n	8008da4 <USB_EPStartXfer+0x1644>
 8008cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	095b      	lsrs	r3, r3, #5
 8008cfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	f003 031f 	and.w	r3, r3, #31
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d104      	bne.n	8008d1e <USB_EPStartXfer+0x15be>
 8008d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	029b      	lsls	r3, r3, #10
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d36:	801a      	strh	r2, [r3, #0]
 8008d38:	e034      	b.n	8008da4 <USB_EPStartXfer+0x1644>
 8008d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	785b      	ldrb	r3, [r3, #1]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d12c      	bne.n	8008da4 <USB_EPStartXfer+0x1644>
 8008d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	461a      	mov	r2, r3
 8008d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d6e:	4413      	add	r3, r2
 8008d70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	011a      	lsls	r2, r3, #4
 8008d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d86:	4413      	add	r3, r2
 8008d88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008da2:	801a      	strh	r2, [r3, #0]
 8008da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	785b      	ldrb	r3, [r3, #1]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f040 8091 	bne.w	8008ee6 <USB_EPStartXfer+0x1786>
 8008dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	461a      	mov	r2, r3
 8008de4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008de8:	4413      	add	r3, r2
 8008dea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	011a      	lsls	r2, r3, #4
 8008dfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e00:	4413      	add	r3, r2
 8008e02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d116      	bne.n	8008e48 <USB_EPStartXfer+0x16e8>
 8008e1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e2c:	801a      	strh	r2, [r3, #0]
 8008e2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e44:	801a      	strh	r2, [r3, #0]
 8008e46:	e07c      	b.n	8008f42 <USB_EPStartXfer+0x17e2>
 8008e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	2b3e      	cmp	r3, #62	; 0x3e
 8008e56:	d820      	bhi.n	8008e9a <USB_EPStartXfer+0x173a>
 8008e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	085b      	lsrs	r3, r3, #1
 8008e66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d004      	beq.n	8008e88 <USB_EPStartXfer+0x1728>
 8008e7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e82:	3301      	adds	r3, #1
 8008e84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	029b      	lsls	r3, r3, #10
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e96:	801a      	strh	r2, [r3, #0]
 8008e98:	e053      	b.n	8008f42 <USB_EPStartXfer+0x17e2>
 8008e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	095b      	lsrs	r3, r3, #5
 8008ea8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	f003 031f 	and.w	r3, r3, #31
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d104      	bne.n	8008eca <USB_EPStartXfer+0x176a>
 8008ec0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008eca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	029b      	lsls	r3, r3, #10
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ee2:	801a      	strh	r2, [r3, #0]
 8008ee4:	e02d      	b.n	8008f42 <USB_EPStartXfer+0x17e2>
 8008ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	785b      	ldrb	r3, [r3, #1]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d125      	bne.n	8008f42 <USB_EPStartXfer+0x17e2>
 8008ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008efa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	461a      	mov	r2, r3
 8008f08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	011a      	lsls	r2, r3, #4
 8008f20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008f24:	4413      	add	r3, r2
 8008f26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f40:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 81fe 	beq.w	8009350 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4413      	add	r3, r2
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008f74:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d005      	beq.n	8008f8c <USB_EPStartXfer+0x182c>
 8008f80:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10d      	bne.n	8008fa8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008f8c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f040 81db 	bne.w	8009350 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008f9a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f040 81d4 	bne.w	8009350 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fce:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	441a      	add	r2, r3
 8008fec:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ffc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009000:	b29b      	uxth	r3, r3
 8009002:	8013      	strh	r3, [r2, #0]
 8009004:	e1a4      	b.n	8009350 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800900a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	78db      	ldrb	r3, [r3, #3]
 8009012:	2b01      	cmp	r3, #1
 8009014:	f040 819a 	bne.w	800934c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800901c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	699a      	ldr	r2, [r3, #24]
 8009024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	429a      	cmp	r2, r3
 8009032:	d917      	bls.n	8009064 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8009034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	699a      	ldr	r2, [r3, #24]
 8009050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009054:	1ad2      	subs	r2, r2, r3
 8009056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800905a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	619a      	str	r2, [r3, #24]
 8009062:	e00e      	b.n	8009082 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8009064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2200      	movs	r2, #0
 8009080:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	785b      	ldrb	r3, [r3, #1]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d178      	bne.n	8009184 <USB_EPStartXfer+0x1a24>
 8009092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80090a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	461a      	mov	r2, r3
 80090b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80090b6:	4413      	add	r3, r2
 80090b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80090bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	011a      	lsls	r2, r3, #4
 80090ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80090ce:	4413      	add	r3, r2
 80090d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d116      	bne.n	800910e <USB_EPStartXfer+0x19ae>
 80090e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090f2:	801a      	strh	r2, [r3, #0]
 80090f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009104:	b29a      	uxth	r2, r3
 8009106:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800910a:	801a      	strh	r2, [r3, #0]
 800910c:	e06b      	b.n	80091e6 <USB_EPStartXfer+0x1a86>
 800910e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009112:	2b3e      	cmp	r3, #62	; 0x3e
 8009114:	d818      	bhi.n	8009148 <USB_EPStartXfer+0x19e8>
 8009116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800911a:	085b      	lsrs	r3, r3, #1
 800911c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <USB_EPStartXfer+0x19d6>
 800912c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009130:	3301      	adds	r3, #1
 8009132:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800913a:	b29b      	uxth	r3, r3
 800913c:	029b      	lsls	r3, r3, #10
 800913e:	b29a      	uxth	r2, r3
 8009140:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	e04e      	b.n	80091e6 <USB_EPStartXfer+0x1a86>
 8009148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800914c:	095b      	lsrs	r3, r3, #5
 800914e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009156:	f003 031f 	and.w	r3, r3, #31
 800915a:	2b00      	cmp	r3, #0
 800915c:	d104      	bne.n	8009168 <USB_EPStartXfer+0x1a08>
 800915e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009162:	3b01      	subs	r3, #1
 8009164:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800916c:	b29b      	uxth	r3, r3
 800916e:	029b      	lsls	r3, r3, #10
 8009170:	b29b      	uxth	r3, r3
 8009172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800917a:	b29a      	uxth	r2, r3
 800917c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009180:	801a      	strh	r2, [r3, #0]
 8009182:	e030      	b.n	80091e6 <USB_EPStartXfer+0x1a86>
 8009184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	785b      	ldrb	r3, [r3, #1]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d128      	bne.n	80091e6 <USB_EPStartXfer+0x1a86>
 8009194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009198:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80091a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	461a      	mov	r2, r3
 80091b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b8:	4413      	add	r3, r2
 80091ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80091be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	011a      	lsls	r2, r3, #4
 80091cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d0:	4413      	add	r3, r2
 80091d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80091da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091de:	b29a      	uxth	r2, r3
 80091e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80091e4:	801a      	strh	r2, [r3, #0]
 80091e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	785b      	ldrb	r3, [r3, #1]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d178      	bne.n	80092f6 <USB_EPStartXfer+0x1b96>
 8009204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009220:	b29b      	uxth	r3, r3
 8009222:	461a      	mov	r2, r3
 8009224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009228:	4413      	add	r3, r2
 800922a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800922e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	011a      	lsls	r2, r3, #4
 800923c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009240:	4413      	add	r3, r2
 8009242:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800924a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d116      	bne.n	8009280 <USB_EPStartXfer+0x1b20>
 8009252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	b29b      	uxth	r3, r3
 800925a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800925e:	b29a      	uxth	r2, r3
 8009260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009264:	801a      	strh	r2, [r3, #0]
 8009266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	b29b      	uxth	r3, r3
 800926e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009276:	b29a      	uxth	r2, r3
 8009278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800927c:	801a      	strh	r2, [r3, #0]
 800927e:	e067      	b.n	8009350 <USB_EPStartXfer+0x1bf0>
 8009280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009284:	2b3e      	cmp	r3, #62	; 0x3e
 8009286:	d818      	bhi.n	80092ba <USB_EPStartXfer+0x1b5a>
 8009288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800928c:	085b      	lsrs	r3, r3, #1
 800928e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b00      	cmp	r3, #0
 800929c:	d004      	beq.n	80092a8 <USB_EPStartXfer+0x1b48>
 800929e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092a2:	3301      	adds	r3, #1
 80092a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80092a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	029b      	lsls	r3, r3, #10
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092b6:	801a      	strh	r2, [r3, #0]
 80092b8:	e04a      	b.n	8009350 <USB_EPStartXfer+0x1bf0>
 80092ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092be:	095b      	lsrs	r3, r3, #5
 80092c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80092c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c8:	f003 031f 	and.w	r3, r3, #31
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d104      	bne.n	80092da <USB_EPStartXfer+0x1b7a>
 80092d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092d4:	3b01      	subs	r3, #1
 80092d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80092da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092de:	b29b      	uxth	r3, r3
 80092e0:	029b      	lsls	r3, r3, #10
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092f2:	801a      	strh	r2, [r3, #0]
 80092f4:	e02c      	b.n	8009350 <USB_EPStartXfer+0x1bf0>
 80092f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	785b      	ldrb	r3, [r3, #1]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d124      	bne.n	8009350 <USB_EPStartXfer+0x1bf0>
 8009306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800930a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009314:	b29b      	uxth	r3, r3
 8009316:	461a      	mov	r2, r3
 8009318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800931c:	4413      	add	r3, r2
 800931e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	011a      	lsls	r2, r3, #4
 8009330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009334:	4413      	add	r3, r2
 8009336:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800933a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800933e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009342:	b29a      	uxth	r2, r3
 8009344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009348:	801a      	strh	r2, [r3, #0]
 800934a:	e001      	b.n	8009350 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e03a      	b.n	80093c6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009354:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800935e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	881b      	ldrh	r3, [r3, #0]
 800936c:	b29b      	uxth	r3, r3
 800936e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009376:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800937a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800937e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009382:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009386:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800938a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800938e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009396:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	441a      	add	r2, r3
 80093ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80093b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	785b      	ldrb	r3, [r3, #1]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d020      	beq.n	8009424 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	881b      	ldrh	r3, [r3, #0]
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093f8:	81bb      	strh	r3, [r7, #12]
 80093fa:	89bb      	ldrh	r3, [r7, #12]
 80093fc:	f083 0310 	eor.w	r3, r3, #16
 8009400:	81bb      	strh	r3, [r7, #12]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	441a      	add	r2, r3
 800940c:	89bb      	ldrh	r3, [r7, #12]
 800940e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800941a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800941e:	b29b      	uxth	r3, r3
 8009420:	8013      	strh	r3, [r2, #0]
 8009422:	e01f      	b.n	8009464 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4413      	add	r3, r2
 800942e:	881b      	ldrh	r3, [r3, #0]
 8009430:	b29b      	uxth	r3, r3
 8009432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800943a:	81fb      	strh	r3, [r7, #14]
 800943c:	89fb      	ldrh	r3, [r7, #14]
 800943e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009442:	81fb      	strh	r3, [r7, #14]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	441a      	add	r2, r3
 800944e:	89fb      	ldrh	r3, [r7, #14]
 8009450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800945c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009460:	b29b      	uxth	r3, r3
 8009462:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	bc80      	pop	{r7}
 800946e:	4770      	bx	lr

08009470 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	7b1b      	ldrb	r3, [r3, #12]
 800947e:	2b00      	cmp	r3, #0
 8009480:	f040 809d 	bne.w	80095be <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	785b      	ldrb	r3, [r3, #1]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d04c      	beq.n	8009526 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	823b      	strh	r3, [r7, #16]
 800949a:	8a3b      	ldrh	r3, [r7, #16]
 800949c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d01b      	beq.n	80094dc <USB_EPClearStall+0x6c>
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	4413      	add	r3, r2
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ba:	81fb      	strh	r3, [r7, #14]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	441a      	add	r2, r3
 80094c6:	89fb      	ldrh	r3, [r7, #14]
 80094c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094d8:	b29b      	uxth	r3, r3
 80094da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	78db      	ldrb	r3, [r3, #3]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d06c      	beq.n	80095be <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094fa:	81bb      	strh	r3, [r7, #12]
 80094fc:	89bb      	ldrh	r3, [r7, #12]
 80094fe:	f083 0320 	eor.w	r3, r3, #32
 8009502:	81bb      	strh	r3, [r7, #12]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	441a      	add	r2, r3
 800950e:	89bb      	ldrh	r3, [r7, #12]
 8009510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800951c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009520:	b29b      	uxth	r3, r3
 8009522:	8013      	strh	r3, [r2, #0]
 8009524:	e04b      	b.n	80095be <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	82fb      	strh	r3, [r7, #22]
 8009534:	8afb      	ldrh	r3, [r7, #22]
 8009536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d01b      	beq.n	8009576 <USB_EPClearStall+0x106>
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29b      	uxth	r3, r3
 800954c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009554:	82bb      	strh	r3, [r7, #20]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	441a      	add	r2, r3
 8009560:	8abb      	ldrh	r3, [r7, #20]
 8009562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800956a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800956e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009572:	b29b      	uxth	r3, r3
 8009574:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	b29b      	uxth	r3, r3
 8009584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800958c:	827b      	strh	r3, [r7, #18]
 800958e:	8a7b      	ldrh	r3, [r7, #18]
 8009590:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009594:	827b      	strh	r3, [r7, #18]
 8009596:	8a7b      	ldrh	r3, [r7, #18]
 8009598:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800959c:	827b      	strh	r3, [r7, #18]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	441a      	add	r2, r3
 80095a8:	8a7b      	ldrh	r3, [r7, #18]
 80095aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	371c      	adds	r7, #28
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bc80      	pop	{r7}
 80095c8:	4770      	bx	lr

080095ca <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b083      	sub	sp, #12
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	460b      	mov	r3, r1
 80095d4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80095d6:	78fb      	ldrb	r3, [r7, #3]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d103      	bne.n	80095e4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2280      	movs	r2, #128	; 0x80
 80095e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bc80      	pop	{r7}
 80095ee:	4770      	bx	lr

080095f0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	bc80      	pop	{r7}
 8009602:	4770      	bx	lr

08009604 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	bc80      	pop	{r7}
 8009616:	4770      	bx	lr

08009618 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009626:	b29b      	uxth	r3, r3
 8009628:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800962a:	68fb      	ldr	r3, [r7, #12]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	bc80      	pop	{r7}
 8009634:	4770      	bx	lr

08009636 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	bc80      	pop	{r7}
 800964a:	4770      	bx	lr

0800964c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800964c:	b480      	push	{r7}
 800964e:	b08d      	sub	sp, #52	; 0x34
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	4611      	mov	r1, r2
 8009658:	461a      	mov	r2, r3
 800965a:	460b      	mov	r3, r1
 800965c:	80fb      	strh	r3, [r7, #6]
 800965e:	4613      	mov	r3, r2
 8009660:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009662:	88bb      	ldrh	r3, [r7, #4]
 8009664:	3301      	adds	r3, #1
 8009666:	085b      	lsrs	r3, r3, #1
 8009668:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009672:	88fb      	ldrh	r3, [r7, #6]
 8009674:	005a      	lsls	r2, r3, #1
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800967e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009684:	e01e      	b.n	80096c4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	3301      	adds	r3, #1
 8009690:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	b29b      	uxth	r3, r3
 8009698:	021b      	lsls	r3, r3, #8
 800969a:	b29b      	uxth	r3, r3
 800969c:	461a      	mov	r2, r3
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80096ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ae:	3302      	adds	r3, #2
 80096b0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	3302      	adds	r3, #2
 80096b6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	3301      	adds	r3, #1
 80096bc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80096be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c0:	3b01      	subs	r3, #1
 80096c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1dd      	bne.n	8009686 <USB_WritePMA+0x3a>
  }
}
 80096ca:	bf00      	nop
 80096cc:	bf00      	nop
 80096ce:	3734      	adds	r7, #52	; 0x34
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bc80      	pop	{r7}
 80096d4:	4770      	bx	lr

080096d6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b08b      	sub	sp, #44	; 0x2c
 80096da:	af00      	add	r7, sp, #0
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	4611      	mov	r1, r2
 80096e2:	461a      	mov	r2, r3
 80096e4:	460b      	mov	r3, r1
 80096e6:	80fb      	strh	r3, [r7, #6]
 80096e8:	4613      	mov	r3, r2
 80096ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80096ec:	88bb      	ldrh	r3, [r7, #4]
 80096ee:	085b      	lsrs	r3, r3, #1
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80096fc:	88fb      	ldrh	r3, [r7, #6]
 80096fe:	005a      	lsls	r2, r3, #1
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009708:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
 800970e:	e01b      	b.n	8009748 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	b29b      	uxth	r3, r3
 8009716:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	3302      	adds	r3, #2
 800971c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	b2da      	uxtb	r2, r3
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	3301      	adds	r3, #1
 800972a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	0a1b      	lsrs	r3, r3, #8
 8009730:	b2da      	uxtb	r2, r3
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	3301      	adds	r3, #1
 800973a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	3302      	adds	r3, #2
 8009740:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	3b01      	subs	r3, #1
 8009746:	627b      	str	r3, [r7, #36]	; 0x24
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e0      	bne.n	8009710 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800974e:	88bb      	ldrh	r3, [r7, #4]
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	b29b      	uxth	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d007      	beq.n	800976a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	b29b      	uxth	r3, r3
 8009760:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	b2da      	uxtb	r2, r3
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	701a      	strb	r2, [r3, #0]
  }
}
 800976a:	bf00      	nop
 800976c:	372c      	adds	r7, #44	; 0x2c
 800976e:	46bd      	mov	sp, r7
 8009770:	bc80      	pop	{r7}
 8009772:	4770      	bx	lr

08009774 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	7c1b      	ldrb	r3, [r3, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d115      	bne.n	80097b8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800978c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009790:	2202      	movs	r2, #2
 8009792:	2181      	movs	r1, #129	; 0x81
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 fea2 	bl	800b4de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80097a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097a4:	2202      	movs	r2, #2
 80097a6:	2101      	movs	r1, #1
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 fe98 	bl	800b4de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80097b6:	e012      	b.n	80097de <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80097b8:	2340      	movs	r3, #64	; 0x40
 80097ba:	2202      	movs	r2, #2
 80097bc:	2181      	movs	r1, #129	; 0x81
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f001 fe8d 	bl	800b4de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80097ca:	2340      	movs	r3, #64	; 0x40
 80097cc:	2202      	movs	r2, #2
 80097ce:	2101      	movs	r1, #1
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 fe84 	bl	800b4de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097de:	2308      	movs	r3, #8
 80097e0:	2203      	movs	r2, #3
 80097e2:	2182      	movs	r1, #130	; 0x82
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 fe7a 	bl	800b4de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80097f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80097f4:	f001 ff9a 	bl	800b72c <USBD_static_malloc>
 80097f8:	4602      	mov	r2, r0
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009806:	2b00      	cmp	r3, #0
 8009808:	d102      	bne.n	8009810 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800980a:	2301      	movs	r3, #1
 800980c:	73fb      	strb	r3, [r7, #15]
 800980e:	e026      	b.n	800985e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009816:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2200      	movs	r2, #0
 8009826:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2200      	movs	r2, #0
 800982e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	7c1b      	ldrb	r3, [r3, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d109      	bne.n	800984e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009844:	2101      	movs	r1, #1
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f001 ff3a 	bl	800b6c0 <USBD_LL_PrepareReceive>
 800984c:	e007      	b.n	800985e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009854:	2340      	movs	r3, #64	; 0x40
 8009856:	2101      	movs	r1, #1
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f001 ff31 	bl	800b6c0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800985e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009874:	2300      	movs	r3, #0
 8009876:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009878:	2181      	movs	r1, #129	; 0x81
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f001 fe55 	bl	800b52a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009886:	2101      	movs	r1, #1
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f001 fe4e 	bl	800b52a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009896:	2182      	movs	r1, #130	; 0x82
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f001 fe46 	bl	800b52a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00e      	beq.n	80098cc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098be:	4618      	mov	r0, r3
 80098c0:	f001 ff40 	bl	800b744 <USBD_static_free>
    pdev->pClassData = NULL;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b086      	sub	sp, #24
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80098e8:	2300      	movs	r3, #0
 80098ea:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80098ec:	2300      	movs	r3, #0
 80098ee:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d039      	beq.n	8009974 <USBD_CDC_Setup+0x9e>
 8009900:	2b20      	cmp	r3, #32
 8009902:	d17f      	bne.n	8009a04 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	88db      	ldrh	r3, [r3, #6]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d029      	beq.n	8009960 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	b25b      	sxtb	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	da11      	bge.n	800993a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009922:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009924:	683a      	ldr	r2, [r7, #0]
 8009926:	88d2      	ldrh	r2, [r2, #6]
 8009928:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800992a:	6939      	ldr	r1, [r7, #16]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	88db      	ldrh	r3, [r3, #6]
 8009930:	461a      	mov	r2, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f001 fa09 	bl	800ad4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009938:	e06b      	b.n	8009a12 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	785a      	ldrb	r2, [r3, #1]
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	88db      	ldrh	r3, [r3, #6]
 8009948:	b2da      	uxtb	r2, r3
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009950:	6939      	ldr	r1, [r7, #16]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	88db      	ldrh	r3, [r3, #6]
 8009956:	461a      	mov	r2, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f001 fa24 	bl	800ada6 <USBD_CtlPrepareRx>
      break;
 800995e:	e058      	b.n	8009a12 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	7850      	ldrb	r0, [r2, #1]
 800996c:	2200      	movs	r2, #0
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	4798      	blx	r3
      break;
 8009972:	e04e      	b.n	8009a12 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	785b      	ldrb	r3, [r3, #1]
 8009978:	2b0b      	cmp	r3, #11
 800997a:	d02e      	beq.n	80099da <USBD_CDC_Setup+0x104>
 800997c:	2b0b      	cmp	r3, #11
 800997e:	dc38      	bgt.n	80099f2 <USBD_CDC_Setup+0x11c>
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <USBD_CDC_Setup+0xb4>
 8009984:	2b0a      	cmp	r3, #10
 8009986:	d014      	beq.n	80099b2 <USBD_CDC_Setup+0xdc>
 8009988:	e033      	b.n	80099f2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009990:	2b03      	cmp	r3, #3
 8009992:	d107      	bne.n	80099a4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009994:	f107 030c 	add.w	r3, r7, #12
 8009998:	2202      	movs	r2, #2
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 f9d4 	bl	800ad4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099a2:	e02e      	b.n	8009a02 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 f965 	bl	800ac76 <USBD_CtlError>
            ret = USBD_FAIL;
 80099ac:	2302      	movs	r3, #2
 80099ae:	75fb      	strb	r3, [r7, #23]
          break;
 80099b0:	e027      	b.n	8009a02 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d107      	bne.n	80099cc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80099bc:	f107 030f 	add.w	r3, r7, #15
 80099c0:	2201      	movs	r2, #1
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 f9c0 	bl	800ad4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099ca:	e01a      	b.n	8009a02 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 f951 	bl	800ac76 <USBD_CtlError>
            ret = USBD_FAIL;
 80099d4:	2302      	movs	r3, #2
 80099d6:	75fb      	strb	r3, [r7, #23]
          break;
 80099d8:	e013      	b.n	8009a02 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d00d      	beq.n	8009a00 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f001 f945 	bl	800ac76 <USBD_CtlError>
            ret = USBD_FAIL;
 80099ec:	2302      	movs	r3, #2
 80099ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80099f0:	e006      	b.n	8009a00 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f001 f93e 	bl	800ac76 <USBD_CtlError>
          ret = USBD_FAIL;
 80099fa:	2302      	movs	r3, #2
 80099fc:	75fb      	strb	r3, [r7, #23]
          break;
 80099fe:	e000      	b.n	8009a02 <USBD_CDC_Setup+0x12c>
          break;
 8009a00:	bf00      	nop
      }
      break;
 8009a02:	e006      	b.n	8009a12 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f001 f935 	bl	800ac76 <USBD_CtlError>
      ret = USBD_FAIL;
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a10:	bf00      	nop
  }

  return ret;
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a2e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a36:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d03a      	beq.n	8009ab8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009a42:	78fa      	ldrb	r2, [r7, #3]
 8009a44:	6879      	ldr	r1, [r7, #4]
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	440b      	add	r3, r1
 8009a50:	331c      	adds	r3, #28
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d029      	beq.n	8009aac <USBD_CDC_DataIn+0x90>
 8009a58:	78fa      	ldrb	r2, [r7, #3]
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	440b      	add	r3, r1
 8009a66:	331c      	adds	r3, #28
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	78f9      	ldrb	r1, [r7, #3]
 8009a6c:	68b8      	ldr	r0, [r7, #8]
 8009a6e:	460b      	mov	r3, r1
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	440b      	add	r3, r1
 8009a74:	00db      	lsls	r3, r3, #3
 8009a76:	4403      	add	r3, r0
 8009a78:	3338      	adds	r3, #56	; 0x38
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a80:	fb01 f303 	mul.w	r3, r1, r3
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d110      	bne.n	8009aac <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009a8a:	78fa      	ldrb	r2, [r7, #3]
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	440b      	add	r3, r1
 8009a98:	331c      	adds	r3, #28
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009a9e:	78f9      	ldrb	r1, [r7, #3]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 fde8 	bl	800b67a <USBD_LL_Transmit>
 8009aaa:	e003      	b.n	8009ab4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	e000      	b.n	8009aba <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009ab8:	2302      	movs	r3, #2
  }
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ad6:	78fb      	ldrb	r3, [r7, #3]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f001 fe13 	bl	800b706 <USBD_LL_GetRxDataSize>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00d      	beq.n	8009b0e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009b06:	4611      	mov	r1, r2
 8009b08:	4798      	blx	r3

    return USBD_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	e000      	b.n	8009b10 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009b0e:	2302      	movs	r3, #2
  }
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b26:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d015      	beq.n	8009b5e <USBD_CDC_EP0_RxReady+0x46>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009b38:	2bff      	cmp	r3, #255	; 0xff
 8009b3a:	d010      	beq.n	8009b5e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009b4a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b52:	b292      	uxth	r2, r2
 8009b54:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	22ff      	movs	r2, #255	; 0xff
 8009b5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2243      	movs	r2, #67	; 0x43
 8009b74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009b76:	4b03      	ldr	r3, [pc, #12]	; (8009b84 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bc80      	pop	{r7}
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	20000094 	.word	0x20000094

08009b88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2243      	movs	r2, #67	; 0x43
 8009b94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009b96:	4b03      	ldr	r3, [pc, #12]	; (8009ba4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bc80      	pop	{r7}
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20000050 	.word	0x20000050

08009ba8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2243      	movs	r2, #67	; 0x43
 8009bb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009bb6:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bc80      	pop	{r7}
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	200000d8 	.word	0x200000d8

08009bc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	220a      	movs	r2, #10
 8009bd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009bd6:	4b03      	ldr	r3, [pc, #12]	; (8009be4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bc80      	pop	{r7}
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	2000000c 	.word	0x2000000c

08009be8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bc80      	pop	{r7}
 8009c12:	4770      	bx	lr

08009c14 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c28:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009c32:	88fa      	ldrh	r2, [r7, #6]
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	371c      	adds	r7, #28
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bc80      	pop	{r7}
 8009c44:	4770      	bx	lr

08009c46 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b085      	sub	sp, #20
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c56:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	683a      	ldr	r2, [r7, #0]
 8009c5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bc80      	pop	{r7}
 8009c6a:	4770      	bx	lr

08009c6c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d01c      	beq.n	8009cc0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d115      	bne.n	8009cbc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	2181      	movs	r1, #129	; 0x81
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 fce1 	bl	800b67a <USBD_LL_Transmit>

      return USBD_OK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	e002      	b.n	8009cc2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e000      	b.n	8009cc2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009cc0:	2302      	movs	r3, #2
  }
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d017      	beq.n	8009d14 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	7c1b      	ldrb	r3, [r3, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d109      	bne.n	8009d00 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f001 fce1 	bl	800b6c0 <USBD_LL_PrepareReceive>
 8009cfe:	e007      	b.n	8009d10 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d06:	2340      	movs	r3, #64	; 0x40
 8009d08:	2101      	movs	r1, #1
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f001 fcd8 	bl	800b6c0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	e000      	b.n	8009d16 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009d14:	2302      	movs	r3, #2
  }
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	60b9      	str	r1, [r7, #8]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009d32:	2302      	movs	r3, #2
 8009d34:	e01a      	b.n	8009d6c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	79fa      	ldrb	r2, [r7, #7]
 8009d62:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f001 fb45 	bl	800b3f4 <USBD_LL_Init>

  return USBD_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d006      	beq.n	8009d96 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	73fb      	strb	r3, [r7, #15]
 8009d94:	e001      	b.n	8009d9a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009d96:	2302      	movs	r3, #2
 8009d98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bc80      	pop	{r7}
 8009da4:	4770      	bx	lr

08009da6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f001 fb7a 	bl	800b4a8 <USBD_LL_Start>

  return USBD_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b083      	sub	sp, #12
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bc80      	pop	{r7}
 8009dd0:	4770      	bx	lr

08009dd2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b084      	sub	sp, #16
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009dde:	2302      	movs	r3, #2
 8009de0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00c      	beq.n	8009e06 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	78fa      	ldrb	r2, [r7, #3]
 8009df6:	4611      	mov	r1, r2
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	4798      	blx	r3
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	78fa      	ldrb	r2, [r7, #3]
 8009e26:	4611      	mov	r1, r2
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	4798      	blx	r3

  return USBD_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b082      	sub	sp, #8
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f000 fed8 	bl	800abfe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009e6a:	f003 031f 	and.w	r3, r3, #31
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d016      	beq.n	8009ea0 <USBD_LL_SetupStage+0x6a>
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d81c      	bhi.n	8009eb0 <USBD_LL_SetupStage+0x7a>
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <USBD_LL_SetupStage+0x4a>
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d008      	beq.n	8009e90 <USBD_LL_SetupStage+0x5a>
 8009e7e:	e017      	b.n	8009eb0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f9cb 	bl	800a224 <USBD_StdDevReq>
      break;
 8009e8e:	e01a      	b.n	8009ec6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fa2d 	bl	800a2f8 <USBD_StdItfReq>
      break;
 8009e9e:	e012      	b.n	8009ec6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fa6d 	bl	800a388 <USBD_StdEPReq>
      break;
 8009eae:	e00a      	b.n	8009ec6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009eb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f001 fb52 	bl	800b568 <USBD_LL_StallEP>
      break;
 8009ec4:	bf00      	nop
  }

  return USBD_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009ede:	7afb      	ldrb	r3, [r7, #11]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d14b      	bne.n	8009f7c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009eea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d134      	bne.n	8009f60 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d919      	bls.n	8009f36 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	68da      	ldr	r2, [r3, #12]
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	1ad2      	subs	r2, r2, r3
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	68da      	ldr	r2, [r3, #12]
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d203      	bcs.n	8009f24 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	e002      	b.n	8009f2a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	6879      	ldr	r1, [r7, #4]
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 ff57 	bl	800ade2 <USBD_CtlContinueRx>
 8009f34:	e038      	b.n	8009fa8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00a      	beq.n	8009f58 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f48:	2b03      	cmp	r3, #3
 8009f4a:	d105      	bne.n	8009f58 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f000 ff54 	bl	800ae06 <USBD_CtlSendStatus>
 8009f5e:	e023      	b.n	8009fa8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f66:	2b05      	cmp	r3, #5
 8009f68:	d11e      	bne.n	8009fa8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009f72:	2100      	movs	r1, #0
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f001 faf7 	bl	800b568 <USBD_LL_StallEP>
 8009f7a:	e015      	b.n	8009fa8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00d      	beq.n	8009fa4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d108      	bne.n	8009fa4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	7afa      	ldrb	r2, [r7, #11]
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	4798      	blx	r3
 8009fa2:	e001      	b.n	8009fa8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	e000      	b.n	8009faa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b086      	sub	sp, #24
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	460b      	mov	r3, r1
 8009fbc:	607a      	str	r2, [r7, #4]
 8009fbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d17f      	bne.n	800a0c6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3314      	adds	r3, #20
 8009fca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d15c      	bne.n	800a090 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	68da      	ldr	r2, [r3, #12]
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d915      	bls.n	800a00e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	68da      	ldr	r2, [r3, #12]
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	1ad2      	subs	r2, r2, r3
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 fec1 	bl	800ad82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a000:	2300      	movs	r3, #0
 800a002:	2200      	movs	r2, #0
 800a004:	2100      	movs	r1, #0
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f001 fb5a 	bl	800b6c0 <USBD_LL_PrepareReceive>
 800a00c:	e04e      	b.n	800a0ac <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	6912      	ldr	r2, [r2, #16]
 800a016:	fbb3 f1f2 	udiv	r1, r3, r2
 800a01a:	fb01 f202 	mul.w	r2, r1, r2
 800a01e:	1a9b      	subs	r3, r3, r2
 800a020:	2b00      	cmp	r3, #0
 800a022:	d11c      	bne.n	800a05e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	689a      	ldr	r2, [r3, #8]
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d316      	bcc.n	800a05e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d20f      	bcs.n	800a05e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a03e:	2200      	movs	r2, #0
 800a040:	2100      	movs	r1, #0
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 fe9d 	bl	800ad82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a050:	2300      	movs	r3, #0
 800a052:	2200      	movs	r2, #0
 800a054:	2100      	movs	r1, #0
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f001 fb32 	bl	800b6c0 <USBD_LL_PrepareReceive>
 800a05c:	e026      	b.n	800a0ac <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00a      	beq.n	800a080 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a070:	2b03      	cmp	r3, #3
 800a072:	d105      	bne.n	800a080 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a080:	2180      	movs	r1, #128	; 0x80
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f001 fa70 	bl	800b568 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 fecf 	bl	800ae2c <USBD_CtlReceiveStatus>
 800a08e:	e00d      	b.n	800a0ac <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a096:	2b04      	cmp	r3, #4
 800a098:	d004      	beq.n	800a0a4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d103      	bne.n	800a0ac <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a0a4:	2180      	movs	r1, #128	; 0x80
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f001 fa5e 	bl	800b568 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d11d      	bne.n	800a0f2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f7ff fe81 	bl	8009dbe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a0c4:	e015      	b.n	800a0f2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00d      	beq.n	800a0ee <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a0d8:	2b03      	cmp	r3, #3
 800a0da:	d108      	bne.n	800a0ee <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	7afa      	ldrb	r2, [r7, #11]
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	4798      	blx	r3
 800a0ec:	e001      	b.n	800a0f2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e000      	b.n	800a0f4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a104:	2340      	movs	r3, #64	; 0x40
 800a106:	2200      	movs	r2, #0
 800a108:	2100      	movs	r1, #0
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f001 f9e7 	bl	800b4de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2240      	movs	r2, #64	; 0x40
 800a11c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a120:	2340      	movs	r3, #64	; 0x40
 800a122:	2200      	movs	r2, #0
 800a124:	2180      	movs	r1, #128	; 0x80
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f001 f9d9 	bl	800b4de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2240      	movs	r2, #64	; 0x40
 800a136:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d009      	beq.n	800a174 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	6852      	ldr	r2, [r2, #4]
 800a16c:	b2d2      	uxtb	r2, r2
 800a16e:	4611      	mov	r1, r2
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	4798      	blx	r3
  }

  return USBD_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a17e:	b480      	push	{r7}
 800a180:	b083      	sub	sp, #12
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	460b      	mov	r3, r1
 800a188:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	78fa      	ldrb	r2, [r7, #3]
 800a18e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	bc80      	pop	{r7}
 800a19a:	4770      	bx	lr

0800a19c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2204      	movs	r2, #4
 800a1b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bc80      	pop	{r7}
 800a1c2:	4770      	bx	lr

0800a1c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1d2:	2b04      	cmp	r3, #4
 800a1d4:	d105      	bne.n	800a1e2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bc80      	pop	{r7}
 800a1ec:	4770      	bx	lr

0800a1ee <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1fc:	2b03      	cmp	r3, #3
 800a1fe:	d10b      	bne.n	800a218 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d005      	beq.n	800a218 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a23a:	2b40      	cmp	r3, #64	; 0x40
 800a23c:	d005      	beq.n	800a24a <USBD_StdDevReq+0x26>
 800a23e:	2b40      	cmp	r3, #64	; 0x40
 800a240:	d84f      	bhi.n	800a2e2 <USBD_StdDevReq+0xbe>
 800a242:	2b00      	cmp	r3, #0
 800a244:	d009      	beq.n	800a25a <USBD_StdDevReq+0x36>
 800a246:	2b20      	cmp	r3, #32
 800a248:	d14b      	bne.n	800a2e2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	4798      	blx	r3
      break;
 800a258:	e048      	b.n	800a2ec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	785b      	ldrb	r3, [r3, #1]
 800a25e:	2b09      	cmp	r3, #9
 800a260:	d839      	bhi.n	800a2d6 <USBD_StdDevReq+0xb2>
 800a262:	a201      	add	r2, pc, #4	; (adr r2, 800a268 <USBD_StdDevReq+0x44>)
 800a264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a268:	0800a2b9 	.word	0x0800a2b9
 800a26c:	0800a2cd 	.word	0x0800a2cd
 800a270:	0800a2d7 	.word	0x0800a2d7
 800a274:	0800a2c3 	.word	0x0800a2c3
 800a278:	0800a2d7 	.word	0x0800a2d7
 800a27c:	0800a29b 	.word	0x0800a29b
 800a280:	0800a291 	.word	0x0800a291
 800a284:	0800a2d7 	.word	0x0800a2d7
 800a288:	0800a2af 	.word	0x0800a2af
 800a28c:	0800a2a5 	.word	0x0800a2a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a290:	6839      	ldr	r1, [r7, #0]
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f9dc 	bl	800a650 <USBD_GetDescriptor>
          break;
 800a298:	e022      	b.n	800a2e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 fb3f 	bl	800a920 <USBD_SetAddress>
          break;
 800a2a2:	e01d      	b.n	800a2e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fb7e 	bl	800a9a8 <USBD_SetConfig>
          break;
 800a2ac:	e018      	b.n	800a2e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fc07 	bl	800aac4 <USBD_GetConfig>
          break;
 800a2b6:	e013      	b.n	800a2e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fc37 	bl	800ab2e <USBD_GetStatus>
          break;
 800a2c0:	e00e      	b.n	800a2e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fc65 	bl	800ab94 <USBD_SetFeature>
          break;
 800a2ca:	e009      	b.n	800a2e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fc74 	bl	800abbc <USBD_ClrFeature>
          break;
 800a2d4:	e004      	b.n	800a2e0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 fccc 	bl	800ac76 <USBD_CtlError>
          break;
 800a2de:	bf00      	nop
      }
      break;
 800a2e0:	e004      	b.n	800a2ec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fcc6 	bl	800ac76 <USBD_CtlError>
      break;
 800a2ea:	bf00      	nop
  }

  return ret;
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop

0800a2f8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a30e:	2b40      	cmp	r3, #64	; 0x40
 800a310:	d005      	beq.n	800a31e <USBD_StdItfReq+0x26>
 800a312:	2b40      	cmp	r3, #64	; 0x40
 800a314:	d82e      	bhi.n	800a374 <USBD_StdItfReq+0x7c>
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <USBD_StdItfReq+0x26>
 800a31a:	2b20      	cmp	r3, #32
 800a31c:	d12a      	bne.n	800a374 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a324:	3b01      	subs	r3, #1
 800a326:	2b02      	cmp	r3, #2
 800a328:	d81d      	bhi.n	800a366 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	889b      	ldrh	r3, [r3, #4]
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	2b01      	cmp	r3, #1
 800a332:	d813      	bhi.n	800a35c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	4798      	blx	r3
 800a342:	4603      	mov	r3, r0
 800a344:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	88db      	ldrh	r3, [r3, #6]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d110      	bne.n	800a370 <USBD_StdItfReq+0x78>
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10d      	bne.n	800a370 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fd56 	bl	800ae06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a35a:	e009      	b.n	800a370 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fc89 	bl	800ac76 <USBD_CtlError>
          break;
 800a364:	e004      	b.n	800a370 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fc84 	bl	800ac76 <USBD_CtlError>
          break;
 800a36e:	e000      	b.n	800a372 <USBD_StdItfReq+0x7a>
          break;
 800a370:	bf00      	nop
      }
      break;
 800a372:	e004      	b.n	800a37e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fc7d 	bl	800ac76 <USBD_CtlError>
      break;
 800a37c:	bf00      	nop
  }

  return USBD_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	889b      	ldrh	r3, [r3, #4]
 800a39a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3a4:	2b40      	cmp	r3, #64	; 0x40
 800a3a6:	d007      	beq.n	800a3b8 <USBD_StdEPReq+0x30>
 800a3a8:	2b40      	cmp	r3, #64	; 0x40
 800a3aa:	f200 8146 	bhi.w	800a63a <USBD_StdEPReq+0x2b2>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00a      	beq.n	800a3c8 <USBD_StdEPReq+0x40>
 800a3b2:	2b20      	cmp	r3, #32
 800a3b4:	f040 8141 	bne.w	800a63a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	4798      	blx	r3
      break;
 800a3c6:	e13d      	b.n	800a644 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3d0:	2b20      	cmp	r3, #32
 800a3d2:	d10a      	bne.n	800a3ea <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	6839      	ldr	r1, [r7, #0]
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4798      	blx	r3
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	e12d      	b.n	800a646 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	785b      	ldrb	r3, [r3, #1]
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	d007      	beq.n	800a402 <USBD_StdEPReq+0x7a>
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	f300 811b 	bgt.w	800a62e <USBD_StdEPReq+0x2a6>
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d072      	beq.n	800a4e2 <USBD_StdEPReq+0x15a>
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d03a      	beq.n	800a476 <USBD_StdEPReq+0xee>
 800a400:	e115      	b.n	800a62e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d002      	beq.n	800a412 <USBD_StdEPReq+0x8a>
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d015      	beq.n	800a43c <USBD_StdEPReq+0xb4>
 800a410:	e02b      	b.n	800a46a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a412:	7bbb      	ldrb	r3, [r7, #14]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00c      	beq.n	800a432 <USBD_StdEPReq+0xaa>
 800a418:	7bbb      	ldrb	r3, [r7, #14]
 800a41a:	2b80      	cmp	r3, #128	; 0x80
 800a41c:	d009      	beq.n	800a432 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a41e:	7bbb      	ldrb	r3, [r7, #14]
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f001 f8a0 	bl	800b568 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a428:	2180      	movs	r1, #128	; 0x80
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f001 f89c 	bl	800b568 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a430:	e020      	b.n	800a474 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fc1e 	bl	800ac76 <USBD_CtlError>
              break;
 800a43a:	e01b      	b.n	800a474 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	885b      	ldrh	r3, [r3, #2]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10e      	bne.n	800a462 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a444:	7bbb      	ldrb	r3, [r7, #14]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00b      	beq.n	800a462 <USBD_StdEPReq+0xda>
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	2b80      	cmp	r3, #128	; 0x80
 800a44e:	d008      	beq.n	800a462 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	88db      	ldrh	r3, [r3, #6]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d104      	bne.n	800a462 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a458:	7bbb      	ldrb	r3, [r7, #14]
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f001 f883 	bl	800b568 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fccf 	bl	800ae06 <USBD_CtlSendStatus>

              break;
 800a468:	e004      	b.n	800a474 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fc02 	bl	800ac76 <USBD_CtlError>
              break;
 800a472:	bf00      	nop
          }
          break;
 800a474:	e0e0      	b.n	800a638 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d002      	beq.n	800a486 <USBD_StdEPReq+0xfe>
 800a480:	2b03      	cmp	r3, #3
 800a482:	d015      	beq.n	800a4b0 <USBD_StdEPReq+0x128>
 800a484:	e026      	b.n	800a4d4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a486:	7bbb      	ldrb	r3, [r7, #14]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00c      	beq.n	800a4a6 <USBD_StdEPReq+0x11e>
 800a48c:	7bbb      	ldrb	r3, [r7, #14]
 800a48e:	2b80      	cmp	r3, #128	; 0x80
 800a490:	d009      	beq.n	800a4a6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f001 f866 	bl	800b568 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a49c:	2180      	movs	r1, #128	; 0x80
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f001 f862 	bl	800b568 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4a4:	e01c      	b.n	800a4e0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a4a6:	6839      	ldr	r1, [r7, #0]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fbe4 	bl	800ac76 <USBD_CtlError>
              break;
 800a4ae:	e017      	b.n	800a4e0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	885b      	ldrh	r3, [r3, #2]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d112      	bne.n	800a4de <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d004      	beq.n	800a4cc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f001 f86d 	bl	800b5a6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fc9a 	bl	800ae06 <USBD_CtlSendStatus>
              }
              break;
 800a4d2:	e004      	b.n	800a4de <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fbcd 	bl	800ac76 <USBD_CtlError>
              break;
 800a4dc:	e000      	b.n	800a4e0 <USBD_StdEPReq+0x158>
              break;
 800a4de:	bf00      	nop
          }
          break;
 800a4e0:	e0aa      	b.n	800a638 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d002      	beq.n	800a4f2 <USBD_StdEPReq+0x16a>
 800a4ec:	2b03      	cmp	r3, #3
 800a4ee:	d032      	beq.n	800a556 <USBD_StdEPReq+0x1ce>
 800a4f0:	e097      	b.n	800a622 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d007      	beq.n	800a508 <USBD_StdEPReq+0x180>
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
 800a4fa:	2b80      	cmp	r3, #128	; 0x80
 800a4fc:	d004      	beq.n	800a508 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a4fe:	6839      	ldr	r1, [r7, #0]
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fbb8 	bl	800ac76 <USBD_CtlError>
                break;
 800a506:	e091      	b.n	800a62c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	da0b      	bge.n	800a528 <USBD_StdEPReq+0x1a0>
 800a510:	7bbb      	ldrb	r3, [r7, #14]
 800a512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a516:	4613      	mov	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	3310      	adds	r3, #16
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	4413      	add	r3, r2
 800a524:	3304      	adds	r3, #4
 800a526:	e00b      	b.n	800a540 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a528:	7bbb      	ldrb	r3, [r7, #14]
 800a52a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a52e:	4613      	mov	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4413      	add	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	4413      	add	r3, r2
 800a53e:	3304      	adds	r3, #4
 800a540:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2202      	movs	r2, #2
 800a54c:	4619      	mov	r1, r3
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fbfb 	bl	800ad4a <USBD_CtlSendData>
              break;
 800a554:	e06a      	b.n	800a62c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a556:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	da11      	bge.n	800a582 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a55e:	7bbb      	ldrb	r3, [r7, #14]
 800a560:	f003 020f 	and.w	r2, r3, #15
 800a564:	6879      	ldr	r1, [r7, #4]
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	440b      	add	r3, r1
 800a570:	3318      	adds	r3, #24
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d117      	bne.n	800a5a8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fb7b 	bl	800ac76 <USBD_CtlError>
                  break;
 800a580:	e054      	b.n	800a62c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a582:	7bbb      	ldrb	r3, [r7, #14]
 800a584:	f003 020f 	and.w	r2, r3, #15
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	4613      	mov	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	440b      	add	r3, r1
 800a594:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d104      	bne.n	800a5a8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fb68 	bl	800ac76 <USBD_CtlError>
                  break;
 800a5a6:	e041      	b.n	800a62c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	da0b      	bge.n	800a5c8 <USBD_StdEPReq+0x240>
 800a5b0:	7bbb      	ldrb	r3, [r7, #14]
 800a5b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	3310      	adds	r3, #16
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	e00b      	b.n	800a5e0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5c8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	4413      	add	r3, r2
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	4413      	add	r3, r2
 800a5de:	3304      	adds	r3, #4
 800a5e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d002      	beq.n	800a5ee <USBD_StdEPReq+0x266>
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ea:	2b80      	cmp	r3, #128	; 0x80
 800a5ec:	d103      	bne.n	800a5f6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	601a      	str	r2, [r3, #0]
 800a5f4:	e00e      	b.n	800a614 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a5f6:	7bbb      	ldrb	r3, [r7, #14]
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fff2 	bl	800b5e4 <USBD_LL_IsStallEP>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	2201      	movs	r2, #1
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	e002      	b.n	800a614 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2200      	movs	r2, #0
 800a612:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2202      	movs	r2, #2
 800a618:	4619      	mov	r1, r3
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fb95 	bl	800ad4a <USBD_CtlSendData>
              break;
 800a620:	e004      	b.n	800a62c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a622:	6839      	ldr	r1, [r7, #0]
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 fb26 	bl	800ac76 <USBD_CtlError>
              break;
 800a62a:	bf00      	nop
          }
          break;
 800a62c:	e004      	b.n	800a638 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fb20 	bl	800ac76 <USBD_CtlError>
          break;
 800a636:	bf00      	nop
      }
      break;
 800a638:	e004      	b.n	800a644 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fb1a 	bl	800ac76 <USBD_CtlError>
      break;
 800a642:	bf00      	nop
  }

  return ret;
 800a644:	7bfb      	ldrb	r3, [r7, #15]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
	...

0800a650 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a65a:	2300      	movs	r3, #0
 800a65c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a65e:	2300      	movs	r3, #0
 800a660:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a662:	2300      	movs	r3, #0
 800a664:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	885b      	ldrh	r3, [r3, #2]
 800a66a:	0a1b      	lsrs	r3, r3, #8
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	3b01      	subs	r3, #1
 800a670:	2b06      	cmp	r3, #6
 800a672:	f200 8128 	bhi.w	800a8c6 <USBD_GetDescriptor+0x276>
 800a676:	a201      	add	r2, pc, #4	; (adr r2, 800a67c <USBD_GetDescriptor+0x2c>)
 800a678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67c:	0800a699 	.word	0x0800a699
 800a680:	0800a6b1 	.word	0x0800a6b1
 800a684:	0800a6f1 	.word	0x0800a6f1
 800a688:	0800a8c7 	.word	0x0800a8c7
 800a68c:	0800a8c7 	.word	0x0800a8c7
 800a690:	0800a867 	.word	0x0800a867
 800a694:	0800a893 	.word	0x0800a893
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	7c12      	ldrb	r2, [r2, #16]
 800a6a4:	f107 0108 	add.w	r1, r7, #8
 800a6a8:	4610      	mov	r0, r2
 800a6aa:	4798      	blx	r3
 800a6ac:	60f8      	str	r0, [r7, #12]
      break;
 800a6ae:	e112      	b.n	800a8d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	7c1b      	ldrb	r3, [r3, #16]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10d      	bne.n	800a6d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c0:	f107 0208 	add.w	r2, r7, #8
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	4798      	blx	r3
 800a6c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6d2:	e100      	b.n	800a8d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6dc:	f107 0208 	add.w	r2, r7, #8
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	4798      	blx	r3
 800a6e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	701a      	strb	r2, [r3, #0]
      break;
 800a6ee:	e0f2      	b.n	800a8d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	885b      	ldrh	r3, [r3, #2]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b05      	cmp	r3, #5
 800a6f8:	f200 80ac 	bhi.w	800a854 <USBD_GetDescriptor+0x204>
 800a6fc:	a201      	add	r2, pc, #4	; (adr r2, 800a704 <USBD_GetDescriptor+0xb4>)
 800a6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a702:	bf00      	nop
 800a704:	0800a71d 	.word	0x0800a71d
 800a708:	0800a751 	.word	0x0800a751
 800a70c:	0800a785 	.word	0x0800a785
 800a710:	0800a7b9 	.word	0x0800a7b9
 800a714:	0800a7ed 	.word	0x0800a7ed
 800a718:	0800a821 	.word	0x0800a821
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00b      	beq.n	800a740 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	7c12      	ldrb	r2, [r2, #16]
 800a734:	f107 0108 	add.w	r1, r7, #8
 800a738:	4610      	mov	r0, r2
 800a73a:	4798      	blx	r3
 800a73c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a73e:	e091      	b.n	800a864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fa97 	bl	800ac76 <USBD_CtlError>
            err++;
 800a748:	7afb      	ldrb	r3, [r7, #11]
 800a74a:	3301      	adds	r3, #1
 800a74c:	72fb      	strb	r3, [r7, #11]
          break;
 800a74e:	e089      	b.n	800a864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00b      	beq.n	800a774 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	7c12      	ldrb	r2, [r2, #16]
 800a768:	f107 0108 	add.w	r1, r7, #8
 800a76c:	4610      	mov	r0, r2
 800a76e:	4798      	blx	r3
 800a770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a772:	e077      	b.n	800a864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fa7d 	bl	800ac76 <USBD_CtlError>
            err++;
 800a77c:	7afb      	ldrb	r3, [r7, #11]
 800a77e:	3301      	adds	r3, #1
 800a780:	72fb      	strb	r3, [r7, #11]
          break;
 800a782:	e06f      	b.n	800a864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00b      	beq.n	800a7a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	7c12      	ldrb	r2, [r2, #16]
 800a79c:	f107 0108 	add.w	r1, r7, #8
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	4798      	blx	r3
 800a7a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7a6:	e05d      	b.n	800a864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fa63 	bl	800ac76 <USBD_CtlError>
            err++;
 800a7b0:	7afb      	ldrb	r3, [r7, #11]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7b6:	e055      	b.n	800a864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00b      	beq.n	800a7dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	7c12      	ldrb	r2, [r2, #16]
 800a7d0:	f107 0108 	add.w	r1, r7, #8
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	4798      	blx	r3
 800a7d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7da:	e043      	b.n	800a864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fa49 	bl	800ac76 <USBD_CtlError>
            err++;
 800a7e4:	7afb      	ldrb	r3, [r7, #11]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ea:	e03b      	b.n	800a864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00b      	beq.n	800a810 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7fe:	695b      	ldr	r3, [r3, #20]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	7c12      	ldrb	r2, [r2, #16]
 800a804:	f107 0108 	add.w	r1, r7, #8
 800a808:	4610      	mov	r0, r2
 800a80a:	4798      	blx	r3
 800a80c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a80e:	e029      	b.n	800a864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fa2f 	bl	800ac76 <USBD_CtlError>
            err++;
 800a818:	7afb      	ldrb	r3, [r7, #11]
 800a81a:	3301      	adds	r3, #1
 800a81c:	72fb      	strb	r3, [r7, #11]
          break;
 800a81e:	e021      	b.n	800a864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00b      	beq.n	800a844 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a832:	699b      	ldr	r3, [r3, #24]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	7c12      	ldrb	r2, [r2, #16]
 800a838:	f107 0108 	add.w	r1, r7, #8
 800a83c:	4610      	mov	r0, r2
 800a83e:	4798      	blx	r3
 800a840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a842:	e00f      	b.n	800a864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a844:	6839      	ldr	r1, [r7, #0]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fa15 	bl	800ac76 <USBD_CtlError>
            err++;
 800a84c:	7afb      	ldrb	r3, [r7, #11]
 800a84e:	3301      	adds	r3, #1
 800a850:	72fb      	strb	r3, [r7, #11]
          break;
 800a852:	e007      	b.n	800a864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fa0d 	bl	800ac76 <USBD_CtlError>
          err++;
 800a85c:	7afb      	ldrb	r3, [r7, #11]
 800a85e:	3301      	adds	r3, #1
 800a860:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a862:	e038      	b.n	800a8d6 <USBD_GetDescriptor+0x286>
 800a864:	e037      	b.n	800a8d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	7c1b      	ldrb	r3, [r3, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d109      	bne.n	800a882 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a876:	f107 0208 	add.w	r2, r7, #8
 800a87a:	4610      	mov	r0, r2
 800a87c:	4798      	blx	r3
 800a87e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a880:	e029      	b.n	800a8d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f9f6 	bl	800ac76 <USBD_CtlError>
        err++;
 800a88a:	7afb      	ldrb	r3, [r7, #11]
 800a88c:	3301      	adds	r3, #1
 800a88e:	72fb      	strb	r3, [r7, #11]
      break;
 800a890:	e021      	b.n	800a8d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	7c1b      	ldrb	r3, [r3, #16]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10d      	bne.n	800a8b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a2:	f107 0208 	add.w	r2, r7, #8
 800a8a6:	4610      	mov	r0, r2
 800a8a8:	4798      	blx	r3
 800a8aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	2207      	movs	r2, #7
 800a8b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8b4:	e00f      	b.n	800a8d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f9dc 	bl	800ac76 <USBD_CtlError>
        err++;
 800a8be:	7afb      	ldrb	r3, [r7, #11]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a8c4:	e007      	b.n	800a8d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f9d4 	bl	800ac76 <USBD_CtlError>
      err++;
 800a8ce:	7afb      	ldrb	r3, [r7, #11]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	72fb      	strb	r3, [r7, #11]
      break;
 800a8d4:	bf00      	nop
  }

  if (err != 0U)
 800a8d6:	7afb      	ldrb	r3, [r7, #11]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d11c      	bne.n	800a916 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a8dc:	893b      	ldrh	r3, [r7, #8]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d011      	beq.n	800a906 <USBD_GetDescriptor+0x2b6>
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	88db      	ldrh	r3, [r3, #6]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00d      	beq.n	800a906 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	88da      	ldrh	r2, [r3, #6]
 800a8ee:	893b      	ldrh	r3, [r7, #8]
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	bf28      	it	cs
 800a8f4:	4613      	movcs	r3, r2
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a8fa:	893b      	ldrh	r3, [r7, #8]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	68f9      	ldr	r1, [r7, #12]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fa22 	bl	800ad4a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	88db      	ldrh	r3, [r3, #6]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d104      	bne.n	800a918 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fa79 	bl	800ae06 <USBD_CtlSendStatus>
 800a914:	e000      	b.n	800a918 <USBD_GetDescriptor+0x2c8>
    return;
 800a916:	bf00      	nop
    }
  }
}
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop

0800a920 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	889b      	ldrh	r3, [r3, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d130      	bne.n	800a994 <USBD_SetAddress+0x74>
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	88db      	ldrh	r3, [r3, #6]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d12c      	bne.n	800a994 <USBD_SetAddress+0x74>
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	885b      	ldrh	r3, [r3, #2]
 800a93e:	2b7f      	cmp	r3, #127	; 0x7f
 800a940:	d828      	bhi.n	800a994 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	885b      	ldrh	r3, [r3, #2]
 800a946:	b2db      	uxtb	r3, r3
 800a948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a94c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a954:	2b03      	cmp	r3, #3
 800a956:	d104      	bne.n	800a962 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f98b 	bl	800ac76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a960:	e01d      	b.n	800a99e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	7bfa      	ldrb	r2, [r7, #15]
 800a966:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a96a:	7bfb      	ldrb	r3, [r7, #15]
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fe64 	bl	800b63c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fa46 	bl	800ae06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d004      	beq.n	800a98a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2202      	movs	r2, #2
 800a984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a988:	e009      	b.n	800a99e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a992:	e004      	b.n	800a99e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f96d 	bl	800ac76 <USBD_CtlError>
  }
}
 800a99c:	bf00      	nop
 800a99e:	bf00      	nop
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
	...

0800a9a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	885b      	ldrh	r3, [r3, #2]
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	4b41      	ldr	r3, [pc, #260]	; (800aac0 <USBD_SetConfig+0x118>)
 800a9ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9bc:	4b40      	ldr	r3, [pc, #256]	; (800aac0 <USBD_SetConfig+0x118>)
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d904      	bls.n	800a9ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f955 	bl	800ac76 <USBD_CtlError>
 800a9cc:	e075      	b.n	800aaba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d002      	beq.n	800a9de <USBD_SetConfig+0x36>
 800a9d8:	2b03      	cmp	r3, #3
 800a9da:	d023      	beq.n	800aa24 <USBD_SetConfig+0x7c>
 800a9dc:	e062      	b.n	800aaa4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a9de:	4b38      	ldr	r3, [pc, #224]	; (800aac0 <USBD_SetConfig+0x118>)
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d01a      	beq.n	800aa1c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a9e6:	4b36      	ldr	r3, [pc, #216]	; (800aac0 <USBD_SetConfig+0x118>)
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2203      	movs	r2, #3
 800a9f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a9f8:	4b31      	ldr	r3, [pc, #196]	; (800aac0 <USBD_SetConfig+0x118>)
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7ff f9e7 	bl	8009dd2 <USBD_SetClassConfig>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d104      	bne.n	800aa14 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f932 	bl	800ac76 <USBD_CtlError>
            return;
 800aa12:	e052      	b.n	800aaba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f9f6 	bl	800ae06 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aa1a:	e04e      	b.n	800aaba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f9f2 	bl	800ae06 <USBD_CtlSendStatus>
        break;
 800aa22:	e04a      	b.n	800aaba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aa24:	4b26      	ldr	r3, [pc, #152]	; (800aac0 <USBD_SetConfig+0x118>)
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d112      	bne.n	800aa52 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2202      	movs	r2, #2
 800aa30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800aa34:	4b22      	ldr	r3, [pc, #136]	; (800aac0 <USBD_SetConfig+0x118>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800aa3e:	4b20      	ldr	r3, [pc, #128]	; (800aac0 <USBD_SetConfig+0x118>)
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7ff f9e3 	bl	8009e10 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f9db 	bl	800ae06 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aa50:	e033      	b.n	800aaba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800aa52:	4b1b      	ldr	r3, [pc, #108]	; (800aac0 <USBD_SetConfig+0x118>)
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	461a      	mov	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d01d      	beq.n	800aa9c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f7ff f9d1 	bl	8009e10 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800aa6e:	4b14      	ldr	r3, [pc, #80]	; (800aac0 <USBD_SetConfig+0x118>)
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	461a      	mov	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa78:	4b11      	ldr	r3, [pc, #68]	; (800aac0 <USBD_SetConfig+0x118>)
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7ff f9a7 	bl	8009dd2 <USBD_SetClassConfig>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d104      	bne.n	800aa94 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 f8f2 	bl	800ac76 <USBD_CtlError>
            return;
 800aa92:	e012      	b.n	800aaba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f9b6 	bl	800ae06 <USBD_CtlSendStatus>
        break;
 800aa9a:	e00e      	b.n	800aaba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f9b2 	bl	800ae06 <USBD_CtlSendStatus>
        break;
 800aaa2:	e00a      	b.n	800aaba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f8e5 	bl	800ac76 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800aaac:	4b04      	ldr	r3, [pc, #16]	; (800aac0 <USBD_SetConfig+0x118>)
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	4619      	mov	r1, r3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7ff f9ac 	bl	8009e10 <USBD_ClrClassConfig>
        break;
 800aab8:	bf00      	nop
    }
  }
}
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000300 	.word	0x20000300

0800aac4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	88db      	ldrh	r3, [r3, #6]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d004      	beq.n	800aae0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 f8cc 	bl	800ac76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aade:	e022      	b.n	800ab26 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	dc02      	bgt.n	800aaf0 <USBD_GetConfig+0x2c>
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dc03      	bgt.n	800aaf6 <USBD_GetConfig+0x32>
 800aaee:	e015      	b.n	800ab1c <USBD_GetConfig+0x58>
 800aaf0:	2b03      	cmp	r3, #3
 800aaf2:	d00b      	beq.n	800ab0c <USBD_GetConfig+0x48>
 800aaf4:	e012      	b.n	800ab1c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	3308      	adds	r3, #8
 800ab00:	2201      	movs	r2, #1
 800ab02:	4619      	mov	r1, r3
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f920 	bl	800ad4a <USBD_CtlSendData>
        break;
 800ab0a:	e00c      	b.n	800ab26 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	3304      	adds	r3, #4
 800ab10:	2201      	movs	r2, #1
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f918 	bl	800ad4a <USBD_CtlSendData>
        break;
 800ab1a:	e004      	b.n	800ab26 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ab1c:	6839      	ldr	r1, [r7, #0]
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f8a9 	bl	800ac76 <USBD_CtlError>
        break;
 800ab24:	bf00      	nop
}
 800ab26:	bf00      	nop
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b082      	sub	sp, #8
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d81e      	bhi.n	800ab82 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	88db      	ldrh	r3, [r3, #6]
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d004      	beq.n	800ab56 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ab4c:	6839      	ldr	r1, [r7, #0]
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f891 	bl	800ac76 <USBD_CtlError>
        break;
 800ab54:	e01a      	b.n	800ab8c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d005      	beq.n	800ab72 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	f043 0202 	orr.w	r2, r3, #2
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	330c      	adds	r3, #12
 800ab76:	2202      	movs	r2, #2
 800ab78:	4619      	mov	r1, r3
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f8e5 	bl	800ad4a <USBD_CtlSendData>
      break;
 800ab80:	e004      	b.n	800ab8c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f876 	bl	800ac76 <USBD_CtlError>
      break;
 800ab8a:	bf00      	nop
  }
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	885b      	ldrh	r3, [r3, #2]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d106      	bne.n	800abb4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f929 	bl	800ae06 <USBD_CtlSendStatus>
  }
}
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abcc:	3b01      	subs	r3, #1
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d80b      	bhi.n	800abea <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	885b      	ldrh	r3, [r3, #2]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d10c      	bne.n	800abf4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f90f 	bl	800ae06 <USBD_CtlSendStatus>
      }
      break;
 800abe8:	e004      	b.n	800abf4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 f842 	bl	800ac76 <USBD_CtlError>
      break;
 800abf2:	e000      	b.n	800abf6 <USBD_ClrFeature+0x3a>
      break;
 800abf4:	bf00      	nop
  }
}
 800abf6:	bf00      	nop
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b083      	sub	sp, #12
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	781a      	ldrb	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	785a      	ldrb	r2, [r3, #1]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	3302      	adds	r3, #2
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	3303      	adds	r3, #3
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	021b      	lsls	r3, r3, #8
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	4413      	add	r3, r2
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	3304      	adds	r3, #4
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	3305      	adds	r3, #5
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	021b      	lsls	r3, r3, #8
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	4413      	add	r3, r2
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	3306      	adds	r3, #6
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	b29a      	uxth	r2, r3
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	3307      	adds	r3, #7
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	021b      	lsls	r3, r3, #8
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	4413      	add	r3, r2
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	80da      	strh	r2, [r3, #6]

}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bc80      	pop	{r7}
 800ac74:	4770      	bx	lr

0800ac76 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b082      	sub	sp, #8
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ac80:	2180      	movs	r1, #128	; 0x80
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fc70 	bl	800b568 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ac88:	2100      	movs	r1, #0
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fc6c 	bl	800b568 <USBD_LL_StallEP>
}
 800ac90:	bf00      	nop
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aca4:	2300      	movs	r3, #0
 800aca6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d032      	beq.n	800ad14 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f000 f834 	bl	800ad1c <USBD_GetLen>
 800acb4:	4603      	mov	r3, r0
 800acb6:	3301      	adds	r3, #1
 800acb8:	b29b      	uxth	r3, r3
 800acba:	005b      	lsls	r3, r3, #1
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	1c5a      	adds	r2, r3, #1
 800acc6:	75fa      	strb	r2, [r7, #23]
 800acc8:	461a      	mov	r2, r3
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	4413      	add	r3, r2
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	7812      	ldrb	r2, [r2, #0]
 800acd2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800acd4:	7dfb      	ldrb	r3, [r7, #23]
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	75fa      	strb	r2, [r7, #23]
 800acda:	461a      	mov	r2, r3
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	4413      	add	r3, r2
 800ace0:	2203      	movs	r2, #3
 800ace2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ace4:	e012      	b.n	800ad0c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	60fa      	str	r2, [r7, #12]
 800acec:	7dfa      	ldrb	r2, [r7, #23]
 800acee:	1c51      	adds	r1, r2, #1
 800acf0:	75f9      	strb	r1, [r7, #23]
 800acf2:	4611      	mov	r1, r2
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	440a      	add	r2, r1
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800acfc:	7dfb      	ldrb	r3, [r7, #23]
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	75fa      	strb	r2, [r7, #23]
 800ad02:	461a      	mov	r2, r3
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	4413      	add	r3, r2
 800ad08:	2200      	movs	r2, #0
 800ad0a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e8      	bne.n	800ace6 <USBD_GetString+0x4e>
    }
  }
}
 800ad14:	bf00      	nop
 800ad16:	3718      	adds	r7, #24
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad24:	2300      	movs	r3, #0
 800ad26:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ad28:	e005      	b.n	800ad36 <USBD_GetLen+0x1a>
  {
    len++;
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3301      	adds	r3, #1
 800ad34:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1f5      	bne.n	800ad2a <USBD_GetLen+0xe>
  }

  return len;
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bc80      	pop	{r7}
 800ad48:	4770      	bx	lr

0800ad4a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	60f8      	str	r0, [r7, #12]
 800ad52:	60b9      	str	r1, [r7, #8]
 800ad54:	4613      	mov	r3, r2
 800ad56:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ad60:	88fa      	ldrh	r2, [r7, #6]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ad66:	88fa      	ldrh	r2, [r7, #6]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad6c:	88fb      	ldrh	r3, [r7, #6]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	2100      	movs	r1, #0
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f000 fc81 	bl	800b67a <USBD_LL_Transmit>

  return USBD_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b084      	sub	sp, #16
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	60f8      	str	r0, [r7, #12]
 800ad8a:	60b9      	str	r1, [r7, #8]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad90:	88fb      	ldrh	r3, [r7, #6]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	2100      	movs	r1, #0
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 fc6f 	bl	800b67a <USBD_LL_Transmit>

  return USBD_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	4613      	mov	r3, r2
 800adb2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2203      	movs	r2, #3
 800adb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800adbc:	88fa      	ldrh	r2, [r7, #6]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800adc4:	88fa      	ldrh	r2, [r7, #6]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800adcc:	88fb      	ldrh	r3, [r7, #6]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	2100      	movs	r1, #0
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f000 fc74 	bl	800b6c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b084      	sub	sp, #16
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	60f8      	str	r0, [r7, #12]
 800adea:	60b9      	str	r1, [r7, #8]
 800adec:	4613      	mov	r3, r2
 800adee:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800adf0:	88fb      	ldrh	r3, [r7, #6]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	2100      	movs	r1, #0
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f000 fc62 	bl	800b6c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b082      	sub	sp, #8
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2204      	movs	r2, #4
 800ae12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae16:	2300      	movs	r3, #0
 800ae18:	2200      	movs	r2, #0
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 fc2c 	bl	800b67a <USBD_LL_Transmit>

  return USBD_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2205      	movs	r2, #5
 800ae38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	2200      	movs	r2, #0
 800ae40:	2100      	movs	r1, #0
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fc3c 	bl	800b6c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
	...

0800ae54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	4912      	ldr	r1, [pc, #72]	; (800aea4 <MX_USB_DEVICE_Init+0x50>)
 800ae5c:	4812      	ldr	r0, [pc, #72]	; (800aea8 <MX_USB_DEVICE_Init+0x54>)
 800ae5e:	f7fe ff5e 	bl	8009d1e <USBD_Init>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d001      	beq.n	800ae6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ae68:	f7f6 f8e0 	bl	800102c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ae6c:	490f      	ldr	r1, [pc, #60]	; (800aeac <MX_USB_DEVICE_Init+0x58>)
 800ae6e:	480e      	ldr	r0, [pc, #56]	; (800aea8 <MX_USB_DEVICE_Init+0x54>)
 800ae70:	f7fe ff80 	bl	8009d74 <USBD_RegisterClass>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ae7a:	f7f6 f8d7 	bl	800102c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ae7e:	490c      	ldr	r1, [pc, #48]	; (800aeb0 <MX_USB_DEVICE_Init+0x5c>)
 800ae80:	4809      	ldr	r0, [pc, #36]	; (800aea8 <MX_USB_DEVICE_Init+0x54>)
 800ae82:	f7fe feb1 	bl	8009be8 <USBD_CDC_RegisterInterface>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d001      	beq.n	800ae90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ae8c:	f7f6 f8ce 	bl	800102c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ae90:	4805      	ldr	r0, [pc, #20]	; (800aea8 <MX_USB_DEVICE_Init+0x54>)
 800ae92:	f7fe ff88 	bl	8009da6 <USBD_Start>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d001      	beq.n	800aea0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ae9c:	f7f6 f8c6 	bl	800102c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aea0:	bf00      	nop
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	2000012c 	.word	0x2000012c
 800aea8:	20000304 	.word	0x20000304
 800aeac:	20000018 	.word	0x20000018
 800aeb0:	2000011c 	.word	0x2000011c

0800aeb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aeb8:	2200      	movs	r2, #0
 800aeba:	4905      	ldr	r1, [pc, #20]	; (800aed0 <CDC_Init_FS+0x1c>)
 800aebc:	4805      	ldr	r0, [pc, #20]	; (800aed4 <CDC_Init_FS+0x20>)
 800aebe:	f7fe fea9 	bl	8009c14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aec2:	4905      	ldr	r1, [pc, #20]	; (800aed8 <CDC_Init_FS+0x24>)
 800aec4:	4803      	ldr	r0, [pc, #12]	; (800aed4 <CDC_Init_FS+0x20>)
 800aec6:	f7fe febe 	bl	8009c46 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aeca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aecc:	4618      	mov	r0, r3
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	200009c8 	.word	0x200009c8
 800aed4:	20000304 	.word	0x20000304
 800aed8:	200005c8 	.word	0x200005c8

0800aedc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aedc:	b480      	push	{r7}
 800aede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aee0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bc80      	pop	{r7}
 800aee8:	4770      	bx	lr
	...

0800aeec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	4603      	mov	r3, r0
 800aef4:	6039      	str	r1, [r7, #0]
 800aef6:	71fb      	strb	r3, [r7, #7]
 800aef8:	4613      	mov	r3, r2
 800aefa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aefc:	79fb      	ldrb	r3, [r7, #7]
 800aefe:	2b23      	cmp	r3, #35	; 0x23
 800af00:	d84a      	bhi.n	800af98 <CDC_Control_FS+0xac>
 800af02:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <CDC_Control_FS+0x1c>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af99 	.word	0x0800af99
 800af0c:	0800af99 	.word	0x0800af99
 800af10:	0800af99 	.word	0x0800af99
 800af14:	0800af99 	.word	0x0800af99
 800af18:	0800af99 	.word	0x0800af99
 800af1c:	0800af99 	.word	0x0800af99
 800af20:	0800af99 	.word	0x0800af99
 800af24:	0800af99 	.word	0x0800af99
 800af28:	0800af99 	.word	0x0800af99
 800af2c:	0800af99 	.word	0x0800af99
 800af30:	0800af99 	.word	0x0800af99
 800af34:	0800af99 	.word	0x0800af99
 800af38:	0800af99 	.word	0x0800af99
 800af3c:	0800af99 	.word	0x0800af99
 800af40:	0800af99 	.word	0x0800af99
 800af44:	0800af99 	.word	0x0800af99
 800af48:	0800af99 	.word	0x0800af99
 800af4c:	0800af99 	.word	0x0800af99
 800af50:	0800af99 	.word	0x0800af99
 800af54:	0800af99 	.word	0x0800af99
 800af58:	0800af99 	.word	0x0800af99
 800af5c:	0800af99 	.word	0x0800af99
 800af60:	0800af99 	.word	0x0800af99
 800af64:	0800af99 	.word	0x0800af99
 800af68:	0800af99 	.word	0x0800af99
 800af6c:	0800af99 	.word	0x0800af99
 800af70:	0800af99 	.word	0x0800af99
 800af74:	0800af99 	.word	0x0800af99
 800af78:	0800af99 	.word	0x0800af99
 800af7c:	0800af99 	.word	0x0800af99
 800af80:	0800af99 	.word	0x0800af99
 800af84:	0800af99 	.word	0x0800af99
 800af88:	0800af99 	.word	0x0800af99
 800af8c:	0800af99 	.word	0x0800af99
 800af90:	0800af99 	.word	0x0800af99
 800af94:	0800af99 	.word	0x0800af99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800af98:	bf00      	nop
  }

  return (USBD_OK);
 800af9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bc80      	pop	{r7}
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop

0800afa8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; ++i)
 800afb2:	2300      	movs	r3, #0
 800afb4:	60fb      	str	r3, [r7, #12]
 800afb6:	e00b      	b.n	800afd0 <CDC_Receive_FS+0x28>
  {
	  Buffer_Write(FIFO_buf, Buf[i]);
 800afb8:	4b11      	ldr	r3, [pc, #68]	; (800b000 <CDC_Receive_FS+0x58>)
 800afba:	6818      	ldr	r0, [r3, #0]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	4413      	add	r3, r2
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	4619      	mov	r1, r3
 800afc6:	f7f5 fdbb 	bl	8000b40 <Buffer_Write>
  for (int i = 0; i < *Len; ++i)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3301      	adds	r3, #1
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d8ee      	bhi.n	800afb8 <CDC_Receive_FS+0x10>
  }
  memset(Buf, 0, *Len);
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	461a      	mov	r2, r3
 800afe0:	2100      	movs	r1, #0
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fe5e 	bl	800bca4 <memset>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800afe8:	6879      	ldr	r1, [r7, #4]
 800afea:	4806      	ldr	r0, [pc, #24]	; (800b004 <CDC_Receive_FS+0x5c>)
 800afec:	f7fe fe2b 	bl	8009c46 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aff0:	4804      	ldr	r0, [pc, #16]	; (800b004 <CDC_Receive_FS+0x5c>)
 800aff2:	f7fe fe6a 	bl	8009cca <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aff6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	2000029c 	.word	0x2000029c
 800b004:	20000304 	.word	0x20000304

0800b008 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b018:	4b0d      	ldr	r3, [pc, #52]	; (800b050 <CDC_Transmit_FS+0x48>)
 800b01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b01e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e00b      	b.n	800b046 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b02e:	887b      	ldrh	r3, [r7, #2]
 800b030:	461a      	mov	r2, r3
 800b032:	6879      	ldr	r1, [r7, #4]
 800b034:	4806      	ldr	r0, [pc, #24]	; (800b050 <CDC_Transmit_FS+0x48>)
 800b036:	f7fe fded 	bl	8009c14 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b03a:	4805      	ldr	r0, [pc, #20]	; (800b050 <CDC_Transmit_FS+0x48>)
 800b03c:	f7fe fe16 	bl	8009c6c <USBD_CDC_TransmitPacket>
 800b040:	4603      	mov	r3, r0
 800b042:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b044:	7bfb      	ldrb	r3, [r7, #15]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	20000304 	.word	0x20000304

0800b054 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	6039      	str	r1, [r7, #0]
 800b05e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2212      	movs	r2, #18
 800b064:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b066:	4b03      	ldr	r3, [pc, #12]	; (800b074 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b068:	4618      	mov	r0, r3
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bc80      	pop	{r7}
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	20000148 	.word	0x20000148

0800b078 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	4603      	mov	r3, r0
 800b080:	6039      	str	r1, [r7, #0]
 800b082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	2204      	movs	r2, #4
 800b088:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b08a:	4b03      	ldr	r3, [pc, #12]	; (800b098 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	bc80      	pop	{r7}
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	2000015c 	.word	0x2000015c

0800b09c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	6039      	str	r1, [r7, #0]
 800b0a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0a8:	79fb      	ldrb	r3, [r7, #7]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d105      	bne.n	800b0ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0ae:	683a      	ldr	r2, [r7, #0]
 800b0b0:	4907      	ldr	r1, [pc, #28]	; (800b0d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b0b2:	4808      	ldr	r0, [pc, #32]	; (800b0d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b0b4:	f7ff fdf0 	bl	800ac98 <USBD_GetString>
 800b0b8:	e004      	b.n	800b0c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0ba:	683a      	ldr	r2, [r7, #0]
 800b0bc:	4904      	ldr	r1, [pc, #16]	; (800b0d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b0be:	4805      	ldr	r0, [pc, #20]	; (800b0d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b0c0:	f7ff fdea 	bl	800ac98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0c4:	4b02      	ldr	r3, [pc, #8]	; (800b0d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000dc8 	.word	0x20000dc8
 800b0d4:	0800be40 	.word	0x0800be40

0800b0d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	4603      	mov	r3, r0
 800b0e0:	6039      	str	r1, [r7, #0]
 800b0e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	4904      	ldr	r1, [pc, #16]	; (800b0f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b0e8:	4804      	ldr	r0, [pc, #16]	; (800b0fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b0ea:	f7ff fdd5 	bl	800ac98 <USBD_GetString>
  return USBD_StrDesc;
 800b0ee:	4b02      	ldr	r3, [pc, #8]	; (800b0f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	20000dc8 	.word	0x20000dc8
 800b0fc:	0800be58 	.word	0x0800be58

0800b100 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	6039      	str	r1, [r7, #0]
 800b10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	221a      	movs	r2, #26
 800b110:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b112:	f000 f843 	bl	800b19c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b116:	4b02      	ldr	r3, [pc, #8]	; (800b120 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	20000160 	.word	0x20000160

0800b124 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	6039      	str	r1, [r7, #0]
 800b12e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b130:	79fb      	ldrb	r3, [r7, #7]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d105      	bne.n	800b142 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	4907      	ldr	r1, [pc, #28]	; (800b158 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b13a:	4808      	ldr	r0, [pc, #32]	; (800b15c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b13c:	f7ff fdac 	bl	800ac98 <USBD_GetString>
 800b140:	e004      	b.n	800b14c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	4904      	ldr	r1, [pc, #16]	; (800b158 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b146:	4805      	ldr	r0, [pc, #20]	; (800b15c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b148:	f7ff fda6 	bl	800ac98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b14c:	4b02      	ldr	r3, [pc, #8]	; (800b158 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20000dc8 	.word	0x20000dc8
 800b15c:	0800be6c 	.word	0x0800be6c

0800b160 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	4603      	mov	r3, r0
 800b168:	6039      	str	r1, [r7, #0]
 800b16a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d105      	bne.n	800b17e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	4907      	ldr	r1, [pc, #28]	; (800b194 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b176:	4808      	ldr	r0, [pc, #32]	; (800b198 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b178:	f7ff fd8e 	bl	800ac98 <USBD_GetString>
 800b17c:	e004      	b.n	800b188 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b17e:	683a      	ldr	r2, [r7, #0]
 800b180:	4904      	ldr	r1, [pc, #16]	; (800b194 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b182:	4805      	ldr	r0, [pc, #20]	; (800b198 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b184:	f7ff fd88 	bl	800ac98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b188:	4b02      	ldr	r3, [pc, #8]	; (800b194 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000dc8 	.word	0x20000dc8
 800b198:	0800be78 	.word	0x0800be78

0800b19c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1a2:	4b0f      	ldr	r3, [pc, #60]	; (800b1e0 <Get_SerialNum+0x44>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b1a8:	4b0e      	ldr	r3, [pc, #56]	; (800b1e4 <Get_SerialNum+0x48>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b1ae:	4b0e      	ldr	r3, [pc, #56]	; (800b1e8 <Get_SerialNum+0x4c>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d009      	beq.n	800b1d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b1c2:	2208      	movs	r2, #8
 800b1c4:	4909      	ldr	r1, [pc, #36]	; (800b1ec <Get_SerialNum+0x50>)
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f000 f814 	bl	800b1f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b1cc:	2204      	movs	r2, #4
 800b1ce:	4908      	ldr	r1, [pc, #32]	; (800b1f0 <Get_SerialNum+0x54>)
 800b1d0:	68b8      	ldr	r0, [r7, #8]
 800b1d2:	f000 f80f 	bl	800b1f4 <IntToUnicode>
  }
}
 800b1d6:	bf00      	nop
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	1ffff7e8 	.word	0x1ffff7e8
 800b1e4:	1ffff7ec 	.word	0x1ffff7ec
 800b1e8:	1ffff7f0 	.word	0x1ffff7f0
 800b1ec:	20000162 	.word	0x20000162
 800b1f0:	20000172 	.word	0x20000172

0800b1f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	4613      	mov	r3, r2
 800b200:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b206:	2300      	movs	r3, #0
 800b208:	75fb      	strb	r3, [r7, #23]
 800b20a:	e027      	b.n	800b25c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	0f1b      	lsrs	r3, r3, #28
 800b210:	2b09      	cmp	r3, #9
 800b212:	d80b      	bhi.n	800b22c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	0f1b      	lsrs	r3, r3, #28
 800b218:	b2da      	uxtb	r2, r3
 800b21a:	7dfb      	ldrb	r3, [r7, #23]
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	4619      	mov	r1, r3
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	440b      	add	r3, r1
 800b224:	3230      	adds	r2, #48	; 0x30
 800b226:	b2d2      	uxtb	r2, r2
 800b228:	701a      	strb	r2, [r3, #0]
 800b22a:	e00a      	b.n	800b242 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	0f1b      	lsrs	r3, r3, #28
 800b230:	b2da      	uxtb	r2, r3
 800b232:	7dfb      	ldrb	r3, [r7, #23]
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	4619      	mov	r1, r3
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	440b      	add	r3, r1
 800b23c:	3237      	adds	r2, #55	; 0x37
 800b23e:	b2d2      	uxtb	r2, r2
 800b240:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	011b      	lsls	r3, r3, #4
 800b246:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	005b      	lsls	r3, r3, #1
 800b24c:	3301      	adds	r3, #1
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	4413      	add	r3, r2
 800b252:	2200      	movs	r2, #0
 800b254:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b256:	7dfb      	ldrb	r3, [r7, #23]
 800b258:	3301      	adds	r3, #1
 800b25a:	75fb      	strb	r3, [r7, #23]
 800b25c:	7dfa      	ldrb	r2, [r7, #23]
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	429a      	cmp	r2, r3
 800b262:	d3d3      	bcc.n	800b20c <IntToUnicode+0x18>
  }
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop
 800b268:	371c      	adds	r7, #28
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bc80      	pop	{r7}
 800b26e:	4770      	bx	lr

0800b270 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a0d      	ldr	r2, [pc, #52]	; (800b2b4 <HAL_PCD_MspInit+0x44>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d113      	bne.n	800b2aa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b282:	4b0d      	ldr	r3, [pc, #52]	; (800b2b8 <HAL_PCD_MspInit+0x48>)
 800b284:	69db      	ldr	r3, [r3, #28]
 800b286:	4a0c      	ldr	r2, [pc, #48]	; (800b2b8 <HAL_PCD_MspInit+0x48>)
 800b288:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b28c:	61d3      	str	r3, [r2, #28]
 800b28e:	4b0a      	ldr	r3, [pc, #40]	; (800b2b8 <HAL_PCD_MspInit+0x48>)
 800b290:	69db      	ldr	r3, [r3, #28]
 800b292:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b296:	60fb      	str	r3, [r7, #12]
 800b298:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b29a:	2200      	movs	r2, #0
 800b29c:	2100      	movs	r1, #0
 800b29e:	2014      	movs	r0, #20
 800b2a0:	f7f6 f977 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b2a4:	2014      	movs	r0, #20
 800b2a6:	f7f6 f990 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b2aa:	bf00      	nop
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	40005c00 	.word	0x40005c00
 800b2b8:	40021000 	.word	0x40021000

0800b2bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	4610      	mov	r0, r2
 800b2d4:	f7fe fdaf 	bl	8009e36 <USBD_LL_SetupStage>
}
 800b2d8:	bf00      	nop
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b2f2:	78fa      	ldrb	r2, [r7, #3]
 800b2f4:	6879      	ldr	r1, [r7, #4]
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4413      	add	r3, r2
 800b2fc:	00db      	lsls	r3, r3, #3
 800b2fe:	440b      	add	r3, r1
 800b300:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	78fb      	ldrb	r3, [r7, #3]
 800b308:	4619      	mov	r1, r3
 800b30a:	f7fe fde1 	bl	8009ed0 <USBD_LL_DataOutStage>
}
 800b30e:	bf00      	nop
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b082      	sub	sp, #8
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	460b      	mov	r3, r1
 800b320:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b328:	78fa      	ldrb	r2, [r7, #3]
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	4613      	mov	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4413      	add	r3, r2
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	440b      	add	r3, r1
 800b336:	333c      	adds	r3, #60	; 0x3c
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	78fb      	ldrb	r3, [r7, #3]
 800b33c:	4619      	mov	r1, r3
 800b33e:	f7fe fe38 	bl	8009fb2 <USBD_LL_DataInStage>
}
 800b342:	bf00      	nop
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b082      	sub	sp, #8
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fe ff48 	bl	800a1ee <USBD_LL_SOF>
}
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b36e:	2301      	movs	r3, #1
 800b370:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	2b02      	cmp	r3, #2
 800b378:	d001      	beq.n	800b37e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b37a:	f7f5 fe57 	bl	800102c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b384:	7bfa      	ldrb	r2, [r7, #15]
 800b386:	4611      	mov	r1, r2
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fe fef8 	bl	800a17e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b394:	4618      	mov	r0, r3
 800b396:	f7fe feb1 	bl	800a0fc <USBD_LL_Reset>
}
 800b39a:	bf00      	nop
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fe fef2 	bl	800a19c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d005      	beq.n	800b3cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3c0:	4b04      	ldr	r3, [pc, #16]	; (800b3d4 <HAL_PCD_SuspendCallback+0x30>)
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	4a03      	ldr	r2, [pc, #12]	; (800b3d4 <HAL_PCD_SuspendCallback+0x30>)
 800b3c6:	f043 0306 	orr.w	r3, r3, #6
 800b3ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	e000ed00 	.word	0xe000ed00

0800b3d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe feec 	bl	800a1c4 <USBD_LL_Resume>
}
 800b3ec:	bf00      	nop
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b3fc:	4a28      	ldr	r2, [pc, #160]	; (800b4a0 <USBD_LL_Init+0xac>)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a26      	ldr	r2, [pc, #152]	; (800b4a0 <USBD_LL_Init+0xac>)
 800b408:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b40c:	4b24      	ldr	r3, [pc, #144]	; (800b4a0 <USBD_LL_Init+0xac>)
 800b40e:	4a25      	ldr	r2, [pc, #148]	; (800b4a4 <USBD_LL_Init+0xb0>)
 800b410:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b412:	4b23      	ldr	r3, [pc, #140]	; (800b4a0 <USBD_LL_Init+0xac>)
 800b414:	2208      	movs	r2, #8
 800b416:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b418:	4b21      	ldr	r3, [pc, #132]	; (800b4a0 <USBD_LL_Init+0xac>)
 800b41a:	2202      	movs	r2, #2
 800b41c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b41e:	4b20      	ldr	r3, [pc, #128]	; (800b4a0 <USBD_LL_Init+0xac>)
 800b420:	2200      	movs	r2, #0
 800b422:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b424:	4b1e      	ldr	r3, [pc, #120]	; (800b4a0 <USBD_LL_Init+0xac>)
 800b426:	2200      	movs	r2, #0
 800b428:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b42a:	4b1d      	ldr	r3, [pc, #116]	; (800b4a0 <USBD_LL_Init+0xac>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b430:	481b      	ldr	r0, [pc, #108]	; (800b4a0 <USBD_LL_Init+0xac>)
 800b432:	f7f8 ffe9 	bl	8004408 <HAL_PCD_Init>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b43c:	f7f5 fdf6 	bl	800102c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b446:	2318      	movs	r3, #24
 800b448:	2200      	movs	r2, #0
 800b44a:	2100      	movs	r1, #0
 800b44c:	f7fa fc5d 	bl	8005d0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b456:	2358      	movs	r3, #88	; 0x58
 800b458:	2200      	movs	r2, #0
 800b45a:	2180      	movs	r1, #128	; 0x80
 800b45c:	f7fa fc55 	bl	8005d0a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b466:	23c0      	movs	r3, #192	; 0xc0
 800b468:	2200      	movs	r2, #0
 800b46a:	2181      	movs	r1, #129	; 0x81
 800b46c:	f7fa fc4d 	bl	8005d0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b476:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b47a:	2200      	movs	r2, #0
 800b47c:	2101      	movs	r1, #1
 800b47e:	f7fa fc44 	bl	8005d0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b48c:	2200      	movs	r2, #0
 800b48e:	2182      	movs	r1, #130	; 0x82
 800b490:	f7fa fc3b 	bl	8005d0a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	20000fc8 	.word	0x20000fc8
 800b4a4:	40005c00 	.word	0x40005c00

0800b4a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7f9 f8ad 	bl	800461e <HAL_PCD_Start>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f000 f94e 	bl	800b76c <USBD_Get_USB_Status>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b084      	sub	sp, #16
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	4608      	mov	r0, r1
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	70fb      	strb	r3, [r7, #3]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	70bb      	strb	r3, [r7, #2]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b506:	78bb      	ldrb	r3, [r7, #2]
 800b508:	883a      	ldrh	r2, [r7, #0]
 800b50a:	78f9      	ldrb	r1, [r7, #3]
 800b50c:	f7f9 fa25 	bl	800495a <HAL_PCD_EP_Open>
 800b510:	4603      	mov	r3, r0
 800b512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b514:	7bfb      	ldrb	r3, [r7, #15]
 800b516:	4618      	mov	r0, r3
 800b518:	f000 f928 	bl	800b76c <USBD_Get_USB_Status>
 800b51c:	4603      	mov	r3, r0
 800b51e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b520:	7bbb      	ldrb	r3, [r7, #14]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	460b      	mov	r3, r1
 800b534:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b544:	78fa      	ldrb	r2, [r7, #3]
 800b546:	4611      	mov	r1, r2
 800b548:	4618      	mov	r0, r3
 800b54a:	f7f9 fa6c 	bl	8004a26 <HAL_PCD_EP_Close>
 800b54e:	4603      	mov	r3, r0
 800b550:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b552:	7bfb      	ldrb	r3, [r7, #15]
 800b554:	4618      	mov	r0, r3
 800b556:	f000 f909 	bl	800b76c <USBD_Get_USB_Status>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b55e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b574:	2300      	movs	r3, #0
 800b576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b582:	78fa      	ldrb	r2, [r7, #3]
 800b584:	4611      	mov	r1, r2
 800b586:	4618      	mov	r0, r3
 800b588:	f7f9 fb2c 	bl	8004be4 <HAL_PCD_EP_SetStall>
 800b58c:	4603      	mov	r3, r0
 800b58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b590:	7bfb      	ldrb	r3, [r7, #15]
 800b592:	4618      	mov	r0, r3
 800b594:	f000 f8ea 	bl	800b76c <USBD_Get_USB_Status>
 800b598:	4603      	mov	r3, r0
 800b59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5c0:	78fa      	ldrb	r2, [r7, #3]
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7f9 fb6d 	bl	8004ca4 <HAL_PCD_EP_ClrStall>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f000 f8cb 	bl	800b76c <USBD_Get_USB_Status>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b5f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	da0c      	bge.n	800b61a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b606:	68f9      	ldr	r1, [r7, #12]
 800b608:	1c5a      	adds	r2, r3, #1
 800b60a:	4613      	mov	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	00db      	lsls	r3, r3, #3
 800b612:	440b      	add	r3, r1
 800b614:	3302      	adds	r3, #2
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	e00b      	b.n	800b632 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b61a:	78fb      	ldrb	r3, [r7, #3]
 800b61c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b620:	68f9      	ldr	r1, [r7, #12]
 800b622:	4613      	mov	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	00db      	lsls	r3, r3, #3
 800b62a:	440b      	add	r3, r1
 800b62c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b630:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b632:	4618      	mov	r0, r3
 800b634:	3714      	adds	r7, #20
 800b636:	46bd      	mov	sp, r7
 800b638:	bc80      	pop	{r7}
 800b63a:	4770      	bx	lr

0800b63c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b64c:	2300      	movs	r3, #0
 800b64e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b656:	78fa      	ldrb	r2, [r7, #3]
 800b658:	4611      	mov	r1, r2
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7f9 f958 	bl	8004910 <HAL_PCD_SetAddress>
 800b660:	4603      	mov	r3, r0
 800b662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b664:	7bfb      	ldrb	r3, [r7, #15]
 800b666:	4618      	mov	r0, r3
 800b668:	f000 f880 	bl	800b76c <USBD_Get_USB_Status>
 800b66c:	4603      	mov	r3, r0
 800b66e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b670:	7bbb      	ldrb	r3, [r7, #14]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b086      	sub	sp, #24
 800b67e:	af00      	add	r7, sp, #0
 800b680:	60f8      	str	r0, [r7, #12]
 800b682:	607a      	str	r2, [r7, #4]
 800b684:	461a      	mov	r2, r3
 800b686:	460b      	mov	r3, r1
 800b688:	72fb      	strb	r3, [r7, #11]
 800b68a:	4613      	mov	r3, r2
 800b68c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b68e:	2300      	movs	r3, #0
 800b690:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b69c:	893b      	ldrh	r3, [r7, #8]
 800b69e:	7af9      	ldrb	r1, [r7, #11]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	f7f9 fa5c 	bl	8004b5e <HAL_PCD_EP_Transmit>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f000 f85d 	bl	800b76c <USBD_Get_USB_Status>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	607a      	str	r2, [r7, #4]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	72fb      	strb	r3, [r7, #11]
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6e2:	893b      	ldrh	r3, [r7, #8]
 800b6e4:	7af9      	ldrb	r1, [r7, #11]
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	f7f9 f9e5 	bl	8004ab6 <HAL_PCD_EP_Receive>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6f0:	7dfb      	ldrb	r3, [r7, #23]
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f000 f83a 	bl	800b76c <USBD_Get_USB_Status>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b706:	b580      	push	{r7, lr}
 800b708:	b082      	sub	sp, #8
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	460b      	mov	r3, r1
 800b710:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b718:	78fa      	ldrb	r2, [r7, #3]
 800b71a:	4611      	mov	r1, r2
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7f9 fa07 	bl	8004b30 <HAL_PCD_EP_GetRxCount>
 800b722:	4603      	mov	r3, r0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b734:	4b02      	ldr	r3, [pc, #8]	; (800b740 <USBD_static_malloc+0x14>)
}
 800b736:	4618      	mov	r0, r3
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bc80      	pop	{r7}
 800b73e:	4770      	bx	lr
 800b740:	200012b4 	.word	0x200012b4

0800b744 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]

}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	bc80      	pop	{r7}
 800b754:	4770      	bx	lr

0800b756 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	460b      	mov	r3, r1
 800b760:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b762:	bf00      	nop
 800b764:	370c      	adds	r7, #12
 800b766:	46bd      	mov	sp, r7
 800b768:	bc80      	pop	{r7}
 800b76a:	4770      	bx	lr

0800b76c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	4603      	mov	r3, r0
 800b774:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b77a:	79fb      	ldrb	r3, [r7, #7]
 800b77c:	2b03      	cmp	r3, #3
 800b77e:	d817      	bhi.n	800b7b0 <USBD_Get_USB_Status+0x44>
 800b780:	a201      	add	r2, pc, #4	; (adr r2, 800b788 <USBD_Get_USB_Status+0x1c>)
 800b782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b786:	bf00      	nop
 800b788:	0800b799 	.word	0x0800b799
 800b78c:	0800b79f 	.word	0x0800b79f
 800b790:	0800b7a5 	.word	0x0800b7a5
 800b794:	0800b7ab 	.word	0x0800b7ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	73fb      	strb	r3, [r7, #15]
    break;
 800b79c:	e00b      	b.n	800b7b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b79e:	2302      	movs	r3, #2
 800b7a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b7a2:	e008      	b.n	800b7b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7a8:	e005      	b.n	800b7b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b7aa:	2302      	movs	r3, #2
 800b7ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b7ae:	e002      	b.n	800b7b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b7b4:	bf00      	nop
  }
  return usb_status;
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bc80      	pop	{r7}
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop

0800b7c4 <ob1203_I2C_Write>:
{
	HAL_GPIO_WritePin(ob1203_RST_GPIO_PORT, ob1203_RST_PIN, RESET);
}

HAL_StatusTypeDef ob1203_I2C_Write(uint8_t * data, uint8_t count)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af02      	add	r7, sp, #8
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Master_Transmit(&cur_i2c, ob1203_address << 1, data, count, 10);
 800b7d0:	78fb      	ldrb	r3, [r7, #3]
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	220a      	movs	r2, #10
 800b7d6:	9200      	str	r2, [sp, #0]
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	21a6      	movs	r1, #166	; 0xa6
 800b7dc:	4803      	ldr	r0, [pc, #12]	; (800b7ec <ob1203_I2C_Write+0x28>)
 800b7de:	f7f6 fa93 	bl	8001d08 <HAL_I2C_Master_Transmit>
 800b7e2:	4603      	mov	r3, r0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3708      	adds	r7, #8
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	200002a4 	.word	0x200002a4

0800b7f0 <ob1203_I2C_Read>:

HAL_StatusTypeDef ob1203_I2C_Read(uint8_t * reg, uint8_t * buffer, uint8_t cmd_size, uint8_t count)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b088      	sub	sp, #32
 800b7f4:	af04      	add	r7, sp, #16
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	460b      	mov	r3, r1
 800b800:	71fb      	strb	r3, [r7, #7]
 800b802:	4613      	mov	r3, r2
 800b804:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Read(&cur_i2c, ob1203_address << 1, *reg, cmd_size, buffer, count, 10);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	79fb      	ldrb	r3, [r7, #7]
 800b80e:	b299      	uxth	r1, r3
 800b810:	79bb      	ldrb	r3, [r7, #6]
 800b812:	b29b      	uxth	r3, r3
 800b814:	200a      	movs	r0, #10
 800b816:	9002      	str	r0, [sp, #8]
 800b818:	9301      	str	r3, [sp, #4]
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	460b      	mov	r3, r1
 800b820:	21a6      	movs	r1, #166	; 0xa6
 800b822:	4804      	ldr	r0, [pc, #16]	; (800b834 <ob1203_I2C_Read+0x44>)
 800b824:	f7f6 fb6e 	bl	8001f04 <HAL_I2C_Mem_Read>
 800b828:	4603      	mov	r3, r0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	200002a4 	.word	0x200002a4

0800b838 <ob1203_Delay_ms>:

void ob1203_Delay_ms(uint32_t ms)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7f5 fdab 	bl	800139c <HAL_Delay>
}
 800b846:	bf00      	nop
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <ob1203_send_results>:

void ob1203_send_results(uint32_t ppg)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b084      	sub	sp, #16
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
	unsigned char* send_buf;
	unsigned char channel_num;
	send_buf = &ppg;
 800b856:	1d3b      	adds	r3, r7, #4
 800b858:	60fb      	str	r3, [r7, #12]
	channel_num = 1;
 800b85a:	2301      	movs	r3, #1
 800b85c:	72fb      	strb	r3, [r7, #11]
	CDC_Transmit_FS((unsigned char*) &channel_num, 1);
 800b85e:	f107 030b 	add.w	r3, r7, #11
 800b862:	2101      	movs	r1, #1
 800b864:	4618      	mov	r0, r3
 800b866:	f7ff fbcf 	bl	800b008 <CDC_Transmit_FS>
	CDC_Transmit_FS((unsigned char*) send_buf, 4);
 800b86a:	2104      	movs	r1, #4
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7ff fbcb 	bl	800b008 <CDC_Transmit_FS>
}
 800b872:	bf00      	nop
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <ob1203_send_preambula>:
	sprintf(send_buf, "No result\n");
	CDC_Transmit_FS((unsigned char*) send_buf, strlen(send_buf));
}

void ob1203_send_preambula()
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b082      	sub	sp, #8
 800b87e:	af00      	add	r7, sp, #0
	char preambula[4];
	preambula[0] = 0xAA;
 800b880:	23aa      	movs	r3, #170	; 0xaa
 800b882:	713b      	strb	r3, [r7, #4]
	preambula[1] = 0x55;
 800b884:	2355      	movs	r3, #85	; 0x55
 800b886:	717b      	strb	r3, [r7, #5]
	preambula[2] = 0xAA;
 800b888:	23aa      	movs	r3, #170	; 0xaa
 800b88a:	71bb      	strb	r3, [r7, #6]
	preambula[3] = 0x55;
 800b88c:	2355      	movs	r3, #85	; 0x55
 800b88e:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((unsigned char*) preambula, 4);
 800b890:	1d3b      	adds	r3, r7, #4
 800b892:	2104      	movs	r1, #4
 800b894:	4618      	mov	r0, r3
 800b896:	f7ff fbb7 	bl	800b008 <CDC_Transmit_FS>
}
 800b89a:	bf00      	nop
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <heartrate11_default_cfg>:
    return I2C_MASTER_SUCCESS;
}
#endif

err_t heartrate11_default_cfg(heartrate11_t *ctx)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
    err_t error_flag = HEARTRATE11_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	73fb      	strb	r3, [r7, #15]
    error_flag |= heartrate11_reset_device(ctx);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f8e7 	bl	800ba84 <heartrate11_reset_device>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	73fb      	strb	r3, [r7, #15]
#if defined(__MIKROC_PRO_FOR_ARM__)
    Delay_100ms();
#endif
#if defined(HAL_STM32F103)
    ob1203_Delay_ms(100);
 800b8c0:	2064      	movs	r0, #100	; 0x64
 800b8c2:	f7ff ffb9 	bl	800b838 <ob1203_Delay_ms>
#endif
    error_flag |= heartrate11_write_register(ctx, HEARTRATE11_REG_MAIN_CTRL_1, HEARTRATE11_PS_SAI_OFF |
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	2116      	movs	r1, #22
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f8c7 	bl	800ba5e <heartrate11_write_register>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	73fb      	strb	r3, [r7, #15]
                                                                                 HEARTRATE11_HR_MODE | 
                                                                                 HEARTRATE11_PPG_PS_ON);
    error_flag |= heartrate11_write_register(ctx, HEARTRATE11_REG_INT_CFG_1, HEARTRATE11_PPG_INT_ON);
 800b8da:	2210      	movs	r2, #16
 800b8dc:	212c      	movs	r1, #44	; 0x2c
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f8bd 	bl	800ba5e <heartrate11_write_register>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	73fb      	strb	r3, [r7, #15]
    error_flag |= heartrate11_set_led_current(ctx, HEARTRATE11_IR_LED, HEARTRATE11_IR_LED_DEFAULT_CURRENT);
 800b8ee:	4a16      	ldr	r2, [pc, #88]	; (800b948 <heartrate11_default_cfg+0xa4>)
 800b8f0:	2101      	movs	r1, #1
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f8d4 	bl	800baa0 <heartrate11_set_led_current>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	73fb      	strb	r3, [r7, #15]
    error_flag |= heartrate11_write_register(ctx, HEARTRATE11_REG_PPG_PS_GAIN, HEARTRATE11_PPG_PS_GAIN_1 |
 800b902:	2209      	movs	r2, #9
 800b904:	212e      	movs	r1, #46	; 0x2e
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f8a9 	bl	800ba5e <heartrate11_write_register>
 800b90c:	4603      	mov	r3, r0
 800b90e:	461a      	mov	r2, r3
 800b910:	7bfb      	ldrb	r3, [r7, #15]
 800b912:	4313      	orrs	r3, r2
 800b914:	73fb      	strb	r3, [r7, #15]
                                                                                 HEARTRATE11_PPG_PS_GAIN_RESERVED);
    error_flag |= heartrate11_write_register(ctx, HEARTRATE11_REG_PPG_AVG, HEARTRATE11_PPG_AVG_32 |
 800b916:	225a      	movs	r2, #90	; 0x5a
 800b918:	2135      	movs	r1, #53	; 0x35
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 f89f 	bl	800ba5e <heartrate11_write_register>
 800b920:	4603      	mov	r3, r0
 800b922:	461a      	mov	r2, r3
 800b924:	7bfb      	ldrb	r3, [r7, #15]
 800b926:	4313      	orrs	r3, r2
 800b928:	73fb      	strb	r3, [r7, #15]
                                                                             HEARTRATE11_PPG_AVG_RESERVED);
    error_flag |= heartrate11_write_register(ctx, HEARTRATE11_REG_PPG_PWIDTH_PERIOD, HEARTRATE11_PPG_PWIDTH_247US |
 800b92a:	2242      	movs	r2, #66	; 0x42
 800b92c:	2136      	movs	r1, #54	; 0x36
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f895 	bl	800ba5e <heartrate11_write_register>
 800b934:	4603      	mov	r3, r0
 800b936:	461a      	mov	r2, r3
 800b938:	7bfb      	ldrb	r3, [r7, #15]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	73fb      	strb	r3, [r7, #15]
                                                                                       HEARTRATE11_PPG_RATE_1MS);
    return error_flag;
 800b93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	42480000 	.word	0x42480000

0800b94c <heartrate11_generic_write>:

err_t heartrate11_generic_write(heartrate11_t *ctx, uint8_t reg, uint8_t *data_in, uint8_t len)
{
 800b94c:	b590      	push	{r4, r7, lr}
 800b94e:	b0c7      	sub	sp, #284	; 0x11c
 800b950:	af00      	add	r7, sp, #0
 800b952:	f507 748c 	add.w	r4, r7, #280	; 0x118
 800b956:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800b95a:	6020      	str	r0, [r4, #0]
 800b95c:	4608      	mov	r0, r1
 800b95e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800b962:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800b966:	600a      	str	r2, [r1, #0]
 800b968:	4619      	mov	r1, r3
 800b96a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b96e:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800b972:	4602      	mov	r2, r0
 800b974:	701a      	strb	r2, [r3, #0]
 800b976:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b97a:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800b97e:	460a      	mov	r2, r1
 800b980:	701a      	strb	r2, [r3, #0]
    uint8_t data_buf[256] = { 0 };
 800b982:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b98a:	2200      	movs	r2, #0
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	3304      	adds	r3, #4
 800b990:	22fc      	movs	r2, #252	; 0xfc
 800b992:	2100      	movs	r1, #0
 800b994:	4618      	mov	r0, r3
 800b996:	f000 f985 	bl	800bca4 <memset>
    data_buf[0] = reg;
 800b99a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b99e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9a2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800b9a6:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 800b9aa:	7812      	ldrb	r2, [r2, #0]
 800b9ac:	701a      	strb	r2, [r3, #0]
    for(uint8_t cnt = 0; cnt < len; cnt++)
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800b9b4:	e015      	b.n	800b9e2 <heartrate11_generic_write+0x96>
    {
        data_buf[cnt + 1] = data_in[cnt];
 800b9b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9ba:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800b9be:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800b9c2:	6812      	ldr	r2, [r2, #0]
 800b9c4:	441a      	add	r2, r3
 800b9c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	7811      	ldrb	r1, [r2, #0]
 800b9ce:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800b9d2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800b9d6:	54d1      	strb	r1, [r2, r3]
    for(uint8_t cnt = 0; cnt < len; cnt++)
 800b9d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9dc:	3301      	adds	r3, #1
 800b9de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800b9e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b9e6:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800b9ea:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d3e0      	bcc.n	800b9b6 <heartrate11_generic_write+0x6a>
    }
#if defined(__MIKROC_PRO_FOR_ARM__)
    return i2c_master_write(&ctx->i2c, data_buf, len + 1);
#endif
#if defined(HAL_STM32F103)
    if(HEARTRATE11_OK == ob1203_I2C_Write(data_buf, len + 1))
 800b9f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b9f8:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	f107 0314 	add.w	r3, r7, #20
 800ba06:	4611      	mov	r1, r2
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7ff fedb 	bl	800b7c4 <ob1203_I2C_Write>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d101      	bne.n	800ba18 <heartrate11_generic_write+0xcc>
    	return HEARTRATE11_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	e000      	b.n	800ba1a <heartrate11_generic_write+0xce>
#endif
    return HEARTRATE11_ERROR;
 800ba18:	23ff      	movs	r3, #255	; 0xff
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd90      	pop	{r4, r7, pc}

0800ba24 <heartrate11_generic_read>:

err_t heartrate11_generic_read(heartrate11_t *ctx, uint8_t reg, uint8_t *data_out, uint8_t len)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	607a      	str	r2, [r7, #4]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	460b      	mov	r3, r1
 800ba32:	72fb      	strb	r3, [r7, #11]
 800ba34:	4613      	mov	r3, r2
 800ba36:	72bb      	strb	r3, [r7, #10]
#if defined(__MIKROC_PRO_FOR_ARM__)
    return i2c_master_write_then_read(&ctx->i2c, &reg, 1, data_out, len);
#endif
#if defined(HAL_STM32F103)
    if(HEARTRATE11_OK == ob1203_I2C_Read(&reg, data_out, 1, len + 1))
 800ba38:	7abb      	ldrb	r3, [r7, #10]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	f107 000b 	add.w	r0, r7, #11
 800ba42:	2201      	movs	r2, #1
 800ba44:	6879      	ldr	r1, [r7, #4]
 800ba46:	f7ff fed3 	bl	800b7f0 <ob1203_I2C_Read>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <heartrate11_generic_read+0x30>
    	return HEARTRATE11_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	e000      	b.n	800ba56 <heartrate11_generic_read+0x32>
#endif
    return HEARTRATE11_ERROR;
 800ba54:	23ff      	movs	r3, #255	; 0xff
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <heartrate11_write_register>:

err_t heartrate11_write_register(heartrate11_t *ctx, uint8_t reg, uint8_t data_in)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	460b      	mov	r3, r1
 800ba68:	70fb      	strb	r3, [r7, #3]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	70bb      	strb	r3, [r7, #2]
    return heartrate11_generic_write(ctx, reg, &data_in, 1);
 800ba6e:	1cba      	adds	r2, r7, #2
 800ba70:	78f9      	ldrb	r1, [r7, #3]
 800ba72:	2301      	movs	r3, #1
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7ff ff69 	bl	800b94c <heartrate11_generic_write>
 800ba7a:	4603      	mov	r3, r0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <heartrate11_reset_device>:
    return digital_in_read(&ctx->int_pin);
}
#endif

err_t heartrate11_reset_device(heartrate11_t *ctx)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
    return heartrate11_write_register(ctx, HEARTRATE11_REG_MAIN_CTRL_0, HEARTRATE11_SW_RESET);
 800ba8c:	2280      	movs	r2, #128	; 0x80
 800ba8e:	2115      	movs	r1, #21
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff ffe4 	bl	800ba5e <heartrate11_write_register>
 800ba96:	4603      	mov	r3, r0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <heartrate11_set_led_current>:

err_t heartrate11_set_led_current(heartrate11_t *ctx, uint8_t led, float current)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	460b      	mov	r3, r1
 800baaa:	607a      	str	r2, [r7, #4]
 800baac:	72fb      	strb	r3, [r7, #11]
    if(((HEARTRATE11_RED_LED == led) &&(current > HEARTRATE11_RED_LED_MAX_CURRENT)) ||
 800baae:	7afb      	ldrb	r3, [r7, #11]
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	d106      	bne.n	800bac2 <heartrate11_set_led_current+0x22>
 800bab4:	4944      	ldr	r1, [pc, #272]	; (800bbc8 <heartrate11_set_led_current+0x128>)
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7f4 ffa4 	bl	8000a04 <__aeabi_fcmpgt>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d109      	bne.n	800bad6 <heartrate11_set_led_current+0x36>
 800bac2:	7afb      	ldrb	r3, [r7, #11]
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	d806      	bhi.n	800bad6 <heartrate11_set_led_current+0x36>
        (led > HEARTRATE11_RED_LED) || (current > HEARTRATE11_PS_IR_LED_MAX_CURRENT))
 800bac8:	4940      	ldr	r1, [pc, #256]	; (800bbcc <heartrate11_set_led_current+0x12c>)
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7f4 ff9a 	bl	8000a04 <__aeabi_fcmpgt>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d001      	beq.n	800bada <heartrate11_set_led_current+0x3a>
    {
        return HEARTRATE11_ERROR;
 800bad6:	23ff      	movs	r3, #255	; 0xff
 800bad8:	e069      	b.n	800bbae <heartrate11_set_led_current+0x10e>
    }
    uint16_t raw_curr;
    uint8_t reg;
    if(HEARTRATE11_RED_LED == led)
 800bada:	7afb      	ldrb	r3, [r7, #11]
 800badc:	2b02      	cmp	r3, #2
 800bade:	d128      	bne.n	800bb32 <heartrate11_set_led_current+0x92>
    {
        raw_curr =(uint16_t)((current / HEARTRATE11_RED_LED_MAX_CURRENT) * HEARTRATE11_RED_LED_CURRENT_RES +
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7f4 fc99 	bl	8000418 <__aeabi_f2d>
 800bae6:	f04f 0200 	mov.w	r2, #0
 800baea:	4b39      	ldr	r3, [pc, #228]	; (800bbd0 <heartrate11_set_led_current+0x130>)
 800baec:	f7f4 fe16 	bl	800071c <__aeabi_ddiv>
 800baf0:	4602      	mov	r2, r0
 800baf2:	460b      	mov	r3, r1
 800baf4:	4610      	mov	r0, r2
 800baf6:	4619      	mov	r1, r3
 800baf8:	a32f      	add	r3, pc, #188	; (adr r3, 800bbb8 <heartrate11_set_led_current+0x118>)
 800bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafe:	f7f4 fce3 	bl	80004c8 <__aeabi_dmul>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4610      	mov	r0, r2
 800bb08:	4619      	mov	r1, r3
 800bb0a:	f04f 0200 	mov.w	r2, #0
 800bb0e:	4b31      	ldr	r3, [pc, #196]	; (800bbd4 <heartrate11_set_led_current+0x134>)
 800bb10:	f7f4 fb24 	bl	800015c <__adddf3>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4610      	mov	r0, r2
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	f7f4 fee6 	bl	80008ec <__aeabi_d2uiz>
 800bb20:	4603      	mov	r3, r0
 800bb22:	82fb      	strh	r3, [r7, #22]
                                  HEARTRATE11_ROUND_TO_NEAREST_INT);
        raw_curr &= HEARTRATE11_RED_LED_CURRENT_RES;
 800bb24:	8afb      	ldrh	r3, [r7, #22]
 800bb26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb2a:	82fb      	strh	r3, [r7, #22]
        reg = HEARTRATE11_REG_PPG_RLED_CURR_0;
 800bb2c:	2332      	movs	r3, #50	; 0x32
 800bb2e:	757b      	strb	r3, [r7, #21]
 800bb30:	e02d      	b.n	800bb8e <heartrate11_set_led_current+0xee>
    }
    else
    {
        raw_curr =(uint16_t)((current / HEARTRATE11_PS_IR_LED_MAX_CURRENT) * HEARTRATE11_PS_IR_LED_CURRENT_RES +
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7f4 fc70 	bl	8000418 <__aeabi_f2d>
 800bb38:	f04f 0200 	mov.w	r2, #0
 800bb3c:	4b26      	ldr	r3, [pc, #152]	; (800bbd8 <heartrate11_set_led_current+0x138>)
 800bb3e:	f7f4 fded 	bl	800071c <__aeabi_ddiv>
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	4610      	mov	r0, r2
 800bb48:	4619      	mov	r1, r3
 800bb4a:	a31d      	add	r3, pc, #116	; (adr r3, 800bbc0 <heartrate11_set_led_current+0x120>)
 800bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb50:	f7f4 fcba 	bl	80004c8 <__aeabi_dmul>
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	4610      	mov	r0, r2
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	f04f 0200 	mov.w	r2, #0
 800bb60:	4b1c      	ldr	r3, [pc, #112]	; (800bbd4 <heartrate11_set_led_current+0x134>)
 800bb62:	f7f4 fafb 	bl	800015c <__adddf3>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	4610      	mov	r0, r2
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	f7f4 febd 	bl	80008ec <__aeabi_d2uiz>
 800bb72:	4603      	mov	r3, r0
 800bb74:	82fb      	strh	r3, [r7, #22]
                                  HEARTRATE11_ROUND_TO_NEAREST_INT);
        raw_curr &= HEARTRATE11_PS_IR_LED_CURRENT_RES;
 800bb76:	8afb      	ldrh	r3, [r7, #22]
 800bb78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb7c:	82fb      	strh	r3, [r7, #22]
        if(HEARTRATE11_PS_LED == led)
 800bb7e:	7afb      	ldrb	r3, [r7, #11]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d102      	bne.n	800bb8a <heartrate11_set_led_current+0xea>
        {
            reg = HEARTRATE11_REG_PS_LED_CURR_0;
 800bb84:	2317      	movs	r3, #23
 800bb86:	757b      	strb	r3, [r7, #21]
 800bb88:	e001      	b.n	800bb8e <heartrate11_set_led_current+0xee>
        }
        else
        {
            reg = HEARTRATE11_REG_PPG_IRLED_CURR_0;
 800bb8a:	2330      	movs	r3, #48	; 0x30
 800bb8c:	757b      	strb	r3, [r7, #21]
        }
    }
    uint8_t data_buf[2];
    data_buf[0] =(uint8_t)(raw_curr & 0xFF);
 800bb8e:	8afb      	ldrh	r3, [r7, #22]
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	743b      	strb	r3, [r7, #16]
    data_buf[1] =(uint8_t)((raw_curr >> 8) & 0xFF);
 800bb94:	8afb      	ldrh	r3, [r7, #22]
 800bb96:	0a1b      	lsrs	r3, r3, #8
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	747b      	strb	r3, [r7, #17]
    return heartrate11_generic_write(ctx, reg, data_buf, 2);
 800bb9e:	f107 0210 	add.w	r2, r7, #16
 800bba2:	7d79      	ldrb	r1, [r7, #21]
 800bba4:	2302      	movs	r3, #2
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f7ff fed0 	bl	800b94c <heartrate11_generic_write>
 800bbac:	4603      	mov	r3, r0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3718      	adds	r7, #24
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	00000000 	.word	0x00000000
 800bbbc:	407ff000 	.word	0x407ff000
 800bbc0:	00000000 	.word	0x00000000
 800bbc4:	408ff800 	.word	0x408ff800
 800bbc8:	42fa0000 	.word	0x42fa0000
 800bbcc:	437a0000 	.word	0x437a0000
 800bbd0:	405f4000 	.word	0x405f4000
 800bbd4:	3fe00000 	.word	0x3fe00000
 800bbd8:	406f4000 	.word	0x406f4000

0800bbdc <heartrate11_read_fifo>:
    *proximity =((uint16_t) data_buf[1] << 8) | data_buf[0];
    return error_flag;
}

err_t heartrate11_read_fifo(heartrate11_t *ctx, uint32_t *fifo_data)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
    uint8_t data_buf[3] = { 0 };
 800bbe6:	4b0e      	ldr	r3, [pc, #56]	; (800bc20 <heartrate11_read_fifo+0x44>)
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	81bb      	strh	r3, [r7, #12]
 800bbec:	2300      	movs	r3, #0
 800bbee:	73bb      	strb	r3, [r7, #14]
    err_t error_flag = heartrate11_generic_read(ctx, HEARTRATE11_REG_FIFO_DATA, data_buf, 3);
 800bbf0:	f107 020c 	add.w	r2, r7, #12
 800bbf4:	2303      	movs	r3, #3
 800bbf6:	213b      	movs	r1, #59	; 0x3b
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f7ff ff13 	bl	800ba24 <heartrate11_generic_read>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	73fb      	strb	r3, [r7, #15]
    *fifo_data =((uint32_t) data_buf[2] << 16) | ((uint16_t) data_buf[1] << 8) | data_buf[0];
 800bc02:	7bbb      	ldrb	r3, [r7, #14]
 800bc04:	041b      	lsls	r3, r3, #16
 800bc06:	7b7a      	ldrb	r2, [r7, #13]
 800bc08:	0212      	lsls	r2, r2, #8
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	7b3a      	ldrb	r2, [r7, #12]
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	601a      	str	r2, [r3, #0]
    return error_flag;
 800bc14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	0800be88 	.word	0x0800be88

0800bc24 <__errno>:
 800bc24:	4b01      	ldr	r3, [pc, #4]	; (800bc2c <__errno+0x8>)
 800bc26:	6818      	ldr	r0, [r3, #0]
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	2000017c 	.word	0x2000017c

0800bc30 <__libc_init_array>:
 800bc30:	b570      	push	{r4, r5, r6, lr}
 800bc32:	2600      	movs	r6, #0
 800bc34:	4d0c      	ldr	r5, [pc, #48]	; (800bc68 <__libc_init_array+0x38>)
 800bc36:	4c0d      	ldr	r4, [pc, #52]	; (800bc6c <__libc_init_array+0x3c>)
 800bc38:	1b64      	subs	r4, r4, r5
 800bc3a:	10a4      	asrs	r4, r4, #2
 800bc3c:	42a6      	cmp	r6, r4
 800bc3e:	d109      	bne.n	800bc54 <__libc_init_array+0x24>
 800bc40:	f000 f8ea 	bl	800be18 <_init>
 800bc44:	2600      	movs	r6, #0
 800bc46:	4d0a      	ldr	r5, [pc, #40]	; (800bc70 <__libc_init_array+0x40>)
 800bc48:	4c0a      	ldr	r4, [pc, #40]	; (800bc74 <__libc_init_array+0x44>)
 800bc4a:	1b64      	subs	r4, r4, r5
 800bc4c:	10a4      	asrs	r4, r4, #2
 800bc4e:	42a6      	cmp	r6, r4
 800bc50:	d105      	bne.n	800bc5e <__libc_init_array+0x2e>
 800bc52:	bd70      	pop	{r4, r5, r6, pc}
 800bc54:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc58:	4798      	blx	r3
 800bc5a:	3601      	adds	r6, #1
 800bc5c:	e7ee      	b.n	800bc3c <__libc_init_array+0xc>
 800bc5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc62:	4798      	blx	r3
 800bc64:	3601      	adds	r6, #1
 800bc66:	e7f2      	b.n	800bc4e <__libc_init_array+0x1e>
 800bc68:	0800bea4 	.word	0x0800bea4
 800bc6c:	0800bea4 	.word	0x0800bea4
 800bc70:	0800bea4 	.word	0x0800bea4
 800bc74:	0800bea8 	.word	0x0800bea8

0800bc78 <malloc>:
 800bc78:	4b02      	ldr	r3, [pc, #8]	; (800bc84 <malloc+0xc>)
 800bc7a:	4601      	mov	r1, r0
 800bc7c:	6818      	ldr	r0, [r3, #0]
 800bc7e:	f000 b839 	b.w	800bcf4 <_malloc_r>
 800bc82:	bf00      	nop
 800bc84:	2000017c 	.word	0x2000017c

0800bc88 <memcpy>:
 800bc88:	440a      	add	r2, r1
 800bc8a:	4291      	cmp	r1, r2
 800bc8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc90:	d100      	bne.n	800bc94 <memcpy+0xc>
 800bc92:	4770      	bx	lr
 800bc94:	b510      	push	{r4, lr}
 800bc96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc9a:	4291      	cmp	r1, r2
 800bc9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bca0:	d1f9      	bne.n	800bc96 <memcpy+0xe>
 800bca2:	bd10      	pop	{r4, pc}

0800bca4 <memset>:
 800bca4:	4603      	mov	r3, r0
 800bca6:	4402      	add	r2, r0
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d100      	bne.n	800bcae <memset+0xa>
 800bcac:	4770      	bx	lr
 800bcae:	f803 1b01 	strb.w	r1, [r3], #1
 800bcb2:	e7f9      	b.n	800bca8 <memset+0x4>

0800bcb4 <sbrk_aligned>:
 800bcb4:	b570      	push	{r4, r5, r6, lr}
 800bcb6:	4e0e      	ldr	r6, [pc, #56]	; (800bcf0 <sbrk_aligned+0x3c>)
 800bcb8:	460c      	mov	r4, r1
 800bcba:	6831      	ldr	r1, [r6, #0]
 800bcbc:	4605      	mov	r5, r0
 800bcbe:	b911      	cbnz	r1, 800bcc6 <sbrk_aligned+0x12>
 800bcc0:	f000 f88c 	bl	800bddc <_sbrk_r>
 800bcc4:	6030      	str	r0, [r6, #0]
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	4628      	mov	r0, r5
 800bcca:	f000 f887 	bl	800bddc <_sbrk_r>
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	d00a      	beq.n	800bce8 <sbrk_aligned+0x34>
 800bcd2:	1cc4      	adds	r4, r0, #3
 800bcd4:	f024 0403 	bic.w	r4, r4, #3
 800bcd8:	42a0      	cmp	r0, r4
 800bcda:	d007      	beq.n	800bcec <sbrk_aligned+0x38>
 800bcdc:	1a21      	subs	r1, r4, r0
 800bcde:	4628      	mov	r0, r5
 800bce0:	f000 f87c 	bl	800bddc <_sbrk_r>
 800bce4:	3001      	adds	r0, #1
 800bce6:	d101      	bne.n	800bcec <sbrk_aligned+0x38>
 800bce8:	f04f 34ff 	mov.w	r4, #4294967295
 800bcec:	4620      	mov	r0, r4
 800bcee:	bd70      	pop	{r4, r5, r6, pc}
 800bcf0:	200014d8 	.word	0x200014d8

0800bcf4 <_malloc_r>:
 800bcf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf8:	1ccd      	adds	r5, r1, #3
 800bcfa:	f025 0503 	bic.w	r5, r5, #3
 800bcfe:	3508      	adds	r5, #8
 800bd00:	2d0c      	cmp	r5, #12
 800bd02:	bf38      	it	cc
 800bd04:	250c      	movcc	r5, #12
 800bd06:	2d00      	cmp	r5, #0
 800bd08:	4607      	mov	r7, r0
 800bd0a:	db01      	blt.n	800bd10 <_malloc_r+0x1c>
 800bd0c:	42a9      	cmp	r1, r5
 800bd0e:	d905      	bls.n	800bd1c <_malloc_r+0x28>
 800bd10:	230c      	movs	r3, #12
 800bd12:	2600      	movs	r6, #0
 800bd14:	603b      	str	r3, [r7, #0]
 800bd16:	4630      	mov	r0, r6
 800bd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd1c:	4e2e      	ldr	r6, [pc, #184]	; (800bdd8 <_malloc_r+0xe4>)
 800bd1e:	f000 f86d 	bl	800bdfc <__malloc_lock>
 800bd22:	6833      	ldr	r3, [r6, #0]
 800bd24:	461c      	mov	r4, r3
 800bd26:	bb34      	cbnz	r4, 800bd76 <_malloc_r+0x82>
 800bd28:	4629      	mov	r1, r5
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	f7ff ffc2 	bl	800bcb4 <sbrk_aligned>
 800bd30:	1c43      	adds	r3, r0, #1
 800bd32:	4604      	mov	r4, r0
 800bd34:	d14d      	bne.n	800bdd2 <_malloc_r+0xde>
 800bd36:	6834      	ldr	r4, [r6, #0]
 800bd38:	4626      	mov	r6, r4
 800bd3a:	2e00      	cmp	r6, #0
 800bd3c:	d140      	bne.n	800bdc0 <_malloc_r+0xcc>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	4631      	mov	r1, r6
 800bd42:	4638      	mov	r0, r7
 800bd44:	eb04 0803 	add.w	r8, r4, r3
 800bd48:	f000 f848 	bl	800bddc <_sbrk_r>
 800bd4c:	4580      	cmp	r8, r0
 800bd4e:	d13a      	bne.n	800bdc6 <_malloc_r+0xd2>
 800bd50:	6821      	ldr	r1, [r4, #0]
 800bd52:	3503      	adds	r5, #3
 800bd54:	1a6d      	subs	r5, r5, r1
 800bd56:	f025 0503 	bic.w	r5, r5, #3
 800bd5a:	3508      	adds	r5, #8
 800bd5c:	2d0c      	cmp	r5, #12
 800bd5e:	bf38      	it	cc
 800bd60:	250c      	movcc	r5, #12
 800bd62:	4638      	mov	r0, r7
 800bd64:	4629      	mov	r1, r5
 800bd66:	f7ff ffa5 	bl	800bcb4 <sbrk_aligned>
 800bd6a:	3001      	adds	r0, #1
 800bd6c:	d02b      	beq.n	800bdc6 <_malloc_r+0xd2>
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	442b      	add	r3, r5
 800bd72:	6023      	str	r3, [r4, #0]
 800bd74:	e00e      	b.n	800bd94 <_malloc_r+0xa0>
 800bd76:	6822      	ldr	r2, [r4, #0]
 800bd78:	1b52      	subs	r2, r2, r5
 800bd7a:	d41e      	bmi.n	800bdba <_malloc_r+0xc6>
 800bd7c:	2a0b      	cmp	r2, #11
 800bd7e:	d916      	bls.n	800bdae <_malloc_r+0xba>
 800bd80:	1961      	adds	r1, r4, r5
 800bd82:	42a3      	cmp	r3, r4
 800bd84:	6025      	str	r5, [r4, #0]
 800bd86:	bf18      	it	ne
 800bd88:	6059      	strne	r1, [r3, #4]
 800bd8a:	6863      	ldr	r3, [r4, #4]
 800bd8c:	bf08      	it	eq
 800bd8e:	6031      	streq	r1, [r6, #0]
 800bd90:	5162      	str	r2, [r4, r5]
 800bd92:	604b      	str	r3, [r1, #4]
 800bd94:	4638      	mov	r0, r7
 800bd96:	f104 060b 	add.w	r6, r4, #11
 800bd9a:	f000 f835 	bl	800be08 <__malloc_unlock>
 800bd9e:	f026 0607 	bic.w	r6, r6, #7
 800bda2:	1d23      	adds	r3, r4, #4
 800bda4:	1af2      	subs	r2, r6, r3
 800bda6:	d0b6      	beq.n	800bd16 <_malloc_r+0x22>
 800bda8:	1b9b      	subs	r3, r3, r6
 800bdaa:	50a3      	str	r3, [r4, r2]
 800bdac:	e7b3      	b.n	800bd16 <_malloc_r+0x22>
 800bdae:	6862      	ldr	r2, [r4, #4]
 800bdb0:	42a3      	cmp	r3, r4
 800bdb2:	bf0c      	ite	eq
 800bdb4:	6032      	streq	r2, [r6, #0]
 800bdb6:	605a      	strne	r2, [r3, #4]
 800bdb8:	e7ec      	b.n	800bd94 <_malloc_r+0xa0>
 800bdba:	4623      	mov	r3, r4
 800bdbc:	6864      	ldr	r4, [r4, #4]
 800bdbe:	e7b2      	b.n	800bd26 <_malloc_r+0x32>
 800bdc0:	4634      	mov	r4, r6
 800bdc2:	6876      	ldr	r6, [r6, #4]
 800bdc4:	e7b9      	b.n	800bd3a <_malloc_r+0x46>
 800bdc6:	230c      	movs	r3, #12
 800bdc8:	4638      	mov	r0, r7
 800bdca:	603b      	str	r3, [r7, #0]
 800bdcc:	f000 f81c 	bl	800be08 <__malloc_unlock>
 800bdd0:	e7a1      	b.n	800bd16 <_malloc_r+0x22>
 800bdd2:	6025      	str	r5, [r4, #0]
 800bdd4:	e7de      	b.n	800bd94 <_malloc_r+0xa0>
 800bdd6:	bf00      	nop
 800bdd8:	200014d4 	.word	0x200014d4

0800bddc <_sbrk_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	2300      	movs	r3, #0
 800bde0:	4d05      	ldr	r5, [pc, #20]	; (800bdf8 <_sbrk_r+0x1c>)
 800bde2:	4604      	mov	r4, r0
 800bde4:	4608      	mov	r0, r1
 800bde6:	602b      	str	r3, [r5, #0]
 800bde8:	f7f5 fa14 	bl	8001214 <_sbrk>
 800bdec:	1c43      	adds	r3, r0, #1
 800bdee:	d102      	bne.n	800bdf6 <_sbrk_r+0x1a>
 800bdf0:	682b      	ldr	r3, [r5, #0]
 800bdf2:	b103      	cbz	r3, 800bdf6 <_sbrk_r+0x1a>
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	bd38      	pop	{r3, r4, r5, pc}
 800bdf8:	200014dc 	.word	0x200014dc

0800bdfc <__malloc_lock>:
 800bdfc:	4801      	ldr	r0, [pc, #4]	; (800be04 <__malloc_lock+0x8>)
 800bdfe:	f000 b809 	b.w	800be14 <__retarget_lock_acquire_recursive>
 800be02:	bf00      	nop
 800be04:	200014e0 	.word	0x200014e0

0800be08 <__malloc_unlock>:
 800be08:	4801      	ldr	r0, [pc, #4]	; (800be10 <__malloc_unlock+0x8>)
 800be0a:	f000 b804 	b.w	800be16 <__retarget_lock_release_recursive>
 800be0e:	bf00      	nop
 800be10:	200014e0 	.word	0x200014e0

0800be14 <__retarget_lock_acquire_recursive>:
 800be14:	4770      	bx	lr

0800be16 <__retarget_lock_release_recursive>:
 800be16:	4770      	bx	lr

0800be18 <_init>:
 800be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1a:	bf00      	nop
 800be1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1e:	bc08      	pop	{r3}
 800be20:	469e      	mov	lr, r3
 800be22:	4770      	bx	lr

0800be24 <_fini>:
 800be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be26:	bf00      	nop
 800be28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be2a:	bc08      	pop	{r3}
 800be2c:	469e      	mov	lr, r3
 800be2e:	4770      	bx	lr
